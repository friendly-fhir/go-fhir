// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
  "github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

{{- define "valuex" -}}
  {{- $type := .Name | pascalcase | replace "." "" -}}
  {{- range .Fields -}}
    {{- $field := .Name | pascalcase -}}
    {{- with .Alternatives -}}
      {{- range . }}
func (v *{{ $type }}) Get{{ $field }}{{ .Name | pascalcase }}() *{{ .Name | pascalcase }} {
  if v == nil {
    return nil
  }
  result, ok := v.{{ $field }}.(*{{ .Name | pascalcase }})
  if ok {
    return result
  }
  return nil
}
      {{- end -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- define "getters" -}}
  {{- $basename := .Name | pascalcase -}}
  {{- $receiver := .Name | lowercase | char 0 -}}
  {{- $name := .Name | pascalcase -}}
  {{- range .Fields -}}
    {{- $field := . -}}
    {{- $name := .Name | pascalcase -}}
    {{- $type := "any" -}}
    {{- $zero := "nil" -}}
    {{- with .Alternatives }}
      {{- $type = (commonbase .).Name -}}
    {{- else -}}
      {{- with .Builtin -}}
        {{- if eq .Name "integer" -}}
          {{- $type = "int32" -}}
          {{- $zero = "0" -}}
        {{- else if eq .Name "positiveInt" -}}
          {{- $type = "uint32" -}}
          {{- $zero = "0" -}}
        {{- else if eq .Name "unsignedInt" -}}
          {{- $type = "uint32" -}}
          {{- $zero = "0" -}}
        {{- else if eq .Name "decimal" -}}
          {{- $type = "float64" -}}
          {{- $zero = "0.0" -}}
        {{- else if eq .Name "boolean" -}}
          {{- $type = "bool" -}}
          {{- $zero = "false" -}}
        {{- else -}}
          {{- $type = "string" -}}
          {{- $zero = "\"\"" -}}
        {{- end -}}
      {{- end -}}
      {{- with .Type -}}
        {{- $type = .Name | pascalcase | replace "." "" -}}
        {{- if not (.IsAbstract) -}}
          {{- $type = "*" | append $type -}}
        {{- end -}}
      {{- end -}}
      {{- if .IsList -}}
        {{- $type = "[]" | append $type -}}
      {{- end }}
    {{- end }}
func ({{ $receiver }} *{{ $basename }}) Get{{ $name }}() {{ $type }} {
{{- if .IsDisabled }}
  return {{ $zero }}
{{- else }}
  if {{ $receiver }} == nil {
    return {{ $zero }}
  }
  return {{ $receiver }}.{{ $name }}
{{- end}}
}
  {{ end -}}
{{- end -}}

{{- /* Field template expands all field definitions in a struct */ -}}
{{- define "field" -}}
  {{- $field := . -}}
  {{- $name := .Name | pascalcase -}}
  {{- $type := "any" -}}
  {{- with .Alternatives -}}
    {{- $type = (commonbase .).Name | pascalcase -}}
  {{- else -}}
    {{- with .Builtin -}}
      {{- if eq .Name "integer" -}}
        {{- $type = "int32" -}}
      {{- else if eq .Name "positiveInt" -}}
        {{- $type = "uint32" -}}
      {{- else if eq .Name "unsignedInt" -}}
        {{- $type = "uint32" -}}
      {{- else if eq .Name "decimal" -}}
        {{- $type = "float64" -}}
      {{- else -}}
        {{- $type = "string" -}}
      {{- end -}}
    {{ end -}}
    {{- with .Type -}}
      {{- $type = .Name | pascalcase | replace "." "" -}}
      {{- if not (.IsAbstract) -}}
        {{- $type = "*" | append $type -}}
      {{- end -}}
    {{- end -}}
    {{- if .IsList -}}
      {{- $type = "[]" | append $type }}
    {{- end -}}
  {{- end }}
  {{- if not .IsDisabled }}
  {{- with .Definition }}{{ . | resize 76 | prefix "// " | tabindent 1  }}{{ end }}
  {{ $name }} {{ $type }} `json:"{{ $field.Name | camelcase }}"`
  {{- end }}
{{ end -}}

{{- /* Base template recursively expands profile embeddings */ -}}
{{- define "base" -}}
  {{ with .Base -}}
  profileimpl.Base{{ .Name | pascalcase }}
  {{ template "base" . -}}
  {{- end }}
{{- end }}

{{- /* Type template expands a struct definition with base embeddings */ -}}
{{- define "type" }}

{{ with .Short -}}
{{ . | resize 76 | prefix "// " }}
{{- end -}}
{{- with .Description -}}
{{ . | resize 76 | prefix "// " }}
{{- end -}}
{{- with .Comment -}}
{{ . | resize 76 | prefix "// " }}
{{- end }}
//
// Meta Details:
//
//  - Package IG: {{ .Package }}@{{ .Version }}
//  - StructureDefinition: {{ .URL }}
//  - Source File: {{ .Source.File }}
{{- $type := .Name | pascalcase | replace "." "" }}
type {{ $type }} struct {
{{ range .Fields }}
{{ template "field" . }}
{{- end }}
{{ if .HasDerived -}}
  is{{ $type }} profileimpl.Base{{ $type }}
{{- end }}
{{ template "base" . }}
}

{{ template "valuex" . }}
{{- end -}}

{{- template "type" . }}
{{- template "getters" . }}
{{- range .SubTypes -}}
  {{- template "type" . }}
  {{- template "getters" . }}
{{- end -}}
