// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for Contributor Type: A contributor to the content
// of a knowledge asset, including authors, editors, reviewers, and endorsers.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Contributor
//   - Source File: StructureDefinition-Contributor.json
type Contributor struct {

	// Contact details to assist a user in finding and communicating with the
	// contributor.
	Contact []*ContactDetail `fhirpath:"contact"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The name of the individual or organization responsible for the contribution.
	Name *String `fhirpath:"name"`

	// The type of contributor.
	Type *Code `fhirpath:"type"`

	profileimpl.BaseElement
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Contributor) GetContact() []*ContactDetail {
	if c == nil {
		return nil
	}
	return c.Contact
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Contributor) GetExtension() []*Extension {
	if c == nil {
		return nil
	}
	return c.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Contributor) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Contributor) GetName() *String {
	if c == nil {
		return nil
	}
	return c.Name
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Contributor) GetType() *Code {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *Contributor) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (c *Contributor) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contact   []*ContactDetail `json:"contact"`
		Extension []*Extension     `json:"extension"`

		ID   string  `json:"id"`
		Name *String `json:"name"`
		Type *Code   `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	c.Contact = raw.Contact
	c.Extension = raw.Extension
	c.ID = raw.ID
	c.Name = raw.Name
	c.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*Contributor)(nil)
var _ json.Unmarshaler = (*Contributor)(nil)
