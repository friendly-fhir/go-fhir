// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for ProductShelfLife Type: The shelf-life and
// storage information for a medicinal product item or container can be
// described using this class.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ProductShelfLife
//   - Source File: StructureDefinition-ProductShelfLife.json
type ProductShelfLife struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Unique identifier for the packaged Medicinal Product.
	Identifier *Identifier `fhirpath:"identifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*Extension `fhirpath:"modifierExtension"`

	// The shelf life time period can be specified using a numerical value for the
	// period of time and its unit of time measurement The unit of measurement
	// shall be specified in accordance with ISO 11240 and the resulting
	// terminology The symbol and the symbol identifier shall be used.
	Period *Quantity `fhirpath:"period"`

	// Special precautions for storage, if any, can be specified using an
	// appropriate controlled vocabulary The controlled term and the controlled
	// term identifier shall be specified.
	SpecialPrecautionsForStorage []*CodeableConcept `fhirpath:"specialPrecautionsForStorage"`

	// This describes the shelf life, taking into account various scenarios such as
	// shelf life of the packaged Medicinal Product itself, shelf life after
	// transformation where necessary and shelf life after the first opening of a
	// bottle, etc. The shelf life type shall be specified using an appropriate
	// controlled vocabulary The controlled term and the controlled term identifier
	// shall be specified.
	Type *CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (psl *ProductShelfLife) GetExtension() []*Extension {
	if psl == nil {
		return nil
	}
	return psl.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (psl *ProductShelfLife) GetID() string {
	if psl == nil {
		return ""
	}
	return psl.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (psl *ProductShelfLife) GetIdentifier() *Identifier {
	if psl == nil {
		return nil
	}
	return psl.Identifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (psl *ProductShelfLife) GetModifierExtension() []*Extension {
	if psl == nil {
		return nil
	}
	return psl.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (psl *ProductShelfLife) GetPeriod() *Quantity {
	if psl == nil {
		return nil
	}
	return psl.Period
}

// GetSpecialPrecautionsForStorage returns the value of the field SpecialPrecautionsForStorage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (psl *ProductShelfLife) GetSpecialPrecautionsForStorage() []*CodeableConcept {
	if psl == nil {
		return nil
	}
	return psl.SpecialPrecautionsForStorage
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (psl *ProductShelfLife) GetType() *CodeableConcept {
	if psl == nil {
		return nil
	}
	return psl.Type
}
