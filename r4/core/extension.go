// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for Extension Type: Optional Extension Element -
// found in all resources.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Extension
//   - Source File: StructureDefinition-Extension.json
type Extension struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// Source of the definition for the extension code - a logical name or a URL.
	Url string `json:"url"`

	// Value of extension - must be one of a constrained set of the data types (see
	// [Extensibility](extensibility.html) for a list).
	Value Element `json:"value"`

	isExtension profileimpl.BaseExtension
	profileimpl.BaseElement
}

func (v *Extension) GetValueBase64Binary() *Base64Binary {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Base64Binary)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueBoolean() *Boolean {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Boolean)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueCanonical() *Canonical {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Canonical)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueCode() *Code {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Code)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueDate() *Date {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Date)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueDateTime() *DateTime {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*DateTime)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueDecimal() *Decimal {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Decimal)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueId() *Id {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Id)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueInstant() *Instant {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Instant)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueInteger() *Integer {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Integer)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueMarkdown() *Markdown {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Markdown)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueOid() *Oid {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Oid)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValuePositiveInt() *PositiveInt {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*PositiveInt)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueString() *String {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*String)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueTime() *Time {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Time)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueUnsignedInt() *UnsignedInt {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*UnsignedInt)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueUri() *Uri {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Uri)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueUrl() *Url {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Url)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueUuid() *Uuid {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Uuid)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueAddress() *Address {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Address)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueAge() *Age {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Age)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueAnnotation() *Annotation {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Annotation)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueAttachment() *Attachment {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Attachment)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueCodeableConcept() *CodeableConcept {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*CodeableConcept)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueCoding() *Coding {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Coding)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueContactPoint() *ContactPoint {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*ContactPoint)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueCount() *Count {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Count)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueDistance() *Distance {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Distance)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueDuration() *Duration {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Duration)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueHumanName() *HumanName {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*HumanName)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueIdentifier() *Identifier {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Identifier)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueMoney() *Money {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Money)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValuePeriod() *Period {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Period)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueQuantity() *Quantity {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Quantity)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueRange() *Range {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Range)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueRatio() *Ratio {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Ratio)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueReference() *Reference {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Reference)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueSampledData() *SampledData {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*SampledData)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueSignature() *Signature {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Signature)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueTiming() *Timing {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Timing)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueContactDetail() *ContactDetail {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*ContactDetail)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueContributor() *Contributor {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Contributor)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueDataRequirement() *DataRequirement {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*DataRequirement)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueExpression() *Expression {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Expression)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueParameterDefinition() *ParameterDefinition {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*ParameterDefinition)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueRelatedArtifact() *RelatedArtifact {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*RelatedArtifact)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueTriggerDefinition() *TriggerDefinition {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*TriggerDefinition)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueUsageContext() *UsageContext {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*UsageContext)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueDosage() *Dosage {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Dosage)
	if ok {
		return result
	}
	return nil
}
func (v *Extension) GetValueMeta() *Meta {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Meta)
	if ok {
		return result
	}
	return nil
}
func (e *Extension) GetExtension() []*Extension {
	if e == nil {
		return nil
	}
	return e.Extension
}

func (e *Extension) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *Extension) GetUrl() string {
	if e == nil {
		return ""
	}
	return e.Url
}

func (e *Extension) GetValue() Element {
	if e == nil {
		return nil
	}
	return e.Value
}
