// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for TriggerDefinition Type: A description of a
// triggering event. Triggering events can be named events, data events, or
// periodic, as determined by the type element.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/TriggerDefinition
//   - Source File: StructureDefinition-TriggerDefinition.json
type TriggerDefinition struct {

	// A boolean-valued expression that is evaluated in the context of the
	// container of the trigger definition and returns whether or not the trigger
	// fires.
	Condition *Expression `json:"condition"`

	// The triggering data of the event (if this is a data trigger). If more than
	// one data is requirement is specified, then all the data requirements must be
	// true.
	Data []*DataRequirement `json:"data"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// A formal name for the event. This may be an absolute URI that identifies the
	// event formally (e.g. from a trigger registry), or a simple relative URI that
	// identifies the event in a local context.
	Name *String `json:"name"`

	// The timing of the event (if this is a periodic trigger).
	Timing Element `json:"timing"`

	// The type of triggering event.
	Type *Code `json:"type"`

	profileimpl.BaseElement
}

func (v *TriggerDefinition) GetTimingTiming() *Timing {
	if v == nil {
		return nil
	}
	result, ok := v.Timing.(*Timing)
	if ok {
		return result
	}
	return nil
}
func (v *TriggerDefinition) GetTimingReference() *Reference {
	if v == nil {
		return nil
	}
	result, ok := v.Timing.(*Reference)
	if ok {
		return result
	}
	return nil
}
func (v *TriggerDefinition) GetTimingDate() *Date {
	if v == nil {
		return nil
	}
	result, ok := v.Timing.(*Date)
	if ok {
		return result
	}
	return nil
}
func (v *TriggerDefinition) GetTimingDateTime() *DateTime {
	if v == nil {
		return nil
	}
	result, ok := v.Timing.(*DateTime)
	if ok {
		return result
	}
	return nil
}
func (t *TriggerDefinition) GetCondition() *Expression {
	if t == nil {
		return nil
	}
	return t.Condition
}

func (t *TriggerDefinition) GetData() []*DataRequirement {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TriggerDefinition) GetExtension() []*Extension {
	if t == nil {
		return nil
	}
	return t.Extension
}

func (t *TriggerDefinition) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TriggerDefinition) GetName() *String {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *TriggerDefinition) GetTiming() Element {
	if t == nil {
		return nil
	}
	return t.Timing
}

func (t *TriggerDefinition) GetType() *Code {
	if t == nil {
		return nil
	}
	return t.Type
}
