// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for MarketingStatus Type: The marketing status
// describes the date when a medicinal product is actually put on the market or
// the date as of which it is no longer available.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MarketingStatus
//   - Source File: StructureDefinition-MarketingStatus.json
type MarketingStatus struct {

	// The country in which the marketing authorisation has been granted shall be
	// specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code
	// elements.
	Country *CodeableConcept `fhirpath:"country"`

	// The date when the Medicinal Product is placed on the market by the Marketing
	// Authorisation Holder (or where applicable, the manufacturer/distributor) in
	// a country and/or jurisdiction shall be provided A complete date consisting
	// of day, month and year shall be specified using the ISO 8601 date format
	// NOTE “Placed on the market” refers to the release of the Medicinal
	// Product into the distribution chain.
	DateRange *Period `fhirpath:"dateRange"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Where a Medicines Regulatory Agency has granted a marketing authorisation
	// for which specific provisions within a jurisdiction apply, the jurisdiction
	// can be specified using an appropriate controlled terminology The controlled
	// term and the controlled term identifier shall be specified.
	Jurisdiction *CodeableConcept `fhirpath:"jurisdiction"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*Extension `fhirpath:"modifierExtension"`

	// The date when the Medicinal Product is placed on the market by the Marketing
	// Authorisation Holder (or where applicable, the manufacturer/distributor) in
	// a country and/or jurisdiction shall be provided A complete date consisting
	// of day, month and year shall be specified using the ISO 8601 date format
	// NOTE “Placed on the market” refers to the release of the Medicinal
	// Product into the distribution chain.
	RestoreDate *DateTime `fhirpath:"restoreDate"`

	// This attribute provides information on the status of the marketing of the
	// medicinal product See ISO/TS 20443 for more information and examples.
	Status *CodeableConcept `fhirpath:"status"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCountry returns the value of the field Country.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MarketingStatus) GetCountry() *CodeableConcept {
	if ms == nil {
		return nil
	}
	return ms.Country
}

// GetDateRange returns the value of the field DateRange.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MarketingStatus) GetDateRange() *Period {
	if ms == nil {
		return nil
	}
	return ms.DateRange
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MarketingStatus) GetExtension() []*Extension {
	if ms == nil {
		return nil
	}
	return ms.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MarketingStatus) GetID() string {
	if ms == nil {
		return ""
	}
	return ms.ID
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MarketingStatus) GetJurisdiction() *CodeableConcept {
	if ms == nil {
		return nil
	}
	return ms.Jurisdiction
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MarketingStatus) GetModifierExtension() []*Extension {
	if ms == nil {
		return nil
	}
	return ms.ModifierExtension
}

// GetRestoreDate returns the value of the field RestoreDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MarketingStatus) GetRestoreDate() *DateTime {
	if ms == nil {
		return nil
	}
	return ms.RestoreDate
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MarketingStatus) GetStatus() *CodeableConcept {
	if ms == nil {
		return nil
	}
	return ms.Status
}

func (ms *MarketingStatus) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ms *MarketingStatus) UnmarshalJSON(data []byte) error {
	var raw struct {
		Country   *CodeableConcept `json:"country"`
		DateRange *Period          `json:"dateRange"`
		Extension []*Extension     `json:"extension"`

		ID                string           `json:"id"`
		Jurisdiction      *CodeableConcept `json:"jurisdiction"`
		ModifierExtension []*Extension     `json:"modifierExtension"`
		RestoreDate       *DateTime        `json:"restoreDate"`
		Status            *CodeableConcept `json:"status"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ms.Country = raw.Country
	ms.DateRange = raw.DateRange
	ms.Extension = raw.Extension
	ms.ID = raw.ID
	ms.Jurisdiction = raw.Jurisdiction
	ms.ModifierExtension = raw.ModifierExtension
	ms.RestoreDate = raw.RestoreDate
	ms.Status = raw.Status
	return nil
}

var _ json.Marshaler = (*MarketingStatus)(nil)
var _ json.Unmarshaler = (*MarketingStatus)(nil)
