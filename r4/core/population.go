// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for Population Type: A populatioof people with some
// set of grouping criteria.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Population
//   - Source File: StructureDefinition-Population.json
type Population struct {

	// The age of the specific population.
	Age Element `fhirpath:"age"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// The gender of the specific population.
	Gender *CodeableConcept `fhirpath:"gender"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*Extension `fhirpath:"modifierExtension"`

	// The existing physiological conditions of the specific population to which
	// this applies.
	PhysiologicalCondition *CodeableConcept `fhirpath:"physiologicalCondition"`

	// Race of the specific population.
	Race *CodeableConcept `fhirpath:"race"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAge returns the value of the field Age.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Population) GetAge() Element {
	if p == nil {
		return nil
	}
	return p.Age
}

// GetAgeRange returns the value of the field Age.
func (p *Population) GetAgeRange() *Range {
	if p == nil {
		return nil
	}
	val, ok := p.Age.(*Range)
	if !ok {
		return nil
	}
	return val
}

// GetAgeCodeableConcept returns the value of the field Age.
func (p *Population) GetAgeCodeableConcept() *CodeableConcept {
	if p == nil {
		return nil
	}
	val, ok := p.Age.(*CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Population) GetExtension() []*Extension {
	if p == nil {
		return nil
	}
	return p.Extension
}

// GetGender returns the value of the field Gender.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Population) GetGender() *CodeableConcept {
	if p == nil {
		return nil
	}
	return p.Gender
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Population) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Population) GetModifierExtension() []*Extension {
	if p == nil {
		return nil
	}
	return p.ModifierExtension
}

// GetPhysiologicalCondition returns the value of the field PhysiologicalCondition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Population) GetPhysiologicalCondition() *CodeableConcept {
	if p == nil {
		return nil
	}
	return p.PhysiologicalCondition
}

// GetRace returns the value of the field Race.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Population) GetRace() *CodeableConcept {
	if p == nil {
		return nil
	}
	return p.Race
}

func (p *Population) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (p *Population) UnmarshalJSON(data []byte) error {
	var raw struct {
		AgeRange           *Range           `json:"ageRange"`
		AgeCodeableConcept *CodeableConcept `json:"ageCodeableConcept"`
		Extension          []*Extension     `json:"extension"`
		Gender             *CodeableConcept `json:"gender"`

		ID                     string           `json:"id"`
		ModifierExtension      []*Extension     `json:"modifierExtension"`
		PhysiologicalCondition *CodeableConcept `json:"physiologicalCondition"`
		Race                   *CodeableConcept `json:"race"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	p.Age, err = validate.SelectOneOf[Element]("Population.age",
		raw.AgeRange,
		raw.AgeCodeableConcept)
	if err != nil {
		return err
	}
	p.Extension = raw.Extension
	p.Gender = raw.Gender
	p.ID = raw.ID
	p.ModifierExtension = raw.ModifierExtension
	p.PhysiologicalCondition = raw.PhysiologicalCondition
	p.Race = raw.Race
	return nil
}

var _ json.Marshaler = (*Population)(nil)
var _ json.Unmarshaler = (*Population)(nil)
