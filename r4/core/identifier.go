// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for Identifier Type: An identifier - identifies
// some entity uniquely and unambiguously. Typically this is used for business
// identifiers.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Identifier
//   - Source File: StructureDefinition-Identifier.json
type Identifier struct {

	// Organization that issued/manages the identifier.
	Assigner *Reference `json:"assigner"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// Time period during which identifier is/was valid for use.
	Period *Period `json:"period"`

	// Establishes the namespace for the value - that is, a URL that describes a
	// set values that are unique.
	System *Uri `json:"system"`

	// A coded type for the identifier that can be used to determine which
	// identifier to use for a specific purpose.
	Type *CodeableConcept `json:"type"`

	// The purpose of this identifier.
	Use *Code `json:"use"`

	// The portion of the identifier typically relevant to the user and which is
	// unique within the context of the system.
	Value *String `json:"value"`

	profileimpl.BaseElement
}

func (i *Identifier) GetAssigner() *Reference {
	if i == nil {
		return nil
	}
	return i.Assigner
}

func (i *Identifier) GetExtension() []*Extension {
	if i == nil {
		return nil
	}
	return i.Extension
}

func (i *Identifier) GetId() string {
	if i == nil {
		return ""
	}
	return i.Id
}

func (i *Identifier) GetPeriod() *Period {
	if i == nil {
		return nil
	}
	return i.Period
}

func (i *Identifier) GetSystem() *Uri {
	if i == nil {
		return nil
	}
	return i.System
}

func (i *Identifier) GetType() *CodeableConcept {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *Identifier) GetUse() *Code {
	if i == nil {
		return nil
	}
	return i.Use
}

func (i *Identifier) GetValue() *String {
	if i == nil {
		return nil
	}
	return i.Value
}
