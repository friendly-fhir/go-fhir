// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for ContactDetail Type: Specifies contact
// information for a person or organization.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ContactDetail
//   - Source File: StructureDefinition-ContactDetail.json
type ContactDetail struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The name of an individual to contact.
	Name *String `fhirpath:"name"`

	// The contact details for the individual (if a name was provided) or the
	// organization.
	Telecom []*ContactPoint `fhirpath:"telecom"`

	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ContactDetail) GetExtension() []*Extension {
	if cd == nil {
		return nil
	}
	return cd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ContactDetail) GetID() string {
	if cd == nil {
		return ""
	}
	return cd.ID
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ContactDetail) GetName() *String {
	if cd == nil {
		return nil
	}
	return cd.Name
}

// GetTelecom returns the value of the field Telecom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ContactDetail) GetTelecom() []*ContactPoint {
	if cd == nil {
		return nil
	}
	return cd.Telecom
}

func (cd *ContactDetail) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cd *ContactDetail) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*Extension `json:"extension"`

		ID      string          `json:"id"`
		Name    *String         `json:"name"`
		Telecom []*ContactPoint `json:"telecom"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cd.Extension = raw.Extension
	cd.ID = raw.ID
	cd.Name = raw.Name
	cd.Telecom = raw.Telecom
	return nil
}

var _ json.Marshaler = (*ContactDetail)(nil)
var _ json.Unmarshaler = (*ContactDetail)(nil)
