// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for CodeableConcept Type: A concept that may be
// defined by a formal reference to a terminology or ontology or may be
// provided by text.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/CodeableConcept
//   - Source File: StructureDefinition-CodeableConcept.json
type CodeableConcept struct {

	// A reference to a code defined by a terminology system.
	Coding []*Coding `fhirpath:"coding"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A human language representation of the concept as seen/selected/uttered by
	// the user who entered the data and/or which represents the intended meaning
	// of the user.
	Text *String `fhirpath:"text"`

	profileimpl.BaseElement
}

// GetCoding returns the value of the field Coding.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cc *CodeableConcept) GetCoding() []*Coding {
	if cc == nil {
		return nil
	}
	return cc.Coding
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cc *CodeableConcept) GetExtension() []*Extension {
	if cc == nil {
		return nil
	}
	return cc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cc *CodeableConcept) GetID() string {
	if cc == nil {
		return ""
	}
	return cc.ID
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cc *CodeableConcept) GetText() *String {
	if cc == nil {
		return nil
	}
	return cc.Text
}
