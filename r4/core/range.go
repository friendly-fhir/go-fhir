// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for Range Type: A set of ordered Quantities defined
// by a low and high limit.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Range
//   - Source File: StructureDefinition-Range.json
type Range struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// The high limit. The boundary is inclusive.
	High *Quantity `fhirpath:"high"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The low limit. The boundary is inclusive.
	Low *Quantity `fhirpath:"low"`

	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (r *Range) GetExtension() []*Extension {
	if r == nil {
		return nil
	}
	return r.Extension
}

// GetHigh returns the value of the field High.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (r *Range) GetHigh() *Quantity {
	if r == nil {
		return nil
	}
	return r.High
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (r *Range) GetID() string {
	if r == nil {
		return ""
	}
	return r.ID
}

// GetLow returns the value of the field Low.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (r *Range) GetLow() *Quantity {
	if r == nil {
		return nil
	}
	return r.Low
}

func (r *Range) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (r *Range) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*Extension `json:"extension"`
		High      *Quantity    `json:"high"`

		ID  string    `json:"id"`
		Low *Quantity `json:"low"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	r.Extension = raw.Extension
	r.High = raw.High
	r.ID = raw.ID
	r.Low = raw.Low
	return nil
}

var _ json.Marshaler = (*Range)(nil)
var _ json.Unmarshaler = (*Range)(nil)
