// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package paymentnotice

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// This resource provides the status of the payment for goods and services
// rendered, and the request and response resource references.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/PaymentNotice
//   - Source File: StructureDefinition-PaymentNotice.json
type PaymentNotice struct {

	// The amount sent to the payee.
	Amount *fhir.Money `fhirpath:"amount"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date when this resource was created.
	Created *fhir.DateTime `fhirpath:"created"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier assigned to this payment notice.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The party who will receive or has received payment that is the subject of
	// this notification.
	Payee *fhir.Reference `fhirpath:"payee"`

	// A reference to the payment which is the subject of this notice.
	Payment *fhir.Reference `fhirpath:"payment"`

	// The date when the above payment action occurred.
	PaymentDate *fhir.Date `fhirpath:"paymentDate"`

	// A code indicating whether payment has been sent or cleared.
	PaymentStatus *fhir.CodeableConcept `fhirpath:"paymentStatus"`

	// The practitioner who is responsible for the services rendered to the
	// patient.
	Provider *fhir.Reference `fhirpath:"provider"`

	// The party who is notified of the payment status.
	Recipient *fhir.Reference `fhirpath:"recipient"`

	// Reference of resource for which payment is being made.
	Request *fhir.Reference `fhirpath:"request"`

	// Reference of response to resource for which payment is being made.
	Response *fhir.Reference `fhirpath:"response"`

	// The status of the resource instance.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetAmount() *fhir.Money {
	if pn == nil {
		return nil
	}
	return pn.Amount
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetContained() []fhir.Resource {
	if pn == nil {
		return nil
	}
	return pn.Contained
}

// GetCreated returns the value of the field Created.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetCreated() *fhir.DateTime {
	if pn == nil {
		return nil
	}
	return pn.Created
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetExtension() []*fhir.Extension {
	if pn == nil {
		return nil
	}
	return pn.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetID() string {
	if pn == nil {
		return ""
	}
	return pn.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetIdentifier() []*fhir.Identifier {
	if pn == nil {
		return nil
	}
	return pn.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetImplicitRules() *fhir.URI {
	if pn == nil {
		return nil
	}
	return pn.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetLanguage() *fhir.Code {
	if pn == nil {
		return nil
	}
	return pn.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetMeta() *fhir.Meta {
	if pn == nil {
		return nil
	}
	return pn.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetModifierExtension() []*fhir.Extension {
	if pn == nil {
		return nil
	}
	return pn.ModifierExtension
}

// GetPayee returns the value of the field Payee.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetPayee() *fhir.Reference {
	if pn == nil {
		return nil
	}
	return pn.Payee
}

// GetPayment returns the value of the field Payment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetPayment() *fhir.Reference {
	if pn == nil {
		return nil
	}
	return pn.Payment
}

// GetPaymentDate returns the value of the field PaymentDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetPaymentDate() *fhir.Date {
	if pn == nil {
		return nil
	}
	return pn.PaymentDate
}

// GetPaymentStatus returns the value of the field PaymentStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetPaymentStatus() *fhir.CodeableConcept {
	if pn == nil {
		return nil
	}
	return pn.PaymentStatus
}

// GetProvider returns the value of the field Provider.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetProvider() *fhir.Reference {
	if pn == nil {
		return nil
	}
	return pn.Provider
}

// GetRecipient returns the value of the field Recipient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetRecipient() *fhir.Reference {
	if pn == nil {
		return nil
	}
	return pn.Recipient
}

// GetRequest returns the value of the field Request.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetRequest() *fhir.Reference {
	if pn == nil {
		return nil
	}
	return pn.Request
}

// GetResponse returns the value of the field Response.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetResponse() *fhir.Reference {
	if pn == nil {
		return nil
	}
	return pn.Response
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetStatus() *fhir.Code {
	if pn == nil {
		return nil
	}
	return pn.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pn *PaymentNotice) GetText() *fhir.Narrative {
	if pn == nil {
		return nil
	}
	return pn.Text
}

func (pn *PaymentNotice) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (pn *PaymentNotice) UnmarshalJSON(data []byte) error {
	var raw struct {
		Amount    *fhir.Money       `json:"amount"`
		Contained []fhir.Resource   `json:"contained"`
		Created   *fhir.DateTime    `json:"created"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		Identifier        []*fhir.Identifier    `json:"identifier"`
		ImplicitRules     *fhir.URI             `json:"implicitRules"`
		Language          *fhir.Code            `json:"language"`
		Meta              *fhir.Meta            `json:"meta"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Payee             *fhir.Reference       `json:"payee"`
		Payment           *fhir.Reference       `json:"payment"`
		PaymentDate       *fhir.Date            `json:"paymentDate"`
		PaymentStatus     *fhir.CodeableConcept `json:"paymentStatus"`
		Provider          *fhir.Reference       `json:"provider"`
		Recipient         *fhir.Reference       `json:"recipient"`
		Request           *fhir.Reference       `json:"request"`
		Response          *fhir.Reference       `json:"response"`
		Status            *fhir.Code            `json:"status"`
		Text              *fhir.Narrative       `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	pn.Amount = raw.Amount
	pn.Contained = raw.Contained
	pn.Created = raw.Created
	pn.Extension = raw.Extension
	pn.ID = raw.ID
	pn.Identifier = raw.Identifier
	pn.ImplicitRules = raw.ImplicitRules
	pn.Language = raw.Language
	pn.Meta = raw.Meta
	pn.ModifierExtension = raw.ModifierExtension
	pn.Payee = raw.Payee
	pn.Payment = raw.Payment
	pn.PaymentDate = raw.PaymentDate
	pn.PaymentStatus = raw.PaymentStatus
	pn.Provider = raw.Provider
	pn.Recipient = raw.Recipient
	pn.Request = raw.Request
	pn.Response = raw.Response
	pn.Status = raw.Status
	pn.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*PaymentNotice)(nil)
var _ json.Unmarshaler = (*PaymentNotice)(nil)
