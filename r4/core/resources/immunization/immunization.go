// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package immunization

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Describes the event of a patient being administered a vaccine or a record of
// an immunization as reported by a patient, a clinician or another party.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Immunization
//   - Source File: StructureDefinition-Immunization.json
type Immunization struct {

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The quantity of vaccine product that was administered.
	DoseQuantity *fhir.Quantity `fhirpath:"doseQuantity"`

	// Educational material presented to the patient (or guardian) at the time of
	// vaccine administration.
	Education []*ImmunizationEducation `fhirpath:"education"`

	// The visit or admission or other contact between patient and health care
	// provider the immunization was performed as part of.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// Date vaccine batch expires.
	ExpirationDate *fhir.Date `fhirpath:"expirationDate"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Indicates the source of the vaccine actually administered. This may be
	// different than the patient eligibility (e.g. the patient may be eligible for
	// a publically purchased vaccine but due to inventory issues, vaccine
	// purchased with private funds was actually administered).
	FundingSource *fhir.CodeableConcept `fhirpath:"fundingSource"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier assigned to this immunization record.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Indication if a dose is considered to be subpotent. By default, a dose
	// should be considered to be potent.
	IsSubpotent *fhir.Boolean `fhirpath:"isSubpotent"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The service delivery location where the vaccine administration occurred.
	Location *fhir.Reference `fhirpath:"location"`

	// Lot number of the vaccine product.
	LotNumber *fhir.String `fhirpath:"lotNumber"`

	// Name of vaccine manufacturer.
	Manufacturer *fhir.Reference `fhirpath:"manufacturer"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Extra information about the immunization that is not conveyed by the other
	// attributes.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Date vaccine administered or was to be administered.
	Occurrence fhir.Element `fhirpath:"occurrence"`

	// The patient who either received or did not receive the immunization.
	Patient *fhir.Reference `fhirpath:"patient"`

	// Indicates who performed the immunization event.
	Performer []*ImmunizationPerformer `fhirpath:"performer"`

	// An indication that the content of the record is based on information from
	// the person who administered the vaccine. This reflects the context under
	// which the data was originally recorded.
	PrimarySource *fhir.Boolean `fhirpath:"primarySource"`

	// Indicates a patient's eligibility for a funding program.
	ProgramEligibility []*fhir.CodeableConcept `fhirpath:"programEligibility"`

	// The protocol (set of recommendations) being followed by the provider who
	// administered the dose.
	ProtocolApplied []*ImmunizationProtocolApplied `fhirpath:"protocolApplied"`

	// Categorical data indicating that an adverse event is associated in time to
	// an immunization.
	Reaction []*ImmunizationReaction `fhirpath:"reaction"`

	// Reasons why the vaccine was administered.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Condition, Observation or DiagnosticReport that supports why the
	// immunization was administered.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// The date the occurrence of the immunization was first captured in the record
	// - potentially significantly after the occurrence of the event.
	Recorded *fhir.DateTime `fhirpath:"recorded"`

	// The source of the data when the report of the immunization event is not
	// based on information from the person who administered the vaccine.
	ReportOrigin *fhir.CodeableConcept `fhirpath:"reportOrigin"`

	// The path by which the vaccine product is taken into the body.
	Route *fhir.CodeableConcept `fhirpath:"route"`

	// Body site where vaccine was administered.
	Site *fhir.CodeableConcept `fhirpath:"site"`

	// Indicates the current status of the immunization event.
	Status *fhir.Code `fhirpath:"status"`

	// Indicates the reason the immunization event was not performed.
	StatusReason *fhir.CodeableConcept `fhirpath:"statusReason"`

	// Reason why a dose is considered to be subpotent.
	SubpotentReason []*fhir.CodeableConcept `fhirpath:"subpotentReason"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Vaccine that was administered or was to be administered.
	VaccineCode *fhir.CodeableConcept `fhirpath:"vaccineCode"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetContained() []fhir.Resource {
	if i == nil {
		return nil
	}
	return i.Contained
}

// GetDoseQuantity returns the value of the field DoseQuantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetDoseQuantity() *fhir.Quantity {
	if i == nil {
		return nil
	}
	return i.DoseQuantity
}

// GetEducation returns the value of the field Education.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetEducation() []*ImmunizationEducation {
	if i == nil {
		return nil
	}
	return i.Education
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetEncounter() *fhir.Reference {
	if i == nil {
		return nil
	}
	return i.Encounter
}

// GetExpirationDate returns the value of the field ExpirationDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetExpirationDate() *fhir.Date {
	if i == nil {
		return nil
	}
	return i.ExpirationDate
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetExtension() []*fhir.Extension {
	if i == nil {
		return nil
	}
	return i.Extension
}

// GetFundingSource returns the value of the field FundingSource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetFundingSource() *fhir.CodeableConcept {
	if i == nil {
		return nil
	}
	return i.FundingSource
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetID() string {
	if i == nil {
		return ""
	}
	return i.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetIdentifier() []*fhir.Identifier {
	if i == nil {
		return nil
	}
	return i.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetImplicitRules() *fhir.URI {
	if i == nil {
		return nil
	}
	return i.ImplicitRules
}

// GetIsSubpotent returns the value of the field IsSubpotent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetIsSubpotent() *fhir.Boolean {
	if i == nil {
		return nil
	}
	return i.IsSubpotent
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetLanguage() *fhir.Code {
	if i == nil {
		return nil
	}
	return i.Language
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetLocation() *fhir.Reference {
	if i == nil {
		return nil
	}
	return i.Location
}

// GetLotNumber returns the value of the field LotNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetLotNumber() *fhir.String {
	if i == nil {
		return nil
	}
	return i.LotNumber
}

// GetManufacturer returns the value of the field Manufacturer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetManufacturer() *fhir.Reference {
	if i == nil {
		return nil
	}
	return i.Manufacturer
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetMeta() *fhir.Meta {
	if i == nil {
		return nil
	}
	return i.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetModifierExtension() []*fhir.Extension {
	if i == nil {
		return nil
	}
	return i.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetNote() []*fhir.Annotation {
	if i == nil {
		return nil
	}
	return i.Note
}

// GetOccurrence returns the value of the field Occurrence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetOccurrence() fhir.Element {
	if i == nil {
		return nil
	}
	return i.Occurrence
}

// GetOccurrenceDateTime returns the value of the field Occurrence.
func (i *Immunization) GetOccurrenceDateTime() *fhir.DateTime {
	if i == nil {
		return nil
	}
	val, ok := i.Occurrence.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetOccurrenceString returns the value of the field Occurrence.
func (i *Immunization) GetOccurrenceString() *fhir.String {
	if i == nil {
		return nil
	}
	val, ok := i.Occurrence.(*fhir.String)
	if !ok {
		return nil
	}
	return val
} // GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetPatient() *fhir.Reference {
	if i == nil {
		return nil
	}
	return i.Patient
}

// GetPerformer returns the value of the field Performer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetPerformer() []*ImmunizationPerformer {
	if i == nil {
		return nil
	}
	return i.Performer
}

// GetPrimarySource returns the value of the field PrimarySource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetPrimarySource() *fhir.Boolean {
	if i == nil {
		return nil
	}
	return i.PrimarySource
}

// GetProgramEligibility returns the value of the field ProgramEligibility.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetProgramEligibility() []*fhir.CodeableConcept {
	if i == nil {
		return nil
	}
	return i.ProgramEligibility
}

// GetProtocolApplied returns the value of the field ProtocolApplied.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetProtocolApplied() []*ImmunizationProtocolApplied {
	if i == nil {
		return nil
	}
	return i.ProtocolApplied
}

// GetReaction returns the value of the field Reaction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetReaction() []*ImmunizationReaction {
	if i == nil {
		return nil
	}
	return i.Reaction
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetReasonCode() []*fhir.CodeableConcept {
	if i == nil {
		return nil
	}
	return i.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetReasonReference() []*fhir.Reference {
	if i == nil {
		return nil
	}
	return i.ReasonReference
}

// GetRecorded returns the value of the field Recorded.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetRecorded() *fhir.DateTime {
	if i == nil {
		return nil
	}
	return i.Recorded
}

// GetReportOrigin returns the value of the field ReportOrigin.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetReportOrigin() *fhir.CodeableConcept {
	if i == nil {
		return nil
	}
	return i.ReportOrigin
}

// GetRoute returns the value of the field Route.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetRoute() *fhir.CodeableConcept {
	if i == nil {
		return nil
	}
	return i.Route
}

// GetSite returns the value of the field Site.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetSite() *fhir.CodeableConcept {
	if i == nil {
		return nil
	}
	return i.Site
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetStatus() *fhir.Code {
	if i == nil {
		return nil
	}
	return i.Status
}

// GetStatusReason returns the value of the field StatusReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetStatusReason() *fhir.CodeableConcept {
	if i == nil {
		return nil
	}
	return i.StatusReason
}

// GetSubpotentReason returns the value of the field SubpotentReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetSubpotentReason() []*fhir.CodeableConcept {
	if i == nil {
		return nil
	}
	return i.SubpotentReason
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetText() *fhir.Narrative {
	if i == nil {
		return nil
	}
	return i.Text
}

// GetVaccineCode returns the value of the field VaccineCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (i *Immunization) GetVaccineCode() *fhir.CodeableConcept {
	if i == nil {
		return nil
	}
	return i.VaccineCode
}

// Educational material presented to patient// Educational material presented to the patient (or guardian) at the time of
// vaccine administration.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Immunization.json
type ImmunizationEducation struct {

	// Identifier of the material presented to the patient.
	DocumentType *fhir.String `fhirpath:"documentType"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Date the educational material was given to the patient.
	PresentationDate *fhir.DateTime `fhirpath:"presentationDate"`

	// Date the educational material was published.
	PublicationDate *fhir.DateTime `fhirpath:"publicationDate"`

	// Reference pointer to the educational material given to the patient if the
	// information was on line.
	Reference *fhir.URI `fhirpath:"reference"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDocumentType returns the value of the field DocumentType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ie *ImmunizationEducation) GetDocumentType() *fhir.String {
	if ie == nil {
		return nil
	}
	return ie.DocumentType
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ie *ImmunizationEducation) GetExtension() []*fhir.Extension {
	if ie == nil {
		return nil
	}
	return ie.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ie *ImmunizationEducation) GetID() string {
	if ie == nil {
		return ""
	}
	return ie.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ie *ImmunizationEducation) GetModifierExtension() []*fhir.Extension {
	if ie == nil {
		return nil
	}
	return ie.ModifierExtension
}

// GetPresentationDate returns the value of the field PresentationDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ie *ImmunizationEducation) GetPresentationDate() *fhir.DateTime {
	if ie == nil {
		return nil
	}
	return ie.PresentationDate
}

// GetPublicationDate returns the value of the field PublicationDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ie *ImmunizationEducation) GetPublicationDate() *fhir.DateTime {
	if ie == nil {
		return nil
	}
	return ie.PublicationDate
}

// GetReference returns the value of the field Reference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ie *ImmunizationEducation) GetReference() *fhir.URI {
	if ie == nil {
		return nil
	}
	return ie.Reference
}

// Who performed event// Indicates who performed the immunization event.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Immunization.json
type ImmunizationPerformer struct {

	// The practitioner or organization who performed the action.
	Actor *fhir.Reference `fhirpath:"actor"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Describes the type of performance (e.g. ordering provider, administering
	// provider, etc.).
	Function *fhir.CodeableConcept `fhirpath:"function"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetActor returns the value of the field Actor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *ImmunizationPerformer) GetActor() *fhir.Reference {
	if ip == nil {
		return nil
	}
	return ip.Actor
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *ImmunizationPerformer) GetExtension() []*fhir.Extension {
	if ip == nil {
		return nil
	}
	return ip.Extension
}

// GetFunction returns the value of the field Function.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *ImmunizationPerformer) GetFunction() *fhir.CodeableConcept {
	if ip == nil {
		return nil
	}
	return ip.Function
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *ImmunizationPerformer) GetID() string {
	if ip == nil {
		return ""
	}
	return ip.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *ImmunizationPerformer) GetModifierExtension() []*fhir.Extension {
	if ip == nil {
		return nil
	}
	return ip.ModifierExtension
}

// Protocol followed by the provider// The protocol (set of recommendations) being followed by the provider who
// administered the dose.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Immunization.json
type ImmunizationProtocolApplied struct {

	// Indicates the authority who published the protocol (e.g. ACIP) that is being
	// followed.
	Authority *fhir.Reference `fhirpath:"authority"`

	// Nominal position in a series.
	DoseNumber fhir.Element `fhirpath:"doseNumber"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// One possible path to achieve presumed immunity against a disease - within
	// the context of an authority.
	Series *fhir.String `fhirpath:"series"`

	// The recommended number of doses to achieve immunity.
	SeriesDoses fhir.Element `fhirpath:"seriesDoses"`

	// The vaccine preventable disease the dose is being administered against.
	TargetDisease []*fhir.CodeableConcept `fhirpath:"targetDisease"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAuthority returns the value of the field Authority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipa *ImmunizationProtocolApplied) GetAuthority() *fhir.Reference {
	if ipa == nil {
		return nil
	}
	return ipa.Authority
}

// GetDoseNumber returns the value of the field DoseNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipa *ImmunizationProtocolApplied) GetDoseNumber() fhir.Element {
	if ipa == nil {
		return nil
	}
	return ipa.DoseNumber
}

// GetDoseNumberPositiveInt returns the value of the field DoseNumber.
func (ipa *ImmunizationProtocolApplied) GetDoseNumberPositiveInt() *fhir.PositiveInt {
	if ipa == nil {
		return nil
	}
	val, ok := ipa.DoseNumber.(*fhir.PositiveInt)
	if !ok {
		return nil
	}
	return val
}

// GetDoseNumberString returns the value of the field DoseNumber.
func (ipa *ImmunizationProtocolApplied) GetDoseNumberString() *fhir.String {
	if ipa == nil {
		return nil
	}
	val, ok := ipa.DoseNumber.(*fhir.String)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipa *ImmunizationProtocolApplied) GetExtension() []*fhir.Extension {
	if ipa == nil {
		return nil
	}
	return ipa.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipa *ImmunizationProtocolApplied) GetID() string {
	if ipa == nil {
		return ""
	}
	return ipa.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipa *ImmunizationProtocolApplied) GetModifierExtension() []*fhir.Extension {
	if ipa == nil {
		return nil
	}
	return ipa.ModifierExtension
}

// GetSeries returns the value of the field Series.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipa *ImmunizationProtocolApplied) GetSeries() *fhir.String {
	if ipa == nil {
		return nil
	}
	return ipa.Series
}

// GetSeriesDoses returns the value of the field SeriesDoses.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipa *ImmunizationProtocolApplied) GetSeriesDoses() fhir.Element {
	if ipa == nil {
		return nil
	}
	return ipa.SeriesDoses
}

// GetSeriesDosesPositiveInt returns the value of the field SeriesDoses.
func (ipa *ImmunizationProtocolApplied) GetSeriesDosesPositiveInt() *fhir.PositiveInt {
	if ipa == nil {
		return nil
	}
	val, ok := ipa.SeriesDoses.(*fhir.PositiveInt)
	if !ok {
		return nil
	}
	return val
}

// GetSeriesDosesString returns the value of the field SeriesDoses.
func (ipa *ImmunizationProtocolApplied) GetSeriesDosesString() *fhir.String {
	if ipa == nil {
		return nil
	}
	val, ok := ipa.SeriesDoses.(*fhir.String)
	if !ok {
		return nil
	}
	return val
} // GetTargetDisease returns the value of the field TargetDisease.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipa *ImmunizationProtocolApplied) GetTargetDisease() []*fhir.CodeableConcept {
	if ipa == nil {
		return nil
	}
	return ipa.TargetDisease
}

// Details of a reaction that follows immunization// Categorical data indicating that an adverse event is associated in time to
// an immunization.// A reaction may be an indication of an allergy or intolerance and, if this is
// determined to be the case, it should be recorded as a new AllergyIntolerance
// resource instance as most systems will not query against past
// Immunization.reaction elements.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Immunization.json
type ImmunizationReaction struct {

	// Date of reaction to the immunization.
	Date *fhir.DateTime `fhirpath:"date"`

	// Details of the reaction.
	Detail *fhir.Reference `fhirpath:"detail"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Self-reported indicator.
	Reported *fhir.Boolean `fhirpath:"reported"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationReaction) GetDate() *fhir.DateTime {
	if ir == nil {
		return nil
	}
	return ir.Date
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationReaction) GetDetail() *fhir.Reference {
	if ir == nil {
		return nil
	}
	return ir.Detail
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationReaction) GetExtension() []*fhir.Extension {
	if ir == nil {
		return nil
	}
	return ir.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationReaction) GetID() string {
	if ir == nil {
		return ""
	}
	return ir.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationReaction) GetModifierExtension() []*fhir.Extension {
	if ir == nil {
		return nil
	}
	return ir.ModifierExtension
}

// GetReported returns the value of the field Reported.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationReaction) GetReported() *fhir.Boolean {
	if ir == nil {
		return nil
	}
	return ir.Reported
}

func (i *Immunization) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (i *Immunization) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contained      []fhir.Resource          `json:"contained"`
		DoseQuantity   *fhir.Quantity           `json:"doseQuantity"`
		Education      []*ImmunizationEducation `json:"education"`
		Encounter      *fhir.Reference          `json:"encounter"`
		ExpirationDate *fhir.Date               `json:"expirationDate"`
		Extension      []*fhir.Extension        `json:"extension"`
		FundingSource  *fhir.CodeableConcept    `json:"fundingSource"`

		ID                 string                         `json:"id"`
		Identifier         []*fhir.Identifier             `json:"identifier"`
		ImplicitRules      *fhir.URI                      `json:"implicitRules"`
		IsSubpotent        *fhir.Boolean                  `json:"isSubpotent"`
		Language           *fhir.Code                     `json:"language"`
		Location           *fhir.Reference                `json:"location"`
		LotNumber          *fhir.String                   `json:"lotNumber"`
		Manufacturer       *fhir.Reference                `json:"manufacturer"`
		Meta               *fhir.Meta                     `json:"meta"`
		ModifierExtension  []*fhir.Extension              `json:"modifierExtension"`
		Note               []*fhir.Annotation             `json:"note"`
		OccurrenceDateTime *fhir.DateTime                 `json:"occurrenceDateTime"`
		OccurrenceString   *fhir.String                   `json:"occurrenceString"`
		Patient            *fhir.Reference                `json:"patient"`
		Performer          []*ImmunizationPerformer       `json:"performer"`
		PrimarySource      *fhir.Boolean                  `json:"primarySource"`
		ProgramEligibility []*fhir.CodeableConcept        `json:"programEligibility"`
		ProtocolApplied    []*ImmunizationProtocolApplied `json:"protocolApplied"`
		Reaction           []*ImmunizationReaction        `json:"reaction"`
		ReasonCode         []*fhir.CodeableConcept        `json:"reasonCode"`
		ReasonReference    []*fhir.Reference              `json:"reasonReference"`
		Recorded           *fhir.DateTime                 `json:"recorded"`
		ReportOrigin       *fhir.CodeableConcept          `json:"reportOrigin"`
		Route              *fhir.CodeableConcept          `json:"route"`
		Site               *fhir.CodeableConcept          `json:"site"`
		Status             *fhir.Code                     `json:"status"`
		StatusReason       *fhir.CodeableConcept          `json:"statusReason"`
		SubpotentReason    []*fhir.CodeableConcept        `json:"subpotentReason"`
		Text               *fhir.Narrative                `json:"text"`
		VaccineCode        *fhir.CodeableConcept          `json:"vaccineCode"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	i.Contained = raw.Contained
	i.DoseQuantity = raw.DoseQuantity
	i.Education = raw.Education
	i.Encounter = raw.Encounter
	i.ExpirationDate = raw.ExpirationDate
	i.Extension = raw.Extension
	i.FundingSource = raw.FundingSource
	i.ID = raw.ID
	i.Identifier = raw.Identifier
	i.ImplicitRules = raw.ImplicitRules
	i.IsSubpotent = raw.IsSubpotent
	i.Language = raw.Language
	i.Location = raw.Location
	i.LotNumber = raw.LotNumber
	i.Manufacturer = raw.Manufacturer
	i.Meta = raw.Meta
	i.ModifierExtension = raw.ModifierExtension
	i.Note = raw.Note
	i.Occurrence, err = validate.SelectOneOf[fhir.Element]("Immunization.occurrence",
		raw.OccurrenceDateTime,
		raw.OccurrenceString)
	if err != nil {
		return err
	}
	i.Patient = raw.Patient
	i.Performer = raw.Performer
	i.PrimarySource = raw.PrimarySource
	i.ProgramEligibility = raw.ProgramEligibility
	i.ProtocolApplied = raw.ProtocolApplied
	i.Reaction = raw.Reaction
	i.ReasonCode = raw.ReasonCode
	i.ReasonReference = raw.ReasonReference
	i.Recorded = raw.Recorded
	i.ReportOrigin = raw.ReportOrigin
	i.Route = raw.Route
	i.Site = raw.Site
	i.Status = raw.Status
	i.StatusReason = raw.StatusReason
	i.SubpotentReason = raw.SubpotentReason
	i.Text = raw.Text
	i.VaccineCode = raw.VaccineCode
	return nil
}

var _ json.Marshaler = (*Immunization)(nil)
var _ json.Unmarshaler = (*Immunization)(nil)

func (ie *ImmunizationEducation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ie *ImmunizationEducation) UnmarshalJSON(data []byte) error {
	var raw struct {
		DocumentType *fhir.String      `json:"documentType"`
		Extension    []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		PresentationDate  *fhir.DateTime    `json:"presentationDate"`
		PublicationDate   *fhir.DateTime    `json:"publicationDate"`
		Reference         *fhir.URI         `json:"reference"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ie.DocumentType = raw.DocumentType
	ie.Extension = raw.Extension
	ie.ID = raw.ID
	ie.ModifierExtension = raw.ModifierExtension
	ie.PresentationDate = raw.PresentationDate
	ie.PublicationDate = raw.PublicationDate
	ie.Reference = raw.Reference
	return nil
}

var _ json.Marshaler = (*ImmunizationEducation)(nil)
var _ json.Unmarshaler = (*ImmunizationEducation)(nil)

func (ip *ImmunizationPerformer) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ip *ImmunizationPerformer) UnmarshalJSON(data []byte) error {
	var raw struct {
		Actor     *fhir.Reference       `json:"actor"`
		Extension []*fhir.Extension     `json:"extension"`
		Function  *fhir.CodeableConcept `json:"function"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ip.Actor = raw.Actor
	ip.Extension = raw.Extension
	ip.Function = raw.Function
	ip.ID = raw.ID
	ip.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*ImmunizationPerformer)(nil)
var _ json.Unmarshaler = (*ImmunizationPerformer)(nil)

func (ipa *ImmunizationProtocolApplied) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ipa *ImmunizationProtocolApplied) UnmarshalJSON(data []byte) error {
	var raw struct {
		Authority             *fhir.Reference   `json:"authority"`
		DoseNumberPositiveInt *fhir.PositiveInt `json:"doseNumberPositiveInt"`
		DoseNumberString      *fhir.String      `json:"doseNumberString"`
		Extension             []*fhir.Extension `json:"extension"`

		ID                     string                  `json:"id"`
		ModifierExtension      []*fhir.Extension       `json:"modifierExtension"`
		Series                 *fhir.String            `json:"series"`
		SeriesDosesPositiveInt *fhir.PositiveInt       `json:"seriesDosesPositiveInt"`
		SeriesDosesString      *fhir.String            `json:"seriesDosesString"`
		TargetDisease          []*fhir.CodeableConcept `json:"targetDisease"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ipa.Authority = raw.Authority
	ipa.DoseNumber, err = validate.SelectOneOf[fhir.Element]("Immunization.protocolApplied.doseNumber",
		raw.DoseNumberPositiveInt,
		raw.DoseNumberString)
	if err != nil {
		return err
	}
	ipa.Extension = raw.Extension
	ipa.ID = raw.ID
	ipa.ModifierExtension = raw.ModifierExtension
	ipa.Series = raw.Series
	ipa.SeriesDoses, err = validate.SelectOneOf[fhir.Element]("Immunization.protocolApplied.seriesDoses",
		raw.SeriesDosesPositiveInt,
		raw.SeriesDosesString)
	if err != nil {
		return err
	}
	ipa.TargetDisease = raw.TargetDisease
	return nil
}

var _ json.Marshaler = (*ImmunizationProtocolApplied)(nil)
var _ json.Unmarshaler = (*ImmunizationProtocolApplied)(nil)

func (ir *ImmunizationReaction) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ir *ImmunizationReaction) UnmarshalJSON(data []byte) error {
	var raw struct {
		Date      *fhir.DateTime    `json:"date"`
		Detail    *fhir.Reference   `json:"detail"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Reported          *fhir.Boolean     `json:"reported"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ir.Date = raw.Date
	ir.Detail = raw.Detail
	ir.Extension = raw.Extension
	ir.ID = raw.ID
	ir.ModifierExtension = raw.ModifierExtension
	ir.Reported = raw.Reported
	return nil
}

var _ json.Marshaler = (*ImmunizationReaction)(nil)
var _ json.Unmarshaler = (*ImmunizationReaction)(nil)
