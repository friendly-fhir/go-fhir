// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package library

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// The Library resource is a general-purpose container for knowledge asset
// definitions. It can be used to describe and expose existing knowledge assets
// such as logic libraries and information model descriptions, as well as to
// describe a collection of knowledge assets.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Library
//   - Source File: StructureDefinition-Library.json
type Library struct {

	// The date on which the resource content was approved by the publisher.
	// Approval happens once when the content is officially approved for usage.
	ApprovalDate *fhir.Date `fhirpath:"approvalDate"`

	// An individiual or organization primarily involved in the creation and
	// maintenance of the content.
	Author []*fhir.ContactDetail `fhirpath:"author"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The content of the library as an Attachment. The content may be a reference
	// to a url, or may be directly embedded as a base-64 string. Either way, the
	// contentType of the attachment determines how to interpret the content.
	Content []*fhir.Attachment `fhirpath:"content"`

	// A copyright statement relating to the library and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the
	// library.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// Describes a set of data that must be provided in order to be able to
	// successfully perform the computations defined by the library.
	DataRequirement []*fhir.DataRequirement `fhirpath:"dataRequirement"`

	// The date (and optionally time) when the library was published. The date must
	// change when the business version changes and it must change if the status
	// code changes. In addition, it should change when the substantive content of
	// the library changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the library from a consumer's
	// perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// An individual or organization primarily responsible for internal coherence
	// of the content.
	Editor []*fhir.ContactDetail `fhirpath:"editor"`

	// The period during which the library content was or is planned to be in
	// active use.
	EffectivePeriod *fhir.Period `fhirpath:"effectivePeriod"`

	// An individual or organization responsible for officially endorsing the
	// content for use in some setting.
	Endorser []*fhir.ContactDetail `fhirpath:"endorser"`

	// A Boolean value to indicate that this library is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used
	// for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this library when it is
	// represented in other formats, or referenced in a specification, model,
	// design or an instance. e.g. CMS or NQF identifiers for a measure artifact.
	// Note that at least one identifier is required for non-experimental active
	// artifacts.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A legal or geographic region in which the library is intended to be used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate *fhir.Date `fhirpath:"lastReviewDate"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the library. This name should be usable
	// as an identifier for the module by machine processing applications such as
	// code generation.
	Name *fhir.String `fhirpath:"name"`

	// The parameter element defines parameters used by the library.
	Parameter []*fhir.ParameterDefinition `fhirpath:"parameter"`

	// The name of the organization or individual that published the library.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this library is needed and why it has been designed as it
	// has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// Related artifacts such as additional documentation, justification, or
	// bibliographic references.
	RelatedArtifact []*fhir.RelatedArtifact `fhirpath:"relatedArtifact"`

	// An individual or organization primarily responsible for review of some
	// aspect of the content.
	Reviewer []*fhir.ContactDetail `fhirpath:"reviewer"`

	// The status of this library. Enables tracking the life-cycle of the content.
	Status *fhir.Code `fhirpath:"status"`

	// A code or group definition that describes the intended subject of the
	// contents of the library.
	Subject fhir.Element `fhirpath:"subject"`

	// An explanatory or alternate title for the library giving additional
	// information about its content.
	Subtitle *fhir.String `fhirpath:"subtitle"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the library.
	Title *fhir.String `fhirpath:"title"`

	// Descriptive topics related to the content of the library. Topics provide a
	// high-level categorization of the library that can be useful for filtering
	// and searching.
	Topic []*fhir.CodeableConcept `fhirpath:"topic"`

	// Identifies the type of library such as a Logic Library, Model Definition,
	// Asset Collection, or Module Definition.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// An absolute URI that is used to identify this library when it is referenced
	// in a specification, model, design or an instance; also called its canonical
	// identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this library is (or will be)
	// published. This URL can be the target of a canonical reference. It SHALL
	// remain the same when the library is stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// A detailed description of how the library is used from a clinical
	// perspective.
	Usage *fhir.String `fhirpath:"usage"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// library instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the library when it
	// is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the library author and is not expected to be
	// globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
	// managed version is not available. There is also no expectation that versions
	// can be placed in a lexicographical sequence. To provide a version consistent
	// with the Decision Support Service specification, use the format
	// Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
	// knowledge assets, refer to the Decision Support Service specification. Note
	// that a version is required for non-experimental active artifacts.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseLibrary
	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetApprovalDate returns the value of the field ApprovalDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetApprovalDate() *fhir.Date {
	if l == nil {
		return nil
	}
	return l.ApprovalDate
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetAuthor() []*fhir.ContactDetail {
	if l == nil {
		return nil
	}
	return l.Author
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetContact() []*fhir.ContactDetail {
	if l == nil {
		return nil
	}
	return l.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetContained() []fhir.Resource {
	if l == nil {
		return nil
	}
	return l.Contained
}

// GetContent returns the value of the field Content.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetContent() []*fhir.Attachment {
	if l == nil {
		return nil
	}
	return l.Content
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetCopyright() *fhir.Markdown {
	if l == nil {
		return nil
	}
	return l.Copyright
}

// GetDataRequirement returns the value of the field DataRequirement.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetDataRequirement() []*fhir.DataRequirement {
	if l == nil {
		return nil
	}
	return l.DataRequirement
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetDate() *fhir.DateTime {
	if l == nil {
		return nil
	}
	return l.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetDescription() *fhir.Markdown {
	if l == nil {
		return nil
	}
	return l.Description
}

// GetEditor returns the value of the field Editor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetEditor() []*fhir.ContactDetail {
	if l == nil {
		return nil
	}
	return l.Editor
}

// GetEffectivePeriod returns the value of the field EffectivePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetEffectivePeriod() *fhir.Period {
	if l == nil {
		return nil
	}
	return l.EffectivePeriod
}

// GetEndorser returns the value of the field Endorser.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetEndorser() []*fhir.ContactDetail {
	if l == nil {
		return nil
	}
	return l.Endorser
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetExperimental() *fhir.Boolean {
	if l == nil {
		return nil
	}
	return l.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetExtension() []*fhir.Extension {
	if l == nil {
		return nil
	}
	return l.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetID() string {
	if l == nil {
		return ""
	}
	return l.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetIdentifier() []*fhir.Identifier {
	if l == nil {
		return nil
	}
	return l.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetImplicitRules() *fhir.URI {
	if l == nil {
		return nil
	}
	return l.ImplicitRules
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetJurisdiction() []*fhir.CodeableConcept {
	if l == nil {
		return nil
	}
	return l.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetLanguage() *fhir.Code {
	if l == nil {
		return nil
	}
	return l.Language
}

// GetLastReviewDate returns the value of the field LastReviewDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetLastReviewDate() *fhir.Date {
	if l == nil {
		return nil
	}
	return l.LastReviewDate
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetMeta() *fhir.Meta {
	if l == nil {
		return nil
	}
	return l.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetModifierExtension() []*fhir.Extension {
	if l == nil {
		return nil
	}
	return l.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetName() *fhir.String {
	if l == nil {
		return nil
	}
	return l.Name
}

// GetParameter returns the value of the field Parameter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetParameter() []*fhir.ParameterDefinition {
	if l == nil {
		return nil
	}
	return l.Parameter
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetPublisher() *fhir.String {
	if l == nil {
		return nil
	}
	return l.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetPurpose() *fhir.Markdown {
	if l == nil {
		return nil
	}
	return l.Purpose
}

// GetRelatedArtifact returns the value of the field RelatedArtifact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetRelatedArtifact() []*fhir.RelatedArtifact {
	if l == nil {
		return nil
	}
	return l.RelatedArtifact
}

// GetReviewer returns the value of the field Reviewer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetReviewer() []*fhir.ContactDetail {
	if l == nil {
		return nil
	}
	return l.Reviewer
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetStatus() *fhir.Code {
	if l == nil {
		return nil
	}
	return l.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetSubject() fhir.Element {
	if l == nil {
		return nil
	}
	return l.Subject
}

// GetSubjectCodeableConcept returns the value of the field Subject.
func (l *Library) GetSubjectCodeableConcept() *fhir.CodeableConcept {
	if l == nil {
		return nil
	}
	val, ok := l.Subject.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetSubjectReference returns the value of the field Subject.
func (l *Library) GetSubjectReference() *fhir.Reference {
	if l == nil {
		return nil
	}
	val, ok := l.Subject.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetSubtitle returns the value of the field Subtitle.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetSubtitle() *fhir.String {
	if l == nil {
		return nil
	}
	return l.Subtitle
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetText() *fhir.Narrative {
	if l == nil {
		return nil
	}
	return l.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetTitle() *fhir.String {
	if l == nil {
		return nil
	}
	return l.Title
}

// GetTopic returns the value of the field Topic.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetTopic() []*fhir.CodeableConcept {
	if l == nil {
		return nil
	}
	return l.Topic
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetType() *fhir.CodeableConcept {
	if l == nil {
		return nil
	}
	return l.Type
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetURL() *fhir.URI {
	if l == nil {
		return nil
	}
	return l.URL
}

// GetUsage returns the value of the field Usage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetUsage() *fhir.String {
	if l == nil {
		return nil
	}
	return l.Usage
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetUseContext() []*fhir.UsageContext {
	if l == nil {
		return nil
	}
	return l.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Library) GetVersion() *fhir.String {
	if l == nil {
		return nil
	}
	return l.Version
}

func (l *Library) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (l *Library) UnmarshalJSON(data []byte) error {
	var raw struct {
		ApprovalDate    *fhir.Date              `json:"approvalDate"`
		Author          []*fhir.ContactDetail   `json:"author"`
		Contact         []*fhir.ContactDetail   `json:"contact"`
		Contained       []fhir.Resource         `json:"contained"`
		Content         []*fhir.Attachment      `json:"content"`
		Copyright       *fhir.Markdown          `json:"copyright"`
		DataRequirement []*fhir.DataRequirement `json:"dataRequirement"`
		Date            *fhir.DateTime          `json:"date"`
		Description     *fhir.Markdown          `json:"description"`
		Editor          []*fhir.ContactDetail   `json:"editor"`
		EffectivePeriod *fhir.Period            `json:"effectivePeriod"`
		Endorser        []*fhir.ContactDetail   `json:"endorser"`
		Experimental    *fhir.Boolean           `json:"experimental"`
		Extension       []*fhir.Extension       `json:"extension"`

		ID                     string                      `json:"id"`
		Identifier             []*fhir.Identifier          `json:"identifier"`
		ImplicitRules          *fhir.URI                   `json:"implicitRules"`
		Jurisdiction           []*fhir.CodeableConcept     `json:"jurisdiction"`
		Language               *fhir.Code                  `json:"language"`
		LastReviewDate         *fhir.Date                  `json:"lastReviewDate"`
		Meta                   *fhir.Meta                  `json:"meta"`
		ModifierExtension      []*fhir.Extension           `json:"modifierExtension"`
		Name                   *fhir.String                `json:"name"`
		Parameter              []*fhir.ParameterDefinition `json:"parameter"`
		Publisher              *fhir.String                `json:"publisher"`
		Purpose                *fhir.Markdown              `json:"purpose"`
		RelatedArtifact        []*fhir.RelatedArtifact     `json:"relatedArtifact"`
		Reviewer               []*fhir.ContactDetail       `json:"reviewer"`
		Status                 *fhir.Code                  `json:"status"`
		SubjectCodeableConcept *fhir.CodeableConcept       `json:"subjectCodeableConcept"`
		SubjectReference       *fhir.Reference             `json:"subjectReference"`
		Subtitle               *fhir.String                `json:"subtitle"`
		Text                   *fhir.Narrative             `json:"text"`
		Title                  *fhir.String                `json:"title"`
		Topic                  []*fhir.CodeableConcept     `json:"topic"`
		Type                   *fhir.CodeableConcept       `json:"type"`
		URL                    *fhir.URI                   `json:"url"`
		Usage                  *fhir.String                `json:"usage"`
		UseContext             []*fhir.UsageContext        `json:"useContext"`
		Version                *fhir.String                `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	l.ApprovalDate = raw.ApprovalDate
	l.Author = raw.Author
	l.Contact = raw.Contact
	l.Contained = raw.Contained
	l.Content = raw.Content
	l.Copyright = raw.Copyright
	l.DataRequirement = raw.DataRequirement
	l.Date = raw.Date
	l.Description = raw.Description
	l.Editor = raw.Editor
	l.EffectivePeriod = raw.EffectivePeriod
	l.Endorser = raw.Endorser
	l.Experimental = raw.Experimental
	l.Extension = raw.Extension
	l.ID = raw.ID
	l.Identifier = raw.Identifier
	l.ImplicitRules = raw.ImplicitRules
	l.Jurisdiction = raw.Jurisdiction
	l.Language = raw.Language
	l.LastReviewDate = raw.LastReviewDate
	l.Meta = raw.Meta
	l.ModifierExtension = raw.ModifierExtension
	l.Name = raw.Name
	l.Parameter = raw.Parameter
	l.Publisher = raw.Publisher
	l.Purpose = raw.Purpose
	l.RelatedArtifact = raw.RelatedArtifact
	l.Reviewer = raw.Reviewer
	l.Status = raw.Status
	l.Subject, err = validate.SelectOneOf[fhir.Element]("Library.subject",
		raw.SubjectCodeableConcept,
		raw.SubjectReference)
	if err != nil {
		return err
	}
	l.Subtitle = raw.Subtitle
	l.Text = raw.Text
	l.Title = raw.Title
	l.Topic = raw.Topic
	l.Type = raw.Type
	l.URL = raw.URL
	l.Usage = raw.Usage
	l.UseContext = raw.UseContext
	l.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*Library)(nil)
var _ json.Unmarshaler = (*Library)(nil)
