// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package documentreference

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A reference to a document of any kind for any purpose. Provides metadata
// about the document so that the document can be discovered and managed. The
// scope of a document is any seralized object with a mime-type, so includes
// formal patient centric documents (CDA), cliical notes, scanned paper, and
// non-patient specific documents like policy text.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/DocumentReference
//   - Source File: StructureDefinition-DocumentReference.json
type DocumentReference struct {

	// Which person or organization authenticates that this document is valid.
	Authenticator *fhir.Reference `fhirpath:"authenticator"`

	// Identifies who is responsible for adding the information to the document.
	Author []*fhir.Reference `fhirpath:"author"`

	// A categorization for the type of document referenced - helps for indexing
	// and searching. This may be implied by or derived from the code specified in
	// the DocumentReference.type.
	Category []*fhir.CodeableConcept `fhirpath:"category"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The document and format referenced. There may be multiple content element
	// repetitions, each with a different format.
	Content []*DocumentReferenceContent `fhirpath:"content"`

	// The clinical context in which the document was prepared.
	Context *DocumentReferenceContext `fhirpath:"context"`

	// Identifies the organization or group who is responsible for ongoing
	// maintenance of and access to the document.
	Custodian *fhir.Reference `fhirpath:"custodian"`

	// When the document reference was created.
	Date *fhir.Instant `fhirpath:"date"`

	// Human-readable description of the source document.
	Description *fhir.String `fhirpath:"description"`

	// The status of the underlying document.
	DocStatus *fhir.Code `fhirpath:"docStatus"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Other identifiers associated with the document, including version
	// independent identifiers.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Document identifier as assigned by the source of the document. This
	// identifier is specific to this version of the document. This unique
	// identifier may be used elsewhere to identify this version of the document.
	MasterIdentifier *fhir.Identifier `fhirpath:"masterIdentifier"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Relationships that this document has with other document references that
	// already exist.
	RelatesTo []*DocumentReferenceRelatesTo `fhirpath:"relatesTo"`

	// A set of Security-Tag codes specifying the level of privacy/security of the
	// Document. Note that DocumentReference.meta.security contains the security
	// labels of the "reference" to the document, while
	// DocumentReference.securityLabel contains a snapshot of the security labels
	// on the document the reference refers to.
	SecurityLabel []*fhir.CodeableConcept `fhirpath:"securityLabel"`

	// The status of this document reference.
	Status *fhir.Code `fhirpath:"status"`

	// Who or what the document is about. The document can be about a person,
	// (patient or healthcare practitioner), a device (e.g. a machine) or even a
	// group of subjects (such as a document about a herd of farm animals, or a set
	// of patients that share a common exposure).
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Specifies the particular kind of document referenced (e.g. History and
	// Physical, Discharge Summary, Progress Note). This usually equates to the
	// purpose of making the document referenced.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAuthenticator returns the value of the field Authenticator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetAuthenticator() *fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.Authenticator
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetAuthor() []*fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.Author
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetCategory() []*fhir.CodeableConcept {
	if dr == nil {
		return nil
	}
	return dr.Category
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetContained() []fhir.Resource {
	if dr == nil {
		return nil
	}
	return dr.Contained
}

// GetContent returns the value of the field Content.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetContent() []*DocumentReferenceContent {
	if dr == nil {
		return nil
	}
	return dr.Content
}

// GetContext returns the value of the field Context.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetContext() *DocumentReferenceContext {
	if dr == nil {
		return nil
	}
	return dr.Context
}

// GetCustodian returns the value of the field Custodian.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetCustodian() *fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.Custodian
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetDate() *fhir.Instant {
	if dr == nil {
		return nil
	}
	return dr.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetDescription() *fhir.String {
	if dr == nil {
		return nil
	}
	return dr.Description
}

// GetDocStatus returns the value of the field DocStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetDocStatus() *fhir.Code {
	if dr == nil {
		return nil
	}
	return dr.DocStatus
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetExtension() []*fhir.Extension {
	if dr == nil {
		return nil
	}
	return dr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetID() string {
	if dr == nil {
		return ""
	}
	return dr.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetIdentifier() []*fhir.Identifier {
	if dr == nil {
		return nil
	}
	return dr.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetImplicitRules() *fhir.URI {
	if dr == nil {
		return nil
	}
	return dr.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetLanguage() *fhir.Code {
	if dr == nil {
		return nil
	}
	return dr.Language
}

// GetMasterIdentifier returns the value of the field MasterIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetMasterIdentifier() *fhir.Identifier {
	if dr == nil {
		return nil
	}
	return dr.MasterIdentifier
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetMeta() *fhir.Meta {
	if dr == nil {
		return nil
	}
	return dr.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetModifierExtension() []*fhir.Extension {
	if dr == nil {
		return nil
	}
	return dr.ModifierExtension
}

// GetRelatesTo returns the value of the field RelatesTo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetRelatesTo() []*DocumentReferenceRelatesTo {
	if dr == nil {
		return nil
	}
	return dr.RelatesTo
}

// GetSecurityLabel returns the value of the field SecurityLabel.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetSecurityLabel() []*fhir.CodeableConcept {
	if dr == nil {
		return nil
	}
	return dr.SecurityLabel
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetStatus() *fhir.Code {
	if dr == nil {
		return nil
	}
	return dr.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetSubject() *fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetText() *fhir.Narrative {
	if dr == nil {
		return nil
	}
	return dr.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DocumentReference) GetType() *fhir.CodeableConcept {
	if dr == nil {
		return nil
	}
	return dr.Type
}

// Document referenced// The document and format referenced. There may be multiple content element
// repetitions, each with a different format.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DocumentReference.json
type DocumentReferenceContent struct {

	// The document or URL of the document along with critical metadata to prove
	// content has integrity.
	Attachment *fhir.Attachment `fhirpath:"attachment"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// An identifier of the document encoding, structure, and template that the
	// document conforms to beyond the base format indicated in the mimeType.
	Format *fhir.Coding `fhirpath:"format"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAttachment returns the value of the field Attachment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContent) GetAttachment() *fhir.Attachment {
	if drc == nil {
		return nil
	}
	return drc.Attachment
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContent) GetExtension() []*fhir.Extension {
	if drc == nil {
		return nil
	}
	return drc.Extension
}

// GetFormat returns the value of the field Format.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContent) GetFormat() *fhir.Coding {
	if drc == nil {
		return nil
	}
	return drc.Format
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContent) GetID() string {
	if drc == nil {
		return ""
	}
	return drc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContent) GetModifierExtension() []*fhir.Extension {
	if drc == nil {
		return nil
	}
	return drc.ModifierExtension
}

// Clinical context of document// The clinical context in which the document was prepared.// These values are primarily added to help with searching for
// interesting/relevant documents.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DocumentReference.json
type DocumentReferenceContext struct {

	// Describes the clinical encounter or type of care that the document content
	// is associated with.
	Encounter []*fhir.Reference `fhirpath:"encounter"`

	// This list of codes represents the main clinical acts, such as a colonoscopy
	// or an appendectomy, being documented. In some cases, the event is inherent
	// in the type Code, such as a "History and Physical Report" in which the
	// procedure being documented is necessarily a "History and Physical" act.
	Event []*fhir.CodeableConcept `fhirpath:"event"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The kind of facility where the patient was seen.
	FacilityType *fhir.CodeableConcept `fhirpath:"facilityType"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The time period over which the service that is described by the document was
	// provided.
	Period *fhir.Period `fhirpath:"period"`

	// This property may convey specifics about the practice setting where the
	// content was created, often reflecting the clinical specialty.
	PracticeSetting *fhir.CodeableConcept `fhirpath:"practiceSetting"`

	// Related identifiers or resources associated with the DocumentReference.
	Related []*fhir.Reference `fhirpath:"related"`

	// The Patient Information as known when the document was published. May be a
	// reference to a version specific, or contained.
	SourcePatientInfo *fhir.Reference `fhirpath:"sourcePatientInfo"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContext) GetEncounter() []*fhir.Reference {
	if drc == nil {
		return nil
	}
	return drc.Encounter
}

// GetEvent returns the value of the field Event.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContext) GetEvent() []*fhir.CodeableConcept {
	if drc == nil {
		return nil
	}
	return drc.Event
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContext) GetExtension() []*fhir.Extension {
	if drc == nil {
		return nil
	}
	return drc.Extension
}

// GetFacilityType returns the value of the field FacilityType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContext) GetFacilityType() *fhir.CodeableConcept {
	if drc == nil {
		return nil
	}
	return drc.FacilityType
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContext) GetID() string {
	if drc == nil {
		return ""
	}
	return drc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContext) GetModifierExtension() []*fhir.Extension {
	if drc == nil {
		return nil
	}
	return drc.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContext) GetPeriod() *fhir.Period {
	if drc == nil {
		return nil
	}
	return drc.Period
}

// GetPracticeSetting returns the value of the field PracticeSetting.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContext) GetPracticeSetting() *fhir.CodeableConcept {
	if drc == nil {
		return nil
	}
	return drc.PracticeSetting
}

// GetRelated returns the value of the field Related.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContext) GetRelated() []*fhir.Reference {
	if drc == nil {
		return nil
	}
	return drc.Related
}

// GetSourcePatientInfo returns the value of the field SourcePatientInfo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drc *DocumentReferenceContext) GetSourcePatientInfo() *fhir.Reference {
	if drc == nil {
		return nil
	}
	return drc.SourcePatientInfo
}

// Relationships to other documents// Relationships that this document has with other document references that
// already exist.// This element is labeled as a modifier because documents that append to other
// documents are incomplete on their own.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DocumentReference.json
type DocumentReferenceRelatesTo struct {

	// The type of relationship that this document has with anther document.
	Code *fhir.Code `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The target document of this relationship.
	Target *fhir.Reference `fhirpath:"target"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drrt *DocumentReferenceRelatesTo) GetCode() *fhir.Code {
	if drrt == nil {
		return nil
	}
	return drrt.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drrt *DocumentReferenceRelatesTo) GetExtension() []*fhir.Extension {
	if drrt == nil {
		return nil
	}
	return drrt.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drrt *DocumentReferenceRelatesTo) GetID() string {
	if drrt == nil {
		return ""
	}
	return drrt.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drrt *DocumentReferenceRelatesTo) GetModifierExtension() []*fhir.Extension {
	if drrt == nil {
		return nil
	}
	return drrt.ModifierExtension
}

// GetTarget returns the value of the field Target.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drrt *DocumentReferenceRelatesTo) GetTarget() *fhir.Reference {
	if drrt == nil {
		return nil
	}
	return drrt.Target
}

func (dr *DocumentReference) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (dr *DocumentReference) UnmarshalJSON(data []byte) error {
	var raw struct {
		Authenticator *fhir.Reference             `json:"authenticator"`
		Author        []*fhir.Reference           `json:"author"`
		Category      []*fhir.CodeableConcept     `json:"category"`
		Contained     []fhir.Resource             `json:"contained"`
		Content       []*DocumentReferenceContent `json:"content"`
		Context       *DocumentReferenceContext   `json:"context"`
		Custodian     *fhir.Reference             `json:"custodian"`
		Date          *fhir.Instant               `json:"date"`
		Description   *fhir.String                `json:"description"`
		DocStatus     *fhir.Code                  `json:"docStatus"`
		Extension     []*fhir.Extension           `json:"extension"`

		ID                string                        `json:"id"`
		Identifier        []*fhir.Identifier            `json:"identifier"`
		ImplicitRules     *fhir.URI                     `json:"implicitRules"`
		Language          *fhir.Code                    `json:"language"`
		MasterIdentifier  *fhir.Identifier              `json:"masterIdentifier"`
		Meta              *fhir.Meta                    `json:"meta"`
		ModifierExtension []*fhir.Extension             `json:"modifierExtension"`
		RelatesTo         []*DocumentReferenceRelatesTo `json:"relatesTo"`
		SecurityLabel     []*fhir.CodeableConcept       `json:"securityLabel"`
		Status            *fhir.Code                    `json:"status"`
		Subject           *fhir.Reference               `json:"subject"`
		Text              *fhir.Narrative               `json:"text"`
		Type              *fhir.CodeableConcept         `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	dr.Authenticator = raw.Authenticator
	dr.Author = raw.Author
	dr.Category = raw.Category
	dr.Contained = raw.Contained
	dr.Content = raw.Content
	dr.Context = raw.Context
	dr.Custodian = raw.Custodian
	dr.Date = raw.Date
	dr.Description = raw.Description
	dr.DocStatus = raw.DocStatus
	dr.Extension = raw.Extension
	dr.ID = raw.ID
	dr.Identifier = raw.Identifier
	dr.ImplicitRules = raw.ImplicitRules
	dr.Language = raw.Language
	dr.MasterIdentifier = raw.MasterIdentifier
	dr.Meta = raw.Meta
	dr.ModifierExtension = raw.ModifierExtension
	dr.RelatesTo = raw.RelatesTo
	dr.SecurityLabel = raw.SecurityLabel
	dr.Status = raw.Status
	dr.Subject = raw.Subject
	dr.Text = raw.Text
	dr.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*DocumentReference)(nil)
var _ json.Unmarshaler = (*DocumentReference)(nil)

func (drc *DocumentReferenceContent) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (drc *DocumentReferenceContent) UnmarshalJSON(data []byte) error {
	var raw struct {
		Attachment *fhir.Attachment  `json:"attachment"`
		Extension  []*fhir.Extension `json:"extension"`
		Format     *fhir.Coding      `json:"format"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	drc.Attachment = raw.Attachment
	drc.Extension = raw.Extension
	drc.Format = raw.Format
	drc.ID = raw.ID
	drc.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*DocumentReferenceContent)(nil)
var _ json.Unmarshaler = (*DocumentReferenceContent)(nil)

func (drc *DocumentReferenceContext) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (drc *DocumentReferenceContext) UnmarshalJSON(data []byte) error {
	var raw struct {
		Encounter    []*fhir.Reference       `json:"encounter"`
		Event        []*fhir.CodeableConcept `json:"event"`
		Extension    []*fhir.Extension       `json:"extension"`
		FacilityType *fhir.CodeableConcept   `json:"facilityType"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Period            *fhir.Period          `json:"period"`
		PracticeSetting   *fhir.CodeableConcept `json:"practiceSetting"`
		Related           []*fhir.Reference     `json:"related"`
		SourcePatientInfo *fhir.Reference       `json:"sourcePatientInfo"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	drc.Encounter = raw.Encounter
	drc.Event = raw.Event
	drc.Extension = raw.Extension
	drc.FacilityType = raw.FacilityType
	drc.ID = raw.ID
	drc.ModifierExtension = raw.ModifierExtension
	drc.Period = raw.Period
	drc.PracticeSetting = raw.PracticeSetting
	drc.Related = raw.Related
	drc.SourcePatientInfo = raw.SourcePatientInfo
	return nil
}

var _ json.Marshaler = (*DocumentReferenceContext)(nil)
var _ json.Unmarshaler = (*DocumentReferenceContext)(nil)

func (drrt *DocumentReferenceRelatesTo) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (drrt *DocumentReferenceRelatesTo) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *fhir.Code        `json:"code"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Target            *fhir.Reference   `json:"target"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	drrt.Code = raw.Code
	drrt.Extension = raw.Extension
	drrt.ID = raw.ID
	drrt.ModifierExtension = raw.ModifierExtension
	drrt.Target = raw.Target
	return nil
}

var _ json.Marshaler = (*DocumentReferenceRelatesTo)(nil)
var _ json.Unmarshaler = (*DocumentReferenceRelatesTo)(nil)
