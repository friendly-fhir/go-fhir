// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package patient

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Demographics and other administrative information about an individual or
// animal receiving care or other health-related services.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Patient
//   - Source File: StructureDefinition-Patient.json
type Patient struct {

	// Whether this patient record is in active use. Many systems use this property
	// to mark as non-current patients, such as those that have not been seen for a
	// period of time based on an organization's business rules.
	// It is often used to filter patient lists to exclude inactive patients
	// Deceased patients may also be marked as inactive for the same reasons, but
	// may be active for some time after death.
	Active *fhir.Boolean `fhirpath:"active"`

	// An address for the individual.
	Address []*fhir.Address `fhirpath:"address"`

	// The date of birth for the individual.
	BirthDate *fhir.Date `fhirpath:"birthDate"`

	// A language which may be used to communicate with the patient about his or
	// her health.
	Communication []*PatientCommunication `fhirpath:"communication"`

	// A contact party (e.g. guardian, partner, friend) for the patient.
	Contact []*PatientContact `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Indicates if the individual is deceased or not.
	Deceased fhir.Element `fhirpath:"deceased"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Administrative Gender - the gender that the patient is considered to have
	// for administration and record keeping purposes.
	Gender *fhir.Code `fhirpath:"gender"`

	// Patient's nominated care provider.
	GeneralPractitioner []*fhir.Reference `fhirpath:"generalPractitioner"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// An identifier for this patient.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Link to another patient resource that concerns the same actual patient.
	Link []*PatientLink `fhirpath:"link"`

	// Organization that is the custodian of the patient record.
	ManagingOrganization *fhir.Reference `fhirpath:"managingOrganization"`

	// This field contains a patient's most recent marital (civil) status.
	MaritalStatus *fhir.CodeableConcept `fhirpath:"maritalStatus"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Indicates whether the patient is part of a multiple (boolean) or indicates
	// the actual birth order (integer).
	MultipleBirth fhir.Element `fhirpath:"multipleBirth"`

	// A name associated with the individual.
	Name []*fhir.HumanName `fhirpath:"name"`

	// Image of the patient.
	Photo []*fhir.Attachment `fhirpath:"photo"`

	// A contact detail (e.g. a telephone number or an email address) by which the
	// individual may be contacted.
	Telecom []*fhir.ContactPoint `fhirpath:"telecom"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetActive returns the value of the field Active.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetActive() *fhir.Boolean {
	if p == nil {
		return nil
	}
	return p.Active
}

// GetAddress returns the value of the field Address.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetAddress() []*fhir.Address {
	if p == nil {
		return nil
	}
	return p.Address
}

// GetBirthDate returns the value of the field BirthDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetBirthDate() *fhir.Date {
	if p == nil {
		return nil
	}
	return p.BirthDate
}

// GetCommunication returns the value of the field Communication.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetCommunication() []*PatientCommunication {
	if p == nil {
		return nil
	}
	return p.Communication
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetContact() []*PatientContact {
	if p == nil {
		return nil
	}
	return p.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetContained() []fhir.Resource {
	if p == nil {
		return nil
	}
	return p.Contained
}

// GetDeceased returns the value of the field Deceased.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetDeceased() fhir.Element {
	if p == nil {
		return nil
	}
	return p.Deceased
}

// GetDeceasedBoolean returns the value of the field Deceased.
func (p *Patient) GetDeceasedBoolean() *fhir.Boolean {
	if p == nil {
		return nil
	}
	val, ok := p.Deceased.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetDeceasedDateTime returns the value of the field Deceased.
func (p *Patient) GetDeceasedDateTime() *fhir.DateTime {
	if p == nil {
		return nil
	}
	val, ok := p.Deceased.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetExtension() []*fhir.Extension {
	if p == nil {
		return nil
	}
	return p.Extension
}

// GetGender returns the value of the field Gender.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetGender() *fhir.Code {
	if p == nil {
		return nil
	}
	return p.Gender
}

// GetGeneralPractitioner returns the value of the field GeneralPractitioner.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetGeneralPractitioner() []*fhir.Reference {
	if p == nil {
		return nil
	}
	return p.GeneralPractitioner
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetIdentifier() []*fhir.Identifier {
	if p == nil {
		return nil
	}
	return p.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetImplicitRules() *fhir.URI {
	if p == nil {
		return nil
	}
	return p.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetLanguage() *fhir.Code {
	if p == nil {
		return nil
	}
	return p.Language
}

// GetLink returns the value of the field Link.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetLink() []*PatientLink {
	if p == nil {
		return nil
	}
	return p.Link
}

// GetManagingOrganization returns the value of the field ManagingOrganization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetManagingOrganization() *fhir.Reference {
	if p == nil {
		return nil
	}
	return p.ManagingOrganization
}

// GetMaritalStatus returns the value of the field MaritalStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetMaritalStatus() *fhir.CodeableConcept {
	if p == nil {
		return nil
	}
	return p.MaritalStatus
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetMeta() *fhir.Meta {
	if p == nil {
		return nil
	}
	return p.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetModifierExtension() []*fhir.Extension {
	if p == nil {
		return nil
	}
	return p.ModifierExtension
}

// GetMultipleBirth returns the value of the field MultipleBirth.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetMultipleBirth() fhir.Element {
	if p == nil {
		return nil
	}
	return p.MultipleBirth
}

// GetMultipleBirthBoolean returns the value of the field MultipleBirth.
func (p *Patient) GetMultipleBirthBoolean() *fhir.Boolean {
	if p == nil {
		return nil
	}
	val, ok := p.MultipleBirth.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetMultipleBirthInteger returns the value of the field MultipleBirth.
func (p *Patient) GetMultipleBirthInteger() *fhir.Integer {
	if p == nil {
		return nil
	}
	val, ok := p.MultipleBirth.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
} // GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetName() []*fhir.HumanName {
	if p == nil {
		return nil
	}
	return p.Name
}

// GetPhoto returns the value of the field Photo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetPhoto() []*fhir.Attachment {
	if p == nil {
		return nil
	}
	return p.Photo
}

// GetTelecom returns the value of the field Telecom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetTelecom() []*fhir.ContactPoint {
	if p == nil {
		return nil
	}
	return p.Telecom
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Patient) GetText() *fhir.Narrative {
	if p == nil {
		return nil
	}
	return p.Text
}

// A language which may be used to communicate with the patient about his or
// her health// A language which may be used to communicate with the patient about his or
// her health.// If no language is specified, this *implies* that the default local language
// is spoken. If you need to convey proficiency for multiple modes, then you
// need multiple Patient.Communication associations. For animals, language is
// not a relevant field, and should be absent from the instance. If the Patient
// does not speak the default local language, then the Interpreter Required
// Standard can be used to explicitly declare that an interpreter is required.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Patient.json
type PatientCommunication struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The ISO-639-1 alpha 2 code in lower case for the language, optionally
	// followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper
	// case; e.g. "en" for English, or "en-US" for American English versus "en-EN"
	// for England English.
	Language *fhir.CodeableConcept `fhirpath:"language"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Indicates whether or not the patient prefers this language (over other
	// languages he masters up a certain level).
	Preferred *fhir.Boolean `fhirpath:"preferred"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientCommunication) GetExtension() []*fhir.Extension {
	if pc == nil {
		return nil
	}
	return pc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientCommunication) GetID() string {
	if pc == nil {
		return ""
	}
	return pc.ID
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientCommunication) GetLanguage() *fhir.CodeableConcept {
	if pc == nil {
		return nil
	}
	return pc.Language
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientCommunication) GetModifierExtension() []*fhir.Extension {
	if pc == nil {
		return nil
	}
	return pc.ModifierExtension
}

// GetPreferred returns the value of the field Preferred.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientCommunication) GetPreferred() *fhir.Boolean {
	if pc == nil {
		return nil
	}
	return pc.Preferred
}

// A contact party (e.g. guardian, partner, friend) for the patient// A contact party (e.g. guardian, partner, friend) for the patient.// Contact covers all kinds of contact parties: family members, business
// contacts, guardians, caregivers. Not applicable to register pedigree and
// family ties beyond use of having contact.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Patient.json
type PatientContact struct {

	// Address for the contact person.
	Address *fhir.Address `fhirpath:"address"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Administrative Gender - the gender that the contact person is considered to
	// have for administration and record keeping purposes.
	Gender *fhir.Code `fhirpath:"gender"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A name associated with the contact person.
	Name *fhir.HumanName `fhirpath:"name"`

	// Organization on behalf of which the contact is acting or for which the
	// contact is working.
	Organization *fhir.Reference `fhirpath:"organization"`

	// The period during which this contact person or organization is valid to be
	// contacted relating to this patient.
	Period *fhir.Period `fhirpath:"period"`

	// The nature of the relationship between the patient and the contact person.
	Relationship []*fhir.CodeableConcept `fhirpath:"relationship"`

	// A contact detail for the person, e.g. a telephone number or an email
	// address.
	Telecom []*fhir.ContactPoint `fhirpath:"telecom"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAddress returns the value of the field Address.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientContact) GetAddress() *fhir.Address {
	if pc == nil {
		return nil
	}
	return pc.Address
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientContact) GetExtension() []*fhir.Extension {
	if pc == nil {
		return nil
	}
	return pc.Extension
}

// GetGender returns the value of the field Gender.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientContact) GetGender() *fhir.Code {
	if pc == nil {
		return nil
	}
	return pc.Gender
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientContact) GetID() string {
	if pc == nil {
		return ""
	}
	return pc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientContact) GetModifierExtension() []*fhir.Extension {
	if pc == nil {
		return nil
	}
	return pc.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientContact) GetName() *fhir.HumanName {
	if pc == nil {
		return nil
	}
	return pc.Name
}

// GetOrganization returns the value of the field Organization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientContact) GetOrganization() *fhir.Reference {
	if pc == nil {
		return nil
	}
	return pc.Organization
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientContact) GetPeriod() *fhir.Period {
	if pc == nil {
		return nil
	}
	return pc.Period
}

// GetRelationship returns the value of the field Relationship.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientContact) GetRelationship() []*fhir.CodeableConcept {
	if pc == nil {
		return nil
	}
	return pc.Relationship
}

// GetTelecom returns the value of the field Telecom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *PatientContact) GetTelecom() []*fhir.ContactPoint {
	if pc == nil {
		return nil
	}
	return pc.Telecom
}

// Link to another patient resource that concerns the same actual person// Link to another patient resource that concerns the same actual patient.// There is no assumption that linked patient records have mutual links.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Patient.json
type PatientLink struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The other patient resource that the link refers to.
	Other *fhir.Reference `fhirpath:"other"`

	// The type of link between this patient resource and another patient resource.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pl *PatientLink) GetExtension() []*fhir.Extension {
	if pl == nil {
		return nil
	}
	return pl.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pl *PatientLink) GetID() string {
	if pl == nil {
		return ""
	}
	return pl.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pl *PatientLink) GetModifierExtension() []*fhir.Extension {
	if pl == nil {
		return nil
	}
	return pl.ModifierExtension
}

// GetOther returns the value of the field Other.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pl *PatientLink) GetOther() *fhir.Reference {
	if pl == nil {
		return nil
	}
	return pl.Other
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pl *PatientLink) GetType() *fhir.Code {
	if pl == nil {
		return nil
	}
	return pl.Type
}
