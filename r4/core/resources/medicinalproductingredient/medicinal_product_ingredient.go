// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package medicinalproductingredient

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// An ingredient of a manufactured item or pharmaceutical product.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MedicinalProductIngredient
//   - Source File: StructureDefinition-MedicinalProductIngredient.json
type MedicinalProductIngredient struct {

	// If the ingredient is a known or suspected allergen.
	AllergenicIndicator *fhir.Boolean `fhirpath:"allergenicIndicator"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// The identifier(s) of this Ingredient that are assigned by business processes
	// and/or used to refer to it when a direct URL reference to the resource
	// itself is not appropriate.
	Identifier *fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Manufacturer of this Ingredient.
	Manufacturer []*fhir.Reference `fhirpath:"manufacturer"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Ingredient role e.g. Active ingredient, excipient.
	Role *fhir.CodeableConcept `fhirpath:"role"`

	// A specified substance that comprises this ingredient.
	SpecifiedSubstance []*MedicinalProductIngredientSpecifiedSubstance `fhirpath:"specifiedSubstance"`

	// The ingredient substance.
	Substance *MedicinalProductIngredientSubstance `fhirpath:"substance"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAllergenicIndicator returns the value of the field AllergenicIndicator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetAllergenicIndicator() *fhir.Boolean {
	if mpi == nil {
		return nil
	}
	return mpi.AllergenicIndicator
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetContained() []fhir.Resource {
	if mpi == nil {
		return nil
	}
	return mpi.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetExtension() []*fhir.Extension {
	if mpi == nil {
		return nil
	}
	return mpi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetID() string {
	if mpi == nil {
		return ""
	}
	return mpi.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetIdentifier() *fhir.Identifier {
	if mpi == nil {
		return nil
	}
	return mpi.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetImplicitRules() *fhir.URI {
	if mpi == nil {
		return nil
	}
	return mpi.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetLanguage() *fhir.Code {
	if mpi == nil {
		return nil
	}
	return mpi.Language
}

// GetManufacturer returns the value of the field Manufacturer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetManufacturer() []*fhir.Reference {
	if mpi == nil {
		return nil
	}
	return mpi.Manufacturer
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetMeta() *fhir.Meta {
	if mpi == nil {
		return nil
	}
	return mpi.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetModifierExtension() []*fhir.Extension {
	if mpi == nil {
		return nil
	}
	return mpi.ModifierExtension
}

// GetRole returns the value of the field Role.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetRole() *fhir.CodeableConcept {
	if mpi == nil {
		return nil
	}
	return mpi.Role
}

// GetSpecifiedSubstance returns the value of the field SpecifiedSubstance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetSpecifiedSubstance() []*MedicinalProductIngredientSpecifiedSubstance {
	if mpi == nil {
		return nil
	}
	return mpi.SpecifiedSubstance
}

// GetSubstance returns the value of the field Substance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetSubstance() *MedicinalProductIngredientSubstance {
	if mpi == nil {
		return nil
	}
	return mpi.Substance
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpi *MedicinalProductIngredient) GetText() *fhir.Narrative {
	if mpi == nil {
		return nil
	}
	return mpi.Text
}

// A specified substance that comprises this ingredient// A specified substance that comprises this ingredient.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductIngredient.json
type MedicinalProductIngredientSpecifiedSubstance struct {

	// The specified substance.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// Confidentiality level of the specified substance as the ingredient.
	Confidentiality *fhir.CodeableConcept `fhirpath:"confidentiality"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The group of specified substance, e.g. group 1 to 4.
	Group *fhir.CodeableConcept `fhirpath:"group"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Quantity of the substance or specified substance present in the manufactured
	// item or pharmaceutical product.
	Strength []*MedicinalProductIngredientSpecifiedSubstanceStrength `fhirpath:"strength"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpiss *MedicinalProductIngredientSpecifiedSubstance) GetCode() *fhir.CodeableConcept {
	if mpiss == nil {
		return nil
	}
	return mpiss.Code
}

// GetConfidentiality returns the value of the field Confidentiality.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpiss *MedicinalProductIngredientSpecifiedSubstance) GetConfidentiality() *fhir.CodeableConcept {
	if mpiss == nil {
		return nil
	}
	return mpiss.Confidentiality
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpiss *MedicinalProductIngredientSpecifiedSubstance) GetExtension() []*fhir.Extension {
	if mpiss == nil {
		return nil
	}
	return mpiss.Extension
}

// GetGroup returns the value of the field Group.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpiss *MedicinalProductIngredientSpecifiedSubstance) GetGroup() *fhir.CodeableConcept {
	if mpiss == nil {
		return nil
	}
	return mpiss.Group
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpiss *MedicinalProductIngredientSpecifiedSubstance) GetID() string {
	if mpiss == nil {
		return ""
	}
	return mpiss.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpiss *MedicinalProductIngredientSpecifiedSubstance) GetModifierExtension() []*fhir.Extension {
	if mpiss == nil {
		return nil
	}
	return mpiss.ModifierExtension
}

// GetStrength returns the value of the field Strength.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpiss *MedicinalProductIngredientSpecifiedSubstance) GetStrength() []*MedicinalProductIngredientSpecifiedSubstanceStrength {
	if mpiss == nil {
		return nil
	}
	return mpiss.Strength
}

// Quantity of the substance or specified substance present in the manufactured
// item or pharmaceutical product// Quantity of the substance or specified substance present in the manufactured
// item or pharmaceutical product.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductIngredient.json
type MedicinalProductIngredientSpecifiedSubstanceStrength struct {

	// The strength per unitary volume (or mass).
	Concentration *fhir.Ratio `fhirpath:"concentration"`

	// A lower limit for the strength per unitary volume (or mass), for when there
	// is a range. The concentration attribute then becomes the upper limit.
	ConcentrationLowLimit *fhir.Ratio `fhirpath:"concentrationLowLimit"`

	// The country or countries for which the strength range applies.
	Country []*fhir.CodeableConcept `fhirpath:"country"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// For when strength is measured at a particular point or distance.
	MeasurementPoint *fhir.String `fhirpath:"measurementPoint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity of substance in the unit of presentation, or in the volume (or
	// mass) of the single pharmaceutical product or manufactured item.
	Presentation *fhir.Ratio `fhirpath:"presentation"`

	// A lower limit for the quantity of substance in the unit of presentation. For
	// use when there is a range of strengths, this is the lower limit, with the
	// presentation attribute becoming the upper limit.
	PresentationLowLimit *fhir.Ratio `fhirpath:"presentationLowLimit"`

	// Strength expressed in terms of a reference substance.
	ReferenceStrength []*MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength `fhirpath:"referenceStrength"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetConcentration returns the value of the field Concentration.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) GetConcentration() *fhir.Ratio {
	if mpisss == nil {
		return nil
	}
	return mpisss.Concentration
}

// GetConcentrationLowLimit returns the value of the field ConcentrationLowLimit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) GetConcentrationLowLimit() *fhir.Ratio {
	if mpisss == nil {
		return nil
	}
	return mpisss.ConcentrationLowLimit
}

// GetCountry returns the value of the field Country.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) GetCountry() []*fhir.CodeableConcept {
	if mpisss == nil {
		return nil
	}
	return mpisss.Country
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) GetExtension() []*fhir.Extension {
	if mpisss == nil {
		return nil
	}
	return mpisss.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) GetID() string {
	if mpisss == nil {
		return ""
	}
	return mpisss.ID
}

// GetMeasurementPoint returns the value of the field MeasurementPoint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) GetMeasurementPoint() *fhir.String {
	if mpisss == nil {
		return nil
	}
	return mpisss.MeasurementPoint
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) GetModifierExtension() []*fhir.Extension {
	if mpisss == nil {
		return nil
	}
	return mpisss.ModifierExtension
}

// GetPresentation returns the value of the field Presentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) GetPresentation() *fhir.Ratio {
	if mpisss == nil {
		return nil
	}
	return mpisss.Presentation
}

// GetPresentationLowLimit returns the value of the field PresentationLowLimit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) GetPresentationLowLimit() *fhir.Ratio {
	if mpisss == nil {
		return nil
	}
	return mpisss.PresentationLowLimit
}

// GetReferenceStrength returns the value of the field ReferenceStrength.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) GetReferenceStrength() []*MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength {
	if mpisss == nil {
		return nil
	}
	return mpisss.ReferenceStrength
}

// Strength expressed in terms of a reference substance// Strength expressed in terms of a reference substance.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductIngredient.json
type MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength struct {

	// The country or countries for which the strength range applies.
	Country []*fhir.CodeableConcept `fhirpath:"country"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// For when strength is measured at a particular point or distance.
	MeasurementPoint *fhir.String `fhirpath:"measurementPoint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Strength expressed in terms of a reference substance.
	Strength *fhir.Ratio `fhirpath:"strength"`

	// Strength expressed in terms of a reference substance.
	StrengthLowLimit *fhir.Ratio `fhirpath:"strengthLowLimit"`

	// Relevant reference substance.
	Substance *fhir.CodeableConcept `fhirpath:"substance"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCountry returns the value of the field Country.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisssrs *MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) GetCountry() []*fhir.CodeableConcept {
	if mpisssrs == nil {
		return nil
	}
	return mpisssrs.Country
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisssrs *MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) GetExtension() []*fhir.Extension {
	if mpisssrs == nil {
		return nil
	}
	return mpisssrs.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisssrs *MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) GetID() string {
	if mpisssrs == nil {
		return ""
	}
	return mpisssrs.ID
}

// GetMeasurementPoint returns the value of the field MeasurementPoint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisssrs *MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) GetMeasurementPoint() *fhir.String {
	if mpisssrs == nil {
		return nil
	}
	return mpisssrs.MeasurementPoint
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisssrs *MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) GetModifierExtension() []*fhir.Extension {
	if mpisssrs == nil {
		return nil
	}
	return mpisssrs.ModifierExtension
}

// GetStrength returns the value of the field Strength.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisssrs *MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) GetStrength() *fhir.Ratio {
	if mpisssrs == nil {
		return nil
	}
	return mpisssrs.Strength
}

// GetStrengthLowLimit returns the value of the field StrengthLowLimit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisssrs *MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) GetStrengthLowLimit() *fhir.Ratio {
	if mpisssrs == nil {
		return nil
	}
	return mpisssrs.StrengthLowLimit
}

// GetSubstance returns the value of the field Substance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpisssrs *MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) GetSubstance() *fhir.CodeableConcept {
	if mpisssrs == nil {
		return nil
	}
	return mpisssrs.Substance
}

// The ingredient substance// The ingredient substance.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductIngredient.json
type MedicinalProductIngredientSubstance struct {

	// The ingredient substance.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpis *MedicinalProductIngredientSubstance) GetCode() *fhir.CodeableConcept {
	if mpis == nil {
		return nil
	}
	return mpis.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpis *MedicinalProductIngredientSubstance) GetExtension() []*fhir.Extension {
	if mpis == nil {
		return nil
	}
	return mpis.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpis *MedicinalProductIngredientSubstance) GetID() string {
	if mpis == nil {
		return ""
	}
	return mpis.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpis *MedicinalProductIngredientSubstance) GetModifierExtension() []*fhir.Extension {
	if mpis == nil {
		return nil
	}
	return mpis.ModifierExtension
}

func (mpi *MedicinalProductIngredient) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mpi *MedicinalProductIngredient) UnmarshalJSON(data []byte) error {
	var raw struct {
		AllergenicIndicator *fhir.Boolean     `json:"allergenicIndicator"`
		Contained           []fhir.Resource   `json:"contained"`
		Extension           []*fhir.Extension `json:"extension"`

		ID                 string                                          `json:"id"`
		Identifier         *fhir.Identifier                                `json:"identifier"`
		ImplicitRules      *fhir.URI                                       `json:"implicitRules"`
		Language           *fhir.Code                                      `json:"language"`
		Manufacturer       []*fhir.Reference                               `json:"manufacturer"`
		Meta               *fhir.Meta                                      `json:"meta"`
		ModifierExtension  []*fhir.Extension                               `json:"modifierExtension"`
		Role               *fhir.CodeableConcept                           `json:"role"`
		SpecifiedSubstance []*MedicinalProductIngredientSpecifiedSubstance `json:"specifiedSubstance"`
		Substance          *MedicinalProductIngredientSubstance            `json:"substance"`
		Text               *fhir.Narrative                                 `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mpi.AllergenicIndicator = raw.AllergenicIndicator
	mpi.Contained = raw.Contained
	mpi.Extension = raw.Extension
	mpi.ID = raw.ID
	mpi.Identifier = raw.Identifier
	mpi.ImplicitRules = raw.ImplicitRules
	mpi.Language = raw.Language
	mpi.Manufacturer = raw.Manufacturer
	mpi.Meta = raw.Meta
	mpi.ModifierExtension = raw.ModifierExtension
	mpi.Role = raw.Role
	mpi.SpecifiedSubstance = raw.SpecifiedSubstance
	mpi.Substance = raw.Substance
	mpi.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*MedicinalProductIngredient)(nil)
var _ json.Unmarshaler = (*MedicinalProductIngredient)(nil)

func (mpiss *MedicinalProductIngredientSpecifiedSubstance) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mpiss *MedicinalProductIngredientSpecifiedSubstance) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code            *fhir.CodeableConcept `json:"code"`
		Confidentiality *fhir.CodeableConcept `json:"confidentiality"`
		Extension       []*fhir.Extension     `json:"extension"`
		Group           *fhir.CodeableConcept `json:"group"`

		ID                string                                                  `json:"id"`
		ModifierExtension []*fhir.Extension                                       `json:"modifierExtension"`
		Strength          []*MedicinalProductIngredientSpecifiedSubstanceStrength `json:"strength"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mpiss.Code = raw.Code
	mpiss.Confidentiality = raw.Confidentiality
	mpiss.Extension = raw.Extension
	mpiss.Group = raw.Group
	mpiss.ID = raw.ID
	mpiss.ModifierExtension = raw.ModifierExtension
	mpiss.Strength = raw.Strength
	return nil
}

var _ json.Marshaler = (*MedicinalProductIngredientSpecifiedSubstance)(nil)
var _ json.Unmarshaler = (*MedicinalProductIngredientSpecifiedSubstance)(nil)

func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mpisss *MedicinalProductIngredientSpecifiedSubstanceStrength) UnmarshalJSON(data []byte) error {
	var raw struct {
		Concentration         *fhir.Ratio             `json:"concentration"`
		ConcentrationLowLimit *fhir.Ratio             `json:"concentrationLowLimit"`
		Country               []*fhir.CodeableConcept `json:"country"`
		Extension             []*fhir.Extension       `json:"extension"`

		ID                   string                                                                   `json:"id"`
		MeasurementPoint     *fhir.String                                                             `json:"measurementPoint"`
		ModifierExtension    []*fhir.Extension                                                        `json:"modifierExtension"`
		Presentation         *fhir.Ratio                                                              `json:"presentation"`
		PresentationLowLimit *fhir.Ratio                                                              `json:"presentationLowLimit"`
		ReferenceStrength    []*MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength `json:"referenceStrength"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mpisss.Concentration = raw.Concentration
	mpisss.ConcentrationLowLimit = raw.ConcentrationLowLimit
	mpisss.Country = raw.Country
	mpisss.Extension = raw.Extension
	mpisss.ID = raw.ID
	mpisss.MeasurementPoint = raw.MeasurementPoint
	mpisss.ModifierExtension = raw.ModifierExtension
	mpisss.Presentation = raw.Presentation
	mpisss.PresentationLowLimit = raw.PresentationLowLimit
	mpisss.ReferenceStrength = raw.ReferenceStrength
	return nil
}

var _ json.Marshaler = (*MedicinalProductIngredientSpecifiedSubstanceStrength)(nil)
var _ json.Unmarshaler = (*MedicinalProductIngredientSpecifiedSubstanceStrength)(nil)

func (mpisssrs *MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mpisssrs *MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) UnmarshalJSON(data []byte) error {
	var raw struct {
		Country   []*fhir.CodeableConcept `json:"country"`
		Extension []*fhir.Extension       `json:"extension"`

		ID                string                `json:"id"`
		MeasurementPoint  *fhir.String          `json:"measurementPoint"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Strength          *fhir.Ratio           `json:"strength"`
		StrengthLowLimit  *fhir.Ratio           `json:"strengthLowLimit"`
		Substance         *fhir.CodeableConcept `json:"substance"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mpisssrs.Country = raw.Country
	mpisssrs.Extension = raw.Extension
	mpisssrs.ID = raw.ID
	mpisssrs.MeasurementPoint = raw.MeasurementPoint
	mpisssrs.ModifierExtension = raw.ModifierExtension
	mpisssrs.Strength = raw.Strength
	mpisssrs.StrengthLowLimit = raw.StrengthLowLimit
	mpisssrs.Substance = raw.Substance
	return nil
}

var _ json.Marshaler = (*MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength)(nil)
var _ json.Unmarshaler = (*MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength)(nil)

func (mpis *MedicinalProductIngredientSubstance) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mpis *MedicinalProductIngredientSubstance) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *fhir.CodeableConcept `json:"code"`
		Extension []*fhir.Extension     `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mpis.Code = raw.Code
	mpis.Extension = raw.Extension
	mpis.ID = raw.ID
	mpis.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*MedicinalProductIngredientSubstance)(nil)
var _ json.Unmarshaler = (*MedicinalProductIngredientSubstance)(nil)
