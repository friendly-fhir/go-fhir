// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package binary

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A resource that represents the data of a single raw artifact as digital
// content accessible in its native format. A Binary resource can contain any
// content, whether text, image, pdf, zip archive, etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Binary
//   - Source File: StructureDefinition-Binary.json
type Binary struct {

	// MimeType of the binary content represented as a standard MimeType (BCP 13).
	ContentType *fhir.Code `fhirpath:"contentType"`

	// The actual content, base64 encoded.
	Data *fhir.Base64Binary `fhirpath:"data"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// This element identifies another resource that can be used as a proxy of the
	// security sensitivity to use when deciding and enforcing access control rules
	// for the Binary resource. Given that the Binary resource contains very few
	// elements that can be used to determine the sensitivity of the data and
	// relationships to individuals, the referenced resource stands in as a proxy
	// equivalent for this purpose. This referenced resource may be related to the
	// Binary (e.g. Media, DocumentReference), or may be some non-related Resource
	// purely as a security proxy. E.g. to identify that the binary resource
	// relates to a patient, and access should only be granted to applications that
	// have access to the patient.
	SecurityContext *fhir.Reference `fhirpath:"securityContext"`

	profileimpl.BaseResource
}

// GetContentType returns the value of the field ContentType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (b *Binary) GetContentType() *fhir.Code {
	if b == nil {
		return nil
	}
	return b.ContentType
}

// GetData returns the value of the field Data.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (b *Binary) GetData() *fhir.Base64Binary {
	if b == nil {
		return nil
	}
	return b.Data
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (b *Binary) GetID() string {
	if b == nil {
		return ""
	}
	return b.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (b *Binary) GetImplicitRules() *fhir.URI {
	if b == nil {
		return nil
	}
	return b.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (b *Binary) GetLanguage() *fhir.Code {
	if b == nil {
		return nil
	}
	return b.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (b *Binary) GetMeta() *fhir.Meta {
	if b == nil {
		return nil
	}
	return b.Meta
}

// GetSecurityContext returns the value of the field SecurityContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (b *Binary) GetSecurityContext() *fhir.Reference {
	if b == nil {
		return nil
	}
	return b.SecurityContext
}

func (b *Binary) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (b *Binary) UnmarshalJSON(data []byte) error {
	var raw struct {
		ContentType *fhir.Code         `json:"contentType"`
		Data        *fhir.Base64Binary `json:"data"`

		ID              string          `json:"id"`
		ImplicitRules   *fhir.URI       `json:"implicitRules"`
		Language        *fhir.Code      `json:"language"`
		Meta            *fhir.Meta      `json:"meta"`
		SecurityContext *fhir.Reference `json:"securityContext"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	b.ContentType = raw.ContentType
	b.Data = raw.Data
	b.ID = raw.ID
	b.ImplicitRules = raw.ImplicitRules
	b.Language = raw.Language
	b.Meta = raw.Meta
	b.SecurityContext = raw.SecurityContext
	return nil
}

var _ json.Marshaler = (*Binary)(nil)
var _ json.Unmarshaler = (*Binary)(nil)
