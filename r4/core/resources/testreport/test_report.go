// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package testreport

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A summary of information based on the results of executing a TestScript.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/TestReport
//   - Source File: StructureDefinition-TestReport.json
type TestReport struct {

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifier for the TestScript assigned for external purposes outside the
	// context of FHIR.
	Identifier *fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// When the TestScript was executed and this TestReport was generated.
	Issued *fhir.DateTime `fhirpath:"issued"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A free text natural language name identifying the executed TestScript.
	Name *fhir.String `fhirpath:"name"`

	// A participant in the test execution, either the execution engine, a client,
	// or a server.
	Participant []*TestReportParticipant `fhirpath:"participant"`

	// The overall result from the execution of the TestScript.
	Result *fhir.Code `fhirpath:"result"`

	// The final score (percentage of tests passed) resulting from the execution of
	// the TestScript.
	Score *fhir.Decimal `fhirpath:"score"`

	// The results of the series of required setup operations before the tests were
	// executed.
	Setup *TestReportSetup `fhirpath:"setup"`

	// The current state of this test report.
	Status *fhir.Code `fhirpath:"status"`

	// The results of the series of operations required to clean up after all the
	// tests were executed (successfully or otherwise).
	Teardown *TestReportTeardown `fhirpath:"teardown"`

	// A test executed from the test script.
	Test []*TestReportTest `fhirpath:"test"`

	// Ideally this is an absolute URL that is used to identify the
	// version-specific TestScript that was executed, matching the
	// `TestScript.url`.
	TestScript *fhir.Reference `fhirpath:"testScript"`

	// Name of the tester producing this report (Organization or individual).
	Tester *fhir.String `fhirpath:"tester"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetContained() []fhir.Resource {
	if tr == nil {
		return nil
	}
	return tr.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetExtension() []*fhir.Extension {
	if tr == nil {
		return nil
	}
	return tr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetID() string {
	if tr == nil {
		return ""
	}
	return tr.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetIdentifier() *fhir.Identifier {
	if tr == nil {
		return nil
	}
	return tr.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetImplicitRules() *fhir.URI {
	if tr == nil {
		return nil
	}
	return tr.ImplicitRules
}

// GetIssued returns the value of the field Issued.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetIssued() *fhir.DateTime {
	if tr == nil {
		return nil
	}
	return tr.Issued
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetLanguage() *fhir.Code {
	if tr == nil {
		return nil
	}
	return tr.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetMeta() *fhir.Meta {
	if tr == nil {
		return nil
	}
	return tr.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetModifierExtension() []*fhir.Extension {
	if tr == nil {
		return nil
	}
	return tr.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetName() *fhir.String {
	if tr == nil {
		return nil
	}
	return tr.Name
}

// GetParticipant returns the value of the field Participant.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetParticipant() []*TestReportParticipant {
	if tr == nil {
		return nil
	}
	return tr.Participant
}

// GetResult returns the value of the field Result.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetResult() *fhir.Code {
	if tr == nil {
		return nil
	}
	return tr.Result
}

// GetScore returns the value of the field Score.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetScore() *fhir.Decimal {
	if tr == nil {
		return nil
	}
	return tr.Score
}

// GetSetup returns the value of the field Setup.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetSetup() *TestReportSetup {
	if tr == nil {
		return nil
	}
	return tr.Setup
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetStatus() *fhir.Code {
	if tr == nil {
		return nil
	}
	return tr.Status
}

// GetTeardown returns the value of the field Teardown.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetTeardown() *TestReportTeardown {
	if tr == nil {
		return nil
	}
	return tr.Teardown
}

// GetTest returns the value of the field Test.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetTest() []*TestReportTest {
	if tr == nil {
		return nil
	}
	return tr.Test
}

// GetTestScript returns the value of the field TestScript.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetTestScript() *fhir.Reference {
	if tr == nil {
		return nil
	}
	return tr.TestScript
}

// GetTester returns the value of the field Tester.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetTester() *fhir.String {
	if tr == nil {
		return nil
	}
	return tr.Tester
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TestReport) GetText() *fhir.Narrative {
	if tr == nil {
		return nil
	}
	return tr.Text
}

// A participant in the test execution, either the execution engine, a client,
// or a server// A participant in the test execution, either the execution engine, a client,
// or a server.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestReport.json
type TestReportParticipant struct {

	// The display name of the participant.
	Display *fhir.String `fhirpath:"display"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type of participant.
	Type *fhir.Code `fhirpath:"type"`

	// The uri of the participant. An absolute URL is preferred.
	URI *fhir.URI `fhirpath:"uri"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDisplay returns the value of the field Display.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trp *TestReportParticipant) GetDisplay() *fhir.String {
	if trp == nil {
		return nil
	}
	return trp.Display
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trp *TestReportParticipant) GetExtension() []*fhir.Extension {
	if trp == nil {
		return nil
	}
	return trp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trp *TestReportParticipant) GetID() string {
	if trp == nil {
		return ""
	}
	return trp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trp *TestReportParticipant) GetModifierExtension() []*fhir.Extension {
	if trp == nil {
		return nil
	}
	return trp.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trp *TestReportParticipant) GetType() *fhir.Code {
	if trp == nil {
		return nil
	}
	return trp.Type
}

// GetURI returns the value of the field URI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trp *TestReportParticipant) GetURI() *fhir.URI {
	if trp == nil {
		return nil
	}
	return trp.URI
}

// The results of the series of required setup operations before the tests were
// executed// The results of the series of required setup operations before the tests were
// executed.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestReport.json
type TestReportSetup struct {

	// Action would contain either an operation or an assertion.
	Action []*TestReportSetupAction `fhirpath:"action"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAction returns the value of the field Action.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trs *TestReportSetup) GetAction() []*TestReportSetupAction {
	if trs == nil {
		return nil
	}
	return trs.Action
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trs *TestReportSetup) GetExtension() []*fhir.Extension {
	if trs == nil {
		return nil
	}
	return trs.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trs *TestReportSetup) GetID() string {
	if trs == nil {
		return ""
	}
	return trs.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trs *TestReportSetup) GetModifierExtension() []*fhir.Extension {
	if trs == nil {
		return nil
	}
	return trs.ModifierExtension
}

// A setup operation or assert that was executed// Action would contain either an operation or an assertion.// An action should contain either an operation or an assertion but not both.
// It can contain any number of variables.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestReport.json
type TestReportSetupAction struct {

	// The results of the assertion performed on the previous operations.
	Assert *TestReportSetupActionAssert `fhirpath:"assert"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The operation performed.
	Operation *TestReportSetupActionOperation `fhirpath:"operation"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAssert returns the value of the field Assert.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsa *TestReportSetupAction) GetAssert() *TestReportSetupActionAssert {
	if trsa == nil {
		return nil
	}
	return trsa.Assert
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsa *TestReportSetupAction) GetExtension() []*fhir.Extension {
	if trsa == nil {
		return nil
	}
	return trsa.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsa *TestReportSetupAction) GetID() string {
	if trsa == nil {
		return ""
	}
	return trsa.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsa *TestReportSetupAction) GetModifierExtension() []*fhir.Extension {
	if trsa == nil {
		return nil
	}
	return trsa.ModifierExtension
}

// GetOperation returns the value of the field Operation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsa *TestReportSetupAction) GetOperation() *TestReportSetupActionOperation {
	if trsa == nil {
		return nil
	}
	return trsa.Operation
}

// The assertion to perform// The results of the assertion performed on the previous operations.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestReport.json
type TestReportSetupActionAssert struct {

	// A link to further details on the result.
	Detail *fhir.String `fhirpath:"detail"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// An explanatory message associated with the result.
	Message *fhir.Markdown `fhirpath:"message"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The result of this assertion.
	Result *fhir.Code `fhirpath:"result"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsaa *TestReportSetupActionAssert) GetDetail() *fhir.String {
	if trsaa == nil {
		return nil
	}
	return trsaa.Detail
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsaa *TestReportSetupActionAssert) GetExtension() []*fhir.Extension {
	if trsaa == nil {
		return nil
	}
	return trsaa.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsaa *TestReportSetupActionAssert) GetID() string {
	if trsaa == nil {
		return ""
	}
	return trsaa.ID
}

// GetMessage returns the value of the field Message.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsaa *TestReportSetupActionAssert) GetMessage() *fhir.Markdown {
	if trsaa == nil {
		return nil
	}
	return trsaa.Message
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsaa *TestReportSetupActionAssert) GetModifierExtension() []*fhir.Extension {
	if trsaa == nil {
		return nil
	}
	return trsaa.ModifierExtension
}

// GetResult returns the value of the field Result.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsaa *TestReportSetupActionAssert) GetResult() *fhir.Code {
	if trsaa == nil {
		return nil
	}
	return trsaa.Result
}

// The operation to perform// The operation performed.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestReport.json
type TestReportSetupActionOperation struct {

	// A link to further details on the result.
	Detail *fhir.URI `fhirpath:"detail"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// An explanatory message associated with the result.
	Message *fhir.Markdown `fhirpath:"message"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The result of this operation.
	Result *fhir.Code `fhirpath:"result"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsao *TestReportSetupActionOperation) GetDetail() *fhir.URI {
	if trsao == nil {
		return nil
	}
	return trsao.Detail
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsao *TestReportSetupActionOperation) GetExtension() []*fhir.Extension {
	if trsao == nil {
		return nil
	}
	return trsao.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsao *TestReportSetupActionOperation) GetID() string {
	if trsao == nil {
		return ""
	}
	return trsao.ID
}

// GetMessage returns the value of the field Message.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsao *TestReportSetupActionOperation) GetMessage() *fhir.Markdown {
	if trsao == nil {
		return nil
	}
	return trsao.Message
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsao *TestReportSetupActionOperation) GetModifierExtension() []*fhir.Extension {
	if trsao == nil {
		return nil
	}
	return trsao.ModifierExtension
}

// GetResult returns the value of the field Result.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trsao *TestReportSetupActionOperation) GetResult() *fhir.Code {
	if trsao == nil {
		return nil
	}
	return trsao.Result
}

// The results of running the series of required clean up steps// The results of the series of operations required to clean up after all the
// tests were executed (successfully or otherwise).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestReport.json
type TestReportTeardown struct {

	// The teardown action will only contain an operation.
	Action []*TestReportTeardownAction `fhirpath:"action"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAction returns the value of the field Action.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trt *TestReportTeardown) GetAction() []*TestReportTeardownAction {
	if trt == nil {
		return nil
	}
	return trt.Action
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trt *TestReportTeardown) GetExtension() []*fhir.Extension {
	if trt == nil {
		return nil
	}
	return trt.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trt *TestReportTeardown) GetID() string {
	if trt == nil {
		return ""
	}
	return trt.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trt *TestReportTeardown) GetModifierExtension() []*fhir.Extension {
	if trt == nil {
		return nil
	}
	return trt.ModifierExtension
}

// One or more teardown operations performed// The teardown action will only contain an operation.// An action should contain either an operation or an assertion but not both.
// It can contain any number of variables.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestReport.json
type TestReportTeardownAction struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trta *TestReportTeardownAction) GetExtension() []*fhir.Extension {
	if trta == nil {
		return nil
	}
	return trta.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trta *TestReportTeardownAction) GetID() string {
	if trta == nil {
		return ""
	}
	return trta.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trta *TestReportTeardownAction) GetModifierExtension() []*fhir.Extension {
	if trta == nil {
		return nil
	}
	return trta.ModifierExtension
}

// A test executed from the test script// A test executed from the test script.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestReport.json
type TestReportTest struct {

	// Action would contain either an operation or an assertion.
	Action []*TestReportTestAction `fhirpath:"action"`

	// A short description of the test used by test engines for tracking and
	// reporting purposes.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of this test used for tracking/logging purposes by test engines.
	Name *fhir.String `fhirpath:"name"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAction returns the value of the field Action.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trt *TestReportTest) GetAction() []*TestReportTestAction {
	if trt == nil {
		return nil
	}
	return trt.Action
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trt *TestReportTest) GetDescription() *fhir.String {
	if trt == nil {
		return nil
	}
	return trt.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trt *TestReportTest) GetExtension() []*fhir.Extension {
	if trt == nil {
		return nil
	}
	return trt.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trt *TestReportTest) GetID() string {
	if trt == nil {
		return ""
	}
	return trt.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trt *TestReportTest) GetModifierExtension() []*fhir.Extension {
	if trt == nil {
		return nil
	}
	return trt.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trt *TestReportTest) GetName() *fhir.String {
	if trt == nil {
		return nil
	}
	return trt.Name
}

// A test operation or assert that was performed// Action would contain either an operation or an assertion.// An action should contain either an operation or an assertion but not both.
// It can contain any number of variables.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestReport.json
type TestReportTestAction struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trta *TestReportTestAction) GetExtension() []*fhir.Extension {
	if trta == nil {
		return nil
	}
	return trta.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trta *TestReportTestAction) GetID() string {
	if trta == nil {
		return ""
	}
	return trta.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (trta *TestReportTestAction) GetModifierExtension() []*fhir.Extension {
	if trta == nil {
		return nil
	}
	return trta.ModifierExtension
}

func (tr *TestReport) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (tr *TestReport) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contained []fhir.Resource   `json:"contained"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                   `json:"id"`
		Identifier        *fhir.Identifier         `json:"identifier"`
		ImplicitRules     *fhir.URI                `json:"implicitRules"`
		Issued            *fhir.DateTime           `json:"issued"`
		Language          *fhir.Code               `json:"language"`
		Meta              *fhir.Meta               `json:"meta"`
		ModifierExtension []*fhir.Extension        `json:"modifierExtension"`
		Name              *fhir.String             `json:"name"`
		Participant       []*TestReportParticipant `json:"participant"`
		Result            *fhir.Code               `json:"result"`
		Score             *fhir.Decimal            `json:"score"`
		Setup             *TestReportSetup         `json:"setup"`
		Status            *fhir.Code               `json:"status"`
		Teardown          *TestReportTeardown      `json:"teardown"`
		Test              []*TestReportTest        `json:"test"`
		TestScript        *fhir.Reference          `json:"testScript"`
		Tester            *fhir.String             `json:"tester"`
		Text              *fhir.Narrative          `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	tr.Contained = raw.Contained
	tr.Extension = raw.Extension
	tr.ID = raw.ID
	tr.Identifier = raw.Identifier
	tr.ImplicitRules = raw.ImplicitRules
	tr.Issued = raw.Issued
	tr.Language = raw.Language
	tr.Meta = raw.Meta
	tr.ModifierExtension = raw.ModifierExtension
	tr.Name = raw.Name
	tr.Participant = raw.Participant
	tr.Result = raw.Result
	tr.Score = raw.Score
	tr.Setup = raw.Setup
	tr.Status = raw.Status
	tr.Teardown = raw.Teardown
	tr.Test = raw.Test
	tr.TestScript = raw.TestScript
	tr.Tester = raw.Tester
	tr.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*TestReport)(nil)
var _ json.Unmarshaler = (*TestReport)(nil)

func (trp *TestReportParticipant) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (trp *TestReportParticipant) UnmarshalJSON(data []byte) error {
	var raw struct {
		Display   *fhir.String      `json:"display"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Type              *fhir.Code        `json:"type"`
		URI               *fhir.URI         `json:"uri"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	trp.Display = raw.Display
	trp.Extension = raw.Extension
	trp.ID = raw.ID
	trp.ModifierExtension = raw.ModifierExtension
	trp.Type = raw.Type
	trp.URI = raw.URI
	return nil
}

var _ json.Marshaler = (*TestReportParticipant)(nil)
var _ json.Unmarshaler = (*TestReportParticipant)(nil)

func (trs *TestReportSetup) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (trs *TestReportSetup) UnmarshalJSON(data []byte) error {
	var raw struct {
		Action    []*TestReportSetupAction `json:"action"`
		Extension []*fhir.Extension        `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	trs.Action = raw.Action
	trs.Extension = raw.Extension
	trs.ID = raw.ID
	trs.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*TestReportSetup)(nil)
var _ json.Unmarshaler = (*TestReportSetup)(nil)

func (trsa *TestReportSetupAction) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (trsa *TestReportSetupAction) UnmarshalJSON(data []byte) error {
	var raw struct {
		Assert    *TestReportSetupActionAssert `json:"assert"`
		Extension []*fhir.Extension            `json:"extension"`

		ID                string                          `json:"id"`
		ModifierExtension []*fhir.Extension               `json:"modifierExtension"`
		Operation         *TestReportSetupActionOperation `json:"operation"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	trsa.Assert = raw.Assert
	trsa.Extension = raw.Extension
	trsa.ID = raw.ID
	trsa.ModifierExtension = raw.ModifierExtension
	trsa.Operation = raw.Operation
	return nil
}

var _ json.Marshaler = (*TestReportSetupAction)(nil)
var _ json.Unmarshaler = (*TestReportSetupAction)(nil)

func (trsaa *TestReportSetupActionAssert) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (trsaa *TestReportSetupActionAssert) UnmarshalJSON(data []byte) error {
	var raw struct {
		Detail    *fhir.String      `json:"detail"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Message           *fhir.Markdown    `json:"message"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Result            *fhir.Code        `json:"result"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	trsaa.Detail = raw.Detail
	trsaa.Extension = raw.Extension
	trsaa.ID = raw.ID
	trsaa.Message = raw.Message
	trsaa.ModifierExtension = raw.ModifierExtension
	trsaa.Result = raw.Result
	return nil
}

var _ json.Marshaler = (*TestReportSetupActionAssert)(nil)
var _ json.Unmarshaler = (*TestReportSetupActionAssert)(nil)

func (trsao *TestReportSetupActionOperation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (trsao *TestReportSetupActionOperation) UnmarshalJSON(data []byte) error {
	var raw struct {
		Detail    *fhir.URI         `json:"detail"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Message           *fhir.Markdown    `json:"message"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Result            *fhir.Code        `json:"result"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	trsao.Detail = raw.Detail
	trsao.Extension = raw.Extension
	trsao.ID = raw.ID
	trsao.Message = raw.Message
	trsao.ModifierExtension = raw.ModifierExtension
	trsao.Result = raw.Result
	return nil
}

var _ json.Marshaler = (*TestReportSetupActionOperation)(nil)
var _ json.Unmarshaler = (*TestReportSetupActionOperation)(nil)

func (trt *TestReportTeardown) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (trt *TestReportTeardown) UnmarshalJSON(data []byte) error {
	var raw struct {
		Action    []*TestReportTeardownAction `json:"action"`
		Extension []*fhir.Extension           `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	trt.Action = raw.Action
	trt.Extension = raw.Extension
	trt.ID = raw.ID
	trt.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*TestReportTeardown)(nil)
var _ json.Unmarshaler = (*TestReportTeardown)(nil)

func (trta *TestReportTeardownAction) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (trta *TestReportTeardownAction) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	trta.Extension = raw.Extension
	trta.ID = raw.ID
	trta.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*TestReportTeardownAction)(nil)
var _ json.Unmarshaler = (*TestReportTeardownAction)(nil)

func (trt *TestReportTest) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (trt *TestReportTest) UnmarshalJSON(data []byte) error {
	var raw struct {
		Action      []*TestReportTestAction `json:"action"`
		Description *fhir.String            `json:"description"`
		Extension   []*fhir.Extension       `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Name              *fhir.String      `json:"name"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	trt.Action = raw.Action
	trt.Description = raw.Description
	trt.Extension = raw.Extension
	trt.ID = raw.ID
	trt.ModifierExtension = raw.ModifierExtension
	trt.Name = raw.Name
	return nil
}

var _ json.Marshaler = (*TestReportTest)(nil)
var _ json.Unmarshaler = (*TestReportTest)(nil)

func (trta *TestReportTestAction) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (trta *TestReportTestAction) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	trta.Extension = raw.Extension
	trta.ID = raw.ID
	trta.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*TestReportTestAction)(nil)
var _ json.Unmarshaler = (*TestReportTestAction)(nil)
