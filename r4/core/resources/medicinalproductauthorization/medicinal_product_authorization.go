// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package medicinalproductauthorization

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// The regulatory authorization of a medicinal product.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MedicinalProductAuthorization
//   - Source File: StructureDefinition-MedicinalProductAuthorization.json
type MedicinalProductAuthorization struct {

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The country in which the marketing authorization has been granted.
	Country []*fhir.CodeableConcept `fhirpath:"country"`

	// A period of time after authorization before generic product applicatiosn can
	// be submitted.
	DataExclusivityPeriod *fhir.Period `fhirpath:"dataExclusivityPeriod"`

	// The date when the first authorization was granted by a Medicines Regulatory
	// Agency.
	DateOfFirstAuthorization *fhir.DateTime `fhirpath:"dateOfFirstAuthorization"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Marketing Authorization Holder.
	Holder *fhir.Reference `fhirpath:"holder"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifier for the marketing authorization, as assigned by a
	// regulator.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Date of first marketing authorization for a company's new medicinal product
	// in any country in the World.
	InternationalBirthDate *fhir.DateTime `fhirpath:"internationalBirthDate"`

	// Jurisdiction within a country.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// Authorization in areas within a country.
	JurisdictionalAuthorization []*MedicinalProductAuthorizationJurisdictionalAuthorization `fhirpath:"jurisdictionalAuthorization"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The legal framework against which this authorization is granted.
	LegalBasis *fhir.CodeableConcept `fhirpath:"legalBasis"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The regulatory procedure for granting or amending a marketing authorization.
	Procedure *MedicinalProductAuthorizationProcedure `fhirpath:"procedure"`

	// Medicines Regulatory Agency.
	Regulator *fhir.Reference `fhirpath:"regulator"`

	// The date when a suspended the marketing or the marketing authorization of
	// the product is anticipated to be restored.
	RestoreDate *fhir.DateTime `fhirpath:"restoreDate"`

	// The status of the marketing authorization.
	Status *fhir.CodeableConcept `fhirpath:"status"`

	// The date at which the given status has become applicable.
	StatusDate *fhir.DateTime `fhirpath:"statusDate"`

	// The medicinal product that is being authorized.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// The beginning of the time period in which the marketing authorization is in
	// the specific status shall be specified A complete date consisting of day,
	// month and year shall be specified using the ISO 8601 date format.
	ValidityPeriod *fhir.Period `fhirpath:"validityPeriod"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetContained() []fhir.Resource {
	if mpa == nil {
		return nil
	}
	return mpa.Contained
}

// GetCountry returns the value of the field Country.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetCountry() []*fhir.CodeableConcept {
	if mpa == nil {
		return nil
	}
	return mpa.Country
}

// GetDataExclusivityPeriod returns the value of the field DataExclusivityPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetDataExclusivityPeriod() *fhir.Period {
	if mpa == nil {
		return nil
	}
	return mpa.DataExclusivityPeriod
}

// GetDateOfFirstAuthorization returns the value of the field DateOfFirstAuthorization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetDateOfFirstAuthorization() *fhir.DateTime {
	if mpa == nil {
		return nil
	}
	return mpa.DateOfFirstAuthorization
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetExtension() []*fhir.Extension {
	if mpa == nil {
		return nil
	}
	return mpa.Extension
}

// GetHolder returns the value of the field Holder.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetHolder() *fhir.Reference {
	if mpa == nil {
		return nil
	}
	return mpa.Holder
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetID() string {
	if mpa == nil {
		return ""
	}
	return mpa.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetIdentifier() []*fhir.Identifier {
	if mpa == nil {
		return nil
	}
	return mpa.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetImplicitRules() *fhir.URI {
	if mpa == nil {
		return nil
	}
	return mpa.ImplicitRules
}

// GetInternationalBirthDate returns the value of the field InternationalBirthDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetInternationalBirthDate() *fhir.DateTime {
	if mpa == nil {
		return nil
	}
	return mpa.InternationalBirthDate
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetJurisdiction() []*fhir.CodeableConcept {
	if mpa == nil {
		return nil
	}
	return mpa.Jurisdiction
}

// GetJurisdictionalAuthorization returns the value of the field JurisdictionalAuthorization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetJurisdictionalAuthorization() []*MedicinalProductAuthorizationJurisdictionalAuthorization {
	if mpa == nil {
		return nil
	}
	return mpa.JurisdictionalAuthorization
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetLanguage() *fhir.Code {
	if mpa == nil {
		return nil
	}
	return mpa.Language
}

// GetLegalBasis returns the value of the field LegalBasis.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetLegalBasis() *fhir.CodeableConcept {
	if mpa == nil {
		return nil
	}
	return mpa.LegalBasis
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetMeta() *fhir.Meta {
	if mpa == nil {
		return nil
	}
	return mpa.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetModifierExtension() []*fhir.Extension {
	if mpa == nil {
		return nil
	}
	return mpa.ModifierExtension
}

// GetProcedure returns the value of the field Procedure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetProcedure() *MedicinalProductAuthorizationProcedure {
	if mpa == nil {
		return nil
	}
	return mpa.Procedure
}

// GetRegulator returns the value of the field Regulator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetRegulator() *fhir.Reference {
	if mpa == nil {
		return nil
	}
	return mpa.Regulator
}

// GetRestoreDate returns the value of the field RestoreDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetRestoreDate() *fhir.DateTime {
	if mpa == nil {
		return nil
	}
	return mpa.RestoreDate
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetStatus() *fhir.CodeableConcept {
	if mpa == nil {
		return nil
	}
	return mpa.Status
}

// GetStatusDate returns the value of the field StatusDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetStatusDate() *fhir.DateTime {
	if mpa == nil {
		return nil
	}
	return mpa.StatusDate
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetSubject() *fhir.Reference {
	if mpa == nil {
		return nil
	}
	return mpa.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetText() *fhir.Narrative {
	if mpa == nil {
		return nil
	}
	return mpa.Text
}

// GetValidityPeriod returns the value of the field ValidityPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpa *MedicinalProductAuthorization) GetValidityPeriod() *fhir.Period {
	if mpa == nil {
		return nil
	}
	return mpa.ValidityPeriod
}

// Authorization in areas within a country// Authorization in areas within a country.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductAuthorization.json
type MedicinalProductAuthorizationJurisdictionalAuthorization struct {

	// Country of authorization.
	Country *fhir.CodeableConcept `fhirpath:"country"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The assigned number for the marketing authorization.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// Jurisdiction within a country.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The legal status of supply in a jurisdiction or region.
	LegalStatusOfSupply *fhir.CodeableConcept `fhirpath:"legalStatusOfSupply"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The start and expected end date of the authorization.
	ValidityPeriod *fhir.Period `fhirpath:"validityPeriod"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCountry returns the value of the field Country.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpaja *MedicinalProductAuthorizationJurisdictionalAuthorization) GetCountry() *fhir.CodeableConcept {
	if mpaja == nil {
		return nil
	}
	return mpaja.Country
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpaja *MedicinalProductAuthorizationJurisdictionalAuthorization) GetExtension() []*fhir.Extension {
	if mpaja == nil {
		return nil
	}
	return mpaja.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpaja *MedicinalProductAuthorizationJurisdictionalAuthorization) GetID() string {
	if mpaja == nil {
		return ""
	}
	return mpaja.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpaja *MedicinalProductAuthorizationJurisdictionalAuthorization) GetIdentifier() []*fhir.Identifier {
	if mpaja == nil {
		return nil
	}
	return mpaja.Identifier
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpaja *MedicinalProductAuthorizationJurisdictionalAuthorization) GetJurisdiction() []*fhir.CodeableConcept {
	if mpaja == nil {
		return nil
	}
	return mpaja.Jurisdiction
}

// GetLegalStatusOfSupply returns the value of the field LegalStatusOfSupply.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpaja *MedicinalProductAuthorizationJurisdictionalAuthorization) GetLegalStatusOfSupply() *fhir.CodeableConcept {
	if mpaja == nil {
		return nil
	}
	return mpaja.LegalStatusOfSupply
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpaja *MedicinalProductAuthorizationJurisdictionalAuthorization) GetModifierExtension() []*fhir.Extension {
	if mpaja == nil {
		return nil
	}
	return mpaja.ModifierExtension
}

// GetValidityPeriod returns the value of the field ValidityPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpaja *MedicinalProductAuthorizationJurisdictionalAuthorization) GetValidityPeriod() *fhir.Period {
	if mpaja == nil {
		return nil
	}
	return mpaja.ValidityPeriod
}

// The regulatory procedure for granting or amending a marketing authorization// The regulatory procedure for granting or amending a marketing authorization.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductAuthorization.json
type MedicinalProductAuthorizationProcedure struct {

	// Date of procedure.
	Date fhir.Element `fhirpath:"date"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Identifier for this procedure.
	Identifier *fhir.Identifier `fhirpath:"identifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Type of procedure.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpap *MedicinalProductAuthorizationProcedure) GetDate() fhir.Element {
	if mpap == nil {
		return nil
	}
	return mpap.Date
}

// GetDatePeriod returns the value of the field Date.
func (mpap *MedicinalProductAuthorizationProcedure) GetDatePeriod() *fhir.Period {
	if mpap == nil {
		return nil
	}
	val, ok := mpap.Date.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetDateDateTime returns the value of the field Date.
func (mpap *MedicinalProductAuthorizationProcedure) GetDateDateTime() *fhir.DateTime {
	if mpap == nil {
		return nil
	}
	val, ok := mpap.Date.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpap *MedicinalProductAuthorizationProcedure) GetExtension() []*fhir.Extension {
	if mpap == nil {
		return nil
	}
	return mpap.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpap *MedicinalProductAuthorizationProcedure) GetID() string {
	if mpap == nil {
		return ""
	}
	return mpap.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpap *MedicinalProductAuthorizationProcedure) GetIdentifier() *fhir.Identifier {
	if mpap == nil {
		return nil
	}
	return mpap.Identifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpap *MedicinalProductAuthorizationProcedure) GetModifierExtension() []*fhir.Extension {
	if mpap == nil {
		return nil
	}
	return mpap.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpap *MedicinalProductAuthorizationProcedure) GetType() *fhir.CodeableConcept {
	if mpap == nil {
		return nil
	}
	return mpap.Type
}
