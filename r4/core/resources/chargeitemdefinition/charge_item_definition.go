// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package chargeitemdefinition

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// The ChargeItemDefinition resource provides the properties that apply to the
// (billing) codes necessary to calculate costs and prices. The properties may
// differ largely depending on type and realm, therefore this resource gives
// only a rough structure and requires profiling for each type of billing code
// system.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ChargeItemDefinition
//   - Source File: StructureDefinition-ChargeItemDefinition.json
type ChargeItemDefinition struct {

	// Expressions that describe applicability criteria for the billing code.
	Applicability []*ChargeItemDefinitionApplicability `fhirpath:"applicability"`

	// The date on which the resource content was approved by the publisher.
	// Approval happens once when the content is officially approved for usage.
	ApprovalDate *fhir.Date `fhirpath:"approvalDate"`

	// The defined billing details in this resource pertain to the given billing
	// code.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the charge item definition and/or its
	// contents. Copyright statements are generally legal restrictions on the use
	// and publishing of the charge item definition.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the charge item definition was
	// published. The date must change when the business version changes and it
	// must change if the status code changes. In addition, it should change when
	// the substantive content of the charge item definition changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// The URL pointing to an externally-defined charge item definition that is
	// adhered to in whole or in part by this definition.
	DerivedFromURI []*fhir.URI `fhirpath:"derivedFromUri"`

	// A free text natural language description of the charge item definition from
	// a consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// The period during which the charge item definition content was or is planned
	// to be in active use.
	EffectivePeriod *fhir.Period `fhirpath:"effectivePeriod"`

	// A Boolean value to indicate that this charge item definition is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to
	// be used for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this charge item definition
	// when it is represented in other formats, or referenced in a specification,
	// model, design or an instance.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The defined billing details in this resource pertain to the given product
	// instance(s).
	Instance []*fhir.Reference `fhirpath:"instance"`

	// A legal or geographic region in which the charge item definition is intended
	// to be used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate *fhir.Date `fhirpath:"lastReviewDate"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A larger definition of which this particular definition is a component or
	// step.
	PartOf []*fhir.Canonical `fhirpath:"partOf"`

	// Group of properties which are applicable under the same conditions. If no
	// applicability rules are established for the group, then all properties
	// always apply.
	PropertyGroup []*ChargeItemDefinitionPropertyGroup `fhirpath:"propertyGroup"`

	// The name of the organization or individual that published the charge item
	// definition.
	Publisher *fhir.String `fhirpath:"publisher"`

	// As new versions of a protocol or guideline are defined, allows
	// identification of what versions are replaced by a new instance.
	Replaces []*fhir.Canonical `fhirpath:"replaces"`

	// The current state of the ChargeItemDefinition.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the charge item definition.
	Title *fhir.String `fhirpath:"title"`

	// An absolute URI that is used to identify this charge item definition when it
	// is referenced in a specification, model, design or an instance; also called
	// its canonical identifier. This SHOULD be globally unique and SHOULD be a
	// literal address at which at which an authoritative instance of this charge
	// item definition is (or will be) published. This URL can be the target of a
	// canonical reference. It SHALL remain the same when the charge item
	// definition is stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate charge
	// item definition instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the charge item
	// definition when it is referenced in a specification, model, design or
	// instance. This is an arbitrary value managed by the charge item definition
	// author and is not expected to be globally unique. For example, it might be a
	// timestamp (e.g. yyyymmdd) if a managed version is not available. There is
	// also no expectation that versions can be placed in a lexicographical
	// sequence. To provide a version consistent with the Decision Support Service
	// specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more
	// information on versioning knowledge assets, refer to the Decision Support
	// Service specification. Note that a version is required for non-experimental
	// active assets.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetApplicability returns the value of the field Applicability.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetApplicability() []*ChargeItemDefinitionApplicability {
	if cid == nil {
		return nil
	}
	return cid.Applicability
}

// GetApprovalDate returns the value of the field ApprovalDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetApprovalDate() *fhir.Date {
	if cid == nil {
		return nil
	}
	return cid.ApprovalDate
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetCode() *fhir.CodeableConcept {
	if cid == nil {
		return nil
	}
	return cid.Code
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetContact() []*fhir.ContactDetail {
	if cid == nil {
		return nil
	}
	return cid.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetContained() []fhir.Resource {
	if cid == nil {
		return nil
	}
	return cid.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetCopyright() *fhir.Markdown {
	if cid == nil {
		return nil
	}
	return cid.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetDate() *fhir.DateTime {
	if cid == nil {
		return nil
	}
	return cid.Date
}

// GetDerivedFromURI returns the value of the field DerivedFromURI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetDerivedFromURI() []*fhir.URI {
	if cid == nil {
		return nil
	}
	return cid.DerivedFromURI
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetDescription() *fhir.Markdown {
	if cid == nil {
		return nil
	}
	return cid.Description
}

// GetEffectivePeriod returns the value of the field EffectivePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetEffectivePeriod() *fhir.Period {
	if cid == nil {
		return nil
	}
	return cid.EffectivePeriod
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetExperimental() *fhir.Boolean {
	if cid == nil {
		return nil
	}
	return cid.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetExtension() []*fhir.Extension {
	if cid == nil {
		return nil
	}
	return cid.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetID() string {
	if cid == nil {
		return ""
	}
	return cid.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetIdentifier() []*fhir.Identifier {
	if cid == nil {
		return nil
	}
	return cid.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetImplicitRules() *fhir.URI {
	if cid == nil {
		return nil
	}
	return cid.ImplicitRules
}

// GetInstance returns the value of the field Instance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetInstance() []*fhir.Reference {
	if cid == nil {
		return nil
	}
	return cid.Instance
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetJurisdiction() []*fhir.CodeableConcept {
	if cid == nil {
		return nil
	}
	return cid.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetLanguage() *fhir.Code {
	if cid == nil {
		return nil
	}
	return cid.Language
}

// GetLastReviewDate returns the value of the field LastReviewDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetLastReviewDate() *fhir.Date {
	if cid == nil {
		return nil
	}
	return cid.LastReviewDate
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetMeta() *fhir.Meta {
	if cid == nil {
		return nil
	}
	return cid.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetModifierExtension() []*fhir.Extension {
	if cid == nil {
		return nil
	}
	return cid.ModifierExtension
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetPartOf() []*fhir.Canonical {
	if cid == nil {
		return nil
	}
	return cid.PartOf
}

// GetPropertyGroup returns the value of the field PropertyGroup.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetPropertyGroup() []*ChargeItemDefinitionPropertyGroup {
	if cid == nil {
		return nil
	}
	return cid.PropertyGroup
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetPublisher() *fhir.String {
	if cid == nil {
		return nil
	}
	return cid.Publisher
}

// GetReplaces returns the value of the field Replaces.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetReplaces() []*fhir.Canonical {
	if cid == nil {
		return nil
	}
	return cid.Replaces
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetStatus() *fhir.Code {
	if cid == nil {
		return nil
	}
	return cid.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetText() *fhir.Narrative {
	if cid == nil {
		return nil
	}
	return cid.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetTitle() *fhir.String {
	if cid == nil {
		return nil
	}
	return cid.Title
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetURL() *fhir.URI {
	if cid == nil {
		return nil
	}
	return cid.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetUseContext() []*fhir.UsageContext {
	if cid == nil {
		return nil
	}
	return cid.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ChargeItemDefinition) GetVersion() *fhir.String {
	if cid == nil {
		return nil
	}
	return cid.Version
}

// Whether or not the billing code is applicable// Expressions that describe applicability criteria for the billing code.// The applicability conditions can be used to ascertain whether a billing item
// is allowed in a specific context. E.g. some billing codes may only be
// applicable in out-patient settings, only to male/female patients or only to
// children.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ChargeItemDefinition.json
type ChargeItemDefinitionApplicability struct {

	// A brief, natural language description of the condition that effectively
	// communicates the intended semantics.
	Description *fhir.String `fhirpath:"description"`

	// An expression that returns true or false, indicating whether the condition
	// is satisfied. When using FHIRPath expressions, the %context environment
	// variable must be replaced at runtime with the ChargeItem resource to which
	// this definition is applied.
	Expression *fhir.String `fhirpath:"expression"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The media type of the language for the expression, e.g. "text/cql" for
	// Clinical Query Language expressions or "text/fhirpath" for FHIRPath
	// expressions.
	Language *fhir.String `fhirpath:"language"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cida *ChargeItemDefinitionApplicability) GetDescription() *fhir.String {
	if cida == nil {
		return nil
	}
	return cida.Description
}

// GetExpression returns the value of the field Expression.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cida *ChargeItemDefinitionApplicability) GetExpression() *fhir.String {
	if cida == nil {
		return nil
	}
	return cida.Expression
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cida *ChargeItemDefinitionApplicability) GetExtension() []*fhir.Extension {
	if cida == nil {
		return nil
	}
	return cida.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cida *ChargeItemDefinitionApplicability) GetID() string {
	if cida == nil {
		return ""
	}
	return cida.ID
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cida *ChargeItemDefinitionApplicability) GetLanguage() *fhir.String {
	if cida == nil {
		return nil
	}
	return cida.Language
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cida *ChargeItemDefinitionApplicability) GetModifierExtension() []*fhir.Extension {
	if cida == nil {
		return nil
	}
	return cida.ModifierExtension
}

// Group of properties which are applicable under the same conditions// Group of properties which are applicable under the same conditions. If no
// applicability rules are established for the group, then all properties
// always apply.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ChargeItemDefinition.json
type ChargeItemDefinitionPropertyGroup struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The price for a ChargeItem may be calculated as a base price with
	// surcharges/deductions that apply in certain conditions. A
	// ChargeItemDefinition resource that defines the prices, factors and
	// conditions that apply to a billing code is currently under development. The
	// priceComponent element can be used to offer transparency to the recipient of
	// the Invoice of how the prices have been calculated.
	PriceComponent []*ChargeItemDefinitionPropertyGroupPriceComponent `fhirpath:"priceComponent"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpg *ChargeItemDefinitionPropertyGroup) GetExtension() []*fhir.Extension {
	if cidpg == nil {
		return nil
	}
	return cidpg.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpg *ChargeItemDefinitionPropertyGroup) GetID() string {
	if cidpg == nil {
		return ""
	}
	return cidpg.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpg *ChargeItemDefinitionPropertyGroup) GetModifierExtension() []*fhir.Extension {
	if cidpg == nil {
		return nil
	}
	return cidpg.ModifierExtension
}

// GetPriceComponent returns the value of the field PriceComponent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpg *ChargeItemDefinitionPropertyGroup) GetPriceComponent() []*ChargeItemDefinitionPropertyGroupPriceComponent {
	if cidpg == nil {
		return nil
	}
	return cidpg.PriceComponent
}

// Components of total line item price// The price for a ChargeItem may be calculated as a base price with
// surcharges/deductions that apply in certain conditions. A
// ChargeItemDefinition resource that defines the prices, factors and
// conditions that apply to a billing code is currently under development. The
// priceComponent element can be used to offer transparency to the recipient of
// the Invoice of how the prices have been calculated.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ChargeItemDefinition.json
type ChargeItemDefinitionPropertyGroupPriceComponent struct {

	// The amount calculated for this component.
	Amount *fhir.Money `fhirpath:"amount"`

	// A code that identifies the component. Codes may be used to differentiate
	// between kinds of taxes, surcharges, discounts etc.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The factor that has been applied on the base price for calculating this
	// component.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// This code identifies the type of the component.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpgpc *ChargeItemDefinitionPropertyGroupPriceComponent) GetAmount() *fhir.Money {
	if cidpgpc == nil {
		return nil
	}
	return cidpgpc.Amount
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpgpc *ChargeItemDefinitionPropertyGroupPriceComponent) GetCode() *fhir.CodeableConcept {
	if cidpgpc == nil {
		return nil
	}
	return cidpgpc.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpgpc *ChargeItemDefinitionPropertyGroupPriceComponent) GetExtension() []*fhir.Extension {
	if cidpgpc == nil {
		return nil
	}
	return cidpgpc.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpgpc *ChargeItemDefinitionPropertyGroupPriceComponent) GetFactor() *fhir.Decimal {
	if cidpgpc == nil {
		return nil
	}
	return cidpgpc.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpgpc *ChargeItemDefinitionPropertyGroupPriceComponent) GetID() string {
	if cidpgpc == nil {
		return ""
	}
	return cidpgpc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpgpc *ChargeItemDefinitionPropertyGroupPriceComponent) GetModifierExtension() []*fhir.Extension {
	if cidpgpc == nil {
		return nil
	}
	return cidpgpc.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidpgpc *ChargeItemDefinitionPropertyGroupPriceComponent) GetType() *fhir.Code {
	if cidpgpc == nil {
		return nil
	}
	return cidpgpc.Type
}
