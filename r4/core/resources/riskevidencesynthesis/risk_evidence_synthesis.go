// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package riskevidencesynthesis

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// The RiskEvidenceSynthesis resource describes the likelihood of an outcome in
// a population plus exposure state where the risk estimate is derived from a
// combination of research studies.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/RiskEvidenceSynthesis
//   - Source File: StructureDefinition-RiskEvidenceSynthesis.json
type RiskEvidenceSynthesis struct {

	// The date on which the resource content was approved by the publisher.
	// Approval happens once when the content is officially approved for usage.
	ApprovalDate *fhir.Date `fhirpath:"approvalDate"`

	// An individiual or organization primarily involved in the creation and
	// maintenance of the content.
	Author []*fhir.ContactDetail `fhirpath:"author"`

	// A description of the certainty of the risk estimate.
	Certainty []*RiskEvidenceSynthesisCertainty `fhirpath:"certainty"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the risk evidence synthesis and/or its
	// contents. Copyright statements are generally legal restrictions on the use
	// and publishing of the risk evidence synthesis.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the risk evidence synthesis was
	// published. The date must change when the business version changes and it
	// must change if the status code changes. In addition, it should change when
	// the substantive content of the risk evidence synthesis changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the risk evidence synthesis from
	// a consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// An individual or organization primarily responsible for internal coherence
	// of the content.
	Editor []*fhir.ContactDetail `fhirpath:"editor"`

	// The period during which the risk evidence synthesis content was or is
	// planned to be in active use.
	EffectivePeriod *fhir.Period `fhirpath:"effectivePeriod"`

	// An individual or organization responsible for officially endorsing the
	// content for use in some setting.
	Endorser []*fhir.ContactDetail `fhirpath:"endorser"`

	// A reference to a EvidenceVariable resource that defines the exposure for the
	// research.
	Exposure *fhir.Reference `fhirpath:"exposure"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this risk evidence synthesis
	// when it is represented in other formats, or referenced in a specification,
	// model, design or an instance.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A legal or geographic region in which the risk evidence synthesis is
	// intended to be used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate *fhir.Date `fhirpath:"lastReviewDate"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the risk evidence synthesis. This name
	// should be usable as an identifier for the module by machine processing
	// applications such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// A human-readable string to clarify or explain concepts about the resource.
	Note []*fhir.Annotation `fhirpath:"note"`

	// A reference to a EvidenceVariable resomece that defines the outcome for the
	// research.
	Outcome *fhir.Reference `fhirpath:"outcome"`

	// A reference to a EvidenceVariable resource that defines the population for
	// the research.
	Population *fhir.Reference `fhirpath:"population"`

	// The name of the organization or individual that published the risk evidence
	// synthesis.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Related artifacts such as additional documentation, justification, or
	// bibliographic references.
	RelatedArtifact []*fhir.RelatedArtifact `fhirpath:"relatedArtifact"`

	// An individual or organization primarily responsible for review of some
	// aspect of the content.
	Reviewer []*fhir.ContactDetail `fhirpath:"reviewer"`

	// The estimated risk of the outcome.
	RiskEstimate *RiskEvidenceSynthesisRiskEstimate `fhirpath:"riskEstimate"`

	// A description of the size of the sample involved in the synthesis.
	SampleSize *RiskEvidenceSynthesisSampleSize `fhirpath:"sampleSize"`

	// The status of this risk evidence synthesis. Enables tracking the life-cycle
	// of the content.
	Status *fhir.Code `fhirpath:"status"`

	// Type of study eg randomized trial.
	StudyType *fhir.CodeableConcept `fhirpath:"studyType"`

	// Type of synthesis eg meta-analysis.
	SynthesisType *fhir.CodeableConcept `fhirpath:"synthesisType"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the risk evidence synthesis.
	Title *fhir.String `fhirpath:"title"`

	// Descriptive topics related to the content of the RiskEvidenceSynthesis.
	// Topics provide a high-level categorization grouping types of
	// EffectEvidenceSynthesiss that can be useful for filtering and searching.
	Topic []*fhir.CodeableConcept `fhirpath:"topic"`

	// An absolute URI that is used to identify this risk evidence synthesis when
	// it is referenced in a specification, model, design or an instance; also
	// called its canonical identifier. This SHOULD be globally unique and SHOULD
	// be a literal address at which at which an authoritative instance of this
	// risk evidence synthesis is (or will be) published. This URL can be the
	// target of a canonical reference. It SHALL remain the same when the risk
	// evidence synthesis is stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate risk
	// evidence synthesis instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the risk evidence
	// synthesis when it is referenced in a specification, model, design or
	// instance. This is an arbitrary value managed by the risk evidence synthesis
	// author and is not expected to be globally unique. For example, it might be a
	// timestamp (e.g. yyyymmdd) if a managed version is not available. There is
	// also no expectation that versions can be placed in a lexicographical
	// sequence.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetApprovalDate returns the value of the field ApprovalDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetApprovalDate() *fhir.Date {
	if res == nil {
		return nil
	}
	return res.ApprovalDate
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetAuthor() []*fhir.ContactDetail {
	if res == nil {
		return nil
	}
	return res.Author
}

// GetCertainty returns the value of the field Certainty.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetCertainty() []*RiskEvidenceSynthesisCertainty {
	if res == nil {
		return nil
	}
	return res.Certainty
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetContact() []*fhir.ContactDetail {
	if res == nil {
		return nil
	}
	return res.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetContained() []fhir.Resource {
	if res == nil {
		return nil
	}
	return res.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetCopyright() *fhir.Markdown {
	if res == nil {
		return nil
	}
	return res.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetDate() *fhir.DateTime {
	if res == nil {
		return nil
	}
	return res.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetDescription() *fhir.Markdown {
	if res == nil {
		return nil
	}
	return res.Description
}

// GetEditor returns the value of the field Editor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetEditor() []*fhir.ContactDetail {
	if res == nil {
		return nil
	}
	return res.Editor
}

// GetEffectivePeriod returns the value of the field EffectivePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetEffectivePeriod() *fhir.Period {
	if res == nil {
		return nil
	}
	return res.EffectivePeriod
}

// GetEndorser returns the value of the field Endorser.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetEndorser() []*fhir.ContactDetail {
	if res == nil {
		return nil
	}
	return res.Endorser
}

// GetExposure returns the value of the field Exposure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetExposure() *fhir.Reference {
	if res == nil {
		return nil
	}
	return res.Exposure
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetExtension() []*fhir.Extension {
	if res == nil {
		return nil
	}
	return res.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetID() string {
	if res == nil {
		return ""
	}
	return res.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetIdentifier() []*fhir.Identifier {
	if res == nil {
		return nil
	}
	return res.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetImplicitRules() *fhir.URI {
	if res == nil {
		return nil
	}
	return res.ImplicitRules
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetJurisdiction() []*fhir.CodeableConcept {
	if res == nil {
		return nil
	}
	return res.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetLanguage() *fhir.Code {
	if res == nil {
		return nil
	}
	return res.Language
}

// GetLastReviewDate returns the value of the field LastReviewDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetLastReviewDate() *fhir.Date {
	if res == nil {
		return nil
	}
	return res.LastReviewDate
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetMeta() *fhir.Meta {
	if res == nil {
		return nil
	}
	return res.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetModifierExtension() []*fhir.Extension {
	if res == nil {
		return nil
	}
	return res.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetName() *fhir.String {
	if res == nil {
		return nil
	}
	return res.Name
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetNote() []*fhir.Annotation {
	if res == nil {
		return nil
	}
	return res.Note
}

// GetOutcome returns the value of the field Outcome.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetOutcome() *fhir.Reference {
	if res == nil {
		return nil
	}
	return res.Outcome
}

// GetPopulation returns the value of the field Population.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetPopulation() *fhir.Reference {
	if res == nil {
		return nil
	}
	return res.Population
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetPublisher() *fhir.String {
	if res == nil {
		return nil
	}
	return res.Publisher
}

// GetRelatedArtifact returns the value of the field RelatedArtifact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetRelatedArtifact() []*fhir.RelatedArtifact {
	if res == nil {
		return nil
	}
	return res.RelatedArtifact
}

// GetReviewer returns the value of the field Reviewer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetReviewer() []*fhir.ContactDetail {
	if res == nil {
		return nil
	}
	return res.Reviewer
}

// GetRiskEstimate returns the value of the field RiskEstimate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetRiskEstimate() *RiskEvidenceSynthesisRiskEstimate {
	if res == nil {
		return nil
	}
	return res.RiskEstimate
}

// GetSampleSize returns the value of the field SampleSize.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetSampleSize() *RiskEvidenceSynthesisSampleSize {
	if res == nil {
		return nil
	}
	return res.SampleSize
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetStatus() *fhir.Code {
	if res == nil {
		return nil
	}
	return res.Status
}

// GetStudyType returns the value of the field StudyType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetStudyType() *fhir.CodeableConcept {
	if res == nil {
		return nil
	}
	return res.StudyType
}

// GetSynthesisType returns the value of the field SynthesisType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetSynthesisType() *fhir.CodeableConcept {
	if res == nil {
		return nil
	}
	return res.SynthesisType
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetText() *fhir.Narrative {
	if res == nil {
		return nil
	}
	return res.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetTitle() *fhir.String {
	if res == nil {
		return nil
	}
	return res.Title
}

// GetTopic returns the value of the field Topic.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetTopic() []*fhir.CodeableConcept {
	if res == nil {
		return nil
	}
	return res.Topic
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetURL() *fhir.URI {
	if res == nil {
		return nil
	}
	return res.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetUseContext() []*fhir.UsageContext {
	if res == nil {
		return nil
	}
	return res.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (res *RiskEvidenceSynthesis) GetVersion() *fhir.String {
	if res == nil {
		return nil
	}
	return res.Version
}

// How certain is the risk// A description of the certainty of the risk estimate.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-RiskEvidenceSynthesis.json
type RiskEvidenceSynthesisCertainty struct {

	// A description of a component of the overall certainty.
	CertaintySubcomponent []*RiskEvidenceSynthesisCertaintyCertaintySubcomponent `fhirpath:"certaintySubcomponent"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A human-readable string to clarify or explain concepts about the resource.
	Note []*fhir.Annotation `fhirpath:"note"`

	// A rating of the certainty of the effect estimate.
	Rating []*fhir.CodeableConcept `fhirpath:"rating"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCertaintySubcomponent returns the value of the field CertaintySubcomponent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resc *RiskEvidenceSynthesisCertainty) GetCertaintySubcomponent() []*RiskEvidenceSynthesisCertaintyCertaintySubcomponent {
	if resc == nil {
		return nil
	}
	return resc.CertaintySubcomponent
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resc *RiskEvidenceSynthesisCertainty) GetExtension() []*fhir.Extension {
	if resc == nil {
		return nil
	}
	return resc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resc *RiskEvidenceSynthesisCertainty) GetID() string {
	if resc == nil {
		return ""
	}
	return resc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resc *RiskEvidenceSynthesisCertainty) GetModifierExtension() []*fhir.Extension {
	if resc == nil {
		return nil
	}
	return resc.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resc *RiskEvidenceSynthesisCertainty) GetNote() []*fhir.Annotation {
	if resc == nil {
		return nil
	}
	return resc.Note
}

// GetRating returns the value of the field Rating.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resc *RiskEvidenceSynthesisCertainty) GetRating() []*fhir.CodeableConcept {
	if resc == nil {
		return nil
	}
	return resc.Rating
}

// A component that contributes to the overall certainty// A description of a component of the overall certainty.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-RiskEvidenceSynthesis.json
type RiskEvidenceSynthesisCertaintyCertaintySubcomponent struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A human-readable string to clarify or explain concepts about the resource.
	Note []*fhir.Annotation `fhirpath:"note"`

	// A rating of a subcomponent of rating certainty.
	Rating []*fhir.CodeableConcept `fhirpath:"rating"`

	// Type of subcomponent of certainty rating.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resccs *RiskEvidenceSynthesisCertaintyCertaintySubcomponent) GetExtension() []*fhir.Extension {
	if resccs == nil {
		return nil
	}
	return resccs.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resccs *RiskEvidenceSynthesisCertaintyCertaintySubcomponent) GetID() string {
	if resccs == nil {
		return ""
	}
	return resccs.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resccs *RiskEvidenceSynthesisCertaintyCertaintySubcomponent) GetModifierExtension() []*fhir.Extension {
	if resccs == nil {
		return nil
	}
	return resccs.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resccs *RiskEvidenceSynthesisCertaintyCertaintySubcomponent) GetNote() []*fhir.Annotation {
	if resccs == nil {
		return nil
	}
	return resccs.Note
}

// GetRating returns the value of the field Rating.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resccs *RiskEvidenceSynthesisCertaintyCertaintySubcomponent) GetRating() []*fhir.CodeableConcept {
	if resccs == nil {
		return nil
	}
	return resccs.Rating
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resccs *RiskEvidenceSynthesisCertaintyCertaintySubcomponent) GetType() *fhir.CodeableConcept {
	if resccs == nil {
		return nil
	}
	return resccs.Type
}

// What was the estimated risk// The estimated risk of the outcome.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-RiskEvidenceSynthesis.json
type RiskEvidenceSynthesisRiskEstimate struct {

	// The sample size for the group that was measured for this risk estimate.
	DenominatorCount *fhir.Integer `fhirpath:"denominatorCount"`

	// Human-readable summary of risk estimate.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The number of group members with the outcome of interest.
	NumeratorCount *fhir.Integer `fhirpath:"numeratorCount"`

	// A description of the precision of the estimate for the effect.
	PrecisionEstimate []*RiskEvidenceSynthesisRiskEstimatePrecisionEstimate `fhirpath:"precisionEstimate"`

	// Examples include proportion and mean.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// Specifies the UCUM unit for the outcome.
	UnitOfMeasure *fhir.CodeableConcept `fhirpath:"unitOfMeasure"`

	// The point estimate of the risk estimate.
	Value *fhir.Decimal `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDenominatorCount returns the value of the field DenominatorCount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resre *RiskEvidenceSynthesisRiskEstimate) GetDenominatorCount() *fhir.Integer {
	if resre == nil {
		return nil
	}
	return resre.DenominatorCount
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resre *RiskEvidenceSynthesisRiskEstimate) GetDescription() *fhir.String {
	if resre == nil {
		return nil
	}
	return resre.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resre *RiskEvidenceSynthesisRiskEstimate) GetExtension() []*fhir.Extension {
	if resre == nil {
		return nil
	}
	return resre.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resre *RiskEvidenceSynthesisRiskEstimate) GetID() string {
	if resre == nil {
		return ""
	}
	return resre.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resre *RiskEvidenceSynthesisRiskEstimate) GetModifierExtension() []*fhir.Extension {
	if resre == nil {
		return nil
	}
	return resre.ModifierExtension
}

// GetNumeratorCount returns the value of the field NumeratorCount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resre *RiskEvidenceSynthesisRiskEstimate) GetNumeratorCount() *fhir.Integer {
	if resre == nil {
		return nil
	}
	return resre.NumeratorCount
}

// GetPrecisionEstimate returns the value of the field PrecisionEstimate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resre *RiskEvidenceSynthesisRiskEstimate) GetPrecisionEstimate() []*RiskEvidenceSynthesisRiskEstimatePrecisionEstimate {
	if resre == nil {
		return nil
	}
	return resre.PrecisionEstimate
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resre *RiskEvidenceSynthesisRiskEstimate) GetType() *fhir.CodeableConcept {
	if resre == nil {
		return nil
	}
	return resre.Type
}

// GetUnitOfMeasure returns the value of the field UnitOfMeasure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resre *RiskEvidenceSynthesisRiskEstimate) GetUnitOfMeasure() *fhir.CodeableConcept {
	if resre == nil {
		return nil
	}
	return resre.UnitOfMeasure
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resre *RiskEvidenceSynthesisRiskEstimate) GetValue() *fhir.Decimal {
	if resre == nil {
		return nil
	}
	return resre.Value
}

// How precise the estimate is// A description of the precision of the estimate for the effect.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-RiskEvidenceSynthesis.json
type RiskEvidenceSynthesisRiskEstimatePrecisionEstimate struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Lower bound of confidence interval.
	From *fhir.Decimal `fhirpath:"from"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Use 95 for a 95% confidence interval.
	Level *fhir.Decimal `fhirpath:"level"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Upper bound of confidence interval.
	To *fhir.Decimal `fhirpath:"to"`

	// Examples include confidence interval and interquartile range.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resrepe *RiskEvidenceSynthesisRiskEstimatePrecisionEstimate) GetExtension() []*fhir.Extension {
	if resrepe == nil {
		return nil
	}
	return resrepe.Extension
}

// GetFrom returns the value of the field From.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resrepe *RiskEvidenceSynthesisRiskEstimatePrecisionEstimate) GetFrom() *fhir.Decimal {
	if resrepe == nil {
		return nil
	}
	return resrepe.From
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resrepe *RiskEvidenceSynthesisRiskEstimatePrecisionEstimate) GetID() string {
	if resrepe == nil {
		return ""
	}
	return resrepe.ID
}

// GetLevel returns the value of the field Level.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resrepe *RiskEvidenceSynthesisRiskEstimatePrecisionEstimate) GetLevel() *fhir.Decimal {
	if resrepe == nil {
		return nil
	}
	return resrepe.Level
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resrepe *RiskEvidenceSynthesisRiskEstimatePrecisionEstimate) GetModifierExtension() []*fhir.Extension {
	if resrepe == nil {
		return nil
	}
	return resrepe.ModifierExtension
}

// GetTo returns the value of the field To.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resrepe *RiskEvidenceSynthesisRiskEstimatePrecisionEstimate) GetTo() *fhir.Decimal {
	if resrepe == nil {
		return nil
	}
	return resrepe.To
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resrepe *RiskEvidenceSynthesisRiskEstimatePrecisionEstimate) GetType() *fhir.CodeableConcept {
	if resrepe == nil {
		return nil
	}
	return resrepe.Type
}

// What sample size was involved?// A description of the size of the sample involved in the synthesis.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-RiskEvidenceSynthesis.json
type RiskEvidenceSynthesisSampleSize struct {

	// Human-readable summary of sample size.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Number of participants included in this evidence synthesis.
	NumberOfParticipants *fhir.Integer `fhirpath:"numberOfParticipants"`

	// Number of studies included in this evidence synthesis.
	NumberOfStudies *fhir.Integer `fhirpath:"numberOfStudies"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resss *RiskEvidenceSynthesisSampleSize) GetDescription() *fhir.String {
	if resss == nil {
		return nil
	}
	return resss.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resss *RiskEvidenceSynthesisSampleSize) GetExtension() []*fhir.Extension {
	if resss == nil {
		return nil
	}
	return resss.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resss *RiskEvidenceSynthesisSampleSize) GetID() string {
	if resss == nil {
		return ""
	}
	return resss.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resss *RiskEvidenceSynthesisSampleSize) GetModifierExtension() []*fhir.Extension {
	if resss == nil {
		return nil
	}
	return resss.ModifierExtension
}

// GetNumberOfParticipants returns the value of the field NumberOfParticipants.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resss *RiskEvidenceSynthesisSampleSize) GetNumberOfParticipants() *fhir.Integer {
	if resss == nil {
		return nil
	}
	return resss.NumberOfParticipants
}

// GetNumberOfStudies returns the value of the field NumberOfStudies.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (resss *RiskEvidenceSynthesisSampleSize) GetNumberOfStudies() *fhir.Integer {
	if resss == nil {
		return nil
	}
	return resss.NumberOfStudies
}

func (res *RiskEvidenceSynthesis) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (res *RiskEvidenceSynthesis) UnmarshalJSON(data []byte) error {
	var raw struct {
		ApprovalDate    *fhir.Date                        `json:"approvalDate"`
		Author          []*fhir.ContactDetail             `json:"author"`
		Certainty       []*RiskEvidenceSynthesisCertainty `json:"certainty"`
		Contact         []*fhir.ContactDetail             `json:"contact"`
		Contained       []fhir.Resource                   `json:"contained"`
		Copyright       *fhir.Markdown                    `json:"copyright"`
		Date            *fhir.DateTime                    `json:"date"`
		Description     *fhir.Markdown                    `json:"description"`
		Editor          []*fhir.ContactDetail             `json:"editor"`
		EffectivePeriod *fhir.Period                      `json:"effectivePeriod"`
		Endorser        []*fhir.ContactDetail             `json:"endorser"`
		Exposure        *fhir.Reference                   `json:"exposure"`
		Extension       []*fhir.Extension                 `json:"extension"`

		ID                string                             `json:"id"`
		Identifier        []*fhir.Identifier                 `json:"identifier"`
		ImplicitRules     *fhir.URI                          `json:"implicitRules"`
		Jurisdiction      []*fhir.CodeableConcept            `json:"jurisdiction"`
		Language          *fhir.Code                         `json:"language"`
		LastReviewDate    *fhir.Date                         `json:"lastReviewDate"`
		Meta              *fhir.Meta                         `json:"meta"`
		ModifierExtension []*fhir.Extension                  `json:"modifierExtension"`
		Name              *fhir.String                       `json:"name"`
		Note              []*fhir.Annotation                 `json:"note"`
		Outcome           *fhir.Reference                    `json:"outcome"`
		Population        *fhir.Reference                    `json:"population"`
		Publisher         *fhir.String                       `json:"publisher"`
		RelatedArtifact   []*fhir.RelatedArtifact            `json:"relatedArtifact"`
		Reviewer          []*fhir.ContactDetail              `json:"reviewer"`
		RiskEstimate      *RiskEvidenceSynthesisRiskEstimate `json:"riskEstimate"`
		SampleSize        *RiskEvidenceSynthesisSampleSize   `json:"sampleSize"`
		Status            *fhir.Code                         `json:"status"`
		StudyType         *fhir.CodeableConcept              `json:"studyType"`
		SynthesisType     *fhir.CodeableConcept              `json:"synthesisType"`
		Text              *fhir.Narrative                    `json:"text"`
		Title             *fhir.String                       `json:"title"`
		Topic             []*fhir.CodeableConcept            `json:"topic"`
		URL               *fhir.URI                          `json:"url"`
		UseContext        []*fhir.UsageContext               `json:"useContext"`
		Version           *fhir.String                       `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	res.ApprovalDate = raw.ApprovalDate
	res.Author = raw.Author
	res.Certainty = raw.Certainty
	res.Contact = raw.Contact
	res.Contained = raw.Contained
	res.Copyright = raw.Copyright
	res.Date = raw.Date
	res.Description = raw.Description
	res.Editor = raw.Editor
	res.EffectivePeriod = raw.EffectivePeriod
	res.Endorser = raw.Endorser
	res.Exposure = raw.Exposure
	res.Extension = raw.Extension
	res.ID = raw.ID
	res.Identifier = raw.Identifier
	res.ImplicitRules = raw.ImplicitRules
	res.Jurisdiction = raw.Jurisdiction
	res.Language = raw.Language
	res.LastReviewDate = raw.LastReviewDate
	res.Meta = raw.Meta
	res.ModifierExtension = raw.ModifierExtension
	res.Name = raw.Name
	res.Note = raw.Note
	res.Outcome = raw.Outcome
	res.Population = raw.Population
	res.Publisher = raw.Publisher
	res.RelatedArtifact = raw.RelatedArtifact
	res.Reviewer = raw.Reviewer
	res.RiskEstimate = raw.RiskEstimate
	res.SampleSize = raw.SampleSize
	res.Status = raw.Status
	res.StudyType = raw.StudyType
	res.SynthesisType = raw.SynthesisType
	res.Text = raw.Text
	res.Title = raw.Title
	res.Topic = raw.Topic
	res.URL = raw.URL
	res.UseContext = raw.UseContext
	res.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*RiskEvidenceSynthesis)(nil)
var _ json.Unmarshaler = (*RiskEvidenceSynthesis)(nil)

func (resc *RiskEvidenceSynthesisCertainty) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (resc *RiskEvidenceSynthesisCertainty) UnmarshalJSON(data []byte) error {
	var raw struct {
		CertaintySubcomponent []*RiskEvidenceSynthesisCertaintyCertaintySubcomponent `json:"certaintySubcomponent"`
		Extension             []*fhir.Extension                                      `json:"extension"`

		ID                string                  `json:"id"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Note              []*fhir.Annotation      `json:"note"`
		Rating            []*fhir.CodeableConcept `json:"rating"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	resc.CertaintySubcomponent = raw.CertaintySubcomponent
	resc.Extension = raw.Extension
	resc.ID = raw.ID
	resc.ModifierExtension = raw.ModifierExtension
	resc.Note = raw.Note
	resc.Rating = raw.Rating
	return nil
}

var _ json.Marshaler = (*RiskEvidenceSynthesisCertainty)(nil)
var _ json.Unmarshaler = (*RiskEvidenceSynthesisCertainty)(nil)

func (resccs *RiskEvidenceSynthesisCertaintyCertaintySubcomponent) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (resccs *RiskEvidenceSynthesisCertaintyCertaintySubcomponent) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                  `json:"id"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Note              []*fhir.Annotation      `json:"note"`
		Rating            []*fhir.CodeableConcept `json:"rating"`
		Type              *fhir.CodeableConcept   `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	resccs.Extension = raw.Extension
	resccs.ID = raw.ID
	resccs.ModifierExtension = raw.ModifierExtension
	resccs.Note = raw.Note
	resccs.Rating = raw.Rating
	resccs.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*RiskEvidenceSynthesisCertaintyCertaintySubcomponent)(nil)
var _ json.Unmarshaler = (*RiskEvidenceSynthesisCertaintyCertaintySubcomponent)(nil)

func (resre *RiskEvidenceSynthesisRiskEstimate) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (resre *RiskEvidenceSynthesisRiskEstimate) UnmarshalJSON(data []byte) error {
	var raw struct {
		DenominatorCount *fhir.Integer     `json:"denominatorCount"`
		Description      *fhir.String      `json:"description"`
		Extension        []*fhir.Extension `json:"extension"`

		ID                string                                                `json:"id"`
		ModifierExtension []*fhir.Extension                                     `json:"modifierExtension"`
		NumeratorCount    *fhir.Integer                                         `json:"numeratorCount"`
		PrecisionEstimate []*RiskEvidenceSynthesisRiskEstimatePrecisionEstimate `json:"precisionEstimate"`
		Type              *fhir.CodeableConcept                                 `json:"type"`
		UnitOfMeasure     *fhir.CodeableConcept                                 `json:"unitOfMeasure"`
		Value             *fhir.Decimal                                         `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	resre.DenominatorCount = raw.DenominatorCount
	resre.Description = raw.Description
	resre.Extension = raw.Extension
	resre.ID = raw.ID
	resre.ModifierExtension = raw.ModifierExtension
	resre.NumeratorCount = raw.NumeratorCount
	resre.PrecisionEstimate = raw.PrecisionEstimate
	resre.Type = raw.Type
	resre.UnitOfMeasure = raw.UnitOfMeasure
	resre.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*RiskEvidenceSynthesisRiskEstimate)(nil)
var _ json.Unmarshaler = (*RiskEvidenceSynthesisRiskEstimate)(nil)

func (resrepe *RiskEvidenceSynthesisRiskEstimatePrecisionEstimate) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (resrepe *RiskEvidenceSynthesisRiskEstimatePrecisionEstimate) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`
		From      *fhir.Decimal     `json:"from"`

		ID                string                `json:"id"`
		Level             *fhir.Decimal         `json:"level"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		To                *fhir.Decimal         `json:"to"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	resrepe.Extension = raw.Extension
	resrepe.From = raw.From
	resrepe.ID = raw.ID
	resrepe.Level = raw.Level
	resrepe.ModifierExtension = raw.ModifierExtension
	resrepe.To = raw.To
	resrepe.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*RiskEvidenceSynthesisRiskEstimatePrecisionEstimate)(nil)
var _ json.Unmarshaler = (*RiskEvidenceSynthesisRiskEstimatePrecisionEstimate)(nil)

func (resss *RiskEvidenceSynthesisSampleSize) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (resss *RiskEvidenceSynthesisSampleSize) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description *fhir.String      `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                   string            `json:"id"`
		ModifierExtension    []*fhir.Extension `json:"modifierExtension"`
		NumberOfParticipants *fhir.Integer     `json:"numberOfParticipants"`
		NumberOfStudies      *fhir.Integer     `json:"numberOfStudies"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	resss.Description = raw.Description
	resss.Extension = raw.Extension
	resss.ID = raw.ID
	resss.ModifierExtension = raw.ModifierExtension
	resss.NumberOfParticipants = raw.NumberOfParticipants
	resss.NumberOfStudies = raw.NumberOfStudies
	return nil
}

var _ json.Marshaler = (*RiskEvidenceSynthesisSampleSize)(nil)
var _ json.Unmarshaler = (*RiskEvidenceSynthesisSampleSize)(nil)
