// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package evidencevariable

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// The EvidenceVariable resource describes a "PICO" element that knowledge
// (evidence, assertion, recommendation) is about.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/EvidenceVariable
//   - Source File: StructureDefinition-EvidenceVariable.json
type EvidenceVariable struct {

	// The date on which the resource content was approved by the publisher.
	// Approval happens once when the content is officially approved for usage.
	ApprovalDate *fhir.Date `fhirpath:"approvalDate"`

	// An individiual or organization primarily involved in the creation and
	// maintenance of the content.
	Author []*fhir.ContactDetail `fhirpath:"author"`

	// A characteristic that defines the members of the evidence element. Multiple
	// characteristics are applied with "and" semantics.
	Characteristic []*EvidenceVariableCharacteristic `fhirpath:"characteristic"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the evidence variable and/or its contents.
	// Copyright statements are generally legal restrictions on the use and
	// publishing of the evidence variable.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the evidence variable was published. The
	// date must change when the business version changes and it must change if the
	// status code changes. In addition, it should change when the substantive
	// content of the evidence variable changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the evidence variable from a
	// consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// An individual or organization primarily responsible for internal coherence
	// of the content.
	Editor []*fhir.ContactDetail `fhirpath:"editor"`

	// The period during which the evidence variable content was or is planned to
	// be in active use.
	EffectivePeriod *fhir.Period `fhirpath:"effectivePeriod"`

	// An individual or organization responsible for officially endorsing the
	// content for use in some setting.
	Endorser []*fhir.ContactDetail `fhirpath:"endorser"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this evidence variable when it
	// is represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A legal or geographic region in which the evidence variable is intended to
	// be used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate *fhir.Date `fhirpath:"lastReviewDate"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the evidence variable. This name should
	// be usable as an identifier for the module by machine processing applications
	// such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// A human-readable string to clarify or explain concepts about the resource.
	Note []*fhir.Annotation `fhirpath:"note"`

	// The name of the organization or individual that published the evidence
	// variable.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Related artifacts such as additional documentation, justification, or
	// bibliographic references.
	RelatedArtifact []*fhir.RelatedArtifact `fhirpath:"relatedArtifact"`

	// An individual or organization primarily responsible for review of some
	// aspect of the content.
	Reviewer []*fhir.ContactDetail `fhirpath:"reviewer"`

	// The short title provides an alternate title for use in informal descriptive
	// contexts where the full, formal title is not necessary.
	ShortTitle *fhir.String `fhirpath:"shortTitle"`

	// The status of this evidence variable. Enables tracking the life-cycle of the
	// content.
	Status *fhir.Code `fhirpath:"status"`

	// An explanatory or alternate title for the EvidenceVariable giving additional
	// information about its content.
	Subtitle *fhir.String `fhirpath:"subtitle"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the evidence variable.
	Title *fhir.String `fhirpath:"title"`

	// Descriptive topics related to the content of the EvidenceVariable. Topics
	// provide a high-level categorization grouping types of EvidenceVariables that
	// can be useful for filtering and searching.
	Topic []*fhir.CodeableConcept `fhirpath:"topic"`

	// The type of evidence element, a population, an exposure, or an outcome.
	Type *fhir.Code `fhirpath:"type"`

	// An absolute URI that is used to identify this evidence variable when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal
	// address at which at which an authoritative instance of this evidence
	// variable is (or will be) published. This URL can be the target of a
	// canonical reference. It SHALL remain the same when the evidence variable is
	// stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// evidence variable instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the evidence
	// variable when it is referenced in a specification, model, design or
	// instance. This is an arbitrary value managed by the evidence variable author
	// and is not expected to be globally unique. For example, it might be a
	// timestamp (e.g. yyyymmdd) if a managed version is not available. There is
	// also no expectation that versions can be placed in a lexicographical
	// sequence. To provide a version consistent with the Decision Support Service
	// specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more
	// information on versioning knowledge assets, refer to the Decision Support
	// Service specification. Note that a version is required for non-experimental
	// active artifacts.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseEvidenceVariable
	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetApprovalDate returns the value of the field ApprovalDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetApprovalDate() *fhir.Date {
	if ev == nil {
		return nil
	}
	return ev.ApprovalDate
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetAuthor() []*fhir.ContactDetail {
	if ev == nil {
		return nil
	}
	return ev.Author
}

// GetCharacteristic returns the value of the field Characteristic.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetCharacteristic() []*EvidenceVariableCharacteristic {
	if ev == nil {
		return nil
	}
	return ev.Characteristic
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetContact() []*fhir.ContactDetail {
	if ev == nil {
		return nil
	}
	return ev.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetContained() []fhir.Resource {
	if ev == nil {
		return nil
	}
	return ev.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetCopyright() *fhir.Markdown {
	if ev == nil {
		return nil
	}
	return ev.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetDate() *fhir.DateTime {
	if ev == nil {
		return nil
	}
	return ev.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetDescription() *fhir.Markdown {
	if ev == nil {
		return nil
	}
	return ev.Description
}

// GetEditor returns the value of the field Editor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetEditor() []*fhir.ContactDetail {
	if ev == nil {
		return nil
	}
	return ev.Editor
}

// GetEffectivePeriod returns the value of the field EffectivePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetEffectivePeriod() *fhir.Period {
	if ev == nil {
		return nil
	}
	return ev.EffectivePeriod
}

// GetEndorser returns the value of the field Endorser.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetEndorser() []*fhir.ContactDetail {
	if ev == nil {
		return nil
	}
	return ev.Endorser
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetExtension() []*fhir.Extension {
	if ev == nil {
		return nil
	}
	return ev.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetID() string {
	if ev == nil {
		return ""
	}
	return ev.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetIdentifier() []*fhir.Identifier {
	if ev == nil {
		return nil
	}
	return ev.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetImplicitRules() *fhir.URI {
	if ev == nil {
		return nil
	}
	return ev.ImplicitRules
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetJurisdiction() []*fhir.CodeableConcept {
	if ev == nil {
		return nil
	}
	return ev.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetLanguage() *fhir.Code {
	if ev == nil {
		return nil
	}
	return ev.Language
}

// GetLastReviewDate returns the value of the field LastReviewDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetLastReviewDate() *fhir.Date {
	if ev == nil {
		return nil
	}
	return ev.LastReviewDate
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetMeta() *fhir.Meta {
	if ev == nil {
		return nil
	}
	return ev.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetModifierExtension() []*fhir.Extension {
	if ev == nil {
		return nil
	}
	return ev.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetName() *fhir.String {
	if ev == nil {
		return nil
	}
	return ev.Name
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetNote() []*fhir.Annotation {
	if ev == nil {
		return nil
	}
	return ev.Note
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetPublisher() *fhir.String {
	if ev == nil {
		return nil
	}
	return ev.Publisher
}

// GetRelatedArtifact returns the value of the field RelatedArtifact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetRelatedArtifact() []*fhir.RelatedArtifact {
	if ev == nil {
		return nil
	}
	return ev.RelatedArtifact
}

// GetReviewer returns the value of the field Reviewer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetReviewer() []*fhir.ContactDetail {
	if ev == nil {
		return nil
	}
	return ev.Reviewer
}

// GetShortTitle returns the value of the field ShortTitle.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetShortTitle() *fhir.String {
	if ev == nil {
		return nil
	}
	return ev.ShortTitle
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetStatus() *fhir.Code {
	if ev == nil {
		return nil
	}
	return ev.Status
}

// GetSubtitle returns the value of the field Subtitle.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetSubtitle() *fhir.String {
	if ev == nil {
		return nil
	}
	return ev.Subtitle
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetText() *fhir.Narrative {
	if ev == nil {
		return nil
	}
	return ev.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetTitle() *fhir.String {
	if ev == nil {
		return nil
	}
	return ev.Title
}

// GetTopic returns the value of the field Topic.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetTopic() []*fhir.CodeableConcept {
	if ev == nil {
		return nil
	}
	return ev.Topic
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetType() *fhir.Code {
	if ev == nil {
		return nil
	}
	return ev.Type
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetURL() *fhir.URI {
	if ev == nil {
		return nil
	}
	return ev.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetUseContext() []*fhir.UsageContext {
	if ev == nil {
		return nil
	}
	return ev.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ev *EvidenceVariable) GetVersion() *fhir.String {
	if ev == nil {
		return nil
	}
	return ev.Version
}

// What defines the members of the evidence element// A characteristic that defines the members of the evidence element. Multiple
// characteristics are applied with "and" semantics.// Characteristics can be defined flexibly to accommodate different use cases
// for membership criteria, ranging from simple codes, all the way to using an
// expression language to express the criteria.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-EvidenceVariable.json
type EvidenceVariableCharacteristic struct {

	// Define members of the evidence element using Codes (such as condition,
	// medication, or observation), Expressions ( using an expression language such
	// as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in
	// the last year).
	Definition fhir.Element `fhirpath:"definition"`

	// A short, natural language description of the characteristic that could be
	// used to communicate the criteria to an end-user.
	Description *fhir.String `fhirpath:"description"`

	// When true, members with this characteristic are excluded from the element.
	Exclude *fhir.Boolean `fhirpath:"exclude"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Indicates how elements are aggregated within the study effective period.
	GroupMeasure *fhir.Code `fhirpath:"groupMeasure"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Indicates what effective period the study covers.
	ParticipantEffective fhir.Element `fhirpath:"participantEffective"`

	// Indicates duration from the participant's study entry.
	TimeFromStart *fhir.Duration `fhirpath:"timeFromStart"`

	// Use UsageContext to define the members of the population, such as Age
	// Ranges, Genders, Settings.
	UsageContext []*fhir.UsageContext `fhirpath:"usageContext"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDefinition returns the value of the field Definition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (evc *EvidenceVariableCharacteristic) GetDefinition() fhir.Element {
	if evc == nil {
		return nil
	}
	return evc.Definition
}

// GetDefinitionReference returns the value of the field Definition.
func (evc *EvidenceVariableCharacteristic) GetDefinitionReference() *fhir.Reference {
	if evc == nil {
		return nil
	}
	val, ok := evc.Definition.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}

// GetDefinitionCanonical returns the value of the field Definition.
func (evc *EvidenceVariableCharacteristic) GetDefinitionCanonical() *fhir.Canonical {
	if evc == nil {
		return nil
	}
	val, ok := evc.Definition.(*fhir.Canonical)
	if !ok {
		return nil
	}
	return val
}

// GetDefinitionCodeableConcept returns the value of the field Definition.
func (evc *EvidenceVariableCharacteristic) GetDefinitionCodeableConcept() *fhir.CodeableConcept {
	if evc == nil {
		return nil
	}
	val, ok := evc.Definition.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetDefinitionExpression returns the value of the field Definition.
func (evc *EvidenceVariableCharacteristic) GetDefinitionExpression() *fhir.Expression {
	if evc == nil {
		return nil
	}
	val, ok := evc.Definition.(*fhir.Expression)
	if !ok {
		return nil
	}
	return val
}

// GetDefinitionDataRequirement returns the value of the field Definition.
func (evc *EvidenceVariableCharacteristic) GetDefinitionDataRequirement() *fhir.DataRequirement {
	if evc == nil {
		return nil
	}
	val, ok := evc.Definition.(*fhir.DataRequirement)
	if !ok {
		return nil
	}
	return val
}

// GetDefinitionTriggerDefinition returns the value of the field Definition.
func (evc *EvidenceVariableCharacteristic) GetDefinitionTriggerDefinition() *fhir.TriggerDefinition {
	if evc == nil {
		return nil
	}
	val, ok := evc.Definition.(*fhir.TriggerDefinition)
	if !ok {
		return nil
	}
	return val
} // GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (evc *EvidenceVariableCharacteristic) GetDescription() *fhir.String {
	if evc == nil {
		return nil
	}
	return evc.Description
}

// GetExclude returns the value of the field Exclude.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (evc *EvidenceVariableCharacteristic) GetExclude() *fhir.Boolean {
	if evc == nil {
		return nil
	}
	return evc.Exclude
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (evc *EvidenceVariableCharacteristic) GetExtension() []*fhir.Extension {
	if evc == nil {
		return nil
	}
	return evc.Extension
}

// GetGroupMeasure returns the value of the field GroupMeasure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (evc *EvidenceVariableCharacteristic) GetGroupMeasure() *fhir.Code {
	if evc == nil {
		return nil
	}
	return evc.GroupMeasure
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (evc *EvidenceVariableCharacteristic) GetID() string {
	if evc == nil {
		return ""
	}
	return evc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (evc *EvidenceVariableCharacteristic) GetModifierExtension() []*fhir.Extension {
	if evc == nil {
		return nil
	}
	return evc.ModifierExtension
}

// GetParticipantEffective returns the value of the field ParticipantEffective.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (evc *EvidenceVariableCharacteristic) GetParticipantEffective() fhir.Element {
	if evc == nil {
		return nil
	}
	return evc.ParticipantEffective
}

// GetParticipantEffectiveDateTime returns the value of the field ParticipantEffective.
func (evc *EvidenceVariableCharacteristic) GetParticipantEffectiveDateTime() *fhir.DateTime {
	if evc == nil {
		return nil
	}
	val, ok := evc.ParticipantEffective.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetParticipantEffectivePeriod returns the value of the field ParticipantEffective.
func (evc *EvidenceVariableCharacteristic) GetParticipantEffectivePeriod() *fhir.Period {
	if evc == nil {
		return nil
	}
	val, ok := evc.ParticipantEffective.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetParticipantEffectiveDuration returns the value of the field ParticipantEffective.
func (evc *EvidenceVariableCharacteristic) GetParticipantEffectiveDuration() *fhir.Duration {
	if evc == nil {
		return nil
	}
	val, ok := evc.ParticipantEffective.(*fhir.Duration)
	if !ok {
		return nil
	}
	return val
}

// GetParticipantEffectiveTiming returns the value of the field ParticipantEffective.
func (evc *EvidenceVariableCharacteristic) GetParticipantEffectiveTiming() *fhir.Timing {
	if evc == nil {
		return nil
	}
	val, ok := evc.ParticipantEffective.(*fhir.Timing)
	if !ok {
		return nil
	}
	return val
} // GetTimeFromStart returns the value of the field TimeFromStart.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (evc *EvidenceVariableCharacteristic) GetTimeFromStart() *fhir.Duration {
	if evc == nil {
		return nil
	}
	return evc.TimeFromStart
}

// GetUsageContext returns the value of the field UsageContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (evc *EvidenceVariableCharacteristic) GetUsageContext() []*fhir.UsageContext {
	if evc == nil {
		return nil
	}
	return evc.UsageContext
}
