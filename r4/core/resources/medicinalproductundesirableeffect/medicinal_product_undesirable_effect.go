// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package medicinalproductundesirableeffect

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Describe the undesirable effects of the medicinal product.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MedicinalProductUndesirableEffect
//   - Source File: StructureDefinition-MedicinalProductUndesirableEffect.json
type MedicinalProductUndesirableEffect struct {

	// Classification of the effect.
	Classification *fhir.CodeableConcept `fhirpath:"classification"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The frequency of occurrence of the effect.
	FrequencyOfOccurrence *fhir.CodeableConcept `fhirpath:"frequencyOfOccurrence"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The population group to which this applies.
	Population []*fhir.Population `fhirpath:"population"`

	// The medication for which this is an indication.
	Subject []*fhir.Reference `fhirpath:"subject"`

	// The symptom, condition or undesirable effect.
	SymptomConditionEffect *fhir.CodeableConcept `fhirpath:"symptomConditionEffect"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetClassification returns the value of the field Classification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetClassification() *fhir.CodeableConcept {
	if mpue == nil {
		return nil
	}
	return mpue.Classification
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetContained() []fhir.Resource {
	if mpue == nil {
		return nil
	}
	return mpue.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetExtension() []*fhir.Extension {
	if mpue == nil {
		return nil
	}
	return mpue.Extension
}

// GetFrequencyOfOccurrence returns the value of the field FrequencyOfOccurrence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetFrequencyOfOccurrence() *fhir.CodeableConcept {
	if mpue == nil {
		return nil
	}
	return mpue.FrequencyOfOccurrence
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetID() string {
	if mpue == nil {
		return ""
	}
	return mpue.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetImplicitRules() *fhir.URI {
	if mpue == nil {
		return nil
	}
	return mpue.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetLanguage() *fhir.Code {
	if mpue == nil {
		return nil
	}
	return mpue.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetMeta() *fhir.Meta {
	if mpue == nil {
		return nil
	}
	return mpue.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetModifierExtension() []*fhir.Extension {
	if mpue == nil {
		return nil
	}
	return mpue.ModifierExtension
}

// GetPopulation returns the value of the field Population.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetPopulation() []*fhir.Population {
	if mpue == nil {
		return nil
	}
	return mpue.Population
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetSubject() []*fhir.Reference {
	if mpue == nil {
		return nil
	}
	return mpue.Subject
}

// GetSymptomConditionEffect returns the value of the field SymptomConditionEffect.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetSymptomConditionEffect() *fhir.CodeableConcept {
	if mpue == nil {
		return nil
	}
	return mpue.SymptomConditionEffect
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpue *MedicinalProductUndesirableEffect) GetText() *fhir.Narrative {
	if mpue == nil {
		return nil
	}
	return mpue.Text
}

func (mpue *MedicinalProductUndesirableEffect) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mpue *MedicinalProductUndesirableEffect) UnmarshalJSON(data []byte) error {
	var raw struct {
		Classification        *fhir.CodeableConcept `json:"classification"`
		Contained             []fhir.Resource       `json:"contained"`
		Extension             []*fhir.Extension     `json:"extension"`
		FrequencyOfOccurrence *fhir.CodeableConcept `json:"frequencyOfOccurrence"`

		ID                     string                `json:"id"`
		ImplicitRules          *fhir.URI             `json:"implicitRules"`
		Language               *fhir.Code            `json:"language"`
		Meta                   *fhir.Meta            `json:"meta"`
		ModifierExtension      []*fhir.Extension     `json:"modifierExtension"`
		Population             []*fhir.Population    `json:"population"`
		Subject                []*fhir.Reference     `json:"subject"`
		SymptomConditionEffect *fhir.CodeableConcept `json:"symptomConditionEffect"`
		Text                   *fhir.Narrative       `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mpue.Classification = raw.Classification
	mpue.Contained = raw.Contained
	mpue.Extension = raw.Extension
	mpue.FrequencyOfOccurrence = raw.FrequencyOfOccurrence
	mpue.ID = raw.ID
	mpue.ImplicitRules = raw.ImplicitRules
	mpue.Language = raw.Language
	mpue.Meta = raw.Meta
	mpue.ModifierExtension = raw.ModifierExtension
	mpue.Population = raw.Population
	mpue.Subject = raw.Subject
	mpue.SymptomConditionEffect = raw.SymptomConditionEffect
	mpue.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*MedicinalProductUndesirableEffect)(nil)
var _ json.Unmarshaler = (*MedicinalProductUndesirableEffect)(nil)
