// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package questionnaireresponse

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A structured set of questions and their answers. The questions are ordered
// and grouped into coherent subsets, corresponding to the structure of the
// grouping of the questionnaire being responded to.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse
//   - Source File: StructureDefinition-QuestionnaireResponse.json
type QuestionnaireResponse struct {

	// Person who received the answers to the questions in the
	// QuestionnaireResponse and recorded them in the system.
	Author *fhir.Reference `fhirpath:"author"`

	// The date and/or time that this set of answers were last changed.
	Authored *fhir.DateTime `fhirpath:"authored"`

	// The order, proposal or plan that is fulfilled in whole or in part by this
	// QuestionnaireResponse. For example, a ServiceRequest seeking an intake
	// assessment or a decision support recommendation to assess for post-partum
	// depression.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The Encounter during which this questionnaire response was created or to
	// which the creation of this record is tightly associated.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A business identifier assigned to a particular completed (or partially
	// completed) questionnaire.
	Identifier *fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A group or question item from the original questionnaire for which answers
	// are provided.
	Item []*QuestionnaireResponseItem `fhirpath:"item"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A procedure or observation that this questionnaire was performed as part of
	// the execution of. For example, the surgery a checklist was executed as part
	// of.
	PartOf []*fhir.Reference `fhirpath:"partOf"`

	// The Questionnaire that defines and organizes the questions for which answers
	// are being provided.
	Questionnaire *fhir.Canonical `fhirpath:"questionnaire"`

	// The person who answered the questions about the subject.
	Source *fhir.Reference `fhirpath:"source"`

	// The position of the questionnaire response within its overall lifecycle.
	Status *fhir.Code `fhirpath:"status"`

	// The subject of the questionnaire response. This could be a patient,
	// organization, practitioner, device, etc. This is who/what the answers apply
	// to, but is not necessarily the source of information.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetAuthor() *fhir.Reference {
	if qr == nil {
		return nil
	}
	return qr.Author
}

// GetAuthored returns the value of the field Authored.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetAuthored() *fhir.DateTime {
	if qr == nil {
		return nil
	}
	return qr.Authored
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetBasedOn() []*fhir.Reference {
	if qr == nil {
		return nil
	}
	return qr.BasedOn
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetContained() []fhir.Resource {
	if qr == nil {
		return nil
	}
	return qr.Contained
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetEncounter() *fhir.Reference {
	if qr == nil {
		return nil
	}
	return qr.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetExtension() []*fhir.Extension {
	if qr == nil {
		return nil
	}
	return qr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetID() string {
	if qr == nil {
		return ""
	}
	return qr.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetIdentifier() *fhir.Identifier {
	if qr == nil {
		return nil
	}
	return qr.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetImplicitRules() *fhir.URI {
	if qr == nil {
		return nil
	}
	return qr.ImplicitRules
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetItem() []*QuestionnaireResponseItem {
	if qr == nil {
		return nil
	}
	return qr.Item
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetLanguage() *fhir.Code {
	if qr == nil {
		return nil
	}
	return qr.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetMeta() *fhir.Meta {
	if qr == nil {
		return nil
	}
	return qr.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetModifierExtension() []*fhir.Extension {
	if qr == nil {
		return nil
	}
	return qr.ModifierExtension
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetPartOf() []*fhir.Reference {
	if qr == nil {
		return nil
	}
	return qr.PartOf
}

// GetQuestionnaire returns the value of the field Questionnaire.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetQuestionnaire() *fhir.Canonical {
	if qr == nil {
		return nil
	}
	return qr.Questionnaire
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetSource() *fhir.Reference {
	if qr == nil {
		return nil
	}
	return qr.Source
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetStatus() *fhir.Code {
	if qr == nil {
		return nil
	}
	return qr.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetSubject() *fhir.Reference {
	if qr == nil {
		return nil
	}
	return qr.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qr *QuestionnaireResponse) GetText() *fhir.Narrative {
	if qr == nil {
		return nil
	}
	return qr.Text
}

// Groups and questions// A group or question item from the original questionnaire for which answers
// are provided.// Groups cannot have answers and therefore must nest directly within item.
// When dealing with questions, nesting must occur within each answer because
// some questions may have multiple answers (and the nesting occurs for each
// answer).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-QuestionnaireResponse.json
type QuestionnaireResponseItem struct {

	// The respondent's answer(s) to the question.
	Answer []*QuestionnaireResponseItemAnswer `fhirpath:"answer"`

	// A reference to an [ElementDefinition](elementdefinition.html) that provides
	// the details for the item.
	Definition *fhir.URI `fhirpath:"definition"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The item from the Questionnaire that corresponds to this item in the
	// QuestionnaireResponse resource.
	LinkID *fhir.String `fhirpath:"linkId"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Text that is displayed above the contents of the group or as the text of the
	// question being answered.
	Text *fhir.String `fhirpath:"text"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAnswer returns the value of the field Answer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qri *QuestionnaireResponseItem) GetAnswer() []*QuestionnaireResponseItemAnswer {
	if qri == nil {
		return nil
	}
	return qri.Answer
}

// GetDefinition returns the value of the field Definition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qri *QuestionnaireResponseItem) GetDefinition() *fhir.URI {
	if qri == nil {
		return nil
	}
	return qri.Definition
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qri *QuestionnaireResponseItem) GetExtension() []*fhir.Extension {
	if qri == nil {
		return nil
	}
	return qri.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qri *QuestionnaireResponseItem) GetID() string {
	if qri == nil {
		return ""
	}
	return qri.ID
}

// GetLinkID returns the value of the field LinkID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qri *QuestionnaireResponseItem) GetLinkID() *fhir.String {
	if qri == nil {
		return nil
	}
	return qri.LinkID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qri *QuestionnaireResponseItem) GetModifierExtension() []*fhir.Extension {
	if qri == nil {
		return nil
	}
	return qri.ModifierExtension
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qri *QuestionnaireResponseItem) GetText() *fhir.String {
	if qri == nil {
		return nil
	}
	return qri.Text
}

// The response(s) to the question// The respondent's answer(s) to the question.// The value is nested because we cannot have a repeating structure that has
// variable type.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-QuestionnaireResponse.json
type QuestionnaireResponseItemAnswer struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The answer (or one of the answers) provided by the respondent to the
	// question.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qria *QuestionnaireResponseItemAnswer) GetExtension() []*fhir.Extension {
	if qria == nil {
		return nil
	}
	return qria.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qria *QuestionnaireResponseItemAnswer) GetID() string {
	if qria == nil {
		return ""
	}
	return qria.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qria *QuestionnaireResponseItemAnswer) GetModifierExtension() []*fhir.Extension {
	if qria == nil {
		return nil
	}
	return qria.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qria *QuestionnaireResponseItemAnswer) GetValue() fhir.Element {
	if qria == nil {
		return nil
	}
	return qria.Value
}

// GetValueBoolean returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueBoolean() *fhir.Boolean {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetValueDecimal returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueDecimal() *fhir.Decimal {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.Decimal)
	if !ok {
		return nil
	}
	return val
}

// GetValueInteger returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueInteger() *fhir.Integer {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
}

// GetValueDate returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueDate() *fhir.Date {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetValueDateTime returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueDateTime() *fhir.DateTime {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetValueTime returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueTime() *fhir.Time {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.Time)
	if !ok {
		return nil
	}
	return val
}

// GetValueString returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueString() *fhir.String {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueURI returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueURI() *fhir.URI {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.URI)
	if !ok {
		return nil
	}
	return val
}

// GetValueAttachment returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueAttachment() *fhir.Attachment {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.Attachment)
	if !ok {
		return nil
	}
	return val
}

// GetValueCoding returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueCoding() *fhir.Coding {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.Coding)
	if !ok {
		return nil
	}
	return val
}

// GetValueQuantity returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueQuantity() *fhir.Quantity {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetValueReference returns the value of the field Value.
func (qria *QuestionnaireResponseItemAnswer) GetValueReference() *fhir.Reference {
	if qria == nil {
		return nil
	}
	val, ok := qria.Value.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}

func (qr *QuestionnaireResponse) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (qr *QuestionnaireResponse) UnmarshalJSON(data []byte) error {
	var raw struct {
		Author    *fhir.Reference   `json:"author"`
		Authored  *fhir.DateTime    `json:"authored"`
		BasedOn   []*fhir.Reference `json:"basedOn"`
		Contained []fhir.Resource   `json:"contained"`
		Encounter *fhir.Reference   `json:"encounter"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                       `json:"id"`
		Identifier        *fhir.Identifier             `json:"identifier"`
		ImplicitRules     *fhir.URI                    `json:"implicitRules"`
		Item              []*QuestionnaireResponseItem `json:"item"`
		Language          *fhir.Code                   `json:"language"`
		Meta              *fhir.Meta                   `json:"meta"`
		ModifierExtension []*fhir.Extension            `json:"modifierExtension"`
		PartOf            []*fhir.Reference            `json:"partOf"`
		Questionnaire     *fhir.Canonical              `json:"questionnaire"`
		Source            *fhir.Reference              `json:"source"`
		Status            *fhir.Code                   `json:"status"`
		Subject           *fhir.Reference              `json:"subject"`
		Text              *fhir.Narrative              `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	qr.Author = raw.Author
	qr.Authored = raw.Authored
	qr.BasedOn = raw.BasedOn
	qr.Contained = raw.Contained
	qr.Encounter = raw.Encounter
	qr.Extension = raw.Extension
	qr.ID = raw.ID
	qr.Identifier = raw.Identifier
	qr.ImplicitRules = raw.ImplicitRules
	qr.Item = raw.Item
	qr.Language = raw.Language
	qr.Meta = raw.Meta
	qr.ModifierExtension = raw.ModifierExtension
	qr.PartOf = raw.PartOf
	qr.Questionnaire = raw.Questionnaire
	qr.Source = raw.Source
	qr.Status = raw.Status
	qr.Subject = raw.Subject
	qr.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*QuestionnaireResponse)(nil)
var _ json.Unmarshaler = (*QuestionnaireResponse)(nil)

func (qri *QuestionnaireResponseItem) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (qri *QuestionnaireResponseItem) UnmarshalJSON(data []byte) error {
	var raw struct {
		Answer     []*QuestionnaireResponseItemAnswer `json:"answer"`
		Definition *fhir.URI                          `json:"definition"`
		Extension  []*fhir.Extension                  `json:"extension"`

		ID                string            `json:"id"`
		LinkID            *fhir.String      `json:"linkId"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Text              *fhir.String      `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	qri.Answer = raw.Answer
	qri.Definition = raw.Definition
	qri.Extension = raw.Extension
	qri.ID = raw.ID
	qri.LinkID = raw.LinkID
	qri.ModifierExtension = raw.ModifierExtension
	qri.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*QuestionnaireResponseItem)(nil)
var _ json.Unmarshaler = (*QuestionnaireResponseItem)(nil)

func (qria *QuestionnaireResponseItemAnswer) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (qria *QuestionnaireResponseItemAnswer) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		ValueBoolean      *fhir.Boolean     `json:"valueBoolean"`
		ValueDecimal      *fhir.Decimal     `json:"valueDecimal"`
		ValueInteger      *fhir.Integer     `json:"valueInteger"`
		ValueDate         *fhir.Date        `json:"valueDate"`
		ValueDateTime     *fhir.DateTime    `json:"valueDateTime"`
		ValueTime         *fhir.Time        `json:"valueTime"`
		ValueString       *fhir.String      `json:"valueString"`
		ValueURI          *fhir.URI         `json:"valueURI"`
		ValueAttachment   *fhir.Attachment  `json:"valueAttachment"`
		ValueCoding       *fhir.Coding      `json:"valueCoding"`
		ValueQuantity     *fhir.Quantity    `json:"valueQuantity"`
		ValueReference    *fhir.Reference   `json:"valueReference"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	qria.Extension = raw.Extension
	qria.ID = raw.ID
	qria.ModifierExtension = raw.ModifierExtension
	qria.Value, err = validate.SelectOneOf[fhir.Element]("QuestionnaireResponse.item.answer.value",
		raw.ValueBoolean,
		raw.ValueDecimal,
		raw.ValueInteger,
		raw.ValueDate,
		raw.ValueDateTime,
		raw.ValueTime,
		raw.ValueString,
		raw.ValueURI,
		raw.ValueAttachment,
		raw.ValueCoding,
		raw.ValueQuantity,
		raw.ValueReference)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*QuestionnaireResponseItemAnswer)(nil)
var _ json.Unmarshaler = (*QuestionnaireResponseItemAnswer)(nil)
