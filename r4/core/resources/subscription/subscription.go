// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package subscription

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// The subscription resource is used to define a push-based subscription from a
// server to another system. Once a subscription is registered with the server,
// the server checks every resource that is created or updated, and if the
// resource matches the given criteria, it sends a message on the defined
// "channel" so that another system can take an appropriate action.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Subscription
//   - Source File: StructureDefinition-Subscription.json
type Subscription struct {

	// Details where to send notifications when resources are received that meet
	// the criteria.
	Channel *SubscriptionChannel `fhirpath:"channel"`

	// Contact details for a human to contact about the subscription. The primary
	// use of this for system administrator troubleshooting.
	Contact []*fhir.ContactPoint `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The rules that the server should use to determine when to generate
	// notifications for this subscription.
	Criteria *fhir.String `fhirpath:"criteria"`

	// The time for the server to turn the subscription off.
	End *fhir.Instant `fhirpath:"end"`

	// A record of the last error that occurred when the server processed a
	// notification.
	Error *fhir.String `fhirpath:"error"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A description of why this subscription is defined.
	Reason *fhir.String `fhirpath:"reason"`

	// The status of the subscription, which marks the server state for managing
	// the subscription.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetChannel returns the value of the field Channel.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetChannel() *SubscriptionChannel {
	if s == nil {
		return nil
	}
	return s.Channel
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetContact() []*fhir.ContactPoint {
	if s == nil {
		return nil
	}
	return s.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetContained() []fhir.Resource {
	if s == nil {
		return nil
	}
	return s.Contained
}

// GetCriteria returns the value of the field Criteria.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetCriteria() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Criteria
}

// GetEnd returns the value of the field End.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetEnd() *fhir.Instant {
	if s == nil {
		return nil
	}
	return s.End
}

// GetError returns the value of the field Error.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetError() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Error
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetImplicitRules() *fhir.URI {
	if s == nil {
		return nil
	}
	return s.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetLanguage() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetMeta() *fhir.Meta {
	if s == nil {
		return nil
	}
	return s.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetModifierExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.ModifierExtension
}

// GetReason returns the value of the field Reason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetReason() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Reason
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetStatus() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Subscription) GetText() *fhir.Narrative {
	if s == nil {
		return nil
	}
	return s.Text
}

// The channel on which to report matches to the criteria// Details where to send notifications when resources are received that meet
// the criteria.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Subscription.json
type SubscriptionChannel struct {

	// The url that describes the actual end-point to send messages to.
	Endpoint *fhir.URL `fhirpath:"endpoint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Additional headers / information to send as part of the notification.
	Header []*fhir.String `fhirpath:"header"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The mime type to send the payload in - either application/fhir+xml, or
	// application/fhir+json. If the payload is not present, then there is no
	// payload in the notification, just a notification. The mime type "text/plain"
	// may also be used for Email and SMS subscriptions.
	Payload *fhir.Code `fhirpath:"payload"`

	// The type of channel to send notifications on.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetEndpoint returns the value of the field Endpoint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SubscriptionChannel) GetEndpoint() *fhir.URL {
	if sc == nil {
		return nil
	}
	return sc.Endpoint
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SubscriptionChannel) GetExtension() []*fhir.Extension {
	if sc == nil {
		return nil
	}
	return sc.Extension
}

// GetHeader returns the value of the field Header.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SubscriptionChannel) GetHeader() []*fhir.String {
	if sc == nil {
		return nil
	}
	return sc.Header
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SubscriptionChannel) GetID() string {
	if sc == nil {
		return ""
	}
	return sc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SubscriptionChannel) GetModifierExtension() []*fhir.Extension {
	if sc == nil {
		return nil
	}
	return sc.ModifierExtension
}

// GetPayload returns the value of the field Payload.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SubscriptionChannel) GetPayload() *fhir.Code {
	if sc == nil {
		return nil
	}
	return sc.Payload
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SubscriptionChannel) GetType() *fhir.Code {
	if sc == nil {
		return nil
	}
	return sc.Type
}

func (s *Subscription) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (s *Subscription) UnmarshalJSON(data []byte) error {
	var raw struct {
		Channel   *SubscriptionChannel `json:"channel"`
		Contact   []*fhir.ContactPoint `json:"contact"`
		Contained []fhir.Resource      `json:"contained"`
		Criteria  *fhir.String         `json:"criteria"`
		End       *fhir.Instant        `json:"end"`
		Error     *fhir.String         `json:"error"`
		Extension []*fhir.Extension    `json:"extension"`

		ID                string            `json:"id"`
		ImplicitRules     *fhir.URI         `json:"implicitRules"`
		Language          *fhir.Code        `json:"language"`
		Meta              *fhir.Meta        `json:"meta"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Reason            *fhir.String      `json:"reason"`
		Status            *fhir.Code        `json:"status"`
		Text              *fhir.Narrative   `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	s.Channel = raw.Channel
	s.Contact = raw.Contact
	s.Contained = raw.Contained
	s.Criteria = raw.Criteria
	s.End = raw.End
	s.Error = raw.Error
	s.Extension = raw.Extension
	s.ID = raw.ID
	s.ImplicitRules = raw.ImplicitRules
	s.Language = raw.Language
	s.Meta = raw.Meta
	s.ModifierExtension = raw.ModifierExtension
	s.Reason = raw.Reason
	s.Status = raw.Status
	s.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*Subscription)(nil)
var _ json.Unmarshaler = (*Subscription)(nil)

func (sc *SubscriptionChannel) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (sc *SubscriptionChannel) UnmarshalJSON(data []byte) error {
	var raw struct {
		Endpoint  *fhir.URL         `json:"endpoint"`
		Extension []*fhir.Extension `json:"extension"`
		Header    []*fhir.String    `json:"header"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Payload           *fhir.Code        `json:"payload"`
		Type              *fhir.Code        `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	sc.Endpoint = raw.Endpoint
	sc.Extension = raw.Extension
	sc.Header = raw.Header
	sc.ID = raw.ID
	sc.ModifierExtension = raw.ModifierExtension
	sc.Payload = raw.Payload
	sc.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*SubscriptionChannel)(nil)
var _ json.Unmarshaler = (*SubscriptionChannel)(nil)
