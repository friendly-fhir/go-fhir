// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package questionnaire

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A structured set of questions intended to guide the collection of answers
// from end-users. Questionnaires provide detailed control over order,
// presentation, phraseology and grouping to allow coherent, consistent data
// collection.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Questionnaire
//   - Source File: StructureDefinition-Questionnaire.json
type Questionnaire struct {

	// The date on which the resource content was approved by the publisher.
	// Approval happens once when the content is officially approved for usage.
	ApprovalDate *fhir.Date `fhirpath:"approvalDate"`

	// An identifier for this question or group of questions in a particular
	// terminology such as LOINC.
	Code []*fhir.Coding `fhirpath:"code"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the questionnaire and/or its contents.
	// Copyright statements are generally legal restrictions on the use and
	// publishing of the questionnaire.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the questionnaire was published. The
	// date must change when the business version changes and it must change if the
	// status code changes. In addition, it should change when the substantive
	// content of the questionnaire changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// The URL of a Questionnaire that this Questionnaire is based on.
	DerivedFrom []*fhir.Canonical `fhirpath:"derivedFrom"`

	// A free text natural language description of the questionnaire from a
	// consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// The period during which the questionnaire content was or is planned to be in
	// active use.
	EffectivePeriod *fhir.Period `fhirpath:"effectivePeriod"`

	// A Boolean value to indicate that this questionnaire is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used
	// for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this questionnaire when it is
	// represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A particular question, question grouping or display text that is part of the
	// questionnaire.
	Item []*QuestionnaireItem `fhirpath:"item"`

	// A legal or geographic region in which the questionnaire is intended to be
	// used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate *fhir.Date `fhirpath:"lastReviewDate"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the questionnaire. This name should be
	// usable as an identifier for the module by machine processing applications
	// such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// The name of the organization or individual that published the questionnaire.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this questionnaire is needed and why it has been designed
	// as it has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// The status of this questionnaire. Enables tracking the life-cycle of the
	// content.
	Status *fhir.Code `fhirpath:"status"`

	// The types of subjects that can be the subject of responses created for the
	// questionnaire.
	SubjectType []*fhir.Code `fhirpath:"subjectType"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the questionnaire.
	Title *fhir.String `fhirpath:"title"`

	// An absolute URI that is used to identify this questionnaire when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal
	// address at which at which an authoritative instance of this questionnaire is
	// (or will be) published. This URL can be the target of a canonical reference.
	// It SHALL remain the same when the questionnaire is stored on different
	// servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// questionnaire instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the questionnaire
	// when it is referenced in a specification, model, design or instance. This is
	// an arbitrary value managed by the questionnaire author and is not expected
	// to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd)
	// if a managed version is not available. There is also no expectation that
	// versions can be placed in a lexicographical sequence.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseQuestionnaire
	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetApprovalDate returns the value of the field ApprovalDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetApprovalDate() *fhir.Date {
	if q == nil {
		return nil
	}
	return q.ApprovalDate
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetCode() []*fhir.Coding {
	if q == nil {
		return nil
	}
	return q.Code
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetContact() []*fhir.ContactDetail {
	if q == nil {
		return nil
	}
	return q.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetContained() []fhir.Resource {
	if q == nil {
		return nil
	}
	return q.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetCopyright() *fhir.Markdown {
	if q == nil {
		return nil
	}
	return q.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetDate() *fhir.DateTime {
	if q == nil {
		return nil
	}
	return q.Date
}

// GetDerivedFrom returns the value of the field DerivedFrom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetDerivedFrom() []*fhir.Canonical {
	if q == nil {
		return nil
	}
	return q.DerivedFrom
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetDescription() *fhir.Markdown {
	if q == nil {
		return nil
	}
	return q.Description
}

// GetEffectivePeriod returns the value of the field EffectivePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetEffectivePeriod() *fhir.Period {
	if q == nil {
		return nil
	}
	return q.EffectivePeriod
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetExperimental() *fhir.Boolean {
	if q == nil {
		return nil
	}
	return q.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetExtension() []*fhir.Extension {
	if q == nil {
		return nil
	}
	return q.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetID() string {
	if q == nil {
		return ""
	}
	return q.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetIdentifier() []*fhir.Identifier {
	if q == nil {
		return nil
	}
	return q.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetImplicitRules() *fhir.URI {
	if q == nil {
		return nil
	}
	return q.ImplicitRules
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetItem() []*QuestionnaireItem {
	if q == nil {
		return nil
	}
	return q.Item
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetJurisdiction() []*fhir.CodeableConcept {
	if q == nil {
		return nil
	}
	return q.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetLanguage() *fhir.Code {
	if q == nil {
		return nil
	}
	return q.Language
}

// GetLastReviewDate returns the value of the field LastReviewDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetLastReviewDate() *fhir.Date {
	if q == nil {
		return nil
	}
	return q.LastReviewDate
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetMeta() *fhir.Meta {
	if q == nil {
		return nil
	}
	return q.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetModifierExtension() []*fhir.Extension {
	if q == nil {
		return nil
	}
	return q.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetName() *fhir.String {
	if q == nil {
		return nil
	}
	return q.Name
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetPublisher() *fhir.String {
	if q == nil {
		return nil
	}
	return q.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetPurpose() *fhir.Markdown {
	if q == nil {
		return nil
	}
	return q.Purpose
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetStatus() *fhir.Code {
	if q == nil {
		return nil
	}
	return q.Status
}

// GetSubjectType returns the value of the field SubjectType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetSubjectType() []*fhir.Code {
	if q == nil {
		return nil
	}
	return q.SubjectType
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetText() *fhir.Narrative {
	if q == nil {
		return nil
	}
	return q.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetTitle() *fhir.String {
	if q == nil {
		return nil
	}
	return q.Title
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetURL() *fhir.URI {
	if q == nil {
		return nil
	}
	return q.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetUseContext() []*fhir.UsageContext {
	if q == nil {
		return nil
	}
	return q.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (q *Questionnaire) GetVersion() *fhir.String {
	if q == nil {
		return nil
	}
	return q.Version
}

// Questions and sections within the Questionnaire// A particular question, question grouping or display text that is part of the
// questionnaire.// The content of the questionnaire is constructed from an ordered,
// hierarchical collection of items.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Questionnaire.json
type QuestionnaireItem struct {

	// One of the permitted answers for a "choice" or "open-choice" question.
	AnswerOption []*QuestionnaireItemAnswerOption `fhirpath:"answerOption"`

	// A reference to a value set containing a list of codes representing permitted
	// answers for a "choice" or "open-choice" question.
	AnswerValueSet *fhir.Canonical `fhirpath:"answerValueSet"`

	// A terminology code that corresponds to this group or question (e.g. a code
	// from LOINC, which defines many questions and answers).
	Code []*fhir.Coding `fhirpath:"code"`

	// This element is a URI that refers to an
	// [ElementDefinition](elementdefinition.html) that provides information about
	// this item, including information that might otherwise be included in the
	// instance of the Questionnaire resource. A detailed description of the
	// construction of the URI is shown in Comments, below. If this element is
	// present then the following element values MAY be derived from the Element
	// Definition if the corresponding elements of this Questionnaire resource
	// instance have no value:
	// * code (ElementDefinition.code) * type (ElementDefinition.type) * required
	// (ElementDefinition.min) * repeats (ElementDefinition.max) * maxLength
	// (ElementDefinition.maxLength) * answerValueSet (ElementDefinition.binding) *
	// options (ElementDefinition.binding).
	Definition *fhir.URI `fhirpath:"definition"`

	// Controls how multiple enableWhen values are interpreted - whether all or any
	// must be true.
	EnableBehavior *fhir.Code `fhirpath:"enableBehavior"`

	// A constraint indicating that this item should only be enabled
	// (displayed/allow answers to be captured) when the specified condition is
	// true.
	EnableWhen []*QuestionnaireItemEnableWhen `fhirpath:"enableWhen"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// One or more values that should be pre-populated in the answer when initially
	// rendering the questionnaire for user input.
	Initial []*QuestionnaireItemInitial `fhirpath:"initial"`

	// An identifier that is unique within the Questionnaire allowing linkage to
	// the equivalent item in a QuestionnaireResponse resource.
	LinkID *fhir.String `fhirpath:"linkId"`

	// The maximum number of characters that are permitted in the answer to be
	// considered a "valid" QuestionnaireResponse.
	MaxLength *fhir.Integer `fhirpath:"maxLength"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A short label for a particular group, question or set of display text within
	// the questionnaire used for reference by the individual completing the
	// questionnaire.
	Prefix *fhir.String `fhirpath:"prefix"`

	// An indication, when true, that the value cannot be changed by a human
	// respondent to the Questionnaire.
	ReadOnly *fhir.Boolean `fhirpath:"readOnly"`

	// An indication, if true, that the item may occur multiple times in the
	// response, collecting multiple answers for questions or multiple sets of
	// answers for groups.
	Repeats *fhir.Boolean `fhirpath:"repeats"`

	// An indication, if true, that the item must be present in a "completed"
	// QuestionnaireResponse. If false, the item may be skipped when answering the
	// questionnaire.
	Required *fhir.Boolean `fhirpath:"required"`

	// The name of a section, the text of a question or text content for a display
	// item.
	Text *fhir.String `fhirpath:"text"`

	// The type of questionnaire item this is - whether text for display, a
	// grouping of other items or a particular type of data to be captured (string,
	// integer, coded choice, etc.).
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAnswerOption returns the value of the field AnswerOption.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetAnswerOption() []*QuestionnaireItemAnswerOption {
	if qi == nil {
		return nil
	}
	return qi.AnswerOption
}

// GetAnswerValueSet returns the value of the field AnswerValueSet.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetAnswerValueSet() *fhir.Canonical {
	if qi == nil {
		return nil
	}
	return qi.AnswerValueSet
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetCode() []*fhir.Coding {
	if qi == nil {
		return nil
	}
	return qi.Code
}

// GetDefinition returns the value of the field Definition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetDefinition() *fhir.URI {
	if qi == nil {
		return nil
	}
	return qi.Definition
}

// GetEnableBehavior returns the value of the field EnableBehavior.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetEnableBehavior() *fhir.Code {
	if qi == nil {
		return nil
	}
	return qi.EnableBehavior
}

// GetEnableWhen returns the value of the field EnableWhen.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetEnableWhen() []*QuestionnaireItemEnableWhen {
	if qi == nil {
		return nil
	}
	return qi.EnableWhen
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetExtension() []*fhir.Extension {
	if qi == nil {
		return nil
	}
	return qi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetID() string {
	if qi == nil {
		return ""
	}
	return qi.ID
}

// GetInitial returns the value of the field Initial.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetInitial() []*QuestionnaireItemInitial {
	if qi == nil {
		return nil
	}
	return qi.Initial
}

// GetLinkID returns the value of the field LinkID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetLinkID() *fhir.String {
	if qi == nil {
		return nil
	}
	return qi.LinkID
}

// GetMaxLength returns the value of the field MaxLength.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetMaxLength() *fhir.Integer {
	if qi == nil {
		return nil
	}
	return qi.MaxLength
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetModifierExtension() []*fhir.Extension {
	if qi == nil {
		return nil
	}
	return qi.ModifierExtension
}

// GetPrefix returns the value of the field Prefix.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetPrefix() *fhir.String {
	if qi == nil {
		return nil
	}
	return qi.Prefix
}

// GetReadOnly returns the value of the field ReadOnly.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetReadOnly() *fhir.Boolean {
	if qi == nil {
		return nil
	}
	return qi.ReadOnly
}

// GetRepeats returns the value of the field Repeats.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetRepeats() *fhir.Boolean {
	if qi == nil {
		return nil
	}
	return qi.Repeats
}

// GetRequired returns the value of the field Required.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetRequired() *fhir.Boolean {
	if qi == nil {
		return nil
	}
	return qi.Required
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetText() *fhir.String {
	if qi == nil {
		return nil
	}
	return qi.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qi *QuestionnaireItem) GetType() *fhir.Code {
	if qi == nil {
		return nil
	}
	return qi.Type
}

// Permitted answer// One of the permitted answers for a "choice" or "open-choice" question.// This element can be used when the value set machinery of answerValueSet is
// deemed too cumbersome or when there's a need to capture possible answers
// that are not codes.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Questionnaire.json
type QuestionnaireItemAnswerOption struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Indicates whether the answer value is selected when the list of possible
	// answers is initially shown.
	InitialSelected *fhir.Boolean `fhirpath:"initialSelected"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A potential answer that's allowed as the answer to this question.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiao *QuestionnaireItemAnswerOption) GetExtension() []*fhir.Extension {
	if qiao == nil {
		return nil
	}
	return qiao.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiao *QuestionnaireItemAnswerOption) GetID() string {
	if qiao == nil {
		return ""
	}
	return qiao.ID
}

// GetInitialSelected returns the value of the field InitialSelected.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiao *QuestionnaireItemAnswerOption) GetInitialSelected() *fhir.Boolean {
	if qiao == nil {
		return nil
	}
	return qiao.InitialSelected
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiao *QuestionnaireItemAnswerOption) GetModifierExtension() []*fhir.Extension {
	if qiao == nil {
		return nil
	}
	return qiao.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiao *QuestionnaireItemAnswerOption) GetValue() fhir.Element {
	if qiao == nil {
		return nil
	}
	return qiao.Value
}

// GetValueInteger returns the value of the field Value.
func (qiao *QuestionnaireItemAnswerOption) GetValueInteger() *fhir.Integer {
	if qiao == nil {
		return nil
	}
	val, ok := qiao.Value.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
}

// GetValueDate returns the value of the field Value.
func (qiao *QuestionnaireItemAnswerOption) GetValueDate() *fhir.Date {
	if qiao == nil {
		return nil
	}
	val, ok := qiao.Value.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetValueTime returns the value of the field Value.
func (qiao *QuestionnaireItemAnswerOption) GetValueTime() *fhir.Time {
	if qiao == nil {
		return nil
	}
	val, ok := qiao.Value.(*fhir.Time)
	if !ok {
		return nil
	}
	return val
}

// GetValueString returns the value of the field Value.
func (qiao *QuestionnaireItemAnswerOption) GetValueString() *fhir.String {
	if qiao == nil {
		return nil
	}
	val, ok := qiao.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueCoding returns the value of the field Value.
func (qiao *QuestionnaireItemAnswerOption) GetValueCoding() *fhir.Coding {
	if qiao == nil {
		return nil
	}
	val, ok := qiao.Value.(*fhir.Coding)
	if !ok {
		return nil
	}
	return val
}

// GetValueReference returns the value of the field Value.
func (qiao *QuestionnaireItemAnswerOption) GetValueReference() *fhir.Reference {
	if qiao == nil {
		return nil
	}
	val, ok := qiao.Value.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}

// Only allow data when// A constraint indicating that this item should only be enabled
// (displayed/allow answers to be captured) when the specified condition is
// true.// If multiple repetitions of this extension are present, the item should be
// enabled when the condition for *any* of the repetitions is true. I.e. treat
// "enableWhen"s as being joined by an "or" clause. This element is a modifier
// because if enableWhen is present for an item, "required" is ignored unless
// one of the enableWhen conditions is met. When an item is disabled, all of
// its descendants are disabled, regardless of what their own enableWhen logic
// might evaluate to.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Questionnaire.json
type QuestionnaireItemEnableWhen struct {

	// A value that the referenced question is tested using the specified operator
	// in order for the item to be enabled.
	Answer fhir.Element `fhirpath:"answer"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Specifies the criteria by which the question is enabled.
	Operator *fhir.Code `fhirpath:"operator"`

	// The linkId for the question whose answer (or lack of answer) governs whether
	// this item is enabled.
	Question *fhir.String `fhirpath:"question"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAnswer returns the value of the field Answer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiew *QuestionnaireItemEnableWhen) GetAnswer() fhir.Element {
	if qiew == nil {
		return nil
	}
	return qiew.Answer
}

// GetAnswerBoolean returns the value of the field Answer.
func (qiew *QuestionnaireItemEnableWhen) GetAnswerBoolean() *fhir.Boolean {
	if qiew == nil {
		return nil
	}
	val, ok := qiew.Answer.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetAnswerDecimal returns the value of the field Answer.
func (qiew *QuestionnaireItemEnableWhen) GetAnswerDecimal() *fhir.Decimal {
	if qiew == nil {
		return nil
	}
	val, ok := qiew.Answer.(*fhir.Decimal)
	if !ok {
		return nil
	}
	return val
}

// GetAnswerInteger returns the value of the field Answer.
func (qiew *QuestionnaireItemEnableWhen) GetAnswerInteger() *fhir.Integer {
	if qiew == nil {
		return nil
	}
	val, ok := qiew.Answer.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
}

// GetAnswerDate returns the value of the field Answer.
func (qiew *QuestionnaireItemEnableWhen) GetAnswerDate() *fhir.Date {
	if qiew == nil {
		return nil
	}
	val, ok := qiew.Answer.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetAnswerDateTime returns the value of the field Answer.
func (qiew *QuestionnaireItemEnableWhen) GetAnswerDateTime() *fhir.DateTime {
	if qiew == nil {
		return nil
	}
	val, ok := qiew.Answer.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetAnswerTime returns the value of the field Answer.
func (qiew *QuestionnaireItemEnableWhen) GetAnswerTime() *fhir.Time {
	if qiew == nil {
		return nil
	}
	val, ok := qiew.Answer.(*fhir.Time)
	if !ok {
		return nil
	}
	return val
}

// GetAnswerString returns the value of the field Answer.
func (qiew *QuestionnaireItemEnableWhen) GetAnswerString() *fhir.String {
	if qiew == nil {
		return nil
	}
	val, ok := qiew.Answer.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetAnswerCoding returns the value of the field Answer.
func (qiew *QuestionnaireItemEnableWhen) GetAnswerCoding() *fhir.Coding {
	if qiew == nil {
		return nil
	}
	val, ok := qiew.Answer.(*fhir.Coding)
	if !ok {
		return nil
	}
	return val
}

// GetAnswerQuantity returns the value of the field Answer.
func (qiew *QuestionnaireItemEnableWhen) GetAnswerQuantity() *fhir.Quantity {
	if qiew == nil {
		return nil
	}
	val, ok := qiew.Answer.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetAnswerReference returns the value of the field Answer.
func (qiew *QuestionnaireItemEnableWhen) GetAnswerReference() *fhir.Reference {
	if qiew == nil {
		return nil
	}
	val, ok := qiew.Answer.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiew *QuestionnaireItemEnableWhen) GetExtension() []*fhir.Extension {
	if qiew == nil {
		return nil
	}
	return qiew.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiew *QuestionnaireItemEnableWhen) GetID() string {
	if qiew == nil {
		return ""
	}
	return qiew.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiew *QuestionnaireItemEnableWhen) GetModifierExtension() []*fhir.Extension {
	if qiew == nil {
		return nil
	}
	return qiew.ModifierExtension
}

// GetOperator returns the value of the field Operator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiew *QuestionnaireItemEnableWhen) GetOperator() *fhir.Code {
	if qiew == nil {
		return nil
	}
	return qiew.Operator
}

// GetQuestion returns the value of the field Question.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qiew *QuestionnaireItemEnableWhen) GetQuestion() *fhir.String {
	if qiew == nil {
		return nil
	}
	return qiew.Question
}

// Initial value(s) when item is first rendered// One or more values that should be pre-populated in the answer when initially
// rendering the questionnaire for user input.// The user is allowed to change the value and override the default (unless
// marked as read-only). If the user doesn't change the value, then this
// initial value will be persisted when the QuestionnaireResponse is initially
// created. Note that initial values can influence results. The data type of
// initial[x] must agree with the item.type, and only repeating items can have
// more then one initial value.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Questionnaire.json
type QuestionnaireItemInitial struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The actual value to for an initial answer.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qii *QuestionnaireItemInitial) GetExtension() []*fhir.Extension {
	if qii == nil {
		return nil
	}
	return qii.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qii *QuestionnaireItemInitial) GetID() string {
	if qii == nil {
		return ""
	}
	return qii.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qii *QuestionnaireItemInitial) GetModifierExtension() []*fhir.Extension {
	if qii == nil {
		return nil
	}
	return qii.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (qii *QuestionnaireItemInitial) GetValue() fhir.Element {
	if qii == nil {
		return nil
	}
	return qii.Value
}

// GetValueBoolean returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueBoolean() *fhir.Boolean {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetValueDecimal returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueDecimal() *fhir.Decimal {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.Decimal)
	if !ok {
		return nil
	}
	return val
}

// GetValueInteger returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueInteger() *fhir.Integer {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
}

// GetValueDate returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueDate() *fhir.Date {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetValueDateTime returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueDateTime() *fhir.DateTime {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetValueTime returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueTime() *fhir.Time {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.Time)
	if !ok {
		return nil
	}
	return val
}

// GetValueString returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueString() *fhir.String {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueURI returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueURI() *fhir.URI {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.URI)
	if !ok {
		return nil
	}
	return val
}

// GetValueAttachment returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueAttachment() *fhir.Attachment {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.Attachment)
	if !ok {
		return nil
	}
	return val
}

// GetValueCoding returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueCoding() *fhir.Coding {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.Coding)
	if !ok {
		return nil
	}
	return val
}

// GetValueQuantity returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueQuantity() *fhir.Quantity {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetValueReference returns the value of the field Value.
func (qii *QuestionnaireItemInitial) GetValueReference() *fhir.Reference {
	if qii == nil {
		return nil
	}
	val, ok := qii.Value.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}
