// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package composition

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A set of healthcare-related information that is assembled together into a
// single logical package that provides a single coherent statement of meaning,
// establishes its own context and that has clinical attestation with regard to
// who is making the statement. A Composition defines the structure and
// narrative content necessary for a document. However, a Composition alone
// does not constitute a document. Rather, the Composition must be the first
// entry in a Bundle where Bundle.type=document, and any other resources
// referenced from Composition must be included as subsequent entries in the
// Bundle (for example Patient, Practitioner, Encounter, etc.).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Composition
//   - Source File: StructureDefinition-Composition.json
type Composition struct {

	// A participant who has attested to the accuracy of the composition/document.
	Attester []*CompositionAttester `fhirpath:"attester"`

	// Identifies who is responsible for the information in the composition, not
	// necessarily who typed it in.
	Author []*fhir.Reference `fhirpath:"author"`

	// A categorization for the type of the composition - helps for indexing and
	// searching. This may be implied by or derived from the code specified in the
	// Composition Type.
	Category []*fhir.CodeableConcept `fhirpath:"category"`

	// The code specifying the level of confidentiality of the Composition.
	Confidentiality *fhir.Code `fhirpath:"confidentiality"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Identifies the organization or group who is responsible for ongoing
	// maintenance of and access to the composition/document information.
	Custodian *fhir.Reference `fhirpath:"custodian"`

	// The composition editing time, when the composition was last logically
	// changed by the author.
	Date *fhir.DateTime `fhirpath:"date"`

	// Describes the clinical encounter or type of care this documentation is
	// associated with.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// The clinical service, such as a colonoscopy or an appendectomy, being
	// documented.
	Event []*CompositionEvent `fhirpath:"event"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A version-independent identifier for the Composition. This identifier stays
	// constant as the composition is changed over time.
	Identifier *fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Relationships that this composition has with other compositions or documents
	// that already exist.
	RelatesTo []*CompositionRelatesTo `fhirpath:"relatesTo"`

	// The root of the sections that make up the composition.
	Section []*CompositionSection `fhirpath:"section"`

	// The workflow/clinical status of this composition. The status is a marker for
	// the clinical standing of the document.
	Status *fhir.Code `fhirpath:"status"`

	// Who or what the composition is about. The composition can be about a person,
	// (patient or healthcare practitioner), a device (e.g. a machine) or even a
	// group of subjects (such as a document about a herd of livestock, or a set of
	// patients that share a common exposure).
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Official human-readable label for the composition.
	Title *fhir.String `fhirpath:"title"`

	// Specifies the particular kind of composition (e.g. History and Physical,
	// Discharge Summary, Progress Note). This usually equates to the purpose of
	// making the composition.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseComposition
	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAttester returns the value of the field Attester.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetAttester() []*CompositionAttester {
	if c == nil {
		return nil
	}
	return c.Attester
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetAuthor() []*fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Author
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetCategory() []*fhir.CodeableConcept {
	if c == nil {
		return nil
	}
	return c.Category
}

// GetConfidentiality returns the value of the field Confidentiality.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetConfidentiality() *fhir.Code {
	if c == nil {
		return nil
	}
	return c.Confidentiality
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetContained() []fhir.Resource {
	if c == nil {
		return nil
	}
	return c.Contained
}

// GetCustodian returns the value of the field Custodian.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetCustodian() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Custodian
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetDate() *fhir.DateTime {
	if c == nil {
		return nil
	}
	return c.Date
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetEncounter() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Encounter
}

// GetEvent returns the value of the field Event.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetEvent() []*CompositionEvent {
	if c == nil {
		return nil
	}
	return c.Event
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetExtension() []*fhir.Extension {
	if c == nil {
		return nil
	}
	return c.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetIdentifier() *fhir.Identifier {
	if c == nil {
		return nil
	}
	return c.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetImplicitRules() *fhir.URI {
	if c == nil {
		return nil
	}
	return c.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetLanguage() *fhir.Code {
	if c == nil {
		return nil
	}
	return c.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetMeta() *fhir.Meta {
	if c == nil {
		return nil
	}
	return c.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetModifierExtension() []*fhir.Extension {
	if c == nil {
		return nil
	}
	return c.ModifierExtension
}

// GetRelatesTo returns the value of the field RelatesTo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetRelatesTo() []*CompositionRelatesTo {
	if c == nil {
		return nil
	}
	return c.RelatesTo
}

// GetSection returns the value of the field Section.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetSection() []*CompositionSection {
	if c == nil {
		return nil
	}
	return c.Section
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetStatus() *fhir.Code {
	if c == nil {
		return nil
	}
	return c.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetSubject() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetText() *fhir.Narrative {
	if c == nil {
		return nil
	}
	return c.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetTitle() *fhir.String {
	if c == nil {
		return nil
	}
	return c.Title
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Composition) GetType() *fhir.CodeableConcept {
	if c == nil {
		return nil
	}
	return c.Type
}

// Attests to accuracy of composition// A participant who has attested to the accuracy of the composition/document.// Only list each attester once.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Composition.json
type CompositionAttester struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The type of attestation the authenticator offers.
	Mode *fhir.Code `fhirpath:"mode"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Who attested the composition in the specified way.
	Party *fhir.Reference `fhirpath:"party"`

	// When the composition was attested by the party.
	Time *fhir.DateTime `fhirpath:"time"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *CompositionAttester) GetExtension() []*fhir.Extension {
	if ca == nil {
		return nil
	}
	return ca.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *CompositionAttester) GetID() string {
	if ca == nil {
		return ""
	}
	return ca.ID
}

// GetMode returns the value of the field Mode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *CompositionAttester) GetMode() *fhir.Code {
	if ca == nil {
		return nil
	}
	return ca.Mode
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *CompositionAttester) GetModifierExtension() []*fhir.Extension {
	if ca == nil {
		return nil
	}
	return ca.ModifierExtension
}

// GetParty returns the value of the field Party.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *CompositionAttester) GetParty() *fhir.Reference {
	if ca == nil {
		return nil
	}
	return ca.Party
}

// GetTime returns the value of the field Time.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *CompositionAttester) GetTime() *fhir.DateTime {
	if ca == nil {
		return nil
	}
	return ca.Time
}

// The clinical service(s) being documented// The clinical service, such as a colonoscopy or an appendectomy, being
// documented.// The event needs to be consistent with the type element, though can provide
// further information if desired.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Composition.json
type CompositionEvent struct {

	// This list of codes represents the main clinical acts, such as a colonoscopy
	// or an appendectomy, being documented. In some cases, the event is inherent
	// in the typeCode, such as a "History and Physical Report" in which the
	// procedure being documented is necessarily a "History and Physical" act.
	Code []*fhir.CodeableConcept `fhirpath:"code"`

	// The description and/or reference of the event(s) being documented. For
	// example, this could be used to document such a colonoscopy or an
	// appendectomy.
	Detail []*fhir.Reference `fhirpath:"detail"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The period of time covered by the documentation. There is no assertion that
	// the documentation is a complete representation for this period, only that it
	// documents events during this time.
	Period *fhir.Period `fhirpath:"period"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CompositionEvent) GetCode() []*fhir.CodeableConcept {
	if ce == nil {
		return nil
	}
	return ce.Code
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CompositionEvent) GetDetail() []*fhir.Reference {
	if ce == nil {
		return nil
	}
	return ce.Detail
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CompositionEvent) GetExtension() []*fhir.Extension {
	if ce == nil {
		return nil
	}
	return ce.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CompositionEvent) GetID() string {
	if ce == nil {
		return ""
	}
	return ce.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CompositionEvent) GetModifierExtension() []*fhir.Extension {
	if ce == nil {
		return nil
	}
	return ce.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CompositionEvent) GetPeriod() *fhir.Period {
	if ce == nil {
		return nil
	}
	return ce.Period
}

// Relationships to other compositions/documents// Relationships that this composition has with other compositions or documents
// that already exist.// A document is a version specific composition.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Composition.json
type CompositionRelatesTo struct {

	// The type of relationship that this composition has with anther composition
	// or document.
	Code *fhir.Code `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The target composition/document of this relationship.
	Target fhir.Element `fhirpath:"target"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crt *CompositionRelatesTo) GetCode() *fhir.Code {
	if crt == nil {
		return nil
	}
	return crt.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crt *CompositionRelatesTo) GetExtension() []*fhir.Extension {
	if crt == nil {
		return nil
	}
	return crt.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crt *CompositionRelatesTo) GetID() string {
	if crt == nil {
		return ""
	}
	return crt.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crt *CompositionRelatesTo) GetModifierExtension() []*fhir.Extension {
	if crt == nil {
		return nil
	}
	return crt.ModifierExtension
}

// GetTarget returns the value of the field Target.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crt *CompositionRelatesTo) GetTarget() fhir.Element {
	if crt == nil {
		return nil
	}
	return crt.Target
}

// GetTargetIdentifier returns the value of the field Target.
func (crt *CompositionRelatesTo) GetTargetIdentifier() *fhir.Identifier {
	if crt == nil {
		return nil
	}
	val, ok := crt.Target.(*fhir.Identifier)
	if !ok {
		return nil
	}
	return val
}

// GetTargetReference returns the value of the field Target.
func (crt *CompositionRelatesTo) GetTargetReference() *fhir.Reference {
	if crt == nil {
		return nil
	}
	val, ok := crt.Target.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}

// Composition is broken into sections// The root of the sections that make up the composition.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Composition.json
type CompositionSection struct {

	// Identifies who is responsible for the information in this section, not
	// necessarily who typed it in.
	Author []*fhir.Reference `fhirpath:"author"`

	// A code identifying the kind of content contained within the section. This
	// must be consistent with the section title.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// If the section is empty, why the list is empty. An empty section typically
	// has some text explaining the empty reason.
	EmptyReason *fhir.CodeableConcept `fhirpath:"emptyReason"`

	// A reference to the actual resource from which the narrative in the section
	// is derived.
	Entry []*fhir.Reference `fhirpath:"entry"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The actual focus of the section when it is not the subject of the
	// composition, but instead represents something or someone associated with the
	// subject such as (for a patient subject) a spouse, parent, fetus, or donor.
	// If not focus is specified, the focus is assumed to be focus of the parent
	// section, or, for a section in the Composition itself, the subject of the
	// composition. Sections with a focus SHALL only include resources where the
	// logical subject (patient, subject, focus, etc.) matches the section focus,
	// or the resources have no logical subject (few resources).
	Focus *fhir.Reference `fhirpath:"focus"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// How the entry list was prepared - whether it is a working list that is
	// suitable for being maintained on an ongoing basis, or if it represents a
	// snapshot of a list of items from another source, or whether it is a prepared
	// list where items may be marked as added, modified or deleted.
	Mode *fhir.Code `fhirpath:"mode"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Specifies the order applied to the items in the section entries.
	OrderedBy *fhir.CodeableConcept `fhirpath:"orderedBy"`

	// A human-readable narrative that contains the attested content of the
	// section, used to represent the content of the resource to a human. The
	// narrative need not encode all the structured data, but is required to
	// contain sufficient detail to make it "clinically safe" for a human to just
	// read the narrative.
	Text *fhir.Narrative `fhirpath:"text"`

	// The label for this particular section. This will be part of the rendered
	// content for the document, and is often used to build a table of contents.
	Title *fhir.String `fhirpath:"title"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetAuthor() []*fhir.Reference {
	if cs == nil {
		return nil
	}
	return cs.Author
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetCode() *fhir.CodeableConcept {
	if cs == nil {
		return nil
	}
	return cs.Code
}

// GetEmptyReason returns the value of the field EmptyReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetEmptyReason() *fhir.CodeableConcept {
	if cs == nil {
		return nil
	}
	return cs.EmptyReason
}

// GetEntry returns the value of the field Entry.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetEntry() []*fhir.Reference {
	if cs == nil {
		return nil
	}
	return cs.Entry
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetExtension() []*fhir.Extension {
	if cs == nil {
		return nil
	}
	return cs.Extension
}

// GetFocus returns the value of the field Focus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetFocus() *fhir.Reference {
	if cs == nil {
		return nil
	}
	return cs.Focus
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetID() string {
	if cs == nil {
		return ""
	}
	return cs.ID
}

// GetMode returns the value of the field Mode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetMode() *fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.Mode
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetModifierExtension() []*fhir.Extension {
	if cs == nil {
		return nil
	}
	return cs.ModifierExtension
}

// GetOrderedBy returns the value of the field OrderedBy.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetOrderedBy() *fhir.CodeableConcept {
	if cs == nil {
		return nil
	}
	return cs.OrderedBy
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetText() *fhir.Narrative {
	if cs == nil {
		return nil
	}
	return cs.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CompositionSection) GetTitle() *fhir.String {
	if cs == nil {
		return nil
	}
	return cs.Title
}

func (c *Composition) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (c *Composition) UnmarshalJSON(data []byte) error {
	var raw struct {
		Attester        []*CompositionAttester  `json:"attester"`
		Author          []*fhir.Reference       `json:"author"`
		Category        []*fhir.CodeableConcept `json:"category"`
		Confidentiality *fhir.Code              `json:"confidentiality"`
		Contained       []fhir.Resource         `json:"contained"`
		Custodian       *fhir.Reference         `json:"custodian"`
		Date            *fhir.DateTime          `json:"date"`
		Encounter       *fhir.Reference         `json:"encounter"`
		Event           []*CompositionEvent     `json:"event"`
		Extension       []*fhir.Extension       `json:"extension"`

		ID                string                  `json:"id"`
		Identifier        *fhir.Identifier        `json:"identifier"`
		ImplicitRules     *fhir.URI               `json:"implicitRules"`
		Language          *fhir.Code              `json:"language"`
		Meta              *fhir.Meta              `json:"meta"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		RelatesTo         []*CompositionRelatesTo `json:"relatesTo"`
		Section           []*CompositionSection   `json:"section"`
		Status            *fhir.Code              `json:"status"`
		Subject           *fhir.Reference         `json:"subject"`
		Text              *fhir.Narrative         `json:"text"`
		Title             *fhir.String            `json:"title"`
		Type              *fhir.CodeableConcept   `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	c.Attester = raw.Attester
	c.Author = raw.Author
	c.Category = raw.Category
	c.Confidentiality = raw.Confidentiality
	c.Contained = raw.Contained
	c.Custodian = raw.Custodian
	c.Date = raw.Date
	c.Encounter = raw.Encounter
	c.Event = raw.Event
	c.Extension = raw.Extension
	c.ID = raw.ID
	c.Identifier = raw.Identifier
	c.ImplicitRules = raw.ImplicitRules
	c.Language = raw.Language
	c.Meta = raw.Meta
	c.ModifierExtension = raw.ModifierExtension
	c.RelatesTo = raw.RelatesTo
	c.Section = raw.Section
	c.Status = raw.Status
	c.Subject = raw.Subject
	c.Text = raw.Text
	c.Title = raw.Title
	c.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*Composition)(nil)
var _ json.Unmarshaler = (*Composition)(nil)

func (ca *CompositionAttester) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ca *CompositionAttester) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Mode              *fhir.Code        `json:"mode"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Party             *fhir.Reference   `json:"party"`
		Time              *fhir.DateTime    `json:"time"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ca.Extension = raw.Extension
	ca.ID = raw.ID
	ca.Mode = raw.Mode
	ca.ModifierExtension = raw.ModifierExtension
	ca.Party = raw.Party
	ca.Time = raw.Time
	return nil
}

var _ json.Marshaler = (*CompositionAttester)(nil)
var _ json.Unmarshaler = (*CompositionAttester)(nil)

func (ce *CompositionEvent) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ce *CompositionEvent) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      []*fhir.CodeableConcept `json:"code"`
		Detail    []*fhir.Reference       `json:"detail"`
		Extension []*fhir.Extension       `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Period            *fhir.Period      `json:"period"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ce.Code = raw.Code
	ce.Detail = raw.Detail
	ce.Extension = raw.Extension
	ce.ID = raw.ID
	ce.ModifierExtension = raw.ModifierExtension
	ce.Period = raw.Period
	return nil
}

var _ json.Marshaler = (*CompositionEvent)(nil)
var _ json.Unmarshaler = (*CompositionEvent)(nil)

func (crt *CompositionRelatesTo) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (crt *CompositionRelatesTo) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *fhir.Code        `json:"code"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		TargetIdentifier  *fhir.Identifier  `json:"targetIdentifier"`
		TargetReference   *fhir.Reference   `json:"targetReference"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	crt.Code = raw.Code
	crt.Extension = raw.Extension
	crt.ID = raw.ID
	crt.ModifierExtension = raw.ModifierExtension
	crt.Target, err = validate.SelectOneOf[fhir.Element]("Composition.relatesTo.target",
		raw.TargetIdentifier,
		raw.TargetReference)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*CompositionRelatesTo)(nil)
var _ json.Unmarshaler = (*CompositionRelatesTo)(nil)

func (cs *CompositionSection) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cs *CompositionSection) UnmarshalJSON(data []byte) error {
	var raw struct {
		Author      []*fhir.Reference     `json:"author"`
		Code        *fhir.CodeableConcept `json:"code"`
		EmptyReason *fhir.CodeableConcept `json:"emptyReason"`
		Entry       []*fhir.Reference     `json:"entry"`
		Extension   []*fhir.Extension     `json:"extension"`
		Focus       *fhir.Reference       `json:"focus"`

		ID                string                `json:"id"`
		Mode              *fhir.Code            `json:"mode"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		OrderedBy         *fhir.CodeableConcept `json:"orderedBy"`
		Text              *fhir.Narrative       `json:"text"`
		Title             *fhir.String          `json:"title"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cs.Author = raw.Author
	cs.Code = raw.Code
	cs.EmptyReason = raw.EmptyReason
	cs.Entry = raw.Entry
	cs.Extension = raw.Extension
	cs.Focus = raw.Focus
	cs.ID = raw.ID
	cs.Mode = raw.Mode
	cs.ModifierExtension = raw.ModifierExtension
	cs.OrderedBy = raw.OrderedBy
	cs.Text = raw.Text
	cs.Title = raw.Title
	return nil
}

var _ json.Marshaler = (*CompositionSection)(nil)
var _ json.Unmarshaler = (*CompositionSection)(nil)
