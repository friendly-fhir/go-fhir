// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package compartmentdefinition

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A compartment definition that defines how resources are accessed on a
// server.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/CompartmentDefinition
//   - Source File: StructureDefinition-CompartmentDefinition.json
type CompartmentDefinition struct {

	// Which compartment this definition describes.
	Code *fhir.Code `fhirpath:"code"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date (and optionally time) when the compartment definition was
	// published. The date must change when the business version changes and it
	// must change if the status code changes. In addition, it should change when
	// the substantive content of the compartment definition changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the compartment definition from
	// a consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// A Boolean value to indicate that this compartment definition is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to
	// be used for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the compartment definition. This name
	// should be usable as an identifier for the module by machine processing
	// applications such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// The name of the organization or individual that published the compartment
	// definition.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this compartment definition is needed and why it has been
	// designed as it has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// Information about how a resource is related to the compartment.
	Resource []*CompartmentDefinitionResource `fhirpath:"resource"`

	// Whether the search syntax is supported,.
	Search *fhir.Boolean `fhirpath:"search"`

	// The status of this compartment definition. Enables tracking the life-cycle
	// of the content.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// An absolute URI that is used to identify this compartment definition when it
	// is referenced in a specification, model, design or an instance; also called
	// its canonical identifier. This SHOULD be globally unique and SHOULD be a
	// literal address at which at which an authoritative instance of this
	// compartment definition is (or will be) published. This URL can be the target
	// of a canonical reference. It SHALL remain the same when the compartment
	// definition is stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// compartment definition instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the compartment
	// definition when it is referenced in a specification, model, design or
	// instance. This is an arbitrary value managed by the compartment definition
	// author and is not expected to be globally unique. For example, it might be a
	// timestamp (e.g. yyyymmdd) if a managed version is not available. There is
	// also no expectation that versions can be placed in a lexicographical
	// sequence.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetCode() *fhir.Code {
	if cd == nil {
		return nil
	}
	return cd.Code
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetContact() []*fhir.ContactDetail {
	if cd == nil {
		return nil
	}
	return cd.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetContained() []fhir.Resource {
	if cd == nil {
		return nil
	}
	return cd.Contained
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetDate() *fhir.DateTime {
	if cd == nil {
		return nil
	}
	return cd.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetDescription() *fhir.Markdown {
	if cd == nil {
		return nil
	}
	return cd.Description
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetExperimental() *fhir.Boolean {
	if cd == nil {
		return nil
	}
	return cd.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetExtension() []*fhir.Extension {
	if cd == nil {
		return nil
	}
	return cd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetID() string {
	if cd == nil {
		return ""
	}
	return cd.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetImplicitRules() *fhir.URI {
	if cd == nil {
		return nil
	}
	return cd.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetLanguage() *fhir.Code {
	if cd == nil {
		return nil
	}
	return cd.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetMeta() *fhir.Meta {
	if cd == nil {
		return nil
	}
	return cd.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetModifierExtension() []*fhir.Extension {
	if cd == nil {
		return nil
	}
	return cd.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetName() *fhir.String {
	if cd == nil {
		return nil
	}
	return cd.Name
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetPublisher() *fhir.String {
	if cd == nil {
		return nil
	}
	return cd.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetPurpose() *fhir.Markdown {
	if cd == nil {
		return nil
	}
	return cd.Purpose
}

// GetResource returns the value of the field Resource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetResource() []*CompartmentDefinitionResource {
	if cd == nil {
		return nil
	}
	return cd.Resource
}

// GetSearch returns the value of the field Search.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetSearch() *fhir.Boolean {
	if cd == nil {
		return nil
	}
	return cd.Search
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetStatus() *fhir.Code {
	if cd == nil {
		return nil
	}
	return cd.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetText() *fhir.Narrative {
	if cd == nil {
		return nil
	}
	return cd.Text
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetURL() *fhir.URI {
	if cd == nil {
		return nil
	}
	return cd.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetUseContext() []*fhir.UsageContext {
	if cd == nil {
		return nil
	}
	return cd.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *CompartmentDefinition) GetVersion() *fhir.String {
	if cd == nil {
		return nil
	}
	return cd.Version
}

// How a resource is related to the compartment// Information about how a resource is related to the compartment.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CompartmentDefinition.json
type CompartmentDefinitionResource struct {

	// The name of a resource supported by the server.
	Code *fhir.Code `fhirpath:"code"`

	// Additional documentation about the resource and compartment.
	Documentation *fhir.String `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of a search parameter that represents the link to the compartment.
	// More than one may be listed because a resource may be linked to a
	// compartment in more than one way,.
	Param []*fhir.String `fhirpath:"param"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cdr *CompartmentDefinitionResource) GetCode() *fhir.Code {
	if cdr == nil {
		return nil
	}
	return cdr.Code
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cdr *CompartmentDefinitionResource) GetDocumentation() *fhir.String {
	if cdr == nil {
		return nil
	}
	return cdr.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cdr *CompartmentDefinitionResource) GetExtension() []*fhir.Extension {
	if cdr == nil {
		return nil
	}
	return cdr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cdr *CompartmentDefinitionResource) GetID() string {
	if cdr == nil {
		return ""
	}
	return cdr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cdr *CompartmentDefinitionResource) GetModifierExtension() []*fhir.Extension {
	if cdr == nil {
		return nil
	}
	return cdr.ModifierExtension
}

// GetParam returns the value of the field Param.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cdr *CompartmentDefinitionResource) GetParam() []*fhir.String {
	if cdr == nil {
		return nil
	}
	return cdr.Param
}

func (cd *CompartmentDefinition) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cd *CompartmentDefinition) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code         *fhir.Code            `json:"code"`
		Contact      []*fhir.ContactDetail `json:"contact"`
		Contained    []fhir.Resource       `json:"contained"`
		Date         *fhir.DateTime        `json:"date"`
		Description  *fhir.Markdown        `json:"description"`
		Experimental *fhir.Boolean         `json:"experimental"`
		Extension    []*fhir.Extension     `json:"extension"`

		ID                string                           `json:"id"`
		ImplicitRules     *fhir.URI                        `json:"implicitRules"`
		Language          *fhir.Code                       `json:"language"`
		Meta              *fhir.Meta                       `json:"meta"`
		ModifierExtension []*fhir.Extension                `json:"modifierExtension"`
		Name              *fhir.String                     `json:"name"`
		Publisher         *fhir.String                     `json:"publisher"`
		Purpose           *fhir.Markdown                   `json:"purpose"`
		Resource          []*CompartmentDefinitionResource `json:"resource"`
		Search            *fhir.Boolean                    `json:"search"`
		Status            *fhir.Code                       `json:"status"`
		Text              *fhir.Narrative                  `json:"text"`
		URL               *fhir.URI                        `json:"url"`
		UseContext        []*fhir.UsageContext             `json:"useContext"`
		Version           *fhir.String                     `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cd.Code = raw.Code
	cd.Contact = raw.Contact
	cd.Contained = raw.Contained
	cd.Date = raw.Date
	cd.Description = raw.Description
	cd.Experimental = raw.Experimental
	cd.Extension = raw.Extension
	cd.ID = raw.ID
	cd.ImplicitRules = raw.ImplicitRules
	cd.Language = raw.Language
	cd.Meta = raw.Meta
	cd.ModifierExtension = raw.ModifierExtension
	cd.Name = raw.Name
	cd.Publisher = raw.Publisher
	cd.Purpose = raw.Purpose
	cd.Resource = raw.Resource
	cd.Search = raw.Search
	cd.Status = raw.Status
	cd.Text = raw.Text
	cd.URL = raw.URL
	cd.UseContext = raw.UseContext
	cd.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*CompartmentDefinition)(nil)
var _ json.Unmarshaler = (*CompartmentDefinition)(nil)

func (cdr *CompartmentDefinitionResource) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cdr *CompartmentDefinitionResource) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code          *fhir.Code        `json:"code"`
		Documentation *fhir.String      `json:"documentation"`
		Extension     []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Param             []*fhir.String    `json:"param"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cdr.Code = raw.Code
	cdr.Documentation = raw.Documentation
	cdr.Extension = raw.Extension
	cdr.ID = raw.ID
	cdr.ModifierExtension = raw.ModifierExtension
	cdr.Param = raw.Param
	return nil
}

var _ json.Marshaler = (*CompartmentDefinitionResource)(nil)
var _ json.Unmarshaler = (*CompartmentDefinitionResource)(nil)
