// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package device

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A type of a manufactured item that is used in the provision of healthcare
// without being substantially changed through that activity. The device may be
// a medical or non-medical device.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Device
//   - Source File: StructureDefinition-Device.json
type Device struct {

	// Contact details for an organization or a particular human that is
	// responsible for the device.
	Contact []*fhir.ContactPoint `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The reference to the definition for the device.
	Definition *fhir.Reference `fhirpath:"definition"`

	// This represents the manufacturer's name of the device as provided by the
	// device, from a UDI label, or by a person describing the Device. This
	// typically would be used when a person provides the name(s) or when the
	// device represents one of the names available from DeviceDefinition.
	DeviceName []*DeviceDeviceName `fhirpath:"deviceName"`

	// The distinct identification string as required by regulation for a human
	// cell, tissue, or cellular and tissue-based product.
	DistinctIdentifier *fhir.String `fhirpath:"distinctIdentifier"`

	// The date and time beyond which this device is no longer valid or should not
	// be used (if applicable).
	ExpirationDate *fhir.DateTime `fhirpath:"expirationDate"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Unique instance identifiers assigned to a device by manufacturers other
	// organizations or owners.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The place where the device can be found.
	Location *fhir.Reference `fhirpath:"location"`

	// Lot number assigned by the manufacturer.
	LotNumber *fhir.String `fhirpath:"lotNumber"`

	// The date and time when the device was manufactured.
	ManufactureDate *fhir.DateTime `fhirpath:"manufactureDate"`

	// A name of the manufacturer.
	Manufacturer *fhir.String `fhirpath:"manufacturer"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// The model number for the device.
	ModelNumber *fhir.String `fhirpath:"modelNumber"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Descriptive information, usage information or implantation information that
	// is not captured in an existing element.
	Note []*fhir.Annotation `fhirpath:"note"`

	// An organization that is responsible for the provision and ongoing
	// maintenance of the device.
	Owner *fhir.Reference `fhirpath:"owner"`

	// The parent device.
	Parent *fhir.Reference `fhirpath:"parent"`

	// The part number of the device.
	PartNumber *fhir.String `fhirpath:"partNumber"`

	// Patient information, If the device is affixed to a person.
	Patient *fhir.Reference `fhirpath:"patient"`

	// The actual configuration settings of a device as it actually operates, e.g.,
	// regulation status, time properties.
	Property []*DeviceProperty `fhirpath:"property"`

	// Provides additional safety characteristics about a medical device. For
	// example devices containing latex.
	Safety []*fhir.CodeableConcept `fhirpath:"safety"`

	// The serial number assigned by the organization when the device was
	// manufactured.
	SerialNumber *fhir.String `fhirpath:"serialNumber"`

	// The capabilities supported on a device, the standards to which the device
	// conforms for a particular purpose, and used for the communication.
	Specialization []*DeviceSpecialization `fhirpath:"specialization"`

	// Status of the Device availability.
	Status *fhir.Code `fhirpath:"status"`

	// Reason for the dtatus of the Device availability.
	StatusReason []*fhir.CodeableConcept `fhirpath:"statusReason"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// The kind or type of device.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// Unique device identifier (UDI) assigned to device label or package. Note
	// that the Device may include multiple udiCarriers as it either may include
	// just the udiCarrier for the jurisdiction it is sold, or for multiple
	// jurisdictions it could have been sold.
	UdiCarrier []*DeviceUdiCarrier `fhirpath:"udiCarrier"`

	// A network address on which the device may be contacted directly.
	URL *fhir.URI `fhirpath:"url"`

	// The actual design of the device or software version running on the device.
	Version []*DeviceVersion `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetContact() []*fhir.ContactPoint {
	if d == nil {
		return nil
	}
	return d.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetContained() []fhir.Resource {
	if d == nil {
		return nil
	}
	return d.Contained
}

// GetDefinition returns the value of the field Definition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetDefinition() *fhir.Reference {
	if d == nil {
		return nil
	}
	return d.Definition
}

// GetDeviceName returns the value of the field DeviceName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetDeviceName() []*DeviceDeviceName {
	if d == nil {
		return nil
	}
	return d.DeviceName
}

// GetDistinctIdentifier returns the value of the field DistinctIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetDistinctIdentifier() *fhir.String {
	if d == nil {
		return nil
	}
	return d.DistinctIdentifier
}

// GetExpirationDate returns the value of the field ExpirationDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetExpirationDate() *fhir.DateTime {
	if d == nil {
		return nil
	}
	return d.ExpirationDate
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetExtension() []*fhir.Extension {
	if d == nil {
		return nil
	}
	return d.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetIdentifier() []*fhir.Identifier {
	if d == nil {
		return nil
	}
	return d.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetImplicitRules() *fhir.URI {
	if d == nil {
		return nil
	}
	return d.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetLanguage() *fhir.Code {
	if d == nil {
		return nil
	}
	return d.Language
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetLocation() *fhir.Reference {
	if d == nil {
		return nil
	}
	return d.Location
}

// GetLotNumber returns the value of the field LotNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetLotNumber() *fhir.String {
	if d == nil {
		return nil
	}
	return d.LotNumber
}

// GetManufactureDate returns the value of the field ManufactureDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetManufactureDate() *fhir.DateTime {
	if d == nil {
		return nil
	}
	return d.ManufactureDate
}

// GetManufacturer returns the value of the field Manufacturer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetManufacturer() *fhir.String {
	if d == nil {
		return nil
	}
	return d.Manufacturer
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetMeta() *fhir.Meta {
	if d == nil {
		return nil
	}
	return d.Meta
}

// GetModelNumber returns the value of the field ModelNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetModelNumber() *fhir.String {
	if d == nil {
		return nil
	}
	return d.ModelNumber
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetModifierExtension() []*fhir.Extension {
	if d == nil {
		return nil
	}
	return d.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetNote() []*fhir.Annotation {
	if d == nil {
		return nil
	}
	return d.Note
}

// GetOwner returns the value of the field Owner.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetOwner() *fhir.Reference {
	if d == nil {
		return nil
	}
	return d.Owner
}

// GetParent returns the value of the field Parent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetParent() *fhir.Reference {
	if d == nil {
		return nil
	}
	return d.Parent
}

// GetPartNumber returns the value of the field PartNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetPartNumber() *fhir.String {
	if d == nil {
		return nil
	}
	return d.PartNumber
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetPatient() *fhir.Reference {
	if d == nil {
		return nil
	}
	return d.Patient
}

// GetProperty returns the value of the field Property.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetProperty() []*DeviceProperty {
	if d == nil {
		return nil
	}
	return d.Property
}

// GetSafety returns the value of the field Safety.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetSafety() []*fhir.CodeableConcept {
	if d == nil {
		return nil
	}
	return d.Safety
}

// GetSerialNumber returns the value of the field SerialNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetSerialNumber() *fhir.String {
	if d == nil {
		return nil
	}
	return d.SerialNumber
}

// GetSpecialization returns the value of the field Specialization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetSpecialization() []*DeviceSpecialization {
	if d == nil {
		return nil
	}
	return d.Specialization
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetStatus() *fhir.Code {
	if d == nil {
		return nil
	}
	return d.Status
}

// GetStatusReason returns the value of the field StatusReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetStatusReason() []*fhir.CodeableConcept {
	if d == nil {
		return nil
	}
	return d.StatusReason
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetText() *fhir.Narrative {
	if d == nil {
		return nil
	}
	return d.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetType() *fhir.CodeableConcept {
	if d == nil {
		return nil
	}
	return d.Type
}

// GetUdiCarrier returns the value of the field UdiCarrier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetUdiCarrier() []*DeviceUdiCarrier {
	if d == nil {
		return nil
	}
	return d.UdiCarrier
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetURL() *fhir.URI {
	if d == nil {
		return nil
	}
	return d.URL
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (d *Device) GetVersion() []*DeviceVersion {
	if d == nil {
		return nil
	}
	return d.Version
}

// The name of the device as given by the manufacturer// This represents the manufacturer's name of the device as provided by the
// device, from a UDI label, or by a person describing the Device. This
// typically would be used when a person provides the name(s) or when the
// device represents one of the names available from DeviceDefinition.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Device.json
type DeviceDeviceName struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of the device.
	Name *fhir.String `fhirpath:"name"`

	// The type of deviceName. UDILabelName | UserFriendlyName |
	// PatientReportedName | ManufactureDeviceName | ModelName.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddn *DeviceDeviceName) GetExtension() []*fhir.Extension {
	if ddn == nil {
		return nil
	}
	return ddn.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddn *DeviceDeviceName) GetID() string {
	if ddn == nil {
		return ""
	}
	return ddn.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddn *DeviceDeviceName) GetModifierExtension() []*fhir.Extension {
	if ddn == nil {
		return nil
	}
	return ddn.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddn *DeviceDeviceName) GetName() *fhir.String {
	if ddn == nil {
		return nil
	}
	return ddn.Name
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddn *DeviceDeviceName) GetType() *fhir.Code {
	if ddn == nil {
		return nil
	}
	return ddn.Type
}

// The actual configuration settings of a device as it actually operates, e.g.,
// regulation status, time properties// The actual configuration settings of a device as it actually operates, e.g.,
// regulation status, time properties.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Device.json
type DeviceProperty struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// Property value as a code, e.g., NTP4 (synced to NTP).
	ValueCode []*fhir.CodeableConcept `fhirpath:"valueCode"`

	// Property value as a quantity.
	ValueQuantity []*fhir.Quantity `fhirpath:"valueQuantity"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dp *DeviceProperty) GetExtension() []*fhir.Extension {
	if dp == nil {
		return nil
	}
	return dp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dp *DeviceProperty) GetID() string {
	if dp == nil {
		return ""
	}
	return dp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dp *DeviceProperty) GetModifierExtension() []*fhir.Extension {
	if dp == nil {
		return nil
	}
	return dp.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dp *DeviceProperty) GetType() *fhir.CodeableConcept {
	if dp == nil {
		return nil
	}
	return dp.Type
}

// GetValueCode returns the value of the field ValueCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dp *DeviceProperty) GetValueCode() []*fhir.CodeableConcept {
	if dp == nil {
		return nil
	}
	return dp.ValueCode
}

// GetValueQuantity returns the value of the field ValueQuantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dp *DeviceProperty) GetValueQuantity() []*fhir.Quantity {
	if dp == nil {
		return nil
	}
	return dp.ValueQuantity
}

// The capabilities supported on a device, the standards to which the device
// conforms for a particular purpose, and used for the communication// The capabilities supported on a device, the standards to which the device
// conforms for a particular purpose, and used for the communication.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Device.json
type DeviceSpecialization struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The standard that is used to operate and communicate.
	SystemType *fhir.CodeableConcept `fhirpath:"systemType"`

	// The version of the standard that is used to operate and communicate.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ds *DeviceSpecialization) GetExtension() []*fhir.Extension {
	if ds == nil {
		return nil
	}
	return ds.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ds *DeviceSpecialization) GetID() string {
	if ds == nil {
		return ""
	}
	return ds.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ds *DeviceSpecialization) GetModifierExtension() []*fhir.Extension {
	if ds == nil {
		return nil
	}
	return ds.ModifierExtension
}

// GetSystemType returns the value of the field SystemType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ds *DeviceSpecialization) GetSystemType() *fhir.CodeableConcept {
	if ds == nil {
		return nil
	}
	return ds.SystemType
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ds *DeviceSpecialization) GetVersion() *fhir.String {
	if ds == nil {
		return nil
	}
	return ds.Version
}

// Unique Device Identifier (UDI) Barcode string// Unique device identifier (UDI) assigned to device label or package. Note
// that the Device may include multiple udiCarriers as it either may include
// just the udiCarrier for the jurisdiction it is sold, or for multiple
// jurisdictions it could have been sold.// UDI may identify an unique instance of a device, or it may only identify the
// type of the device. See [UDI mappings](device-mappings.html#udi) for a
// complete mapping of UDI parts to Device.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Device.json
type DeviceUdiCarrier struct {

	// The full UDI carrier of the Automatic Identification and Data Capture (AIDC)
	// technology representation of the barcode string as printed on the packaging
	// of the device - e.g., a barcode or RFID. Because of limitations on character
	// sets in XML and the need to round-trip JSON data through XML, AIDC Formats
	// *SHALL* be base64 encoded.
	CarrierAidc *fhir.Base64Binary `fhirpath:"carrierAidc"`

	// The full UDI carrier as the human readable form (HRF) representation of the
	// barcode string as printed on the packaging of the device.
	CarrierHrf *fhir.String `fhirpath:"carrierHrf"`

	// The device identifier (DI) is a mandatory, fixed portion of a UDI that
	// identifies the labeler and the specific version or model of a device.
	DeviceIdentifier *fhir.String `fhirpath:"deviceIdentifier"`

	// A coded entry to indicate how the data was entered.
	EntryType *fhir.Code `fhirpath:"entryType"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Organization that is charged with issuing UDIs for devices. For example, the
	// US FDA issuers include : 1) GS1: http://hl7.org/fhir/NamingSystem/gs1-di, 2)
	// HIBCC: http://hl7.org/fhir/NamingSystem/hibcc-dI, 3) ICCBBA for blood
	// containers: http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 4) ICCBA for
	// other devices: http://hl7.org/fhir/NamingSystem/iccbba-other-di.
	Issuer *fhir.URI `fhirpath:"issuer"`

	// The identity of the authoritative source for UDI generation within a
	// jurisdiction. All UDIs are globally unique within a single namespace with
	// the appropriate repository uri as the system. For example, UDIs of devices
	// managed in the U.S. by the FDA, the value is
	// http://hl7.org/fhir/NamingSystem/fda-udi.
	Jurisdiction *fhir.URI `fhirpath:"jurisdiction"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCarrierAidc returns the value of the field CarrierAidc.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (duc *DeviceUdiCarrier) GetCarrierAidc() *fhir.Base64Binary {
	if duc == nil {
		return nil
	}
	return duc.CarrierAidc
}

// GetCarrierHrf returns the value of the field CarrierHrf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (duc *DeviceUdiCarrier) GetCarrierHrf() *fhir.String {
	if duc == nil {
		return nil
	}
	return duc.CarrierHrf
}

// GetDeviceIdentifier returns the value of the field DeviceIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (duc *DeviceUdiCarrier) GetDeviceIdentifier() *fhir.String {
	if duc == nil {
		return nil
	}
	return duc.DeviceIdentifier
}

// GetEntryType returns the value of the field EntryType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (duc *DeviceUdiCarrier) GetEntryType() *fhir.Code {
	if duc == nil {
		return nil
	}
	return duc.EntryType
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (duc *DeviceUdiCarrier) GetExtension() []*fhir.Extension {
	if duc == nil {
		return nil
	}
	return duc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (duc *DeviceUdiCarrier) GetID() string {
	if duc == nil {
		return ""
	}
	return duc.ID
}

// GetIssuer returns the value of the field Issuer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (duc *DeviceUdiCarrier) GetIssuer() *fhir.URI {
	if duc == nil {
		return nil
	}
	return duc.Issuer
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (duc *DeviceUdiCarrier) GetJurisdiction() *fhir.URI {
	if duc == nil {
		return nil
	}
	return duc.Jurisdiction
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (duc *DeviceUdiCarrier) GetModifierExtension() []*fhir.Extension {
	if duc == nil {
		return nil
	}
	return duc.ModifierExtension
}

// The actual design of the device or software version running on the device// The actual design of the device or software version running on the device.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Device.json
type DeviceVersion struct {

	// A single component of the device version.
	Component *fhir.Identifier `fhirpath:"component"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type of the device version.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// The version text.
	Value *fhir.String `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetComponent returns the value of the field Component.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dv *DeviceVersion) GetComponent() *fhir.Identifier {
	if dv == nil {
		return nil
	}
	return dv.Component
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dv *DeviceVersion) GetExtension() []*fhir.Extension {
	if dv == nil {
		return nil
	}
	return dv.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dv *DeviceVersion) GetID() string {
	if dv == nil {
		return ""
	}
	return dv.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dv *DeviceVersion) GetModifierExtension() []*fhir.Extension {
	if dv == nil {
		return nil
	}
	return dv.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dv *DeviceVersion) GetType() *fhir.CodeableConcept {
	if dv == nil {
		return nil
	}
	return dv.Type
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dv *DeviceVersion) GetValue() *fhir.String {
	if dv == nil {
		return nil
	}
	return dv.Value
}

func (d *Device) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (d *Device) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contact            []*fhir.ContactPoint `json:"contact"`
		Contained          []fhir.Resource      `json:"contained"`
		Definition         *fhir.Reference      `json:"definition"`
		DeviceName         []*DeviceDeviceName  `json:"deviceName"`
		DistinctIdentifier *fhir.String         `json:"distinctIdentifier"`
		ExpirationDate     *fhir.DateTime       `json:"expirationDate"`
		Extension          []*fhir.Extension    `json:"extension"`

		ID                string                  `json:"id"`
		Identifier        []*fhir.Identifier      `json:"identifier"`
		ImplicitRules     *fhir.URI               `json:"implicitRules"`
		Language          *fhir.Code              `json:"language"`
		Location          *fhir.Reference         `json:"location"`
		LotNumber         *fhir.String            `json:"lotNumber"`
		ManufactureDate   *fhir.DateTime          `json:"manufactureDate"`
		Manufacturer      *fhir.String            `json:"manufacturer"`
		Meta              *fhir.Meta              `json:"meta"`
		ModelNumber       *fhir.String            `json:"modelNumber"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Note              []*fhir.Annotation      `json:"note"`
		Owner             *fhir.Reference         `json:"owner"`
		Parent            *fhir.Reference         `json:"parent"`
		PartNumber        *fhir.String            `json:"partNumber"`
		Patient           *fhir.Reference         `json:"patient"`
		Property          []*DeviceProperty       `json:"property"`
		Safety            []*fhir.CodeableConcept `json:"safety"`
		SerialNumber      *fhir.String            `json:"serialNumber"`
		Specialization    []*DeviceSpecialization `json:"specialization"`
		Status            *fhir.Code              `json:"status"`
		StatusReason      []*fhir.CodeableConcept `json:"statusReason"`
		Text              *fhir.Narrative         `json:"text"`
		Type              *fhir.CodeableConcept   `json:"type"`
		UdiCarrier        []*DeviceUdiCarrier     `json:"udiCarrier"`
		URL               *fhir.URI               `json:"url"`
		Version           []*DeviceVersion        `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	d.Contact = raw.Contact
	d.Contained = raw.Contained
	d.Definition = raw.Definition
	d.DeviceName = raw.DeviceName
	d.DistinctIdentifier = raw.DistinctIdentifier
	d.ExpirationDate = raw.ExpirationDate
	d.Extension = raw.Extension
	d.ID = raw.ID
	d.Identifier = raw.Identifier
	d.ImplicitRules = raw.ImplicitRules
	d.Language = raw.Language
	d.Location = raw.Location
	d.LotNumber = raw.LotNumber
	d.ManufactureDate = raw.ManufactureDate
	d.Manufacturer = raw.Manufacturer
	d.Meta = raw.Meta
	d.ModelNumber = raw.ModelNumber
	d.ModifierExtension = raw.ModifierExtension
	d.Note = raw.Note
	d.Owner = raw.Owner
	d.Parent = raw.Parent
	d.PartNumber = raw.PartNumber
	d.Patient = raw.Patient
	d.Property = raw.Property
	d.Safety = raw.Safety
	d.SerialNumber = raw.SerialNumber
	d.Specialization = raw.Specialization
	d.Status = raw.Status
	d.StatusReason = raw.StatusReason
	d.Text = raw.Text
	d.Type = raw.Type
	d.UdiCarrier = raw.UdiCarrier
	d.URL = raw.URL
	d.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*Device)(nil)
var _ json.Unmarshaler = (*Device)(nil)

func (ddn *DeviceDeviceName) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ddn *DeviceDeviceName) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Name              *fhir.String      `json:"name"`
		Type              *fhir.Code        `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ddn.Extension = raw.Extension
	ddn.ID = raw.ID
	ddn.ModifierExtension = raw.ModifierExtension
	ddn.Name = raw.Name
	ddn.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*DeviceDeviceName)(nil)
var _ json.Unmarshaler = (*DeviceDeviceName)(nil)

func (dp *DeviceProperty) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (dp *DeviceProperty) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                  `json:"id"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Type              *fhir.CodeableConcept   `json:"type"`
		ValueCode         []*fhir.CodeableConcept `json:"valueCode"`
		ValueQuantity     []*fhir.Quantity        `json:"valueQuantity"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	dp.Extension = raw.Extension
	dp.ID = raw.ID
	dp.ModifierExtension = raw.ModifierExtension
	dp.Type = raw.Type
	dp.ValueCode = raw.ValueCode
	dp.ValueQuantity = raw.ValueQuantity
	return nil
}

var _ json.Marshaler = (*DeviceProperty)(nil)
var _ json.Unmarshaler = (*DeviceProperty)(nil)

func (ds *DeviceSpecialization) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ds *DeviceSpecialization) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		SystemType        *fhir.CodeableConcept `json:"systemType"`
		Version           *fhir.String          `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ds.Extension = raw.Extension
	ds.ID = raw.ID
	ds.ModifierExtension = raw.ModifierExtension
	ds.SystemType = raw.SystemType
	ds.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*DeviceSpecialization)(nil)
var _ json.Unmarshaler = (*DeviceSpecialization)(nil)

func (duc *DeviceUdiCarrier) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (duc *DeviceUdiCarrier) UnmarshalJSON(data []byte) error {
	var raw struct {
		CarrierAidc      *fhir.Base64Binary `json:"carrierAidc"`
		CarrierHrf       *fhir.String       `json:"carrierHrf"`
		DeviceIdentifier *fhir.String       `json:"deviceIdentifier"`
		EntryType        *fhir.Code         `json:"entryType"`
		Extension        []*fhir.Extension  `json:"extension"`

		ID                string            `json:"id"`
		Issuer            *fhir.URI         `json:"issuer"`
		Jurisdiction      *fhir.URI         `json:"jurisdiction"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	duc.CarrierAidc = raw.CarrierAidc
	duc.CarrierHrf = raw.CarrierHrf
	duc.DeviceIdentifier = raw.DeviceIdentifier
	duc.EntryType = raw.EntryType
	duc.Extension = raw.Extension
	duc.ID = raw.ID
	duc.Issuer = raw.Issuer
	duc.Jurisdiction = raw.Jurisdiction
	duc.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*DeviceUdiCarrier)(nil)
var _ json.Unmarshaler = (*DeviceUdiCarrier)(nil)

func (dv *DeviceVersion) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (dv *DeviceVersion) UnmarshalJSON(data []byte) error {
	var raw struct {
		Component *fhir.Identifier  `json:"component"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Type              *fhir.CodeableConcept `json:"type"`
		Value             *fhir.String          `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	dv.Component = raw.Component
	dv.Extension = raw.Extension
	dv.ID = raw.ID
	dv.ModifierExtension = raw.ModifierExtension
	dv.Type = raw.Type
	dv.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*DeviceVersion)(nil)
var _ json.Unmarshaler = (*DeviceVersion)(nil)
