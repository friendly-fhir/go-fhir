// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package location

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Details and position information for a physical place where services are
// provided and resources and participants may be stored, found, contained, or
// accommodated.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Location
//   - Source File: StructureDefinition-Location.json
type Location struct {

	// Physical location.
	Address *fhir.Address `fhirpath:"address"`

	// A list of alternate names that the location is known as, or was known as, in
	// the past.
	Alias []*fhir.String `fhirpath:"alias"`

	// A description of when the locations opening ours are different to normal,
	// e.g. public holiday availability. Succinctly describing all possible
	// exceptions to normal site availability as detailed in the opening hours
	// Times.
	AvailabilityExceptions *fhir.String `fhirpath:"availabilityExceptions"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Description of the Location, which helps in finding or referencing the
	// place.
	Description *fhir.String `fhirpath:"description"`

	// Technical endpoints providing access to services operated for the location.
	Endpoint []*fhir.Reference `fhirpath:"endpoint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// What days/times during a week is this location usually open.
	HoursOfOperation []*LocationHoursOfOperation `fhirpath:"hoursOfOperation"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Unique code or number identifying the location to its users.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The organization responsible for the provisioning and upkeep of the
	// location.
	ManagingOrganization *fhir.Reference `fhirpath:"managingOrganization"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// Indicates whether a resource instance represents a specific location or a
	// class of locations.
	Mode *fhir.Code `fhirpath:"mode"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Name of the location as used by humans. Does not need to be unique.
	Name *fhir.String `fhirpath:"name"`

	// The operational status covers operation values most relevant to beds (but
	// can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis
	// chair). This typically covers concepts such as contamination, housekeeping,
	// and other activities like maintenance.
	OperationalStatus *fhir.Coding `fhirpath:"operationalStatus"`

	// Another Location of which this Location is physically a part of.
	PartOf *fhir.Reference `fhirpath:"partOf"`

	// Physical form of the location, e.g. building, room, vehicle, road.
	PhysicalType *fhir.CodeableConcept `fhirpath:"physicalType"`

	// The absolute geographic location of the Location, expressed using the WGS84
	// datum (This is the same co-ordinate system used in KML).
	Position *LocationPosition `fhirpath:"position"`

	// The status property covers the general availability of the resource, not the
	// current value which may be covered by the operationStatus, or by a
	// schedule/slots if they are configured for the location.
	Status *fhir.Code `fhirpath:"status"`

	// The contact details of communication devices available at the location. This
	// can include phone numbers, fax numbers, mobile numbers, email addresses and
	// web sites.
	Telecom []*fhir.ContactPoint `fhirpath:"telecom"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Indicates the type of function performed at the location.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAddress returns the value of the field Address.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetAddress() *fhir.Address {
	if l == nil {
		return nil
	}
	return l.Address
}

// GetAlias returns the value of the field Alias.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetAlias() []*fhir.String {
	if l == nil {
		return nil
	}
	return l.Alias
}

// GetAvailabilityExceptions returns the value of the field AvailabilityExceptions.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetAvailabilityExceptions() *fhir.String {
	if l == nil {
		return nil
	}
	return l.AvailabilityExceptions
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetContained() []fhir.Resource {
	if l == nil {
		return nil
	}
	return l.Contained
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetDescription() *fhir.String {
	if l == nil {
		return nil
	}
	return l.Description
}

// GetEndpoint returns the value of the field Endpoint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetEndpoint() []*fhir.Reference {
	if l == nil {
		return nil
	}
	return l.Endpoint
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetExtension() []*fhir.Extension {
	if l == nil {
		return nil
	}
	return l.Extension
}

// GetHoursOfOperation returns the value of the field HoursOfOperation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetHoursOfOperation() []*LocationHoursOfOperation {
	if l == nil {
		return nil
	}
	return l.HoursOfOperation
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetID() string {
	if l == nil {
		return ""
	}
	return l.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetIdentifier() []*fhir.Identifier {
	if l == nil {
		return nil
	}
	return l.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetImplicitRules() *fhir.URI {
	if l == nil {
		return nil
	}
	return l.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetLanguage() *fhir.Code {
	if l == nil {
		return nil
	}
	return l.Language
}

// GetManagingOrganization returns the value of the field ManagingOrganization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetManagingOrganization() *fhir.Reference {
	if l == nil {
		return nil
	}
	return l.ManagingOrganization
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetMeta() *fhir.Meta {
	if l == nil {
		return nil
	}
	return l.Meta
}

// GetMode returns the value of the field Mode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetMode() *fhir.Code {
	if l == nil {
		return nil
	}
	return l.Mode
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetModifierExtension() []*fhir.Extension {
	if l == nil {
		return nil
	}
	return l.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetName() *fhir.String {
	if l == nil {
		return nil
	}
	return l.Name
}

// GetOperationalStatus returns the value of the field OperationalStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetOperationalStatus() *fhir.Coding {
	if l == nil {
		return nil
	}
	return l.OperationalStatus
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetPartOf() *fhir.Reference {
	if l == nil {
		return nil
	}
	return l.PartOf
}

// GetPhysicalType returns the value of the field PhysicalType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetPhysicalType() *fhir.CodeableConcept {
	if l == nil {
		return nil
	}
	return l.PhysicalType
}

// GetPosition returns the value of the field Position.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetPosition() *LocationPosition {
	if l == nil {
		return nil
	}
	return l.Position
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetStatus() *fhir.Code {
	if l == nil {
		return nil
	}
	return l.Status
}

// GetTelecom returns the value of the field Telecom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetTelecom() []*fhir.ContactPoint {
	if l == nil {
		return nil
	}
	return l.Telecom
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetText() *fhir.Narrative {
	if l == nil {
		return nil
	}
	return l.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Location) GetType() []*fhir.CodeableConcept {
	if l == nil {
		return nil
	}
	return l.Type
}

// What days/times during a week is this location usually open// What days/times during a week is this location usually open.// This type of information is commonly found published in directories and on
// websites informing customers when the facility is available.
// Specific services within the location may have their own hours which could
// be shorter (or longer) than the locations hours.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Location.json
type LocationHoursOfOperation struct {

	// The Location is open all day.
	AllDay *fhir.Boolean `fhirpath:"allDay"`

	// Time that the Location closes.
	ClosingTime *fhir.Time `fhirpath:"closingTime"`

	// Indicates which days of the week are available between the start and end
	// Times.
	DaysOfWeek []*fhir.Code `fhirpath:"daysOfWeek"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Time that the Location opens.
	OpeningTime *fhir.Time `fhirpath:"openingTime"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAllDay returns the value of the field AllDay.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lhoo *LocationHoursOfOperation) GetAllDay() *fhir.Boolean {
	if lhoo == nil {
		return nil
	}
	return lhoo.AllDay
}

// GetClosingTime returns the value of the field ClosingTime.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lhoo *LocationHoursOfOperation) GetClosingTime() *fhir.Time {
	if lhoo == nil {
		return nil
	}
	return lhoo.ClosingTime
}

// GetDaysOfWeek returns the value of the field DaysOfWeek.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lhoo *LocationHoursOfOperation) GetDaysOfWeek() []*fhir.Code {
	if lhoo == nil {
		return nil
	}
	return lhoo.DaysOfWeek
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lhoo *LocationHoursOfOperation) GetExtension() []*fhir.Extension {
	if lhoo == nil {
		return nil
	}
	return lhoo.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lhoo *LocationHoursOfOperation) GetID() string {
	if lhoo == nil {
		return ""
	}
	return lhoo.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lhoo *LocationHoursOfOperation) GetModifierExtension() []*fhir.Extension {
	if lhoo == nil {
		return nil
	}
	return lhoo.ModifierExtension
}

// GetOpeningTime returns the value of the field OpeningTime.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lhoo *LocationHoursOfOperation) GetOpeningTime() *fhir.Time {
	if lhoo == nil {
		return nil
	}
	return lhoo.OpeningTime
}

// The absolute geographic location// The absolute geographic location of the Location, expressed using the WGS84
// datum (This is the same co-ordinate system used in KML).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Location.json
type LocationPosition struct {

	// Altitude. The value domain and the interpretation are the same as for the
	// text of the altitude element in KML (see notes below).
	Altitude *fhir.Decimal `fhirpath:"altitude"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Latitude. The value domain and the interpretation are the same as for the
	// text of the latitude element in KML (see notes below).
	Latitude *fhir.Decimal `fhirpath:"latitude"`

	// Longitude. The value domain and the interpretation are the same as for the
	// text of the longitude element in KML (see notes below).
	Longitude *fhir.Decimal `fhirpath:"longitude"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAltitude returns the value of the field Altitude.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lp *LocationPosition) GetAltitude() *fhir.Decimal {
	if lp == nil {
		return nil
	}
	return lp.Altitude
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lp *LocationPosition) GetExtension() []*fhir.Extension {
	if lp == nil {
		return nil
	}
	return lp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lp *LocationPosition) GetID() string {
	if lp == nil {
		return ""
	}
	return lp.ID
}

// GetLatitude returns the value of the field Latitude.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lp *LocationPosition) GetLatitude() *fhir.Decimal {
	if lp == nil {
		return nil
	}
	return lp.Latitude
}

// GetLongitude returns the value of the field Longitude.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lp *LocationPosition) GetLongitude() *fhir.Decimal {
	if lp == nil {
		return nil
	}
	return lp.Longitude
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (lp *LocationPosition) GetModifierExtension() []*fhir.Extension {
	if lp == nil {
		return nil
	}
	return lp.ModifierExtension
}

func (l *Location) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (l *Location) UnmarshalJSON(data []byte) error {
	var raw struct {
		Address                *fhir.Address               `json:"address"`
		Alias                  []*fhir.String              `json:"alias"`
		AvailabilityExceptions *fhir.String                `json:"availabilityExceptions"`
		Contained              []fhir.Resource             `json:"contained"`
		Description            *fhir.String                `json:"description"`
		Endpoint               []*fhir.Reference           `json:"endpoint"`
		Extension              []*fhir.Extension           `json:"extension"`
		HoursOfOperation       []*LocationHoursOfOperation `json:"hoursOfOperation"`

		ID                   string                  `json:"id"`
		Identifier           []*fhir.Identifier      `json:"identifier"`
		ImplicitRules        *fhir.URI               `json:"implicitRules"`
		Language             *fhir.Code              `json:"language"`
		ManagingOrganization *fhir.Reference         `json:"managingOrganization"`
		Meta                 *fhir.Meta              `json:"meta"`
		Mode                 *fhir.Code              `json:"mode"`
		ModifierExtension    []*fhir.Extension       `json:"modifierExtension"`
		Name                 *fhir.String            `json:"name"`
		OperationalStatus    *fhir.Coding            `json:"operationalStatus"`
		PartOf               *fhir.Reference         `json:"partOf"`
		PhysicalType         *fhir.CodeableConcept   `json:"physicalType"`
		Position             *LocationPosition       `json:"position"`
		Status               *fhir.Code              `json:"status"`
		Telecom              []*fhir.ContactPoint    `json:"telecom"`
		Text                 *fhir.Narrative         `json:"text"`
		Type                 []*fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	l.Address = raw.Address
	l.Alias = raw.Alias
	l.AvailabilityExceptions = raw.AvailabilityExceptions
	l.Contained = raw.Contained
	l.Description = raw.Description
	l.Endpoint = raw.Endpoint
	l.Extension = raw.Extension
	l.HoursOfOperation = raw.HoursOfOperation
	l.ID = raw.ID
	l.Identifier = raw.Identifier
	l.ImplicitRules = raw.ImplicitRules
	l.Language = raw.Language
	l.ManagingOrganization = raw.ManagingOrganization
	l.Meta = raw.Meta
	l.Mode = raw.Mode
	l.ModifierExtension = raw.ModifierExtension
	l.Name = raw.Name
	l.OperationalStatus = raw.OperationalStatus
	l.PartOf = raw.PartOf
	l.PhysicalType = raw.PhysicalType
	l.Position = raw.Position
	l.Status = raw.Status
	l.Telecom = raw.Telecom
	l.Text = raw.Text
	l.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*Location)(nil)
var _ json.Unmarshaler = (*Location)(nil)

func (lhoo *LocationHoursOfOperation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (lhoo *LocationHoursOfOperation) UnmarshalJSON(data []byte) error {
	var raw struct {
		AllDay      *fhir.Boolean     `json:"allDay"`
		ClosingTime *fhir.Time        `json:"closingTime"`
		DaysOfWeek  []*fhir.Code      `json:"daysOfWeek"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		OpeningTime       *fhir.Time        `json:"openingTime"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	lhoo.AllDay = raw.AllDay
	lhoo.ClosingTime = raw.ClosingTime
	lhoo.DaysOfWeek = raw.DaysOfWeek
	lhoo.Extension = raw.Extension
	lhoo.ID = raw.ID
	lhoo.ModifierExtension = raw.ModifierExtension
	lhoo.OpeningTime = raw.OpeningTime
	return nil
}

var _ json.Marshaler = (*LocationHoursOfOperation)(nil)
var _ json.Unmarshaler = (*LocationHoursOfOperation)(nil)

func (lp *LocationPosition) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (lp *LocationPosition) UnmarshalJSON(data []byte) error {
	var raw struct {
		Altitude  *fhir.Decimal     `json:"altitude"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Latitude          *fhir.Decimal     `json:"latitude"`
		Longitude         *fhir.Decimal     `json:"longitude"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	lp.Altitude = raw.Altitude
	lp.Extension = raw.Extension
	lp.ID = raw.ID
	lp.Latitude = raw.Latitude
	lp.Longitude = raw.Longitude
	lp.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*LocationPosition)(nil)
var _ json.Unmarshaler = (*LocationPosition)(nil)
