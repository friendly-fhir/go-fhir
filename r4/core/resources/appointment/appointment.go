// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package appointment

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A booking of a healthcare event among patient(s), practitioner(s), related
// person(s) and/or device(s) for a specific date/time. This may result in one
// or more Encounter(s).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Appointment
//   - Source File: StructureDefinition-Appointment.json
type Appointment struct {

	// The style of appointment or patient that has been booked in the slot (not
	// service type).
	AppointmentType *fhir.CodeableConcept `fhirpath:"appointmentType"`

	// The service request this appointment is allocated to assess (e.g. incoming
	// referral or procedure request).
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// The coded reason for the appointment being cancelled. This is often used in
	// reporting/billing/futher processing to determine if further actions are
	// required, or specific fees apply.
	CancelationReason *fhir.CodeableConcept `fhirpath:"cancelationReason"`

	// Additional comments about the appointment.
	Comment *fhir.String `fhirpath:"comment"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date that this appointment was initially created. This could be
	// different to the meta.lastModified value on the initial entry, as this could
	// have been before the resource was created on the FHIR server, and should
	// remain unchanged over the lifespan of the appointment.
	Created *fhir.DateTime `fhirpath:"created"`

	// The brief description of the appointment as would be shown on a subject line
	// in a meeting request, or appointment list. Detailed or expanded information
	// should be put in the comment field.
	Description *fhir.String `fhirpath:"description"`

	// Date/Time that the appointment is to conclude.
	End *fhir.Instant `fhirpath:"end"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// This records identifiers associated with this appointment concern that are
	// defined by business processes and/or used to refer to it when a direct URL
	// reference to the resource itself is not appropriate (e.g. in CDA documents,
	// or in written / printed documentation).
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// Number of minutes that the appointment is to take. This can be less than the
	// duration between the start and end times. For example, where the actual time
	// of appointment is only an estimate or if a 30 minute appointment is being
	// requested, but any time would work. Also, if there is, for example, a
	// planned 15 minute break in the middle of a long appointment, the duration
	// may be 15 minutes less than the difference between the start and end.
	MinutesDuration *fhir.PositiveInt `fhirpath:"minutesDuration"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// List of participants involved in the appointment.
	Participant []*AppointmentParticipant `fhirpath:"participant"`

	// While Appointment.comment contains information for internal use,
	// Appointment.patientInstructions is used to capture patient facing
	// information about the Appointment (e.g. please bring your referral or fast
	// from 8pm night before).
	PatientInstruction *fhir.String `fhirpath:"patientInstruction"`

	// The priority of the appointment. Can be used to make informed decisions if
	// needing to re-prioritize appointments. (The iCal Standard specifies 0 as
	// undefined, 1 as highest, 9 as lowest priority).
	Priority *fhir.UnsignedInt `fhirpath:"priority"`

	// The coded reason that this appointment is being scheduled. This is more
	// clinical than administrative.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Reason the appointment has been scheduled to take place, as specified using
	// information from another resource. When the patient arrives and the
	// encounter begins it may be used as the admission diagnosis. The indication
	// will typically be a Condition (with other resources referenced in the
	// evidence.detail), or a Procedure.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// A set of date ranges (potentially including times) that the appointment is
	// preferred to be scheduled within.
	// The duration (usually in minutes) could also be provided to indicate the
	// length of the appointment to fill and populate the start/end times for the
	// actual allocated time. However, in other situations the duration may be
	// calculated by the scheduling system.
	RequestedPeriod []*fhir.Period `fhirpath:"requestedPeriod"`

	// A broad categorization of the service that is to be performed during this
	// appointment.
	ServiceCategory []*fhir.CodeableConcept `fhirpath:"serviceCategory"`

	// The specific service that is to be performed during this appointment.
	ServiceType []*fhir.CodeableConcept `fhirpath:"serviceType"`

	// The slots from the participants' schedules that will be filled by the
	// appointment.
	Slot []*fhir.Reference `fhirpath:"slot"`

	// The specialty of a practitioner that would be required to perform the
	// service requested in this appointment.
	Specialty []*fhir.CodeableConcept `fhirpath:"specialty"`

	// Date/Time that the appointment is to take place.
	Start *fhir.Instant `fhirpath:"start"`

	// The overall status of the Appointment. Each of the participants has their
	// own participation status which indicates their involvement in the process,
	// however this status indicates the shared status.
	Status *fhir.Code `fhirpath:"status"`

	// Additional information to support the appointment provided when making the
	// appointment.
	SupportingInformation []*fhir.Reference `fhirpath:"supportingInformation"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAppointmentType returns the value of the field AppointmentType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetAppointmentType() *fhir.CodeableConcept {
	if a == nil {
		return nil
	}
	return a.AppointmentType
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetBasedOn() []*fhir.Reference {
	if a == nil {
		return nil
	}
	return a.BasedOn
}

// GetCancelationReason returns the value of the field CancelationReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetCancelationReason() *fhir.CodeableConcept {
	if a == nil {
		return nil
	}
	return a.CancelationReason
}

// GetComment returns the value of the field Comment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetComment() *fhir.String {
	if a == nil {
		return nil
	}
	return a.Comment
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetContained() []fhir.Resource {
	if a == nil {
		return nil
	}
	return a.Contained
}

// GetCreated returns the value of the field Created.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetCreated() *fhir.DateTime {
	if a == nil {
		return nil
	}
	return a.Created
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetDescription() *fhir.String {
	if a == nil {
		return nil
	}
	return a.Description
}

// GetEnd returns the value of the field End.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetEnd() *fhir.Instant {
	if a == nil {
		return nil
	}
	return a.End
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetExtension() []*fhir.Extension {
	if a == nil {
		return nil
	}
	return a.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetIdentifier() []*fhir.Identifier {
	if a == nil {
		return nil
	}
	return a.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetImplicitRules() *fhir.URI {
	if a == nil {
		return nil
	}
	return a.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetLanguage() *fhir.Code {
	if a == nil {
		return nil
	}
	return a.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetMeta() *fhir.Meta {
	if a == nil {
		return nil
	}
	return a.Meta
}

// GetMinutesDuration returns the value of the field MinutesDuration.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetMinutesDuration() *fhir.PositiveInt {
	if a == nil {
		return nil
	}
	return a.MinutesDuration
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetModifierExtension() []*fhir.Extension {
	if a == nil {
		return nil
	}
	return a.ModifierExtension
}

// GetParticipant returns the value of the field Participant.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetParticipant() []*AppointmentParticipant {
	if a == nil {
		return nil
	}
	return a.Participant
}

// GetPatientInstruction returns the value of the field PatientInstruction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetPatientInstruction() *fhir.String {
	if a == nil {
		return nil
	}
	return a.PatientInstruction
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetPriority() *fhir.UnsignedInt {
	if a == nil {
		return nil
	}
	return a.Priority
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetReasonCode() []*fhir.CodeableConcept {
	if a == nil {
		return nil
	}
	return a.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetReasonReference() []*fhir.Reference {
	if a == nil {
		return nil
	}
	return a.ReasonReference
}

// GetRequestedPeriod returns the value of the field RequestedPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetRequestedPeriod() []*fhir.Period {
	if a == nil {
		return nil
	}
	return a.RequestedPeriod
}

// GetServiceCategory returns the value of the field ServiceCategory.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetServiceCategory() []*fhir.CodeableConcept {
	if a == nil {
		return nil
	}
	return a.ServiceCategory
}

// GetServiceType returns the value of the field ServiceType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetServiceType() []*fhir.CodeableConcept {
	if a == nil {
		return nil
	}
	return a.ServiceType
}

// GetSlot returns the value of the field Slot.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetSlot() []*fhir.Reference {
	if a == nil {
		return nil
	}
	return a.Slot
}

// GetSpecialty returns the value of the field Specialty.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetSpecialty() []*fhir.CodeableConcept {
	if a == nil {
		return nil
	}
	return a.Specialty
}

// GetStart returns the value of the field Start.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetStart() *fhir.Instant {
	if a == nil {
		return nil
	}
	return a.Start
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetStatus() *fhir.Code {
	if a == nil {
		return nil
	}
	return a.Status
}

// GetSupportingInformation returns the value of the field SupportingInformation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetSupportingInformation() []*fhir.Reference {
	if a == nil {
		return nil
	}
	return a.SupportingInformation
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Appointment) GetText() *fhir.Narrative {
	if a == nil {
		return nil
	}
	return a.Text
}

// Participants involved in appointment// List of participants involved in the appointment.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Appointment.json
type AppointmentParticipant struct {

	// A Person, Location/HealthcareService or Device that is participating in the
	// appointment.
	Actor *fhir.Reference `fhirpath:"actor"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Participation period of the actor.
	Period *fhir.Period `fhirpath:"period"`

	// Whether this participant is required to be present at the meeting. This
	// covers a use-case where two doctors need to meet to discuss the results for
	// a specific patient, and the patient is not required to be present.
	Required *fhir.Code `fhirpath:"required"`

	// Participation status of the actor.
	Status *fhir.Code `fhirpath:"status"`

	// Role of participant in the appointment.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetActor returns the value of the field Actor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ap *AppointmentParticipant) GetActor() *fhir.Reference {
	if ap == nil {
		return nil
	}
	return ap.Actor
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ap *AppointmentParticipant) GetExtension() []*fhir.Extension {
	if ap == nil {
		return nil
	}
	return ap.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ap *AppointmentParticipant) GetID() string {
	if ap == nil {
		return ""
	}
	return ap.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ap *AppointmentParticipant) GetModifierExtension() []*fhir.Extension {
	if ap == nil {
		return nil
	}
	return ap.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ap *AppointmentParticipant) GetPeriod() *fhir.Period {
	if ap == nil {
		return nil
	}
	return ap.Period
}

// GetRequired returns the value of the field Required.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ap *AppointmentParticipant) GetRequired() *fhir.Code {
	if ap == nil {
		return nil
	}
	return ap.Required
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ap *AppointmentParticipant) GetStatus() *fhir.Code {
	if ap == nil {
		return nil
	}
	return ap.Status
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ap *AppointmentParticipant) GetType() []*fhir.CodeableConcept {
	if ap == nil {
		return nil
	}
	return ap.Type
}

func (a *Appointment) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (a *Appointment) UnmarshalJSON(data []byte) error {
	var raw struct {
		AppointmentType   *fhir.CodeableConcept `json:"appointmentType"`
		BasedOn           []*fhir.Reference     `json:"basedOn"`
		CancelationReason *fhir.CodeableConcept `json:"cancelationReason"`
		Comment           *fhir.String          `json:"comment"`
		Contained         []fhir.Resource       `json:"contained"`
		Created           *fhir.DateTime        `json:"created"`
		Description       *fhir.String          `json:"description"`
		End               *fhir.Instant         `json:"end"`
		Extension         []*fhir.Extension     `json:"extension"`

		ID                    string                    `json:"id"`
		Identifier            []*fhir.Identifier        `json:"identifier"`
		ImplicitRules         *fhir.URI                 `json:"implicitRules"`
		Language              *fhir.Code                `json:"language"`
		Meta                  *fhir.Meta                `json:"meta"`
		MinutesDuration       *fhir.PositiveInt         `json:"minutesDuration"`
		ModifierExtension     []*fhir.Extension         `json:"modifierExtension"`
		Participant           []*AppointmentParticipant `json:"participant"`
		PatientInstruction    *fhir.String              `json:"patientInstruction"`
		Priority              *fhir.UnsignedInt         `json:"priority"`
		ReasonCode            []*fhir.CodeableConcept   `json:"reasonCode"`
		ReasonReference       []*fhir.Reference         `json:"reasonReference"`
		RequestedPeriod       []*fhir.Period            `json:"requestedPeriod"`
		ServiceCategory       []*fhir.CodeableConcept   `json:"serviceCategory"`
		ServiceType           []*fhir.CodeableConcept   `json:"serviceType"`
		Slot                  []*fhir.Reference         `json:"slot"`
		Specialty             []*fhir.CodeableConcept   `json:"specialty"`
		Start                 *fhir.Instant             `json:"start"`
		Status                *fhir.Code                `json:"status"`
		SupportingInformation []*fhir.Reference         `json:"supportingInformation"`
		Text                  *fhir.Narrative           `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	a.AppointmentType = raw.AppointmentType
	a.BasedOn = raw.BasedOn
	a.CancelationReason = raw.CancelationReason
	a.Comment = raw.Comment
	a.Contained = raw.Contained
	a.Created = raw.Created
	a.Description = raw.Description
	a.End = raw.End
	a.Extension = raw.Extension
	a.ID = raw.ID
	a.Identifier = raw.Identifier
	a.ImplicitRules = raw.ImplicitRules
	a.Language = raw.Language
	a.Meta = raw.Meta
	a.MinutesDuration = raw.MinutesDuration
	a.ModifierExtension = raw.ModifierExtension
	a.Participant = raw.Participant
	a.PatientInstruction = raw.PatientInstruction
	a.Priority = raw.Priority
	a.ReasonCode = raw.ReasonCode
	a.ReasonReference = raw.ReasonReference
	a.RequestedPeriod = raw.RequestedPeriod
	a.ServiceCategory = raw.ServiceCategory
	a.ServiceType = raw.ServiceType
	a.Slot = raw.Slot
	a.Specialty = raw.Specialty
	a.Start = raw.Start
	a.Status = raw.Status
	a.SupportingInformation = raw.SupportingInformation
	a.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*Appointment)(nil)
var _ json.Unmarshaler = (*Appointment)(nil)

func (ap *AppointmentParticipant) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ap *AppointmentParticipant) UnmarshalJSON(data []byte) error {
	var raw struct {
		Actor     *fhir.Reference   `json:"actor"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                  `json:"id"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Period            *fhir.Period            `json:"period"`
		Required          *fhir.Code              `json:"required"`
		Status            *fhir.Code              `json:"status"`
		Type              []*fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ap.Actor = raw.Actor
	ap.Extension = raw.Extension
	ap.ID = raw.ID
	ap.ModifierExtension = raw.ModifierExtension
	ap.Period = raw.Period
	ap.Required = raw.Required
	ap.Status = raw.Status
	ap.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*AppointmentParticipant)(nil)
var _ json.Unmarshaler = (*AppointmentParticipant)(nil)
