// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package examplescenario

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Example of workflow instance.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ExampleScenario
//   - Source File: StructureDefinition-ExampleScenario.json
type ExampleScenario struct {

	// Actor participating in the resource.
	Actor []*ExampleScenarioActor `fhirpath:"actor"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the example scenario and/or its contents.
	// Copyright statements are generally legal restrictions on the use and
	// publishing of the example scenario.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the example scenario was published. The
	// date must change when the business version changes and it must change if the
	// status code changes. In addition, it should change when the substantive
	// content of the example scenario changes. (e.g. the 'content logical
	// definition').
	Date *fhir.DateTime `fhirpath:"date"`

	// A Boolean value to indicate that this example scenario is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to
	// be used for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this example scenario when it
	// is represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Each resource and each version that is present in the workflow.
	Instance []*ExampleScenarioInstance `fhirpath:"instance"`

	// A legal or geographic region in which the example scenario is intended to be
	// used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the example scenario. This name should
	// be usable as an identifier for the module by machine processing applications
	// such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// Each major process - a group of operations.
	Process []*ExampleScenarioProcess `fhirpath:"process"`

	// The name of the organization or individual that published the example
	// scenario.
	Publisher *fhir.String `fhirpath:"publisher"`

	// What the example scenario resource is created for. This should not be used
	// to show the business purpose of the scenario itself, but the purpose of
	// documenting a scenario.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// The status of this example scenario. Enables tracking the life-cycle of the
	// content.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// An absolute URI that is used to identify this example scenario when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal
	// address at which at which an authoritative instance of this example scenario
	// is (or will be) published. This URL can be the target of a canonical
	// reference. It SHALL remain the same when the example scenario is stored on
	// different servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// example scenario instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the example scenario
	// when it is referenced in a specification, model, design or instance. This is
	// an arbitrary value managed by the example scenario author and is not
	// expected to be globally unique. For example, it might be a timestamp (e.g.
	// yyyymmdd) if a managed version is not available. There is also no
	// expectation that versions can be placed in a lexicographical sequence.
	Version *fhir.String `fhirpath:"version"`

	// Another nested workflow.
	Workflow []*fhir.Canonical `fhirpath:"workflow"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetActor returns the value of the field Actor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetActor() []*ExampleScenarioActor {
	if es == nil {
		return nil
	}
	return es.Actor
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetContact() []*fhir.ContactDetail {
	if es == nil {
		return nil
	}
	return es.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetContained() []fhir.Resource {
	if es == nil {
		return nil
	}
	return es.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetCopyright() *fhir.Markdown {
	if es == nil {
		return nil
	}
	return es.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetDate() *fhir.DateTime {
	if es == nil {
		return nil
	}
	return es.Date
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetExperimental() *fhir.Boolean {
	if es == nil {
		return nil
	}
	return es.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetExtension() []*fhir.Extension {
	if es == nil {
		return nil
	}
	return es.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetID() string {
	if es == nil {
		return ""
	}
	return es.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetIdentifier() []*fhir.Identifier {
	if es == nil {
		return nil
	}
	return es.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetImplicitRules() *fhir.URI {
	if es == nil {
		return nil
	}
	return es.ImplicitRules
}

// GetInstance returns the value of the field Instance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetInstance() []*ExampleScenarioInstance {
	if es == nil {
		return nil
	}
	return es.Instance
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetJurisdiction() []*fhir.CodeableConcept {
	if es == nil {
		return nil
	}
	return es.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetLanguage() *fhir.Code {
	if es == nil {
		return nil
	}
	return es.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetMeta() *fhir.Meta {
	if es == nil {
		return nil
	}
	return es.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetModifierExtension() []*fhir.Extension {
	if es == nil {
		return nil
	}
	return es.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetName() *fhir.String {
	if es == nil {
		return nil
	}
	return es.Name
}

// GetProcess returns the value of the field Process.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetProcess() []*ExampleScenarioProcess {
	if es == nil {
		return nil
	}
	return es.Process
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetPublisher() *fhir.String {
	if es == nil {
		return nil
	}
	return es.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetPurpose() *fhir.Markdown {
	if es == nil {
		return nil
	}
	return es.Purpose
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetStatus() *fhir.Code {
	if es == nil {
		return nil
	}
	return es.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetText() *fhir.Narrative {
	if es == nil {
		return nil
	}
	return es.Text
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetURL() *fhir.URI {
	if es == nil {
		return nil
	}
	return es.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetUseContext() []*fhir.UsageContext {
	if es == nil {
		return nil
	}
	return es.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetVersion() *fhir.String {
	if es == nil {
		return nil
	}
	return es.Version
}

// GetWorkflow returns the value of the field Workflow.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (es *ExampleScenario) GetWorkflow() []*fhir.Canonical {
	if es == nil {
		return nil
	}
	return es.Workflow
}

// Actor participating in the resource// Actor participating in the resource.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExampleScenario.json
type ExampleScenarioActor struct {

	// ID or acronym of actor.
	ActorID *fhir.String `fhirpath:"actorId"`

	// The description of the actor.
	Description *fhir.Markdown `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of the actor as shown in the page.
	Name *fhir.String `fhirpath:"name"`

	// The type of actor - person or system.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetActorID returns the value of the field ActorID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esa *ExampleScenarioActor) GetActorID() *fhir.String {
	if esa == nil {
		return nil
	}
	return esa.ActorID
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esa *ExampleScenarioActor) GetDescription() *fhir.Markdown {
	if esa == nil {
		return nil
	}
	return esa.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esa *ExampleScenarioActor) GetExtension() []*fhir.Extension {
	if esa == nil {
		return nil
	}
	return esa.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esa *ExampleScenarioActor) GetID() string {
	if esa == nil {
		return ""
	}
	return esa.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esa *ExampleScenarioActor) GetModifierExtension() []*fhir.Extension {
	if esa == nil {
		return nil
	}
	return esa.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esa *ExampleScenarioActor) GetName() *fhir.String {
	if esa == nil {
		return nil
	}
	return esa.Name
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esa *ExampleScenarioActor) GetType() *fhir.Code {
	if esa == nil {
		return nil
	}
	return esa.Type
}

// Each resource and each version that is present in the workflow// Each resource and each version that is present in the workflow.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExampleScenario.json
type ExampleScenarioInstance struct {

	// Resources contained in the instance (e.g. the observations contained in a
	// bundle).
	ContainedInstance []*ExampleScenarioInstanceContainedInstance `fhirpath:"containedInstance"`

	// Human-friendly description of the resource instance.
	Description *fhir.Markdown `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A short name for the resource instance.
	Name *fhir.String `fhirpath:"name"`

	// The id of the resource for referencing.
	ResourceID *fhir.String `fhirpath:"resourceId"`

	// The type of the resource.
	ResourceType *fhir.Code `fhirpath:"resourceType"`

	// A specific version of the resource.
	Version []*ExampleScenarioInstanceVersion `fhirpath:"version"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetContainedInstance returns the value of the field ContainedInstance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esi *ExampleScenarioInstance) GetContainedInstance() []*ExampleScenarioInstanceContainedInstance {
	if esi == nil {
		return nil
	}
	return esi.ContainedInstance
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esi *ExampleScenarioInstance) GetDescription() *fhir.Markdown {
	if esi == nil {
		return nil
	}
	return esi.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esi *ExampleScenarioInstance) GetExtension() []*fhir.Extension {
	if esi == nil {
		return nil
	}
	return esi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esi *ExampleScenarioInstance) GetID() string {
	if esi == nil {
		return ""
	}
	return esi.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esi *ExampleScenarioInstance) GetModifierExtension() []*fhir.Extension {
	if esi == nil {
		return nil
	}
	return esi.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esi *ExampleScenarioInstance) GetName() *fhir.String {
	if esi == nil {
		return nil
	}
	return esi.Name
}

// GetResourceID returns the value of the field ResourceID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esi *ExampleScenarioInstance) GetResourceID() *fhir.String {
	if esi == nil {
		return nil
	}
	return esi.ResourceID
}

// GetResourceType returns the value of the field ResourceType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esi *ExampleScenarioInstance) GetResourceType() *fhir.Code {
	if esi == nil {
		return nil
	}
	return esi.ResourceType
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esi *ExampleScenarioInstance) GetVersion() []*ExampleScenarioInstanceVersion {
	if esi == nil {
		return nil
	}
	return esi.Version
}

// Resources contained in the instance// Resources contained in the instance (e.g. the observations contained in a
// bundle).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExampleScenario.json
type ExampleScenarioInstanceContainedInstance struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Each resource contained in the instance.
	ResourceID *fhir.String `fhirpath:"resourceId"`

	// A specific version of a resource contained in the instance.
	VersionID *fhir.String `fhirpath:"versionId"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esici *ExampleScenarioInstanceContainedInstance) GetExtension() []*fhir.Extension {
	if esici == nil {
		return nil
	}
	return esici.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esici *ExampleScenarioInstanceContainedInstance) GetID() string {
	if esici == nil {
		return ""
	}
	return esici.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esici *ExampleScenarioInstanceContainedInstance) GetModifierExtension() []*fhir.Extension {
	if esici == nil {
		return nil
	}
	return esici.ModifierExtension
}

// GetResourceID returns the value of the field ResourceID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esici *ExampleScenarioInstanceContainedInstance) GetResourceID() *fhir.String {
	if esici == nil {
		return nil
	}
	return esici.ResourceID
}

// GetVersionID returns the value of the field VersionID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esici *ExampleScenarioInstanceContainedInstance) GetVersionID() *fhir.String {
	if esici == nil {
		return nil
	}
	return esici.VersionID
}

// A specific version of the resource// A specific version of the resource.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExampleScenario.json
type ExampleScenarioInstanceVersion struct {

	// The description of the resource version.
	Description *fhir.Markdown `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The identifier of a specific version of a resource.
	VersionID *fhir.String `fhirpath:"versionId"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esiv *ExampleScenarioInstanceVersion) GetDescription() *fhir.Markdown {
	if esiv == nil {
		return nil
	}
	return esiv.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esiv *ExampleScenarioInstanceVersion) GetExtension() []*fhir.Extension {
	if esiv == nil {
		return nil
	}
	return esiv.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esiv *ExampleScenarioInstanceVersion) GetID() string {
	if esiv == nil {
		return ""
	}
	return esiv.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esiv *ExampleScenarioInstanceVersion) GetModifierExtension() []*fhir.Extension {
	if esiv == nil {
		return nil
	}
	return esiv.ModifierExtension
}

// GetVersionID returns the value of the field VersionID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esiv *ExampleScenarioInstanceVersion) GetVersionID() *fhir.String {
	if esiv == nil {
		return nil
	}
	return esiv.VersionID
}

// Each major process - a group of operations// Each major process - a group of operations.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExampleScenario.json
type ExampleScenarioProcess struct {

	// A longer description of the group of operations.
	Description *fhir.Markdown `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Description of final status after the process ends.
	PostConditions *fhir.Markdown `fhirpath:"postConditions"`

	// Description of initial status before the process starts.
	PreConditions *fhir.Markdown `fhirpath:"preConditions"`

	// Each step of the process.
	Step []*ExampleScenarioProcessStep `fhirpath:"step"`

	// The diagram title of the group of operations.
	Title *fhir.String `fhirpath:"title"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esp *ExampleScenarioProcess) GetDescription() *fhir.Markdown {
	if esp == nil {
		return nil
	}
	return esp.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esp *ExampleScenarioProcess) GetExtension() []*fhir.Extension {
	if esp == nil {
		return nil
	}
	return esp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esp *ExampleScenarioProcess) GetID() string {
	if esp == nil {
		return ""
	}
	return esp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esp *ExampleScenarioProcess) GetModifierExtension() []*fhir.Extension {
	if esp == nil {
		return nil
	}
	return esp.ModifierExtension
}

// GetPostConditions returns the value of the field PostConditions.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esp *ExampleScenarioProcess) GetPostConditions() *fhir.Markdown {
	if esp == nil {
		return nil
	}
	return esp.PostConditions
}

// GetPreConditions returns the value of the field PreConditions.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esp *ExampleScenarioProcess) GetPreConditions() *fhir.Markdown {
	if esp == nil {
		return nil
	}
	return esp.PreConditions
}

// GetStep returns the value of the field Step.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esp *ExampleScenarioProcess) GetStep() []*ExampleScenarioProcessStep {
	if esp == nil {
		return nil
	}
	return esp.Step
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esp *ExampleScenarioProcess) GetTitle() *fhir.String {
	if esp == nil {
		return nil
	}
	return esp.Title
}

// Each step of the process// Each step of the process.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExampleScenario.json
type ExampleScenarioProcessStep struct {

	// Indicates an alternative step that can be taken instead of the operations on
	// the base step in exceptional/atypical circumstances.
	Alternative []*ExampleScenarioProcessStepAlternative `fhirpath:"alternative"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Each interaction or action.
	Operation *ExampleScenarioProcessStepOperation `fhirpath:"operation"`

	// If there is a pause in the flow.
	Pause *fhir.Boolean `fhirpath:"pause"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAlternative returns the value of the field Alternative.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esps *ExampleScenarioProcessStep) GetAlternative() []*ExampleScenarioProcessStepAlternative {
	if esps == nil {
		return nil
	}
	return esps.Alternative
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esps *ExampleScenarioProcessStep) GetExtension() []*fhir.Extension {
	if esps == nil {
		return nil
	}
	return esps.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esps *ExampleScenarioProcessStep) GetID() string {
	if esps == nil {
		return ""
	}
	return esps.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esps *ExampleScenarioProcessStep) GetModifierExtension() []*fhir.Extension {
	if esps == nil {
		return nil
	}
	return esps.ModifierExtension
}

// GetOperation returns the value of the field Operation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esps *ExampleScenarioProcessStep) GetOperation() *ExampleScenarioProcessStepOperation {
	if esps == nil {
		return nil
	}
	return esps.Operation
}

// GetPause returns the value of the field Pause.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esps *ExampleScenarioProcessStep) GetPause() *fhir.Boolean {
	if esps == nil {
		return nil
	}
	return esps.Pause
}

// Alternate non-typical step action// Indicates an alternative step that can be taken instead of the operations on
// the base step in exceptional/atypical circumstances.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExampleScenario.json
type ExampleScenarioProcessStepAlternative struct {

	// A human-readable description of the alternative explaining when the
	// alternative should occur rather than the base step.
	Description *fhir.Markdown `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The label to display for the alternative that gives a sense of the
	// circumstance in which the alternative should be invoked.
	Title *fhir.String `fhirpath:"title"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espsa *ExampleScenarioProcessStepAlternative) GetDescription() *fhir.Markdown {
	if espsa == nil {
		return nil
	}
	return espsa.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espsa *ExampleScenarioProcessStepAlternative) GetExtension() []*fhir.Extension {
	if espsa == nil {
		return nil
	}
	return espsa.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espsa *ExampleScenarioProcessStepAlternative) GetID() string {
	if espsa == nil {
		return ""
	}
	return espsa.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espsa *ExampleScenarioProcessStepAlternative) GetModifierExtension() []*fhir.Extension {
	if espsa == nil {
		return nil
	}
	return espsa.ModifierExtension
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espsa *ExampleScenarioProcessStepAlternative) GetTitle() *fhir.String {
	if espsa == nil {
		return nil
	}
	return espsa.Title
}

// Each interaction or action// Each interaction or action.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExampleScenario.json
type ExampleScenarioProcessStepOperation struct {

	// A comment to be inserted in the diagram.
	Description *fhir.Markdown `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Who starts the transaction.
	Initiator *fhir.String `fhirpath:"initiator"`

	// Whether the initiator is deactivated right after the transaction.
	InitiatorActive *fhir.Boolean `fhirpath:"initiatorActive"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The human-friendly name of the interaction.
	Name *fhir.String `fhirpath:"name"`

	// The sequential number of the interaction, e.g. 1.2.5.
	Number *fhir.String `fhirpath:"number"`

	// Who receives the transaction.
	Receiver *fhir.String `fhirpath:"receiver"`

	// Whether the receiver is deactivated right after the transaction.
	ReceiverActive *fhir.Boolean `fhirpath:"receiverActive"`

	// The type of operation - CRUD.
	Type *fhir.String `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetDescription() *fhir.Markdown {
	if espso == nil {
		return nil
	}
	return espso.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetExtension() []*fhir.Extension {
	if espso == nil {
		return nil
	}
	return espso.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetID() string {
	if espso == nil {
		return ""
	}
	return espso.ID
}

// GetInitiator returns the value of the field Initiator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetInitiator() *fhir.String {
	if espso == nil {
		return nil
	}
	return espso.Initiator
}

// GetInitiatorActive returns the value of the field InitiatorActive.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetInitiatorActive() *fhir.Boolean {
	if espso == nil {
		return nil
	}
	return espso.InitiatorActive
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetModifierExtension() []*fhir.Extension {
	if espso == nil {
		return nil
	}
	return espso.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetName() *fhir.String {
	if espso == nil {
		return nil
	}
	return espso.Name
}

// GetNumber returns the value of the field Number.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetNumber() *fhir.String {
	if espso == nil {
		return nil
	}
	return espso.Number
}

// GetReceiver returns the value of the field Receiver.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetReceiver() *fhir.String {
	if espso == nil {
		return nil
	}
	return espso.Receiver
}

// GetReceiverActive returns the value of the field ReceiverActive.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetReceiverActive() *fhir.Boolean {
	if espso == nil {
		return nil
	}
	return espso.ReceiverActive
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (espso *ExampleScenarioProcessStepOperation) GetType() *fhir.String {
	if espso == nil {
		return nil
	}
	return espso.Type
}

func (es *ExampleScenario) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (es *ExampleScenario) UnmarshalJSON(data []byte) error {
	var raw struct {
		Actor        []*ExampleScenarioActor `json:"actor"`
		Contact      []*fhir.ContactDetail   `json:"contact"`
		Contained    []fhir.Resource         `json:"contained"`
		Copyright    *fhir.Markdown          `json:"copyright"`
		Date         *fhir.DateTime          `json:"date"`
		Experimental *fhir.Boolean           `json:"experimental"`
		Extension    []*fhir.Extension       `json:"extension"`

		ID                string                     `json:"id"`
		Identifier        []*fhir.Identifier         `json:"identifier"`
		ImplicitRules     *fhir.URI                  `json:"implicitRules"`
		Instance          []*ExampleScenarioInstance `json:"instance"`
		Jurisdiction      []*fhir.CodeableConcept    `json:"jurisdiction"`
		Language          *fhir.Code                 `json:"language"`
		Meta              *fhir.Meta                 `json:"meta"`
		ModifierExtension []*fhir.Extension          `json:"modifierExtension"`
		Name              *fhir.String               `json:"name"`
		Process           []*ExampleScenarioProcess  `json:"process"`
		Publisher         *fhir.String               `json:"publisher"`
		Purpose           *fhir.Markdown             `json:"purpose"`
		Status            *fhir.Code                 `json:"status"`
		Text              *fhir.Narrative            `json:"text"`
		URL               *fhir.URI                  `json:"url"`
		UseContext        []*fhir.UsageContext       `json:"useContext"`
		Version           *fhir.String               `json:"version"`
		Workflow          []*fhir.Canonical          `json:"workflow"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	es.Actor = raw.Actor
	es.Contact = raw.Contact
	es.Contained = raw.Contained
	es.Copyright = raw.Copyright
	es.Date = raw.Date
	es.Experimental = raw.Experimental
	es.Extension = raw.Extension
	es.ID = raw.ID
	es.Identifier = raw.Identifier
	es.ImplicitRules = raw.ImplicitRules
	es.Instance = raw.Instance
	es.Jurisdiction = raw.Jurisdiction
	es.Language = raw.Language
	es.Meta = raw.Meta
	es.ModifierExtension = raw.ModifierExtension
	es.Name = raw.Name
	es.Process = raw.Process
	es.Publisher = raw.Publisher
	es.Purpose = raw.Purpose
	es.Status = raw.Status
	es.Text = raw.Text
	es.URL = raw.URL
	es.UseContext = raw.UseContext
	es.Version = raw.Version
	es.Workflow = raw.Workflow
	return nil
}

var _ json.Marshaler = (*ExampleScenario)(nil)
var _ json.Unmarshaler = (*ExampleScenario)(nil)

func (esa *ExampleScenarioActor) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (esa *ExampleScenarioActor) UnmarshalJSON(data []byte) error {
	var raw struct {
		ActorID     *fhir.String      `json:"actorId"`
		Description *fhir.Markdown    `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Name              *fhir.String      `json:"name"`
		Type              *fhir.Code        `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	esa.ActorID = raw.ActorID
	esa.Description = raw.Description
	esa.Extension = raw.Extension
	esa.ID = raw.ID
	esa.ModifierExtension = raw.ModifierExtension
	esa.Name = raw.Name
	esa.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*ExampleScenarioActor)(nil)
var _ json.Unmarshaler = (*ExampleScenarioActor)(nil)

func (esi *ExampleScenarioInstance) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (esi *ExampleScenarioInstance) UnmarshalJSON(data []byte) error {
	var raw struct {
		ContainedInstance []*ExampleScenarioInstanceContainedInstance `json:"containedInstance"`
		Description       *fhir.Markdown                              `json:"description"`
		Extension         []*fhir.Extension                           `json:"extension"`

		ID                string                            `json:"id"`
		ModifierExtension []*fhir.Extension                 `json:"modifierExtension"`
		Name              *fhir.String                      `json:"name"`
		ResourceID        *fhir.String                      `json:"resourceId"`
		ResourceType      *fhir.Code                        `json:"resourceType"`
		Version           []*ExampleScenarioInstanceVersion `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	esi.ContainedInstance = raw.ContainedInstance
	esi.Description = raw.Description
	esi.Extension = raw.Extension
	esi.ID = raw.ID
	esi.ModifierExtension = raw.ModifierExtension
	esi.Name = raw.Name
	esi.ResourceID = raw.ResourceID
	esi.ResourceType = raw.ResourceType
	esi.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*ExampleScenarioInstance)(nil)
var _ json.Unmarshaler = (*ExampleScenarioInstance)(nil)

func (esici *ExampleScenarioInstanceContainedInstance) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (esici *ExampleScenarioInstanceContainedInstance) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		ResourceID        *fhir.String      `json:"resourceId"`
		VersionID         *fhir.String      `json:"versionId"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	esici.Extension = raw.Extension
	esici.ID = raw.ID
	esici.ModifierExtension = raw.ModifierExtension
	esici.ResourceID = raw.ResourceID
	esici.VersionID = raw.VersionID
	return nil
}

var _ json.Marshaler = (*ExampleScenarioInstanceContainedInstance)(nil)
var _ json.Unmarshaler = (*ExampleScenarioInstanceContainedInstance)(nil)

func (esiv *ExampleScenarioInstanceVersion) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (esiv *ExampleScenarioInstanceVersion) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description *fhir.Markdown    `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		VersionID         *fhir.String      `json:"versionId"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	esiv.Description = raw.Description
	esiv.Extension = raw.Extension
	esiv.ID = raw.ID
	esiv.ModifierExtension = raw.ModifierExtension
	esiv.VersionID = raw.VersionID
	return nil
}

var _ json.Marshaler = (*ExampleScenarioInstanceVersion)(nil)
var _ json.Unmarshaler = (*ExampleScenarioInstanceVersion)(nil)

func (esp *ExampleScenarioProcess) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (esp *ExampleScenarioProcess) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description *fhir.Markdown    `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string                        `json:"id"`
		ModifierExtension []*fhir.Extension             `json:"modifierExtension"`
		PostConditions    *fhir.Markdown                `json:"postConditions"`
		PreConditions     *fhir.Markdown                `json:"preConditions"`
		Step              []*ExampleScenarioProcessStep `json:"step"`
		Title             *fhir.String                  `json:"title"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	esp.Description = raw.Description
	esp.Extension = raw.Extension
	esp.ID = raw.ID
	esp.ModifierExtension = raw.ModifierExtension
	esp.PostConditions = raw.PostConditions
	esp.PreConditions = raw.PreConditions
	esp.Step = raw.Step
	esp.Title = raw.Title
	return nil
}

var _ json.Marshaler = (*ExampleScenarioProcess)(nil)
var _ json.Unmarshaler = (*ExampleScenarioProcess)(nil)

func (esps *ExampleScenarioProcessStep) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (esps *ExampleScenarioProcessStep) UnmarshalJSON(data []byte) error {
	var raw struct {
		Alternative []*ExampleScenarioProcessStepAlternative `json:"alternative"`
		Extension   []*fhir.Extension                        `json:"extension"`

		ID                string                               `json:"id"`
		ModifierExtension []*fhir.Extension                    `json:"modifierExtension"`
		Operation         *ExampleScenarioProcessStepOperation `json:"operation"`
		Pause             *fhir.Boolean                        `json:"pause"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	esps.Alternative = raw.Alternative
	esps.Extension = raw.Extension
	esps.ID = raw.ID
	esps.ModifierExtension = raw.ModifierExtension
	esps.Operation = raw.Operation
	esps.Pause = raw.Pause
	return nil
}

var _ json.Marshaler = (*ExampleScenarioProcessStep)(nil)
var _ json.Unmarshaler = (*ExampleScenarioProcessStep)(nil)

func (espsa *ExampleScenarioProcessStepAlternative) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (espsa *ExampleScenarioProcessStepAlternative) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description *fhir.Markdown    `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Title             *fhir.String      `json:"title"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	espsa.Description = raw.Description
	espsa.Extension = raw.Extension
	espsa.ID = raw.ID
	espsa.ModifierExtension = raw.ModifierExtension
	espsa.Title = raw.Title
	return nil
}

var _ json.Marshaler = (*ExampleScenarioProcessStepAlternative)(nil)
var _ json.Unmarshaler = (*ExampleScenarioProcessStepAlternative)(nil)

func (espso *ExampleScenarioProcessStepOperation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (espso *ExampleScenarioProcessStepOperation) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description *fhir.Markdown    `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Initiator         *fhir.String      `json:"initiator"`
		InitiatorActive   *fhir.Boolean     `json:"initiatorActive"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Name              *fhir.String      `json:"name"`
		Number            *fhir.String      `json:"number"`
		Receiver          *fhir.String      `json:"receiver"`
		ReceiverActive    *fhir.Boolean     `json:"receiverActive"`
		Type              *fhir.String      `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	espso.Description = raw.Description
	espso.Extension = raw.Extension
	espso.ID = raw.ID
	espso.Initiator = raw.Initiator
	espso.InitiatorActive = raw.InitiatorActive
	espso.ModifierExtension = raw.ModifierExtension
	espso.Name = raw.Name
	espso.Number = raw.Number
	espso.Receiver = raw.Receiver
	espso.ReceiverActive = raw.ReceiverActive
	espso.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*ExampleScenarioProcessStepOperation)(nil)
var _ json.Unmarshaler = (*ExampleScenarioProcessStepOperation)(nil)
