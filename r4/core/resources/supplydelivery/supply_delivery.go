// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package supplydelivery

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Record of delivery of what is supplied.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/SupplyDelivery
//   - Source File: StructureDefinition-SupplyDelivery.json
type SupplyDelivery struct {

	// A plan, proposal or order that is fulfilled in whole or in part by this
	// event.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Identification of the facility/location where the Supply was shipped to, as
	// part of the dispense event.
	Destination *fhir.Reference `fhirpath:"destination"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifier for the supply delivery event that is used to identify it across
	// multiple disparate systems.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The date or time(s) the activity occurred.
	Occurrence fhir.Element `fhirpath:"occurrence"`

	// A larger event of which this particular event is a component or step.
	PartOf []*fhir.Reference `fhirpath:"partOf"`

	// A link to a resource representing the person whom the delivered item is for.
	Patient *fhir.Reference `fhirpath:"patient"`

	// Identifies the person who picked up the Supply.
	Receiver []*fhir.Reference `fhirpath:"receiver"`

	// A code specifying the state of the dispense event.
	Status *fhir.Code `fhirpath:"status"`

	// The item that is being delivered or has been supplied.
	SuppliedItem *SupplyDeliverySuppliedItem `fhirpath:"suppliedItem"`

	// The individual responsible for dispensing the medication, supplier or
	// device.
	Supplier *fhir.Reference `fhirpath:"supplier"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Indicates the type of dispensing event that is performed. Examples include:
	// Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetBasedOn() []*fhir.Reference {
	if sd == nil {
		return nil
	}
	return sd.BasedOn
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetContained() []fhir.Resource {
	if sd == nil {
		return nil
	}
	return sd.Contained
}

// GetDestination returns the value of the field Destination.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetDestination() *fhir.Reference {
	if sd == nil {
		return nil
	}
	return sd.Destination
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetExtension() []*fhir.Extension {
	if sd == nil {
		return nil
	}
	return sd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetID() string {
	if sd == nil {
		return ""
	}
	return sd.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetIdentifier() []*fhir.Identifier {
	if sd == nil {
		return nil
	}
	return sd.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetImplicitRules() *fhir.URI {
	if sd == nil {
		return nil
	}
	return sd.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetLanguage() *fhir.Code {
	if sd == nil {
		return nil
	}
	return sd.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetMeta() *fhir.Meta {
	if sd == nil {
		return nil
	}
	return sd.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetModifierExtension() []*fhir.Extension {
	if sd == nil {
		return nil
	}
	return sd.ModifierExtension
}

// GetOccurrence returns the value of the field Occurrence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetOccurrence() fhir.Element {
	if sd == nil {
		return nil
	}
	return sd.Occurrence
}

// GetOccurrenceDateTime returns the value of the field Occurrence.
func (sd *SupplyDelivery) GetOccurrenceDateTime() *fhir.DateTime {
	if sd == nil {
		return nil
	}
	val, ok := sd.Occurrence.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetOccurrencePeriod returns the value of the field Occurrence.
func (sd *SupplyDelivery) GetOccurrencePeriod() *fhir.Period {
	if sd == nil {
		return nil
	}
	val, ok := sd.Occurrence.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetOccurrenceTiming returns the value of the field Occurrence.
func (sd *SupplyDelivery) GetOccurrenceTiming() *fhir.Timing {
	if sd == nil {
		return nil
	}
	val, ok := sd.Occurrence.(*fhir.Timing)
	if !ok {
		return nil
	}
	return val
} // GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetPartOf() []*fhir.Reference {
	if sd == nil {
		return nil
	}
	return sd.PartOf
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetPatient() *fhir.Reference {
	if sd == nil {
		return nil
	}
	return sd.Patient
}

// GetReceiver returns the value of the field Receiver.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetReceiver() []*fhir.Reference {
	if sd == nil {
		return nil
	}
	return sd.Receiver
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetStatus() *fhir.Code {
	if sd == nil {
		return nil
	}
	return sd.Status
}

// GetSuppliedItem returns the value of the field SuppliedItem.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetSuppliedItem() *SupplyDeliverySuppliedItem {
	if sd == nil {
		return nil
	}
	return sd.SuppliedItem
}

// GetSupplier returns the value of the field Supplier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetSupplier() *fhir.Reference {
	if sd == nil {
		return nil
	}
	return sd.Supplier
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetText() *fhir.Narrative {
	if sd == nil {
		return nil
	}
	return sd.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *SupplyDelivery) GetType() *fhir.CodeableConcept {
	if sd == nil {
		return nil
	}
	return sd.Type
}

// The item that is delivered or supplied// The item that is being delivered or has been supplied.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SupplyDelivery.json
type SupplyDeliverySuppliedItem struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Identifies the medication, substance or device being dispensed. This is
	// either a link to a resource representing the details of the item or a code
	// that identifies the item from a known list.
	Item fhir.Element `fhirpath:"item"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The amount of supply that has been dispensed. Includes unit of measure.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdsi *SupplyDeliverySuppliedItem) GetExtension() []*fhir.Extension {
	if sdsi == nil {
		return nil
	}
	return sdsi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdsi *SupplyDeliverySuppliedItem) GetID() string {
	if sdsi == nil {
		return ""
	}
	return sdsi.ID
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdsi *SupplyDeliverySuppliedItem) GetItem() fhir.Element {
	if sdsi == nil {
		return nil
	}
	return sdsi.Item
}

// GetItemCodeableConcept returns the value of the field Item.
func (sdsi *SupplyDeliverySuppliedItem) GetItemCodeableConcept() *fhir.CodeableConcept {
	if sdsi == nil {
		return nil
	}
	val, ok := sdsi.Item.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetItemReference returns the value of the field Item.
func (sdsi *SupplyDeliverySuppliedItem) GetItemReference() *fhir.Reference {
	if sdsi == nil {
		return nil
	}
	val, ok := sdsi.Item.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdsi *SupplyDeliverySuppliedItem) GetModifierExtension() []*fhir.Extension {
	if sdsi == nil {
		return nil
	}
	return sdsi.ModifierExtension
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdsi *SupplyDeliverySuppliedItem) GetQuantity() *fhir.Quantity {
	if sdsi == nil {
		return nil
	}
	return sdsi.Quantity
}
