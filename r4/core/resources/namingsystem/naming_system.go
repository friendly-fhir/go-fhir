// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package namingsystem

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A curated namespace that issues unique symbols within that namespace for the
// identification of concepts, people, devices, etc. Represents a "System" used
// within the Identifier and Coding data types.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/NamingSystem
//   - Source File: StructureDefinition-NamingSystem.json
type NamingSystem struct {

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date (and optionally time) when the naming system was published. The
	// date must change when the business version changes and it must change if the
	// status code changes. In addition, it should change when the substantive
	// content of the naming system changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the naming system from a
	// consumer's perspective. Details about what the namespace identifies
	// including scope, granularity, version labeling, etc.
	Description *fhir.Markdown `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A legal or geographic region in which the naming system is intended to be
	// used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// Indicates the purpose for the naming system - what kinds of things does it
	// make unique?
	Kind *fhir.Code `fhirpath:"kind"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the naming system. This name should be
	// usable as an identifier for the module by machine processing applications
	// such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// The name of the organization or individual that published the naming system.
	Publisher *fhir.String `fhirpath:"publisher"`

	// The name of the organization that is responsible for issuing identifiers or
	// codes for this namespace and ensuring their non-collision.
	Responsible *fhir.String `fhirpath:"responsible"`

	// The status of this naming system. Enables tracking the life-cycle of the
	// content.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Categorizes a naming system for easier search by grouping related naming
	// systems.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// Indicates how the system may be identified when referenced in electronic
	// exchange.
	UniqueID []*NamingSystemUniqueID `fhirpath:"uniqueId"`

	// Provides guidance on the use of the namespace, including the handling of
	// formatting characters, use of upper vs. lower case, etc.
	Usage *fhir.String `fhirpath:"usage"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate naming
	// system instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetContact() []*fhir.ContactDetail {
	if ns == nil {
		return nil
	}
	return ns.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetContained() []fhir.Resource {
	if ns == nil {
		return nil
	}
	return ns.Contained
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetDate() *fhir.DateTime {
	if ns == nil {
		return nil
	}
	return ns.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetDescription() *fhir.Markdown {
	if ns == nil {
		return nil
	}
	return ns.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetExtension() []*fhir.Extension {
	if ns == nil {
		return nil
	}
	return ns.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetID() string {
	if ns == nil {
		return ""
	}
	return ns.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetImplicitRules() *fhir.URI {
	if ns == nil {
		return nil
	}
	return ns.ImplicitRules
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetJurisdiction() []*fhir.CodeableConcept {
	if ns == nil {
		return nil
	}
	return ns.Jurisdiction
}

// GetKind returns the value of the field Kind.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetKind() *fhir.Code {
	if ns == nil {
		return nil
	}
	return ns.Kind
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetLanguage() *fhir.Code {
	if ns == nil {
		return nil
	}
	return ns.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetMeta() *fhir.Meta {
	if ns == nil {
		return nil
	}
	return ns.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetModifierExtension() []*fhir.Extension {
	if ns == nil {
		return nil
	}
	return ns.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetName() *fhir.String {
	if ns == nil {
		return nil
	}
	return ns.Name
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetPublisher() *fhir.String {
	if ns == nil {
		return nil
	}
	return ns.Publisher
}

// GetResponsible returns the value of the field Responsible.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetResponsible() *fhir.String {
	if ns == nil {
		return nil
	}
	return ns.Responsible
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetStatus() *fhir.Code {
	if ns == nil {
		return nil
	}
	return ns.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetText() *fhir.Narrative {
	if ns == nil {
		return nil
	}
	return ns.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetType() *fhir.CodeableConcept {
	if ns == nil {
		return nil
	}
	return ns.Type
}

// GetUniqueID returns the value of the field UniqueID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetUniqueID() []*NamingSystemUniqueID {
	if ns == nil {
		return nil
	}
	return ns.UniqueID
}

// GetUsage returns the value of the field Usage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetUsage() *fhir.String {
	if ns == nil {
		return nil
	}
	return ns.Usage
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ns *NamingSystem) GetUseContext() []*fhir.UsageContext {
	if ns == nil {
		return nil
	}
	return ns.UseContext
}

// Unique identifiers used for system// Indicates how the system may be identified when referenced in electronic
// exchange.// Multiple identifiers may exist, either due to duplicate registration,
// regional rules, needs of different communication technologies, etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-NamingSystem.json
type NamingSystemUniqueID struct {

	// Notes about the past or intended usage of this identifier.
	Comment *fhir.String `fhirpath:"comment"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Identifies the period of time over which this identifier is considered
	// appropriate to refer to the naming system. Outside of this window, the
	// identifier might be non-deterministic.
	Period *fhir.Period `fhirpath:"period"`

	// Indicates whether this identifier is the "preferred" identifier of this
	// type.
	Preferred *fhir.Boolean `fhirpath:"preferred"`

	// Identifies the unique identifier scheme used for this particular identifier.
	Type *fhir.Code `fhirpath:"type"`

	// The string that should be sent over the wire to identify the code system or
	// identifier system.
	Value *fhir.String `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetComment returns the value of the field Comment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nsui *NamingSystemUniqueID) GetComment() *fhir.String {
	if nsui == nil {
		return nil
	}
	return nsui.Comment
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nsui *NamingSystemUniqueID) GetExtension() []*fhir.Extension {
	if nsui == nil {
		return nil
	}
	return nsui.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nsui *NamingSystemUniqueID) GetID() string {
	if nsui == nil {
		return ""
	}
	return nsui.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nsui *NamingSystemUniqueID) GetModifierExtension() []*fhir.Extension {
	if nsui == nil {
		return nil
	}
	return nsui.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nsui *NamingSystemUniqueID) GetPeriod() *fhir.Period {
	if nsui == nil {
		return nil
	}
	return nsui.Period
}

// GetPreferred returns the value of the field Preferred.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nsui *NamingSystemUniqueID) GetPreferred() *fhir.Boolean {
	if nsui == nil {
		return nil
	}
	return nsui.Preferred
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nsui *NamingSystemUniqueID) GetType() *fhir.Code {
	if nsui == nil {
		return nil
	}
	return nsui.Type
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nsui *NamingSystemUniqueID) GetValue() *fhir.String {
	if nsui == nil {
		return nil
	}
	return nsui.Value
}

func (ns *NamingSystem) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ns *NamingSystem) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contact     []*fhir.ContactDetail `json:"contact"`
		Contained   []fhir.Resource       `json:"contained"`
		Date        *fhir.DateTime        `json:"date"`
		Description *fhir.Markdown        `json:"description"`
		Extension   []*fhir.Extension     `json:"extension"`

		ID                string                  `json:"id"`
		ImplicitRules     *fhir.URI               `json:"implicitRules"`
		Jurisdiction      []*fhir.CodeableConcept `json:"jurisdiction"`
		Kind              *fhir.Code              `json:"kind"`
		Language          *fhir.Code              `json:"language"`
		Meta              *fhir.Meta              `json:"meta"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Name              *fhir.String            `json:"name"`
		Publisher         *fhir.String            `json:"publisher"`
		Responsible       *fhir.String            `json:"responsible"`
		Status            *fhir.Code              `json:"status"`
		Text              *fhir.Narrative         `json:"text"`
		Type              *fhir.CodeableConcept   `json:"type"`
		UniqueID          []*NamingSystemUniqueID `json:"uniqueId"`
		Usage             *fhir.String            `json:"usage"`
		UseContext        []*fhir.UsageContext    `json:"useContext"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ns.Contact = raw.Contact
	ns.Contained = raw.Contained
	ns.Date = raw.Date
	ns.Description = raw.Description
	ns.Extension = raw.Extension
	ns.ID = raw.ID
	ns.ImplicitRules = raw.ImplicitRules
	ns.Jurisdiction = raw.Jurisdiction
	ns.Kind = raw.Kind
	ns.Language = raw.Language
	ns.Meta = raw.Meta
	ns.ModifierExtension = raw.ModifierExtension
	ns.Name = raw.Name
	ns.Publisher = raw.Publisher
	ns.Responsible = raw.Responsible
	ns.Status = raw.Status
	ns.Text = raw.Text
	ns.Type = raw.Type
	ns.UniqueID = raw.UniqueID
	ns.Usage = raw.Usage
	ns.UseContext = raw.UseContext
	return nil
}

var _ json.Marshaler = (*NamingSystem)(nil)
var _ json.Unmarshaler = (*NamingSystem)(nil)

func (nsui *NamingSystemUniqueID) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (nsui *NamingSystemUniqueID) UnmarshalJSON(data []byte) error {
	var raw struct {
		Comment   *fhir.String      `json:"comment"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Period            *fhir.Period      `json:"period"`
		Preferred         *fhir.Boolean     `json:"preferred"`
		Type              *fhir.Code        `json:"type"`
		Value             *fhir.String      `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	nsui.Comment = raw.Comment
	nsui.Extension = raw.Extension
	nsui.ID = raw.ID
	nsui.ModifierExtension = raw.ModifierExtension
	nsui.Period = raw.Period
	nsui.Preferred = raw.Preferred
	nsui.Type = raw.Type
	nsui.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*NamingSystemUniqueID)(nil)
var _ json.Unmarshaler = (*NamingSystemUniqueID)(nil)
