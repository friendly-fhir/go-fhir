// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package familymemberhistory

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Significant health conditions for a person related to the patient relevant
// in the context of care for the patient.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory
//   - Source File: StructureDefinition-FamilyMemberHistory.json
type FamilyMemberHistory struct {

	// The age of the relative at the time the family member history is recorded.
	Age fhir.Element `fhirpath:"age"`

	// The actual or approximate date of birth of the relative.
	Born fhir.Element `fhirpath:"born"`

	// The significant Conditions (or condition) that the family member had. This
	// is a repeating section to allow a system to represent more than one
	// condition per resource, though there is nothing stopping multiple resources
	// - one per condition.
	Condition []*FamilyMemberHistoryCondition `fhirpath:"condition"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Describes why the family member's history is not available.
	DataAbsentReason *fhir.CodeableConcept `fhirpath:"dataAbsentReason"`

	// The date (and possibly time) when the family member history was recorded or
	// last updated.
	Date *fhir.DateTime `fhirpath:"date"`

	// Deceased flag or the actual or approximate age of the relative at the time
	// of death for the family member history record.
	Deceased fhir.Element `fhirpath:"deceased"`

	// If true, indicates that the age value specified is an estimated value.
	EstimatedAge *fhir.Boolean `fhirpath:"estimatedAge"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifiers assigned to this family member history by the performer
	// or other systems which remain constant as the resource is updated and
	// propagates from server to server.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this
	// FamilyMemberHistory.
	InstantiatesCanonical []*fhir.Canonical `fhirpath:"instantiatesCanonical"`

	// The URL pointing to an externally maintained protocol, guideline, orderset
	// or other definition that is adhered to in whole or in part by this
	// FamilyMemberHistory.
	InstantiatesURI []*fhir.URI `fhirpath:"instantiatesUri"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// This will either be a name or a description; e.g. "Aunt Susan", "my cousin
	// with the red hair".
	Name *fhir.String `fhirpath:"name"`

	// This property allows a non condition-specific note to the made about the
	// related person. Ideally, the note would be in the condition property, but
	// this is not always possible.
	Note []*fhir.Annotation `fhirpath:"note"`

	// The person who this history concerns.
	Patient *fhir.Reference `fhirpath:"patient"`

	// Describes why the family member history occurred in coded or textual form.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Indicates a Condition, Observation, AllergyIntolerance, or
	// QuestionnaireResponse that justifies this family member history event.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// The type of relationship this person has to the patient (father, mother,
	// brother etc.).
	Relationship *fhir.CodeableConcept `fhirpath:"relationship"`

	// The birth sex of the family member.
	Sex *fhir.CodeableConcept `fhirpath:"sex"`

	// A code specifying the status of the record of the family history of a
	// specific family member.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseFamilyMemberHistory
	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAge returns the value of the field Age.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetAge() fhir.Element {
	if fmh == nil {
		return nil
	}
	return fmh.Age
}

// GetAgeAge returns the value of the field Age.
func (fmh *FamilyMemberHistory) GetAgeAge() *fhir.Age {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Age.(*fhir.Age)
	if !ok {
		return nil
	}
	return val
}

// GetAgeRange returns the value of the field Age.
func (fmh *FamilyMemberHistory) GetAgeRange() *fhir.Range {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Age.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
}

// GetAgeString returns the value of the field Age.
func (fmh *FamilyMemberHistory) GetAgeString() *fhir.String {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Age.(*fhir.String)
	if !ok {
		return nil
	}
	return val
} // GetBorn returns the value of the field Born.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetBorn() fhir.Element {
	if fmh == nil {
		return nil
	}
	return fmh.Born
}

// GetBornPeriod returns the value of the field Born.
func (fmh *FamilyMemberHistory) GetBornPeriod() *fhir.Period {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Born.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetBornDate returns the value of the field Born.
func (fmh *FamilyMemberHistory) GetBornDate() *fhir.Date {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Born.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetBornString returns the value of the field Born.
func (fmh *FamilyMemberHistory) GetBornString() *fhir.String {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Born.(*fhir.String)
	if !ok {
		return nil
	}
	return val
} // GetCondition returns the value of the field Condition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetCondition() []*FamilyMemberHistoryCondition {
	if fmh == nil {
		return nil
	}
	return fmh.Condition
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetContained() []fhir.Resource {
	if fmh == nil {
		return nil
	}
	return fmh.Contained
}

// GetDataAbsentReason returns the value of the field DataAbsentReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetDataAbsentReason() *fhir.CodeableConcept {
	if fmh == nil {
		return nil
	}
	return fmh.DataAbsentReason
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetDate() *fhir.DateTime {
	if fmh == nil {
		return nil
	}
	return fmh.Date
}

// GetDeceased returns the value of the field Deceased.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetDeceased() fhir.Element {
	if fmh == nil {
		return nil
	}
	return fmh.Deceased
}

// GetDeceasedBoolean returns the value of the field Deceased.
func (fmh *FamilyMemberHistory) GetDeceasedBoolean() *fhir.Boolean {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Deceased.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetDeceasedAge returns the value of the field Deceased.
func (fmh *FamilyMemberHistory) GetDeceasedAge() *fhir.Age {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Deceased.(*fhir.Age)
	if !ok {
		return nil
	}
	return val
}

// GetDeceasedRange returns the value of the field Deceased.
func (fmh *FamilyMemberHistory) GetDeceasedRange() *fhir.Range {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Deceased.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
}

// GetDeceasedDate returns the value of the field Deceased.
func (fmh *FamilyMemberHistory) GetDeceasedDate() *fhir.Date {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Deceased.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetDeceasedString returns the value of the field Deceased.
func (fmh *FamilyMemberHistory) GetDeceasedString() *fhir.String {
	if fmh == nil {
		return nil
	}
	val, ok := fmh.Deceased.(*fhir.String)
	if !ok {
		return nil
	}
	return val
} // GetEstimatedAge returns the value of the field EstimatedAge.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetEstimatedAge() *fhir.Boolean {
	if fmh == nil {
		return nil
	}
	return fmh.EstimatedAge
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetExtension() []*fhir.Extension {
	if fmh == nil {
		return nil
	}
	return fmh.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetID() string {
	if fmh == nil {
		return ""
	}
	return fmh.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetIdentifier() []*fhir.Identifier {
	if fmh == nil {
		return nil
	}
	return fmh.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetImplicitRules() *fhir.URI {
	if fmh == nil {
		return nil
	}
	return fmh.ImplicitRules
}

// GetInstantiatesCanonical returns the value of the field InstantiatesCanonical.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetInstantiatesCanonical() []*fhir.Canonical {
	if fmh == nil {
		return nil
	}
	return fmh.InstantiatesCanonical
}

// GetInstantiatesURI returns the value of the field InstantiatesURI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetInstantiatesURI() []*fhir.URI {
	if fmh == nil {
		return nil
	}
	return fmh.InstantiatesURI
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetLanguage() *fhir.Code {
	if fmh == nil {
		return nil
	}
	return fmh.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetMeta() *fhir.Meta {
	if fmh == nil {
		return nil
	}
	return fmh.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetModifierExtension() []*fhir.Extension {
	if fmh == nil {
		return nil
	}
	return fmh.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetName() *fhir.String {
	if fmh == nil {
		return nil
	}
	return fmh.Name
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetNote() []*fhir.Annotation {
	if fmh == nil {
		return nil
	}
	return fmh.Note
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetPatient() *fhir.Reference {
	if fmh == nil {
		return nil
	}
	return fmh.Patient
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetReasonCode() []*fhir.CodeableConcept {
	if fmh == nil {
		return nil
	}
	return fmh.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetReasonReference() []*fhir.Reference {
	if fmh == nil {
		return nil
	}
	return fmh.ReasonReference
}

// GetRelationship returns the value of the field Relationship.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetRelationship() *fhir.CodeableConcept {
	if fmh == nil {
		return nil
	}
	return fmh.Relationship
}

// GetSex returns the value of the field Sex.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetSex() *fhir.CodeableConcept {
	if fmh == nil {
		return nil
	}
	return fmh.Sex
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetStatus() *fhir.Code {
	if fmh == nil {
		return nil
	}
	return fmh.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmh *FamilyMemberHistory) GetText() *fhir.Narrative {
	if fmh == nil {
		return nil
	}
	return fmh.Text
}

// Condition that the related person had// The significant Conditions (or condition) that the family member had. This
// is a repeating section to allow a system to represent more than one
// condition per resource, though there is nothing stopping multiple resources
// - one per condition.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-FamilyMemberHistory.json
type FamilyMemberHistoryCondition struct {

	// The actual condition specified. Could be a coded condition (like MI or
	// Diabetes) or a less specific string like 'cancer' depending on how much is
	// known about the condition and the capabilities of the creating system.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// This condition contributed to the cause of death of the related person. If
	// contributedToDeath is not populated, then it is unknown.
	ContributedToDeath *fhir.Boolean `fhirpath:"contributedToDeath"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// An area where general notes can be placed about this specific condition.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Either the age of onset, range of approximate age or descriptive string can
	// be recorded. For conditions with multiple occurrences, this describes the
	// first known occurrence.
	Onset fhir.Element `fhirpath:"onset"`

	// Indicates what happened following the condition. If the condition resulted
	// in death, deceased date is captured on the relation.
	Outcome *fhir.CodeableConcept `fhirpath:"outcome"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmhc *FamilyMemberHistoryCondition) GetCode() *fhir.CodeableConcept {
	if fmhc == nil {
		return nil
	}
	return fmhc.Code
}

// GetContributedToDeath returns the value of the field ContributedToDeath.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmhc *FamilyMemberHistoryCondition) GetContributedToDeath() *fhir.Boolean {
	if fmhc == nil {
		return nil
	}
	return fmhc.ContributedToDeath
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmhc *FamilyMemberHistoryCondition) GetExtension() []*fhir.Extension {
	if fmhc == nil {
		return nil
	}
	return fmhc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmhc *FamilyMemberHistoryCondition) GetID() string {
	if fmhc == nil {
		return ""
	}
	return fmhc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmhc *FamilyMemberHistoryCondition) GetModifierExtension() []*fhir.Extension {
	if fmhc == nil {
		return nil
	}
	return fmhc.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmhc *FamilyMemberHistoryCondition) GetNote() []*fhir.Annotation {
	if fmhc == nil {
		return nil
	}
	return fmhc.Note
}

// GetOnset returns the value of the field Onset.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmhc *FamilyMemberHistoryCondition) GetOnset() fhir.Element {
	if fmhc == nil {
		return nil
	}
	return fmhc.Onset
}

// GetOnsetAge returns the value of the field Onset.
func (fmhc *FamilyMemberHistoryCondition) GetOnsetAge() *fhir.Age {
	if fmhc == nil {
		return nil
	}
	val, ok := fmhc.Onset.(*fhir.Age)
	if !ok {
		return nil
	}
	return val
}

// GetOnsetRange returns the value of the field Onset.
func (fmhc *FamilyMemberHistoryCondition) GetOnsetRange() *fhir.Range {
	if fmhc == nil {
		return nil
	}
	val, ok := fmhc.Onset.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
}

// GetOnsetPeriod returns the value of the field Onset.
func (fmhc *FamilyMemberHistoryCondition) GetOnsetPeriod() *fhir.Period {
	if fmhc == nil {
		return nil
	}
	val, ok := fmhc.Onset.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetOnsetString returns the value of the field Onset.
func (fmhc *FamilyMemberHistoryCondition) GetOnsetString() *fhir.String {
	if fmhc == nil {
		return nil
	}
	val, ok := fmhc.Onset.(*fhir.String)
	if !ok {
		return nil
	}
	return val
} // GetOutcome returns the value of the field Outcome.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (fmhc *FamilyMemberHistoryCondition) GetOutcome() *fhir.CodeableConcept {
	if fmhc == nil {
		return nil
	}
	return fmhc.Outcome
}

func (fmh *FamilyMemberHistory) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (fmh *FamilyMemberHistory) UnmarshalJSON(data []byte) error {
	var raw struct {
		AgeAge           *fhir.Age                       `json:"ageAge"`
		AgeRange         *fhir.Range                     `json:"ageRange"`
		AgeString        *fhir.String                    `json:"ageString"`
		BornPeriod       *fhir.Period                    `json:"bornPeriod"`
		BornDate         *fhir.Date                      `json:"bornDate"`
		BornString       *fhir.String                    `json:"bornString"`
		Condition        []*FamilyMemberHistoryCondition `json:"condition"`
		Contained        []fhir.Resource                 `json:"contained"`
		DataAbsentReason *fhir.CodeableConcept           `json:"dataAbsentReason"`
		Date             *fhir.DateTime                  `json:"date"`
		DeceasedBoolean  *fhir.Boolean                   `json:"deceasedBoolean"`
		DeceasedAge      *fhir.Age                       `json:"deceasedAge"`
		DeceasedRange    *fhir.Range                     `json:"deceasedRange"`
		DeceasedDate     *fhir.Date                      `json:"deceasedDate"`
		DeceasedString   *fhir.String                    `json:"deceasedString"`
		EstimatedAge     *fhir.Boolean                   `json:"estimatedAge"`
		Extension        []*fhir.Extension               `json:"extension"`

		ID                    string                  `json:"id"`
		Identifier            []*fhir.Identifier      `json:"identifier"`
		ImplicitRules         *fhir.URI               `json:"implicitRules"`
		InstantiatesCanonical []*fhir.Canonical       `json:"instantiatesCanonical"`
		InstantiatesURI       []*fhir.URI             `json:"instantiatesUri"`
		Language              *fhir.Code              `json:"language"`
		Meta                  *fhir.Meta              `json:"meta"`
		ModifierExtension     []*fhir.Extension       `json:"modifierExtension"`
		Name                  *fhir.String            `json:"name"`
		Note                  []*fhir.Annotation      `json:"note"`
		Patient               *fhir.Reference         `json:"patient"`
		ReasonCode            []*fhir.CodeableConcept `json:"reasonCode"`
		ReasonReference       []*fhir.Reference       `json:"reasonReference"`
		Relationship          *fhir.CodeableConcept   `json:"relationship"`
		Sex                   *fhir.CodeableConcept   `json:"sex"`
		Status                *fhir.Code              `json:"status"`
		Text                  *fhir.Narrative         `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	fmh.Age, err = validate.SelectOneOf[fhir.Element]("FamilyMemberHistory.age",
		raw.AgeAge,
		raw.AgeRange,
		raw.AgeString)
	if err != nil {
		return err
	}
	fmh.Born, err = validate.SelectOneOf[fhir.Element]("FamilyMemberHistory.born",
		raw.BornPeriod,
		raw.BornDate,
		raw.BornString)
	if err != nil {
		return err
	}
	fmh.Condition = raw.Condition
	fmh.Contained = raw.Contained
	fmh.DataAbsentReason = raw.DataAbsentReason
	fmh.Date = raw.Date
	fmh.Deceased, err = validate.SelectOneOf[fhir.Element]("FamilyMemberHistory.deceased",
		raw.DeceasedBoolean,
		raw.DeceasedAge,
		raw.DeceasedRange,
		raw.DeceasedDate,
		raw.DeceasedString)
	if err != nil {
		return err
	}
	fmh.EstimatedAge = raw.EstimatedAge
	fmh.Extension = raw.Extension
	fmh.ID = raw.ID
	fmh.Identifier = raw.Identifier
	fmh.ImplicitRules = raw.ImplicitRules
	fmh.InstantiatesCanonical = raw.InstantiatesCanonical
	fmh.InstantiatesURI = raw.InstantiatesURI
	fmh.Language = raw.Language
	fmh.Meta = raw.Meta
	fmh.ModifierExtension = raw.ModifierExtension
	fmh.Name = raw.Name
	fmh.Note = raw.Note
	fmh.Patient = raw.Patient
	fmh.ReasonCode = raw.ReasonCode
	fmh.ReasonReference = raw.ReasonReference
	fmh.Relationship = raw.Relationship
	fmh.Sex = raw.Sex
	fmh.Status = raw.Status
	fmh.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*FamilyMemberHistory)(nil)
var _ json.Unmarshaler = (*FamilyMemberHistory)(nil)

func (fmhc *FamilyMemberHistoryCondition) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (fmhc *FamilyMemberHistoryCondition) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code               *fhir.CodeableConcept `json:"code"`
		ContributedToDeath *fhir.Boolean         `json:"contributedToDeath"`
		Extension          []*fhir.Extension     `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Note              []*fhir.Annotation    `json:"note"`
		OnsetAge          *fhir.Age             `json:"onsetAge"`
		OnsetRange        *fhir.Range           `json:"onsetRange"`
		OnsetPeriod       *fhir.Period          `json:"onsetPeriod"`
		OnsetString       *fhir.String          `json:"onsetString"`
		Outcome           *fhir.CodeableConcept `json:"outcome"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	fmhc.Code = raw.Code
	fmhc.ContributedToDeath = raw.ContributedToDeath
	fmhc.Extension = raw.Extension
	fmhc.ID = raw.ID
	fmhc.ModifierExtension = raw.ModifierExtension
	fmhc.Note = raw.Note
	fmhc.Onset, err = validate.SelectOneOf[fhir.Element]("FamilyMemberHistory.condition.onset",
		raw.OnsetAge,
		raw.OnsetRange,
		raw.OnsetPeriod,
		raw.OnsetString)
	if err != nil {
		return err
	}
	fmhc.Outcome = raw.Outcome
	return nil
}

var _ json.Marshaler = (*FamilyMemberHistoryCondition)(nil)
var _ json.Unmarshaler = (*FamilyMemberHistoryCondition)(nil)
