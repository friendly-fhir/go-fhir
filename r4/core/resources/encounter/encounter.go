// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package encounter

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// An interaction between a patient and healthcare provider(s) for the purpose
// of providing healthcare service(s) or assessing the health status of a
// patient.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Encounter
//   - Source File: StructureDefinition-Encounter.json
type Encounter struct {

	// The set of accounts that may be used for billing for this Encounter.
	Account []*fhir.Reference `fhirpath:"account"`

	// The appointment that scheduled this encounter.
	Appointment []*fhir.Reference `fhirpath:"appointment"`

	// The request this encounter satisfies (e.g. incoming referral or procedure
	// request).
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// Concepts representing classification of patient encounter such as ambulatory
	// (outpatient), inpatient, emergency, home health or others due to local
	// variations.
	Class *fhir.Coding `fhirpath:"class"`

	// The class history permits the tracking of the encounters transitions without
	// needing to go through the resource history. This would be used for a case
	// where an admission starts of as an emergency encounter, then transitions
	// into an inpatient scenario. Doing this and not restarting a new encounter
	// ensures that any lab/diagnostic results can more easily follow the patient
	// and not require re-processing and not get lost or cancelled during a kind of
	// discharge from emergency to inpatient.
	ClassHistory []*EncounterClassHistory `fhirpath:"classHistory"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The list of diagnosis relevant to this encounter.
	Diagnosis []*EncounterDiagnosis `fhirpath:"diagnosis"`

	// Where a specific encounter should be classified as a part of a specific
	// episode(s) of care this field should be used. This association can
	// facilitate grouping of related encounters together for a specific purpose,
	// such as government reporting, issue tracking, association via a common
	// problem. The association is recorded on the encounter as these are typically
	// created after the episode of care and grouped on entry rather than editing
	// the episode of care to append another encounter to it (the episode of care
	// could span years).
	EpisodeOfCare []*fhir.Reference `fhirpath:"episodeOfCare"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Details about the admission to a healthcare service.
	Hospitalization *EncounterHospitalization `fhirpath:"hospitalization"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifier(s) by which this encounter is known.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Quantity of time the encounter lasted. This excludes the time during leaves
	// of absence.
	Length *fhir.Duration `fhirpath:"length"`

	// List of locations where the patient has been during this encounter.
	Location []*EncounterLocation `fhirpath:"location"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Another Encounter of which this encounter is a part of (administratively or
	// in time).
	PartOf *fhir.Reference `fhirpath:"partOf"`

	// The list of people responsible for providing the service.
	Participant []*EncounterParticipant `fhirpath:"participant"`

	// The start and end time of the encounter.
	Period *fhir.Period `fhirpath:"period"`

	// Indicates the urgency of the encounter.
	Priority *fhir.CodeableConcept `fhirpath:"priority"`

	// Reason the encounter takes place, expressed as a code. For admissions, this
	// can be used for a coded admission diagnosis.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Reason the encounter takes place, expressed as a code. For admissions, this
	// can be used for a coded admission diagnosis.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// The organization that is primarily responsible for this Encounter's
	// services. This MAY be the same as the organization on the Patient record,
	// however it could be different, such as if the actor performing the services
	// was from an external organization (which may be billed seperately) for an
	// external consultation. Refer to the example bundle showing an abbreviated
	// set of Encounters for a colonoscopy.
	ServiceProvider *fhir.Reference `fhirpath:"serviceProvider"`

	// Broad categorization of the service that is to be provided (e.g.
	// cardiology).
	ServiceType *fhir.CodeableConcept `fhirpath:"serviceType"`

	// planned | arrived | triaged | in-progress | onleave | finished | cancelled
	// +.
	Status *fhir.Code `fhirpath:"status"`

	// The status history permits the encounter resource to contain the status
	// history without needing to read through the historical versions of the
	// resource, or even have the server store them.
	StatusHistory []*EncounterStatusHistory `fhirpath:"statusHistory"`

	// The patient or group present at the encounter.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Specific type of encounter (e.g. e-mail consultation, surgical day-care,
	// skilled nursing, rehabilitation).
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAccount returns the value of the field Account.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetAccount() []*fhir.Reference {
	if e == nil {
		return nil
	}
	return e.Account
}

// GetAppointment returns the value of the field Appointment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetAppointment() []*fhir.Reference {
	if e == nil {
		return nil
	}
	return e.Appointment
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetBasedOn() []*fhir.Reference {
	if e == nil {
		return nil
	}
	return e.BasedOn
}

// GetClass returns the value of the field Class.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetClass() *fhir.Coding {
	if e == nil {
		return nil
	}
	return e.Class
}

// GetClassHistory returns the value of the field ClassHistory.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetClassHistory() []*EncounterClassHistory {
	if e == nil {
		return nil
	}
	return e.ClassHistory
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetContained() []fhir.Resource {
	if e == nil {
		return nil
	}
	return e.Contained
}

// GetDiagnosis returns the value of the field Diagnosis.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetDiagnosis() []*EncounterDiagnosis {
	if e == nil {
		return nil
	}
	return e.Diagnosis
}

// GetEpisodeOfCare returns the value of the field EpisodeOfCare.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetEpisodeOfCare() []*fhir.Reference {
	if e == nil {
		return nil
	}
	return e.EpisodeOfCare
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetExtension() []*fhir.Extension {
	if e == nil {
		return nil
	}
	return e.Extension
}

// GetHospitalization returns the value of the field Hospitalization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetHospitalization() *EncounterHospitalization {
	if e == nil {
		return nil
	}
	return e.Hospitalization
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetID() string {
	if e == nil {
		return ""
	}
	return e.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetIdentifier() []*fhir.Identifier {
	if e == nil {
		return nil
	}
	return e.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetImplicitRules() *fhir.URI {
	if e == nil {
		return nil
	}
	return e.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetLanguage() *fhir.Code {
	if e == nil {
		return nil
	}
	return e.Language
}

// GetLength returns the value of the field Length.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetLength() *fhir.Duration {
	if e == nil {
		return nil
	}
	return e.Length
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetLocation() []*EncounterLocation {
	if e == nil {
		return nil
	}
	return e.Location
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetMeta() *fhir.Meta {
	if e == nil {
		return nil
	}
	return e.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetModifierExtension() []*fhir.Extension {
	if e == nil {
		return nil
	}
	return e.ModifierExtension
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetPartOf() *fhir.Reference {
	if e == nil {
		return nil
	}
	return e.PartOf
}

// GetParticipant returns the value of the field Participant.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetParticipant() []*EncounterParticipant {
	if e == nil {
		return nil
	}
	return e.Participant
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetPeriod() *fhir.Period {
	if e == nil {
		return nil
	}
	return e.Period
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetPriority() *fhir.CodeableConcept {
	if e == nil {
		return nil
	}
	return e.Priority
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetReasonCode() []*fhir.CodeableConcept {
	if e == nil {
		return nil
	}
	return e.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetReasonReference() []*fhir.Reference {
	if e == nil {
		return nil
	}
	return e.ReasonReference
}

// GetServiceProvider returns the value of the field ServiceProvider.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetServiceProvider() *fhir.Reference {
	if e == nil {
		return nil
	}
	return e.ServiceProvider
}

// GetServiceType returns the value of the field ServiceType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetServiceType() *fhir.CodeableConcept {
	if e == nil {
		return nil
	}
	return e.ServiceType
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetStatus() *fhir.Code {
	if e == nil {
		return nil
	}
	return e.Status
}

// GetStatusHistory returns the value of the field StatusHistory.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetStatusHistory() []*EncounterStatusHistory {
	if e == nil {
		return nil
	}
	return e.StatusHistory
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetSubject() *fhir.Reference {
	if e == nil {
		return nil
	}
	return e.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetText() *fhir.Narrative {
	if e == nil {
		return nil
	}
	return e.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Encounter) GetType() []*fhir.CodeableConcept {
	if e == nil {
		return nil
	}
	return e.Type
}

// List of past encounter classes// The class history permits the tracking of the encounters transitions without
// needing to go through the resource history. This would be used for a case
// where an admission starts of as an emergency encounter, then transitions
// into an inpatient scenario. Doing this and not restarting a new encounter
// ensures that any lab/diagnostic results can more easily follow the patient
// and not require re-processing and not get lost or cancelled during a kind of
// discharge from emergency to inpatient.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Encounter.json
type EncounterClassHistory struct {

	// inpatient | outpatient | ambulatory | emergency +.
	Class *fhir.Coding `fhirpath:"class"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The time that the episode was in the specified class.
	Period *fhir.Period `fhirpath:"period"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetClass returns the value of the field Class.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ech *EncounterClassHistory) GetClass() *fhir.Coding {
	if ech == nil {
		return nil
	}
	return ech.Class
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ech *EncounterClassHistory) GetExtension() []*fhir.Extension {
	if ech == nil {
		return nil
	}
	return ech.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ech *EncounterClassHistory) GetID() string {
	if ech == nil {
		return ""
	}
	return ech.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ech *EncounterClassHistory) GetModifierExtension() []*fhir.Extension {
	if ech == nil {
		return nil
	}
	return ech.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ech *EncounterClassHistory) GetPeriod() *fhir.Period {
	if ech == nil {
		return nil
	}
	return ech.Period
}

// The list of diagnosis relevant to this encounter// The list of diagnosis relevant to this encounter.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Encounter.json
type EncounterDiagnosis struct {

	// Reason the encounter takes place, as specified using information from
	// another resource. For admissions, this is the admission diagnosis. The
	// indication will typically be a Condition (with other resources referenced in
	// the evidence.detail), or a Procedure.
	Condition *fhir.Reference `fhirpath:"condition"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Ranking of the diagnosis (for each role type).
	Rank *fhir.PositiveInt `fhirpath:"rank"`

	// Role that this diagnosis has within the encounter (e.g. admission, billing,
	// discharge …).
	Use *fhir.CodeableConcept `fhirpath:"use"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCondition returns the value of the field Condition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ed *EncounterDiagnosis) GetCondition() *fhir.Reference {
	if ed == nil {
		return nil
	}
	return ed.Condition
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ed *EncounterDiagnosis) GetExtension() []*fhir.Extension {
	if ed == nil {
		return nil
	}
	return ed.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ed *EncounterDiagnosis) GetID() string {
	if ed == nil {
		return ""
	}
	return ed.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ed *EncounterDiagnosis) GetModifierExtension() []*fhir.Extension {
	if ed == nil {
		return nil
	}
	return ed.ModifierExtension
}

// GetRank returns the value of the field Rank.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ed *EncounterDiagnosis) GetRank() *fhir.PositiveInt {
	if ed == nil {
		return nil
	}
	return ed.Rank
}

// GetUse returns the value of the field Use.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ed *EncounterDiagnosis) GetUse() *fhir.CodeableConcept {
	if ed == nil {
		return nil
	}
	return ed.Use
}

// Details about the admission to a healthcare service// Details about the admission to a healthcare service.// An Encounter may cover more than just the inpatient stay. Contexts such as
// outpatients, community clinics, and aged care facilities are also included.
// The duration recorded in the period of this encounter covers the entire
// scope of this hospitalization record.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Encounter.json
type EncounterHospitalization struct {

	// From where patient was admitted (physician referral, transfer).
	AdmitSource *fhir.CodeableConcept `fhirpath:"admitSource"`

	// Location/organization to which the patient is discharged.
	Destination *fhir.Reference `fhirpath:"destination"`

	// Diet preferences reported by the patient.
	DietPreference []*fhir.CodeableConcept `fhirpath:"dietPreference"`

	// Category or kind of location after discharge.
	DischargeDisposition *fhir.CodeableConcept `fhirpath:"dischargeDisposition"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The location/organization from which the patient came before admission.
	Origin *fhir.Reference `fhirpath:"origin"`

	// Pre-admission identifier.
	PreAdmissionIdentifier *fhir.Identifier `fhirpath:"preAdmissionIdentifier"`

	// Whether this hospitalization is a readmission and why if known.
	ReAdmission *fhir.CodeableConcept `fhirpath:"reAdmission"`

	// Any special requests that have been made for this hospitalization encounter,
	// such as the provision of specific equipment or other things.
	SpecialArrangement []*fhir.CodeableConcept `fhirpath:"specialArrangement"`

	// Special courtesies (VIP, board member).
	SpecialCourtesy []*fhir.CodeableConcept `fhirpath:"specialCourtesy"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAdmitSource returns the value of the field AdmitSource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetAdmitSource() *fhir.CodeableConcept {
	if eh == nil {
		return nil
	}
	return eh.AdmitSource
}

// GetDestination returns the value of the field Destination.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetDestination() *fhir.Reference {
	if eh == nil {
		return nil
	}
	return eh.Destination
}

// GetDietPreference returns the value of the field DietPreference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetDietPreference() []*fhir.CodeableConcept {
	if eh == nil {
		return nil
	}
	return eh.DietPreference
}

// GetDischargeDisposition returns the value of the field DischargeDisposition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetDischargeDisposition() *fhir.CodeableConcept {
	if eh == nil {
		return nil
	}
	return eh.DischargeDisposition
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetExtension() []*fhir.Extension {
	if eh == nil {
		return nil
	}
	return eh.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetID() string {
	if eh == nil {
		return ""
	}
	return eh.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetModifierExtension() []*fhir.Extension {
	if eh == nil {
		return nil
	}
	return eh.ModifierExtension
}

// GetOrigin returns the value of the field Origin.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetOrigin() *fhir.Reference {
	if eh == nil {
		return nil
	}
	return eh.Origin
}

// GetPreAdmissionIdentifier returns the value of the field PreAdmissionIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetPreAdmissionIdentifier() *fhir.Identifier {
	if eh == nil {
		return nil
	}
	return eh.PreAdmissionIdentifier
}

// GetReAdmission returns the value of the field ReAdmission.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetReAdmission() *fhir.CodeableConcept {
	if eh == nil {
		return nil
	}
	return eh.ReAdmission
}

// GetSpecialArrangement returns the value of the field SpecialArrangement.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetSpecialArrangement() []*fhir.CodeableConcept {
	if eh == nil {
		return nil
	}
	return eh.SpecialArrangement
}

// GetSpecialCourtesy returns the value of the field SpecialCourtesy.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eh *EncounterHospitalization) GetSpecialCourtesy() []*fhir.CodeableConcept {
	if eh == nil {
		return nil
	}
	return eh.SpecialCourtesy
}

// List of locations where the patient has been// List of locations where the patient has been during this encounter.// Virtual encounters can be recorded in the Encounter by specifying a location
// reference to a location of type "kind" such as "client's home" and an
// encounter.class = "virtual".
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Encounter.json
type EncounterLocation struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The location where the encounter takes place.
	Location *fhir.Reference `fhirpath:"location"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Time period during which the patient was present at the location.
	Period *fhir.Period `fhirpath:"period"`

	// This will be used to specify the required levels (bed/ward/room/etc.)
	// desired to be recorded to simplify either messaging or query.
	PhysicalType *fhir.CodeableConcept `fhirpath:"physicalType"`

	// The status of the participants' presence at the specified location during
	// the period specified. If the participant is no longer at the location, then
	// the period will have an end date/time.
	Status *fhir.Code `fhirpath:"status"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (el *EncounterLocation) GetExtension() []*fhir.Extension {
	if el == nil {
		return nil
	}
	return el.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (el *EncounterLocation) GetID() string {
	if el == nil {
		return ""
	}
	return el.ID
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (el *EncounterLocation) GetLocation() *fhir.Reference {
	if el == nil {
		return nil
	}
	return el.Location
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (el *EncounterLocation) GetModifierExtension() []*fhir.Extension {
	if el == nil {
		return nil
	}
	return el.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (el *EncounterLocation) GetPeriod() *fhir.Period {
	if el == nil {
		return nil
	}
	return el.Period
}

// GetPhysicalType returns the value of the field PhysicalType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (el *EncounterLocation) GetPhysicalType() *fhir.CodeableConcept {
	if el == nil {
		return nil
	}
	return el.PhysicalType
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (el *EncounterLocation) GetStatus() *fhir.Code {
	if el == nil {
		return nil
	}
	return el.Status
}

// List of participants involved in the encounter// The list of people responsible for providing the service.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Encounter.json
type EncounterParticipant struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Persons involved in the encounter other than the patient.
	Individual *fhir.Reference `fhirpath:"individual"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The period of time that the specified participant participated in the
	// encounter. These can overlap or be sub-sets of the overall encounter's
	// period.
	Period *fhir.Period `fhirpath:"period"`

	// Role of participant in encounter.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ep *EncounterParticipant) GetExtension() []*fhir.Extension {
	if ep == nil {
		return nil
	}
	return ep.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ep *EncounterParticipant) GetID() string {
	if ep == nil {
		return ""
	}
	return ep.ID
}

// GetIndividual returns the value of the field Individual.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ep *EncounterParticipant) GetIndividual() *fhir.Reference {
	if ep == nil {
		return nil
	}
	return ep.Individual
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ep *EncounterParticipant) GetModifierExtension() []*fhir.Extension {
	if ep == nil {
		return nil
	}
	return ep.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ep *EncounterParticipant) GetPeriod() *fhir.Period {
	if ep == nil {
		return nil
	}
	return ep.Period
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ep *EncounterParticipant) GetType() []*fhir.CodeableConcept {
	if ep == nil {
		return nil
	}
	return ep.Type
}

// List of past encounter statuses// The status history permits the encounter resource to contain the status
// history without needing to read through the historical versions of the
// resource, or even have the server store them.// The current status is always found in the current version of the resource,
// not the status history.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Encounter.json
type EncounterStatusHistory struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The time that the episode was in the specified status.
	Period *fhir.Period `fhirpath:"period"`

	// planned | arrived | triaged | in-progress | onleave | finished | cancelled
	// +.
	Status *fhir.Code `fhirpath:"status"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esh *EncounterStatusHistory) GetExtension() []*fhir.Extension {
	if esh == nil {
		return nil
	}
	return esh.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esh *EncounterStatusHistory) GetID() string {
	if esh == nil {
		return ""
	}
	return esh.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esh *EncounterStatusHistory) GetModifierExtension() []*fhir.Extension {
	if esh == nil {
		return nil
	}
	return esh.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esh *EncounterStatusHistory) GetPeriod() *fhir.Period {
	if esh == nil {
		return nil
	}
	return esh.Period
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (esh *EncounterStatusHistory) GetStatus() *fhir.Code {
	if esh == nil {
		return nil
	}
	return esh.Status
}
