// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package bodystructure

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Record details about an anatomical structure. This resource may be used when
// a coded concept does not provide the necessary detail needed for the use
// case.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/BodyStructure
//   - Source File: StructureDefinition-BodyStructure.json
type BodyStructure struct {

	// Whether this body site is in active use.
	Active *fhir.Boolean `fhirpath:"active"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A summary, characterization or explanation of the body structure.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifier for this instance of the anatomical structure.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// Image or images used to identify a location.
	Image []*fhir.Attachment `fhirpath:"image"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The anatomical location or region of the specimen, lesion, or body
	// structure.
	Location *fhir.CodeableConcept `fhirpath:"location"`

	// Qualifier to refine the anatomical location. These include qualifiers for
	// laterality, relative location, directionality, number, and plane.
	LocationQualifier []*fhir.CodeableConcept `fhirpath:"locationQualifier"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The kind of structure being represented by the body structure at
	// `BodyStructure.location`. This can define both normal and abnormal
	// morphologies.
	Morphology *fhir.CodeableConcept `fhirpath:"morphology"`

	// The person to which the body site belongs.
	Patient *fhir.Reference `fhirpath:"patient"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetActive returns the value of the field Active.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetActive() *fhir.Boolean {
	if bs == nil {
		return nil
	}
	return bs.Active
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetContained() []fhir.Resource {
	if bs == nil {
		return nil
	}
	return bs.Contained
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetDescription() *fhir.String {
	if bs == nil {
		return nil
	}
	return bs.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetExtension() []*fhir.Extension {
	if bs == nil {
		return nil
	}
	return bs.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetID() string {
	if bs == nil {
		return ""
	}
	return bs.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetIdentifier() []*fhir.Identifier {
	if bs == nil {
		return nil
	}
	return bs.Identifier
}

// GetImage returns the value of the field Image.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetImage() []*fhir.Attachment {
	if bs == nil {
		return nil
	}
	return bs.Image
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetImplicitRules() *fhir.URI {
	if bs == nil {
		return nil
	}
	return bs.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetLanguage() *fhir.Code {
	if bs == nil {
		return nil
	}
	return bs.Language
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetLocation() *fhir.CodeableConcept {
	if bs == nil {
		return nil
	}
	return bs.Location
}

// GetLocationQualifier returns the value of the field LocationQualifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetLocationQualifier() []*fhir.CodeableConcept {
	if bs == nil {
		return nil
	}
	return bs.LocationQualifier
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetMeta() *fhir.Meta {
	if bs == nil {
		return nil
	}
	return bs.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetModifierExtension() []*fhir.Extension {
	if bs == nil {
		return nil
	}
	return bs.ModifierExtension
}

// GetMorphology returns the value of the field Morphology.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetMorphology() *fhir.CodeableConcept {
	if bs == nil {
		return nil
	}
	return bs.Morphology
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetPatient() *fhir.Reference {
	if bs == nil {
		return nil
	}
	return bs.Patient
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bs *BodyStructure) GetText() *fhir.Narrative {
	if bs == nil {
		return nil
	}
	return bs.Text
}

func (bs *BodyStructure) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (bs *BodyStructure) UnmarshalJSON(data []byte) error {
	var raw struct {
		Active      *fhir.Boolean     `json:"active"`
		Contained   []fhir.Resource   `json:"contained"`
		Description *fhir.String      `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string                  `json:"id"`
		Identifier        []*fhir.Identifier      `json:"identifier"`
		Image             []*fhir.Attachment      `json:"image"`
		ImplicitRules     *fhir.URI               `json:"implicitRules"`
		Language          *fhir.Code              `json:"language"`
		Location          *fhir.CodeableConcept   `json:"location"`
		LocationQualifier []*fhir.CodeableConcept `json:"locationQualifier"`
		Meta              *fhir.Meta              `json:"meta"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Morphology        *fhir.CodeableConcept   `json:"morphology"`
		Patient           *fhir.Reference         `json:"patient"`
		Text              *fhir.Narrative         `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	bs.Active = raw.Active
	bs.Contained = raw.Contained
	bs.Description = raw.Description
	bs.Extension = raw.Extension
	bs.ID = raw.ID
	bs.Identifier = raw.Identifier
	bs.Image = raw.Image
	bs.ImplicitRules = raw.ImplicitRules
	bs.Language = raw.Language
	bs.Location = raw.Location
	bs.LocationQualifier = raw.LocationQualifier
	bs.Meta = raw.Meta
	bs.ModifierExtension = raw.ModifierExtension
	bs.Morphology = raw.Morphology
	bs.Patient = raw.Patient
	bs.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*BodyStructure)(nil)
var _ json.Unmarshaler = (*BodyStructure)(nil)
