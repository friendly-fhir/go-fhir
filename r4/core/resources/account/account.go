// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package account

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A financial tool for tracking value accrued for a particular purpose. In the
// healthcare field, used to track charges for a patient, cost centers, etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Account
//   - Source File: StructureDefinition-Account.json
type Account struct {

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The party(s) that are responsible for covering the payment of this account,
	// and what order should they be applied to the account.
	Coverage []*AccountCoverage `fhirpath:"coverage"`

	// Provides additional information about what the account tracks and how it is
	// used.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The parties responsible for balancing the account if other payment options
	// fall short.
	Guarantor []*AccountGuarantor `fhirpath:"guarantor"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Unique identifier used to reference the account. Might or might not be
	// intended for human use (e.g. credit card number).
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Name used for the account when displaying it to humans in reports, etc.
	Name *fhir.String `fhirpath:"name"`

	// Indicates the service area, hospital, department, etc. with responsibility
	// for managing the Account.
	Owner *fhir.Reference `fhirpath:"owner"`

	// Reference to a parent Account.
	PartOf *fhir.Reference `fhirpath:"partOf"`

	// The date range of services associated with this account.
	ServicePeriod *fhir.Period `fhirpath:"servicePeriod"`

	// Indicates whether the account is presently used/usable or not.
	Status *fhir.Code `fhirpath:"status"`

	// Identifies the entity which incurs the expenses. While the immediate
	// recipients of services or goods might be entities related to the subject,
	// the expenses were ultimately incurred by the subject of the Account.
	Subject []*fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Categorizes the account for reporting and searching purposes.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetContained() []fhir.Resource {
	if a == nil {
		return nil
	}
	return a.Contained
}

// GetCoverage returns the value of the field Coverage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetCoverage() []*AccountCoverage {
	if a == nil {
		return nil
	}
	return a.Coverage
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetDescription() *fhir.String {
	if a == nil {
		return nil
	}
	return a.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetExtension() []*fhir.Extension {
	if a == nil {
		return nil
	}
	return a.Extension
}

// GetGuarantor returns the value of the field Guarantor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetGuarantor() []*AccountGuarantor {
	if a == nil {
		return nil
	}
	return a.Guarantor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetIdentifier() []*fhir.Identifier {
	if a == nil {
		return nil
	}
	return a.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetImplicitRules() *fhir.URI {
	if a == nil {
		return nil
	}
	return a.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetLanguage() *fhir.Code {
	if a == nil {
		return nil
	}
	return a.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetMeta() *fhir.Meta {
	if a == nil {
		return nil
	}
	return a.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetModifierExtension() []*fhir.Extension {
	if a == nil {
		return nil
	}
	return a.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetName() *fhir.String {
	if a == nil {
		return nil
	}
	return a.Name
}

// GetOwner returns the value of the field Owner.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetOwner() *fhir.Reference {
	if a == nil {
		return nil
	}
	return a.Owner
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetPartOf() *fhir.Reference {
	if a == nil {
		return nil
	}
	return a.PartOf
}

// GetServicePeriod returns the value of the field ServicePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetServicePeriod() *fhir.Period {
	if a == nil {
		return nil
	}
	return a.ServicePeriod
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetStatus() *fhir.Code {
	if a == nil {
		return nil
	}
	return a.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetSubject() []*fhir.Reference {
	if a == nil {
		return nil
	}
	return a.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetText() *fhir.Narrative {
	if a == nil {
		return nil
	}
	return a.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Account) GetType() *fhir.CodeableConcept {
	if a == nil {
		return nil
	}
	return a.Type
}

// The party(s) that are responsible for covering the payment of this account,
// and what order should they be applied to the account// The party(s) that are responsible for covering the payment of this account,
// and what order should they be applied to the account.// Typically. this may be some form of insurance, internal charges, or
// self-pay.
// Local or jurisdictional business rules may determine which coverage covers
// which types of billable items charged to the account, and in which order. Where
// the order is important, a local/jurisdictional extension may be defined to
// specify the order for the type of charge.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Account.json
type AccountCoverage struct {

	// The party(s) that contribute to payment (or part of) of the charges applied
	// to this account (including self-pay).
	// A coverage may only be responsible for specific types of charges, and the
	// sequence of the coverages in the account could be important when processing
	// billing.
	Coverage *fhir.Reference `fhirpath:"coverage"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The priority of the coverage in the context of this account.
	Priority *fhir.PositiveInt `fhirpath:"priority"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCoverage returns the value of the field Coverage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ac *AccountCoverage) GetCoverage() *fhir.Reference {
	if ac == nil {
		return nil
	}
	return ac.Coverage
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ac *AccountCoverage) GetExtension() []*fhir.Extension {
	if ac == nil {
		return nil
	}
	return ac.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ac *AccountCoverage) GetID() string {
	if ac == nil {
		return ""
	}
	return ac.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ac *AccountCoverage) GetModifierExtension() []*fhir.Extension {
	if ac == nil {
		return nil
	}
	return ac.ModifierExtension
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ac *AccountCoverage) GetPriority() *fhir.PositiveInt {
	if ac == nil {
		return nil
	}
	return ac.Priority
}

// The parties ultimately responsible for balancing the Account// The parties responsible for balancing the account if other payment options
// fall short.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Account.json
type AccountGuarantor struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A guarantor may be placed on credit hold or otherwise have their role
	// temporarily suspended.
	OnHold *fhir.Boolean `fhirpath:"onHold"`

	// The entity who is responsible.
	Party *fhir.Reference `fhirpath:"party"`

	// The timeframe during which the guarantor accepts responsibility for the
	// account.
	Period *fhir.Period `fhirpath:"period"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ag *AccountGuarantor) GetExtension() []*fhir.Extension {
	if ag == nil {
		return nil
	}
	return ag.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ag *AccountGuarantor) GetID() string {
	if ag == nil {
		return ""
	}
	return ag.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ag *AccountGuarantor) GetModifierExtension() []*fhir.Extension {
	if ag == nil {
		return nil
	}
	return ag.ModifierExtension
}

// GetOnHold returns the value of the field OnHold.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ag *AccountGuarantor) GetOnHold() *fhir.Boolean {
	if ag == nil {
		return nil
	}
	return ag.OnHold
}

// GetParty returns the value of the field Party.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ag *AccountGuarantor) GetParty() *fhir.Reference {
	if ag == nil {
		return nil
	}
	return ag.Party
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ag *AccountGuarantor) GetPeriod() *fhir.Period {
	if ag == nil {
		return nil
	}
	return ag.Period
}

func (a *Account) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (a *Account) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contained   []fhir.Resource     `json:"contained"`
		Coverage    []*AccountCoverage  `json:"coverage"`
		Description *fhir.String        `json:"description"`
		Extension   []*fhir.Extension   `json:"extension"`
		Guarantor   []*AccountGuarantor `json:"guarantor"`

		ID                string                `json:"id"`
		Identifier        []*fhir.Identifier    `json:"identifier"`
		ImplicitRules     *fhir.URI             `json:"implicitRules"`
		Language          *fhir.Code            `json:"language"`
		Meta              *fhir.Meta            `json:"meta"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Name              *fhir.String          `json:"name"`
		Owner             *fhir.Reference       `json:"owner"`
		PartOf            *fhir.Reference       `json:"partOf"`
		ServicePeriod     *fhir.Period          `json:"servicePeriod"`
		Status            *fhir.Code            `json:"status"`
		Subject           []*fhir.Reference     `json:"subject"`
		Text              *fhir.Narrative       `json:"text"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	a.Contained = raw.Contained
	a.Coverage = raw.Coverage
	a.Description = raw.Description
	a.Extension = raw.Extension
	a.Guarantor = raw.Guarantor
	a.ID = raw.ID
	a.Identifier = raw.Identifier
	a.ImplicitRules = raw.ImplicitRules
	a.Language = raw.Language
	a.Meta = raw.Meta
	a.ModifierExtension = raw.ModifierExtension
	a.Name = raw.Name
	a.Owner = raw.Owner
	a.PartOf = raw.PartOf
	a.ServicePeriod = raw.ServicePeriod
	a.Status = raw.Status
	a.Subject = raw.Subject
	a.Text = raw.Text
	a.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*Account)(nil)
var _ json.Unmarshaler = (*Account)(nil)

func (ac *AccountCoverage) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ac *AccountCoverage) UnmarshalJSON(data []byte) error {
	var raw struct {
		Coverage  *fhir.Reference   `json:"coverage"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Priority          *fhir.PositiveInt `json:"priority"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ac.Coverage = raw.Coverage
	ac.Extension = raw.Extension
	ac.ID = raw.ID
	ac.ModifierExtension = raw.ModifierExtension
	ac.Priority = raw.Priority
	return nil
}

var _ json.Marshaler = (*AccountCoverage)(nil)
var _ json.Unmarshaler = (*AccountCoverage)(nil)

func (ag *AccountGuarantor) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ag *AccountGuarantor) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		OnHold            *fhir.Boolean     `json:"onHold"`
		Party             *fhir.Reference   `json:"party"`
		Period            *fhir.Period      `json:"period"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ag.Extension = raw.Extension
	ag.ID = raw.ID
	ag.ModifierExtension = raw.ModifierExtension
	ag.OnHold = raw.OnHold
	ag.Party = raw.Party
	ag.Period = raw.Period
	return nil
}

var _ json.Marshaler = (*AccountGuarantor)(nil)
var _ json.Unmarshaler = (*AccountGuarantor)(nil)
