// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package task

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A task to be performed.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Task
//   - Source File: StructureDefinition-Task.json
type Task struct {

	// The date and time this task was created.
	AuthoredOn *fhir.DateTime `fhirpath:"authoredOn"`

	// BasedOn refers to a higher-level authorization that triggered the creation
	// of the task. It references a "request" resource such as a ServiceRequest,
	// MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the
	// "request" resource the task is seeking to fulfill. This latter resource is
	// referenced by FocusOn. For example, based on a ServiceRequest (= BasedOn), a
	// task is created to fulfill a procedureRequest ( = FocusOn ) to collect a
	// specimen from a patient.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// Contains business-specific nuances of the business state.
	BusinessStatus *fhir.CodeableConcept `fhirpath:"businessStatus"`

	// A name or code (or both) briefly describing what the task involves.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A free-text description of what is to be performed.
	Description *fhir.String `fhirpath:"description"`

	// The healthcare event (e.g. a patient and healthcare provider interaction)
	// during which this task was created.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// Identifies the time action was first taken against the task (start) and/or
	// the time final action was taken against the task prior to marking it as
	// completed (end).
	ExecutionPeriod *fhir.Period `fhirpath:"executionPeriod"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The request being actioned or the resource being manipulated by this task.
	Focus *fhir.Reference `fhirpath:"focus"`

	// The entity who benefits from the performance of the service specified in the
	// task (e.g., the patient).
	For *fhir.Reference `fhirpath:"for"`

	// An identifier that links together multiple tasks and other requests that
	// were created in the same context.
	GroupIdentifier *fhir.Identifier `fhirpath:"groupIdentifier"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// The business identifier for this task.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Additional information that may be needed in the execution of the task.
	Input []*TaskInput `fhirpath:"input"`

	// The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this Task.
	InstantiatesCanonical *fhir.Canonical `fhirpath:"instantiatesCanonical"`

	// The URL pointing to an *externally* maintained protocol, guideline, orderset
	// or other definition that is adhered to in whole or in part by this Task.
	InstantiatesURI *fhir.URI `fhirpath:"instantiatesUri"`

	// Insurance plans, coverage extensions, pre-authorizations and/or
	// pre-determinations that may be relevant to the Task.
	Insurance []*fhir.Reference `fhirpath:"insurance"`

	// Indicates the "level" of actionability associated with the Task, i.e.
	// i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
	Intent *fhir.Code `fhirpath:"intent"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The date and time of last modification to this task.
	LastModified *fhir.DateTime `fhirpath:"lastModified"`

	// Principal physical location where the this task is performed.
	Location *fhir.Reference `fhirpath:"location"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Free-text information captured about the task as it progresses.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Outputs produced by the Task.
	Output []*TaskOutput `fhirpath:"output"`

	// Individual organization or Device currently responsible for task execution.
	Owner *fhir.Reference `fhirpath:"owner"`

	// Task that this particular task is part of.
	PartOf []*fhir.Reference `fhirpath:"partOf"`

	// The kind of participant that should perform the task.
	PerformerType []*fhir.CodeableConcept `fhirpath:"performerType"`

	// Indicates how quickly the Task should be addressed with respect to other
	// requests.
	Priority *fhir.Code `fhirpath:"priority"`

	// A description or code indicating why this task needs to be performed.
	ReasonCode *fhir.CodeableConcept `fhirpath:"reasonCode"`

	// A resource reference indicating why this task needs to be performed.
	ReasonReference *fhir.Reference `fhirpath:"reasonReference"`

	// Links to Provenance records for past versions of this Task that identify key
	// state transitions or updates that are likely to be relevant to a user
	// looking at the current version of the task.
	RelevantHistory []*fhir.Reference `fhirpath:"relevantHistory"`

	// The creator of the task.
	Requester *fhir.Reference `fhirpath:"requester"`

	// If the Task.focus is a request resource and the task is seeking fulfillment
	// (i.e. is asking for the request to be actioned), this element identifies any
	// limitations on what parts of the referenced request should be actioned.
	Restriction *TaskRestriction `fhirpath:"restriction"`

	// The current status of the task.
	Status *fhir.Code `fhirpath:"status"`

	// An explanation as to why this task is held, failed, was refused, etc.
	StatusReason *fhir.CodeableConcept `fhirpath:"statusReason"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAuthoredOn returns the value of the field AuthoredOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetAuthoredOn() *fhir.DateTime {
	if t == nil {
		return nil
	}
	return t.AuthoredOn
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetBasedOn() []*fhir.Reference {
	if t == nil {
		return nil
	}
	return t.BasedOn
}

// GetBusinessStatus returns the value of the field BusinessStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetBusinessStatus() *fhir.CodeableConcept {
	if t == nil {
		return nil
	}
	return t.BusinessStatus
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetCode() *fhir.CodeableConcept {
	if t == nil {
		return nil
	}
	return t.Code
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetContained() []fhir.Resource {
	if t == nil {
		return nil
	}
	return t.Contained
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetDescription() *fhir.String {
	if t == nil {
		return nil
	}
	return t.Description
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetEncounter() *fhir.Reference {
	if t == nil {
		return nil
	}
	return t.Encounter
}

// GetExecutionPeriod returns the value of the field ExecutionPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetExecutionPeriod() *fhir.Period {
	if t == nil {
		return nil
	}
	return t.ExecutionPeriod
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetExtension() []*fhir.Extension {
	if t == nil {
		return nil
	}
	return t.Extension
}

// GetFocus returns the value of the field Focus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetFocus() *fhir.Reference {
	if t == nil {
		return nil
	}
	return t.Focus
}

// GetFor returns the value of the field For.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetFor() *fhir.Reference {
	if t == nil {
		return nil
	}
	return t.For
}

// GetGroupIdentifier returns the value of the field GroupIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetGroupIdentifier() *fhir.Identifier {
	if t == nil {
		return nil
	}
	return t.GroupIdentifier
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetIdentifier() []*fhir.Identifier {
	if t == nil {
		return nil
	}
	return t.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetImplicitRules() *fhir.URI {
	if t == nil {
		return nil
	}
	return t.ImplicitRules
}

// GetInput returns the value of the field Input.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetInput() []*TaskInput {
	if t == nil {
		return nil
	}
	return t.Input
}

// GetInstantiatesCanonical returns the value of the field InstantiatesCanonical.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetInstantiatesCanonical() *fhir.Canonical {
	if t == nil {
		return nil
	}
	return t.InstantiatesCanonical
}

// GetInstantiatesURI returns the value of the field InstantiatesURI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetInstantiatesURI() *fhir.URI {
	if t == nil {
		return nil
	}
	return t.InstantiatesURI
}

// GetInsurance returns the value of the field Insurance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetInsurance() []*fhir.Reference {
	if t == nil {
		return nil
	}
	return t.Insurance
}

// GetIntent returns the value of the field Intent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetIntent() *fhir.Code {
	if t == nil {
		return nil
	}
	return t.Intent
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetLanguage() *fhir.Code {
	if t == nil {
		return nil
	}
	return t.Language
}

// GetLastModified returns the value of the field LastModified.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetLastModified() *fhir.DateTime {
	if t == nil {
		return nil
	}
	return t.LastModified
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetLocation() *fhir.Reference {
	if t == nil {
		return nil
	}
	return t.Location
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetMeta() *fhir.Meta {
	if t == nil {
		return nil
	}
	return t.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetModifierExtension() []*fhir.Extension {
	if t == nil {
		return nil
	}
	return t.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetNote() []*fhir.Annotation {
	if t == nil {
		return nil
	}
	return t.Note
}

// GetOutput returns the value of the field Output.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetOutput() []*TaskOutput {
	if t == nil {
		return nil
	}
	return t.Output
}

// GetOwner returns the value of the field Owner.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetOwner() *fhir.Reference {
	if t == nil {
		return nil
	}
	return t.Owner
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetPartOf() []*fhir.Reference {
	if t == nil {
		return nil
	}
	return t.PartOf
}

// GetPerformerType returns the value of the field PerformerType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetPerformerType() []*fhir.CodeableConcept {
	if t == nil {
		return nil
	}
	return t.PerformerType
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetPriority() *fhir.Code {
	if t == nil {
		return nil
	}
	return t.Priority
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetReasonCode() *fhir.CodeableConcept {
	if t == nil {
		return nil
	}
	return t.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetReasonReference() *fhir.Reference {
	if t == nil {
		return nil
	}
	return t.ReasonReference
}

// GetRelevantHistory returns the value of the field RelevantHistory.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetRelevantHistory() []*fhir.Reference {
	if t == nil {
		return nil
	}
	return t.RelevantHistory
}

// GetRequester returns the value of the field Requester.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetRequester() *fhir.Reference {
	if t == nil {
		return nil
	}
	return t.Requester
}

// GetRestriction returns the value of the field Restriction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetRestriction() *TaskRestriction {
	if t == nil {
		return nil
	}
	return t.Restriction
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetStatus() *fhir.Code {
	if t == nil {
		return nil
	}
	return t.Status
}

// GetStatusReason returns the value of the field StatusReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetStatusReason() *fhir.CodeableConcept {
	if t == nil {
		return nil
	}
	return t.StatusReason
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (t *Task) GetText() *fhir.Narrative {
	if t == nil {
		return nil
	}
	return t.Text
}

// Information used to perform task// Additional information that may be needed in the execution of the task.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Task.json
type TaskInput struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A code or description indicating how the input is intended to be used as
	// part of the task execution.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// The value of the input parameter as a basic type.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ti *TaskInput) GetExtension() []*fhir.Extension {
	if ti == nil {
		return nil
	}
	return ti.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ti *TaskInput) GetID() string {
	if ti == nil {
		return ""
	}
	return ti.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ti *TaskInput) GetModifierExtension() []*fhir.Extension {
	if ti == nil {
		return nil
	}
	return ti.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ti *TaskInput) GetType() *fhir.CodeableConcept {
	if ti == nil {
		return nil
	}
	return ti.Type
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ti *TaskInput) GetValue() fhir.Element {
	if ti == nil {
		return nil
	}
	return ti.Value
}

// GetValueBase64Binary returns the value of the field Value.
func (ti *TaskInput) GetValueBase64Binary() *fhir.Base64Binary {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Base64Binary)
	if !ok {
		return nil
	}
	return val
}

// GetValueBoolean returns the value of the field Value.
func (ti *TaskInput) GetValueBoolean() *fhir.Boolean {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetValueCanonical returns the value of the field Value.
func (ti *TaskInput) GetValueCanonical() *fhir.Canonical {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Canonical)
	if !ok {
		return nil
	}
	return val
}

// GetValueCode returns the value of the field Value.
func (ti *TaskInput) GetValueCode() *fhir.Code {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Code)
	if !ok {
		return nil
	}
	return val
}

// GetValueDate returns the value of the field Value.
func (ti *TaskInput) GetValueDate() *fhir.Date {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetValueDateTime returns the value of the field Value.
func (ti *TaskInput) GetValueDateTime() *fhir.DateTime {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetValueDecimal returns the value of the field Value.
func (ti *TaskInput) GetValueDecimal() *fhir.Decimal {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Decimal)
	if !ok {
		return nil
	}
	return val
}

// GetValueID returns the value of the field Value.
func (ti *TaskInput) GetValueID() *fhir.ID {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.ID)
	if !ok {
		return nil
	}
	return val
}

// GetValueInstant returns the value of the field Value.
func (ti *TaskInput) GetValueInstant() *fhir.Instant {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Instant)
	if !ok {
		return nil
	}
	return val
}

// GetValueInteger returns the value of the field Value.
func (ti *TaskInput) GetValueInteger() *fhir.Integer {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
}

// GetValueMarkdown returns the value of the field Value.
func (ti *TaskInput) GetValueMarkdown() *fhir.Markdown {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Markdown)
	if !ok {
		return nil
	}
	return val
}

// GetValueOID returns the value of the field Value.
func (ti *TaskInput) GetValueOID() *fhir.OID {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.OID)
	if !ok {
		return nil
	}
	return val
}

// GetValuePositiveInt returns the value of the field Value.
func (ti *TaskInput) GetValuePositiveInt() *fhir.PositiveInt {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.PositiveInt)
	if !ok {
		return nil
	}
	return val
}

// GetValueString returns the value of the field Value.
func (ti *TaskInput) GetValueString() *fhir.String {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueTime returns the value of the field Value.
func (ti *TaskInput) GetValueTime() *fhir.Time {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Time)
	if !ok {
		return nil
	}
	return val
}

// GetValueUnsignedInt returns the value of the field Value.
func (ti *TaskInput) GetValueUnsignedInt() *fhir.UnsignedInt {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.UnsignedInt)
	if !ok {
		return nil
	}
	return val
}

// GetValueURI returns the value of the field Value.
func (ti *TaskInput) GetValueURI() *fhir.URI {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.URI)
	if !ok {
		return nil
	}
	return val
}

// GetValueURL returns the value of the field Value.
func (ti *TaskInput) GetValueURL() *fhir.URL {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.URL)
	if !ok {
		return nil
	}
	return val
}

// GetValueUUID returns the value of the field Value.
func (ti *TaskInput) GetValueUUID() *fhir.UUID {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.UUID)
	if !ok {
		return nil
	}
	return val
}

// GetValueAddress returns the value of the field Value.
func (ti *TaskInput) GetValueAddress() *fhir.Address {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Address)
	if !ok {
		return nil
	}
	return val
}

// GetValueAge returns the value of the field Value.
func (ti *TaskInput) GetValueAge() *fhir.Age {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Age)
	if !ok {
		return nil
	}
	return val
}

// GetValueAnnotation returns the value of the field Value.
func (ti *TaskInput) GetValueAnnotation() *fhir.Annotation {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Annotation)
	if !ok {
		return nil
	}
	return val
}

// GetValueAttachment returns the value of the field Value.
func (ti *TaskInput) GetValueAttachment() *fhir.Attachment {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Attachment)
	if !ok {
		return nil
	}
	return val
}

// GetValueCodeableConcept returns the value of the field Value.
func (ti *TaskInput) GetValueCodeableConcept() *fhir.CodeableConcept {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetValueCoding returns the value of the field Value.
func (ti *TaskInput) GetValueCoding() *fhir.Coding {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Coding)
	if !ok {
		return nil
	}
	return val
}

// GetValueContactPoint returns the value of the field Value.
func (ti *TaskInput) GetValueContactPoint() *fhir.ContactPoint {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.ContactPoint)
	if !ok {
		return nil
	}
	return val
}

// GetValueCount returns the value of the field Value.
func (ti *TaskInput) GetValueCount() *fhir.Count {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Count)
	if !ok {
		return nil
	}
	return val
}

// GetValueDistance returns the value of the field Value.
func (ti *TaskInput) GetValueDistance() *fhir.Distance {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Distance)
	if !ok {
		return nil
	}
	return val
}

// GetValueDuration returns the value of the field Value.
func (ti *TaskInput) GetValueDuration() *fhir.Duration {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Duration)
	if !ok {
		return nil
	}
	return val
}

// GetValueHumanName returns the value of the field Value.
func (ti *TaskInput) GetValueHumanName() *fhir.HumanName {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.HumanName)
	if !ok {
		return nil
	}
	return val
}

// GetValueIdentifier returns the value of the field Value.
func (ti *TaskInput) GetValueIdentifier() *fhir.Identifier {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Identifier)
	if !ok {
		return nil
	}
	return val
}

// GetValueMoney returns the value of the field Value.
func (ti *TaskInput) GetValueMoney() *fhir.Money {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Money)
	if !ok {
		return nil
	}
	return val
}

// GetValuePeriod returns the value of the field Value.
func (ti *TaskInput) GetValuePeriod() *fhir.Period {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetValueQuantity returns the value of the field Value.
func (ti *TaskInput) GetValueQuantity() *fhir.Quantity {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetValueRange returns the value of the field Value.
func (ti *TaskInput) GetValueRange() *fhir.Range {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
}

// GetValueRatio returns the value of the field Value.
func (ti *TaskInput) GetValueRatio() *fhir.Ratio {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Ratio)
	if !ok {
		return nil
	}
	return val
}

// GetValueReference returns the value of the field Value.
func (ti *TaskInput) GetValueReference() *fhir.Reference {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}

// GetValueSampledData returns the value of the field Value.
func (ti *TaskInput) GetValueSampledData() *fhir.SampledData {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.SampledData)
	if !ok {
		return nil
	}
	return val
}

// GetValueSignature returns the value of the field Value.
func (ti *TaskInput) GetValueSignature() *fhir.Signature {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Signature)
	if !ok {
		return nil
	}
	return val
}

// GetValueTiming returns the value of the field Value.
func (ti *TaskInput) GetValueTiming() *fhir.Timing {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Timing)
	if !ok {
		return nil
	}
	return val
}

// GetValueContactDetail returns the value of the field Value.
func (ti *TaskInput) GetValueContactDetail() *fhir.ContactDetail {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.ContactDetail)
	if !ok {
		return nil
	}
	return val
}

// GetValueContributor returns the value of the field Value.
func (ti *TaskInput) GetValueContributor() *fhir.Contributor {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Contributor)
	if !ok {
		return nil
	}
	return val
}

// GetValueDataRequirement returns the value of the field Value.
func (ti *TaskInput) GetValueDataRequirement() *fhir.DataRequirement {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.DataRequirement)
	if !ok {
		return nil
	}
	return val
}

// GetValueExpression returns the value of the field Value.
func (ti *TaskInput) GetValueExpression() *fhir.Expression {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Expression)
	if !ok {
		return nil
	}
	return val
}

// GetValueParameterDefinition returns the value of the field Value.
func (ti *TaskInput) GetValueParameterDefinition() *fhir.ParameterDefinition {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.ParameterDefinition)
	if !ok {
		return nil
	}
	return val
}

// GetValueRelatedArtifact returns the value of the field Value.
func (ti *TaskInput) GetValueRelatedArtifact() *fhir.RelatedArtifact {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.RelatedArtifact)
	if !ok {
		return nil
	}
	return val
}

// GetValueTriggerDefinition returns the value of the field Value.
func (ti *TaskInput) GetValueTriggerDefinition() *fhir.TriggerDefinition {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.TriggerDefinition)
	if !ok {
		return nil
	}
	return val
}

// GetValueUsageContext returns the value of the field Value.
func (ti *TaskInput) GetValueUsageContext() *fhir.UsageContext {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.UsageContext)
	if !ok {
		return nil
	}
	return val
}

// GetValueDosage returns the value of the field Value.
func (ti *TaskInput) GetValueDosage() *fhir.Dosage {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Dosage)
	if !ok {
		return nil
	}
	return val
}

// GetValueMeta returns the value of the field Value.
func (ti *TaskInput) GetValueMeta() *fhir.Meta {
	if ti == nil {
		return nil
	}
	val, ok := ti.Value.(*fhir.Meta)
	if !ok {
		return nil
	}
	return val
}

// Information produced as part of task// Outputs produced by the Task.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Task.json
type TaskOutput struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of the Output parameter.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// The value of the Output parameter as a basic type.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (to *TaskOutput) GetExtension() []*fhir.Extension {
	if to == nil {
		return nil
	}
	return to.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (to *TaskOutput) GetID() string {
	if to == nil {
		return ""
	}
	return to.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (to *TaskOutput) GetModifierExtension() []*fhir.Extension {
	if to == nil {
		return nil
	}
	return to.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (to *TaskOutput) GetType() *fhir.CodeableConcept {
	if to == nil {
		return nil
	}
	return to.Type
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (to *TaskOutput) GetValue() fhir.Element {
	if to == nil {
		return nil
	}
	return to.Value
}

// GetValueBase64Binary returns the value of the field Value.
func (to *TaskOutput) GetValueBase64Binary() *fhir.Base64Binary {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Base64Binary)
	if !ok {
		return nil
	}
	return val
}

// GetValueBoolean returns the value of the field Value.
func (to *TaskOutput) GetValueBoolean() *fhir.Boolean {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetValueCanonical returns the value of the field Value.
func (to *TaskOutput) GetValueCanonical() *fhir.Canonical {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Canonical)
	if !ok {
		return nil
	}
	return val
}

// GetValueCode returns the value of the field Value.
func (to *TaskOutput) GetValueCode() *fhir.Code {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Code)
	if !ok {
		return nil
	}
	return val
}

// GetValueDate returns the value of the field Value.
func (to *TaskOutput) GetValueDate() *fhir.Date {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetValueDateTime returns the value of the field Value.
func (to *TaskOutput) GetValueDateTime() *fhir.DateTime {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetValueDecimal returns the value of the field Value.
func (to *TaskOutput) GetValueDecimal() *fhir.Decimal {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Decimal)
	if !ok {
		return nil
	}
	return val
}

// GetValueID returns the value of the field Value.
func (to *TaskOutput) GetValueID() *fhir.ID {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.ID)
	if !ok {
		return nil
	}
	return val
}

// GetValueInstant returns the value of the field Value.
func (to *TaskOutput) GetValueInstant() *fhir.Instant {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Instant)
	if !ok {
		return nil
	}
	return val
}

// GetValueInteger returns the value of the field Value.
func (to *TaskOutput) GetValueInteger() *fhir.Integer {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
}

// GetValueMarkdown returns the value of the field Value.
func (to *TaskOutput) GetValueMarkdown() *fhir.Markdown {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Markdown)
	if !ok {
		return nil
	}
	return val
}

// GetValueOID returns the value of the field Value.
func (to *TaskOutput) GetValueOID() *fhir.OID {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.OID)
	if !ok {
		return nil
	}
	return val
}

// GetValuePositiveInt returns the value of the field Value.
func (to *TaskOutput) GetValuePositiveInt() *fhir.PositiveInt {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.PositiveInt)
	if !ok {
		return nil
	}
	return val
}

// GetValueString returns the value of the field Value.
func (to *TaskOutput) GetValueString() *fhir.String {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueTime returns the value of the field Value.
func (to *TaskOutput) GetValueTime() *fhir.Time {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Time)
	if !ok {
		return nil
	}
	return val
}

// GetValueUnsignedInt returns the value of the field Value.
func (to *TaskOutput) GetValueUnsignedInt() *fhir.UnsignedInt {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.UnsignedInt)
	if !ok {
		return nil
	}
	return val
}

// GetValueURI returns the value of the field Value.
func (to *TaskOutput) GetValueURI() *fhir.URI {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.URI)
	if !ok {
		return nil
	}
	return val
}

// GetValueURL returns the value of the field Value.
func (to *TaskOutput) GetValueURL() *fhir.URL {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.URL)
	if !ok {
		return nil
	}
	return val
}

// GetValueUUID returns the value of the field Value.
func (to *TaskOutput) GetValueUUID() *fhir.UUID {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.UUID)
	if !ok {
		return nil
	}
	return val
}

// GetValueAddress returns the value of the field Value.
func (to *TaskOutput) GetValueAddress() *fhir.Address {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Address)
	if !ok {
		return nil
	}
	return val
}

// GetValueAge returns the value of the field Value.
func (to *TaskOutput) GetValueAge() *fhir.Age {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Age)
	if !ok {
		return nil
	}
	return val
}

// GetValueAnnotation returns the value of the field Value.
func (to *TaskOutput) GetValueAnnotation() *fhir.Annotation {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Annotation)
	if !ok {
		return nil
	}
	return val
}

// GetValueAttachment returns the value of the field Value.
func (to *TaskOutput) GetValueAttachment() *fhir.Attachment {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Attachment)
	if !ok {
		return nil
	}
	return val
}

// GetValueCodeableConcept returns the value of the field Value.
func (to *TaskOutput) GetValueCodeableConcept() *fhir.CodeableConcept {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetValueCoding returns the value of the field Value.
func (to *TaskOutput) GetValueCoding() *fhir.Coding {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Coding)
	if !ok {
		return nil
	}
	return val
}

// GetValueContactPoint returns the value of the field Value.
func (to *TaskOutput) GetValueContactPoint() *fhir.ContactPoint {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.ContactPoint)
	if !ok {
		return nil
	}
	return val
}

// GetValueCount returns the value of the field Value.
func (to *TaskOutput) GetValueCount() *fhir.Count {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Count)
	if !ok {
		return nil
	}
	return val
}

// GetValueDistance returns the value of the field Value.
func (to *TaskOutput) GetValueDistance() *fhir.Distance {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Distance)
	if !ok {
		return nil
	}
	return val
}

// GetValueDuration returns the value of the field Value.
func (to *TaskOutput) GetValueDuration() *fhir.Duration {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Duration)
	if !ok {
		return nil
	}
	return val
}

// GetValueHumanName returns the value of the field Value.
func (to *TaskOutput) GetValueHumanName() *fhir.HumanName {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.HumanName)
	if !ok {
		return nil
	}
	return val
}

// GetValueIdentifier returns the value of the field Value.
func (to *TaskOutput) GetValueIdentifier() *fhir.Identifier {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Identifier)
	if !ok {
		return nil
	}
	return val
}

// GetValueMoney returns the value of the field Value.
func (to *TaskOutput) GetValueMoney() *fhir.Money {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Money)
	if !ok {
		return nil
	}
	return val
}

// GetValuePeriod returns the value of the field Value.
func (to *TaskOutput) GetValuePeriod() *fhir.Period {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetValueQuantity returns the value of the field Value.
func (to *TaskOutput) GetValueQuantity() *fhir.Quantity {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetValueRange returns the value of the field Value.
func (to *TaskOutput) GetValueRange() *fhir.Range {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
}

// GetValueRatio returns the value of the field Value.
func (to *TaskOutput) GetValueRatio() *fhir.Ratio {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Ratio)
	if !ok {
		return nil
	}
	return val
}

// GetValueReference returns the value of the field Value.
func (to *TaskOutput) GetValueReference() *fhir.Reference {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}

// GetValueSampledData returns the value of the field Value.
func (to *TaskOutput) GetValueSampledData() *fhir.SampledData {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.SampledData)
	if !ok {
		return nil
	}
	return val
}

// GetValueSignature returns the value of the field Value.
func (to *TaskOutput) GetValueSignature() *fhir.Signature {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Signature)
	if !ok {
		return nil
	}
	return val
}

// GetValueTiming returns the value of the field Value.
func (to *TaskOutput) GetValueTiming() *fhir.Timing {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Timing)
	if !ok {
		return nil
	}
	return val
}

// GetValueContactDetail returns the value of the field Value.
func (to *TaskOutput) GetValueContactDetail() *fhir.ContactDetail {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.ContactDetail)
	if !ok {
		return nil
	}
	return val
}

// GetValueContributor returns the value of the field Value.
func (to *TaskOutput) GetValueContributor() *fhir.Contributor {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Contributor)
	if !ok {
		return nil
	}
	return val
}

// GetValueDataRequirement returns the value of the field Value.
func (to *TaskOutput) GetValueDataRequirement() *fhir.DataRequirement {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.DataRequirement)
	if !ok {
		return nil
	}
	return val
}

// GetValueExpression returns the value of the field Value.
func (to *TaskOutput) GetValueExpression() *fhir.Expression {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Expression)
	if !ok {
		return nil
	}
	return val
}

// GetValueParameterDefinition returns the value of the field Value.
func (to *TaskOutput) GetValueParameterDefinition() *fhir.ParameterDefinition {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.ParameterDefinition)
	if !ok {
		return nil
	}
	return val
}

// GetValueRelatedArtifact returns the value of the field Value.
func (to *TaskOutput) GetValueRelatedArtifact() *fhir.RelatedArtifact {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.RelatedArtifact)
	if !ok {
		return nil
	}
	return val
}

// GetValueTriggerDefinition returns the value of the field Value.
func (to *TaskOutput) GetValueTriggerDefinition() *fhir.TriggerDefinition {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.TriggerDefinition)
	if !ok {
		return nil
	}
	return val
}

// GetValueUsageContext returns the value of the field Value.
func (to *TaskOutput) GetValueUsageContext() *fhir.UsageContext {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.UsageContext)
	if !ok {
		return nil
	}
	return val
}

// GetValueDosage returns the value of the field Value.
func (to *TaskOutput) GetValueDosage() *fhir.Dosage {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Dosage)
	if !ok {
		return nil
	}
	return val
}

// GetValueMeta returns the value of the field Value.
func (to *TaskOutput) GetValueMeta() *fhir.Meta {
	if to == nil {
		return nil
	}
	val, ok := to.Value.(*fhir.Meta)
	if !ok {
		return nil
	}
	return val
}

// Constraints on fulfillment tasks// If the Task.focus is a request resource and the task is seeking fulfillment
// (i.e. is asking for the request to be actioned), this element identifies any
// limitations on what parts of the referenced request should be actioned.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Task.json
type TaskRestriction struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Over what time-period is fulfillment sought.
	Period *fhir.Period `fhirpath:"period"`

	// For requests that are targeted to more than on potential recipient/target,
	// for whom is fulfillment sought?
	Recipient []*fhir.Reference `fhirpath:"recipient"`

	// Indicates the number of times the requested action should occur.
	Repetitions *fhir.PositiveInt `fhirpath:"repetitions"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TaskRestriction) GetExtension() []*fhir.Extension {
	if tr == nil {
		return nil
	}
	return tr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TaskRestriction) GetID() string {
	if tr == nil {
		return ""
	}
	return tr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TaskRestriction) GetModifierExtension() []*fhir.Extension {
	if tr == nil {
		return nil
	}
	return tr.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TaskRestriction) GetPeriod() *fhir.Period {
	if tr == nil {
		return nil
	}
	return tr.Period
}

// GetRecipient returns the value of the field Recipient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TaskRestriction) GetRecipient() []*fhir.Reference {
	if tr == nil {
		return nil
	}
	return tr.Recipient
}

// GetRepetitions returns the value of the field Repetitions.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tr *TaskRestriction) GetRepetitions() *fhir.PositiveInt {
	if tr == nil {
		return nil
	}
	return tr.Repetitions
}
