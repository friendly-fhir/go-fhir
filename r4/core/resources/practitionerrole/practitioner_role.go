// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package practitionerrole

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A specific set of Roles/Locations/specialties/services that a practitioner
// may perform at an organization for a period of time.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/PractitionerRole
//   - Source File: StructureDefinition-PractitionerRole.json
type PractitionerRole struct {

	// Whether this practitioner role record is in active use.
	Active *fhir.Boolean `fhirpath:"active"`

	// A description of site availability exceptions, e.g. public holiday
	// availability. Succinctly describing all possible exceptions to normal site
	// availability as details in the available Times and not available Times.
	AvailabilityExceptions *fhir.String `fhirpath:"availabilityExceptions"`

	// A collection of times the practitioner is available or performing this role
	// at the location and/or healthcareservice.
	AvailableTime []*PractitionerRoleAvailableTime `fhirpath:"availableTime"`

	// Roles which this practitioner is authorized to perform for the organization.
	Code []*fhir.CodeableConcept `fhirpath:"code"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Technical endpoints providing access to services operated for the
	// practitioner with this role.
	Endpoint []*fhir.Reference `fhirpath:"endpoint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The list of healthcare services that this worker provides for this role's
	// Organization/Location(s).
	HealthcareService []*fhir.Reference `fhirpath:"healthcareService"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business Identifiers that are specific to a role/location.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The location(s) at which this practitioner provides care.
	Location []*fhir.Reference `fhirpath:"location"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The practitioner is not available or performing this role during this period
	// of time due to the provided reason.
	NotAvailable []*PractitionerRoleNotAvailable `fhirpath:"notAvailable"`

	// The organization where the Practitioner performs the roles associated.
	Organization *fhir.Reference `fhirpath:"organization"`

	// The period during which the person is authorized to act as a practitioner in
	// these role(s) for the organization.
	Period *fhir.Period `fhirpath:"period"`

	// Practitioner that is able to provide the defined services for the
	// organization.
	Practitioner *fhir.Reference `fhirpath:"practitioner"`

	// Specific specialty of the practitioner.
	Specialty []*fhir.CodeableConcept `fhirpath:"specialty"`

	// Contact details that are specific to the role/location/service.
	Telecom []*fhir.ContactPoint `fhirpath:"telecom"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetActive returns the value of the field Active.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetActive() *fhir.Boolean {
	if pr == nil {
		return nil
	}
	return pr.Active
}

// GetAvailabilityExceptions returns the value of the field AvailabilityExceptions.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetAvailabilityExceptions() *fhir.String {
	if pr == nil {
		return nil
	}
	return pr.AvailabilityExceptions
}

// GetAvailableTime returns the value of the field AvailableTime.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetAvailableTime() []*PractitionerRoleAvailableTime {
	if pr == nil {
		return nil
	}
	return pr.AvailableTime
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetCode() []*fhir.CodeableConcept {
	if pr == nil {
		return nil
	}
	return pr.Code
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetContained() []fhir.Resource {
	if pr == nil {
		return nil
	}
	return pr.Contained
}

// GetEndpoint returns the value of the field Endpoint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetEndpoint() []*fhir.Reference {
	if pr == nil {
		return nil
	}
	return pr.Endpoint
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetExtension() []*fhir.Extension {
	if pr == nil {
		return nil
	}
	return pr.Extension
}

// GetHealthcareService returns the value of the field HealthcareService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetHealthcareService() []*fhir.Reference {
	if pr == nil {
		return nil
	}
	return pr.HealthcareService
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetID() string {
	if pr == nil {
		return ""
	}
	return pr.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetIdentifier() []*fhir.Identifier {
	if pr == nil {
		return nil
	}
	return pr.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetImplicitRules() *fhir.URI {
	if pr == nil {
		return nil
	}
	return pr.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetLanguage() *fhir.Code {
	if pr == nil {
		return nil
	}
	return pr.Language
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetLocation() []*fhir.Reference {
	if pr == nil {
		return nil
	}
	return pr.Location
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetMeta() *fhir.Meta {
	if pr == nil {
		return nil
	}
	return pr.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetModifierExtension() []*fhir.Extension {
	if pr == nil {
		return nil
	}
	return pr.ModifierExtension
}

// GetNotAvailable returns the value of the field NotAvailable.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetNotAvailable() []*PractitionerRoleNotAvailable {
	if pr == nil {
		return nil
	}
	return pr.NotAvailable
}

// GetOrganization returns the value of the field Organization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetOrganization() *fhir.Reference {
	if pr == nil {
		return nil
	}
	return pr.Organization
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetPeriod() *fhir.Period {
	if pr == nil {
		return nil
	}
	return pr.Period
}

// GetPractitioner returns the value of the field Practitioner.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetPractitioner() *fhir.Reference {
	if pr == nil {
		return nil
	}
	return pr.Practitioner
}

// GetSpecialty returns the value of the field Specialty.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetSpecialty() []*fhir.CodeableConcept {
	if pr == nil {
		return nil
	}
	return pr.Specialty
}

// GetTelecom returns the value of the field Telecom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetTelecom() []*fhir.ContactPoint {
	if pr == nil {
		return nil
	}
	return pr.Telecom
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pr *PractitionerRole) GetText() *fhir.Narrative {
	if pr == nil {
		return nil
	}
	return pr.Text
}

// Times the Service Site is available// A collection of times the practitioner is available or performing this role
// at the location and/or healthcareservice.// More detailed availability information may be provided in associated
// Schedule/Slot resources.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-PractitionerRole.json
type PractitionerRoleAvailableTime struct {

	// Is this always available? (hence times are irrelevant) e.g. 24 hour service.
	AllDay *fhir.Boolean `fhirpath:"allDay"`

	// The closing time of day. Note: If the AllDay flag is set, then this time is
	// ignored.
	AvailableEndTime *fhir.Time `fhirpath:"availableEndTime"`

	// The opening time of day. Note: If the AllDay flag is set, then this time is
	// ignored.
	AvailableStartTime *fhir.Time `fhirpath:"availableStartTime"`

	// Indicates which days of the week are available between the start and end
	// Times.
	DaysOfWeek []*fhir.Code `fhirpath:"daysOfWeek"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAllDay returns the value of the field AllDay.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prat *PractitionerRoleAvailableTime) GetAllDay() *fhir.Boolean {
	if prat == nil {
		return nil
	}
	return prat.AllDay
}

// GetAvailableEndTime returns the value of the field AvailableEndTime.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prat *PractitionerRoleAvailableTime) GetAvailableEndTime() *fhir.Time {
	if prat == nil {
		return nil
	}
	return prat.AvailableEndTime
}

// GetAvailableStartTime returns the value of the field AvailableStartTime.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prat *PractitionerRoleAvailableTime) GetAvailableStartTime() *fhir.Time {
	if prat == nil {
		return nil
	}
	return prat.AvailableStartTime
}

// GetDaysOfWeek returns the value of the field DaysOfWeek.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prat *PractitionerRoleAvailableTime) GetDaysOfWeek() []*fhir.Code {
	if prat == nil {
		return nil
	}
	return prat.DaysOfWeek
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prat *PractitionerRoleAvailableTime) GetExtension() []*fhir.Extension {
	if prat == nil {
		return nil
	}
	return prat.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prat *PractitionerRoleAvailableTime) GetID() string {
	if prat == nil {
		return ""
	}
	return prat.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prat *PractitionerRoleAvailableTime) GetModifierExtension() []*fhir.Extension {
	if prat == nil {
		return nil
	}
	return prat.ModifierExtension
}

// Not available during this time due to provided reason// The practitioner is not available or performing this role during this period
// of time due to the provided reason.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-PractitionerRole.json
type PractitionerRoleNotAvailable struct {

	// The reason that can be presented to the user as to why this time is not
	// available.
	Description *fhir.String `fhirpath:"description"`

	// Service is not available (seasonally or for a public holiday) from this
	// date.
	During *fhir.Period `fhirpath:"during"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prna *PractitionerRoleNotAvailable) GetDescription() *fhir.String {
	if prna == nil {
		return nil
	}
	return prna.Description
}

// GetDuring returns the value of the field During.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prna *PractitionerRoleNotAvailable) GetDuring() *fhir.Period {
	if prna == nil {
		return nil
	}
	return prna.During
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prna *PractitionerRoleNotAvailable) GetExtension() []*fhir.Extension {
	if prna == nil {
		return nil
	}
	return prna.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prna *PractitionerRoleNotAvailable) GetID() string {
	if prna == nil {
		return ""
	}
	return prna.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (prna *PractitionerRoleNotAvailable) GetModifierExtension() []*fhir.Extension {
	if prna == nil {
		return nil
	}
	return prna.ModifierExtension
}

func (pr *PractitionerRole) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (pr *PractitionerRole) UnmarshalJSON(data []byte) error {
	var raw struct {
		Active                 *fhir.Boolean                    `json:"active"`
		AvailabilityExceptions *fhir.String                     `json:"availabilityExceptions"`
		AvailableTime          []*PractitionerRoleAvailableTime `json:"availableTime"`
		Code                   []*fhir.CodeableConcept          `json:"code"`
		Contained              []fhir.Resource                  `json:"contained"`
		Endpoint               []*fhir.Reference                `json:"endpoint"`
		Extension              []*fhir.Extension                `json:"extension"`
		HealthcareService      []*fhir.Reference                `json:"healthcareService"`

		ID                string                          `json:"id"`
		Identifier        []*fhir.Identifier              `json:"identifier"`
		ImplicitRules     *fhir.URI                       `json:"implicitRules"`
		Language          *fhir.Code                      `json:"language"`
		Location          []*fhir.Reference               `json:"location"`
		Meta              *fhir.Meta                      `json:"meta"`
		ModifierExtension []*fhir.Extension               `json:"modifierExtension"`
		NotAvailable      []*PractitionerRoleNotAvailable `json:"notAvailable"`
		Organization      *fhir.Reference                 `json:"organization"`
		Period            *fhir.Period                    `json:"period"`
		Practitioner      *fhir.Reference                 `json:"practitioner"`
		Specialty         []*fhir.CodeableConcept         `json:"specialty"`
		Telecom           []*fhir.ContactPoint            `json:"telecom"`
		Text              *fhir.Narrative                 `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	pr.Active = raw.Active
	pr.AvailabilityExceptions = raw.AvailabilityExceptions
	pr.AvailableTime = raw.AvailableTime
	pr.Code = raw.Code
	pr.Contained = raw.Contained
	pr.Endpoint = raw.Endpoint
	pr.Extension = raw.Extension
	pr.HealthcareService = raw.HealthcareService
	pr.ID = raw.ID
	pr.Identifier = raw.Identifier
	pr.ImplicitRules = raw.ImplicitRules
	pr.Language = raw.Language
	pr.Location = raw.Location
	pr.Meta = raw.Meta
	pr.ModifierExtension = raw.ModifierExtension
	pr.NotAvailable = raw.NotAvailable
	pr.Organization = raw.Organization
	pr.Period = raw.Period
	pr.Practitioner = raw.Practitioner
	pr.Specialty = raw.Specialty
	pr.Telecom = raw.Telecom
	pr.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*PractitionerRole)(nil)
var _ json.Unmarshaler = (*PractitionerRole)(nil)

func (prat *PractitionerRoleAvailableTime) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (prat *PractitionerRoleAvailableTime) UnmarshalJSON(data []byte) error {
	var raw struct {
		AllDay             *fhir.Boolean     `json:"allDay"`
		AvailableEndTime   *fhir.Time        `json:"availableEndTime"`
		AvailableStartTime *fhir.Time        `json:"availableStartTime"`
		DaysOfWeek         []*fhir.Code      `json:"daysOfWeek"`
		Extension          []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	prat.AllDay = raw.AllDay
	prat.AvailableEndTime = raw.AvailableEndTime
	prat.AvailableStartTime = raw.AvailableStartTime
	prat.DaysOfWeek = raw.DaysOfWeek
	prat.Extension = raw.Extension
	prat.ID = raw.ID
	prat.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*PractitionerRoleAvailableTime)(nil)
var _ json.Unmarshaler = (*PractitionerRoleAvailableTime)(nil)

func (prna *PractitionerRoleNotAvailable) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (prna *PractitionerRoleNotAvailable) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description *fhir.String      `json:"description"`
		During      *fhir.Period      `json:"during"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	prna.Description = raw.Description
	prna.During = raw.During
	prna.Extension = raw.Extension
	prna.ID = raw.ID
	prna.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*PractitionerRoleNotAvailable)(nil)
var _ json.Unmarshaler = (*PractitionerRoleNotAvailable)(nil)
