// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package careplan

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Describes the intention of how one or more practitioners intend to deliver
// care for a particular patient, group or community for a period of time,
// possibly limited to care for a specific condition or set of conditions.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/CarePlan
//   - Source File: StructureDefinition-CarePlan.json
type CarePlan struct {

	// Identifies a planned action to occur as part of the plan. For example, a
	// medication to be used, lab tests to perform, self-monitoring, education,
	// etc.
	Activity []*CarePlanActivity `fhirpath:"activity"`

	// Identifies the conditions/problems/concerns/diagnoses/etc. whose management
	// and/or mitigation are handled by this plan.
	Addresses []*fhir.Reference `fhirpath:"addresses"`

	// When populated, the author is responsible for the care plan. The care plan
	// is attributed to the author.
	Author *fhir.Reference `fhirpath:"author"`

	// A care plan that is fulfilled in whole or in part by this care plan.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// Identifies all people and organizations who are expected to be involved in
	// the care envisioned by this plan.
	CareTeam []*fhir.Reference `fhirpath:"careTeam"`

	// Identifies what "kind" of plan this is to support differentiation between
	// multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma",
	// "disease management", "wellness plan", etc.
	Category []*fhir.CodeableConcept `fhirpath:"category"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Identifies the individual(s) or organization who provided the contents of
	// the care plan.
	Contributor []*fhir.Reference `fhirpath:"contributor"`

	// Represents when this particular CarePlan record was created in the system,
	// which is often a system-generated date.
	Created *fhir.DateTime `fhirpath:"created"`

	// A description of the scope and nature of the plan.
	Description *fhir.String `fhirpath:"description"`

	// The Encounter during which this CarePlan was created or to which the
	// creation of this record is tightly associated.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Describes the intended objective(s) of carrying out the care plan.
	Goal []*fhir.Reference `fhirpath:"goal"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifiers assigned to this care plan by the performer or other
	// systems which remain constant as the resource is updated and propagates from
	// server to server.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The URL pointing to a FHIR-defined protocol, guideline, questionnaire or
	// other definition that is adhered to in whole or in part by this CarePlan.
	InstantiatesCanonical []*fhir.Canonical `fhirpath:"instantiatesCanonical"`

	// The URL pointing to an externally maintained protocol, guideline,
	// questionnaire or other definition that is adhered to in whole or in part by
	// this CarePlan.
	InstantiatesURI []*fhir.URI `fhirpath:"instantiatesUri"`

	// Indicates the level of authority/intentionality associated with the care
	// plan and where the care plan fits into the workflow chain.
	Intent *fhir.Code `fhirpath:"intent"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// General notes about the care plan not covered elsewhere.
	Note []*fhir.Annotation `fhirpath:"note"`

	// A larger care plan of which this particular care plan is a component or
	// step.
	PartOf []*fhir.Reference `fhirpath:"partOf"`

	// Indicates when the plan did (or is intended to) come into effect and end.
	Period *fhir.Period `fhirpath:"period"`

	// Completed or terminated care plan whose function is taken by this new care
	// plan.
	Replaces []*fhir.Reference `fhirpath:"replaces"`

	// Indicates whether the plan is currently being acted upon, represents future
	// intentions or is now a historical record.
	Status *fhir.Code `fhirpath:"status"`

	// Identifies the patient or group whose intended care is described by the
	// plan.
	Subject *fhir.Reference `fhirpath:"subject"`

	// Identifies portions of the patient's record that specifically influenced the
	// formation of the plan. These might include comorbidities, recent procedures,
	// limitations, recent assessments, etc.
	SupportingInfo []*fhir.Reference `fhirpath:"supportingInfo"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Human-friendly name for the care plan.
	Title *fhir.String `fhirpath:"title"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetActivity returns the value of the field Activity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetActivity() []*CarePlanActivity {
	if cp == nil {
		return nil
	}
	return cp.Activity
}

// GetAddresses returns the value of the field Addresses.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetAddresses() []*fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.Addresses
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetAuthor() *fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.Author
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetBasedOn() []*fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.BasedOn
}

// GetCareTeam returns the value of the field CareTeam.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetCareTeam() []*fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.CareTeam
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetCategory() []*fhir.CodeableConcept {
	if cp == nil {
		return nil
	}
	return cp.Category
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetContained() []fhir.Resource {
	if cp == nil {
		return nil
	}
	return cp.Contained
}

// GetContributor returns the value of the field Contributor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetContributor() []*fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.Contributor
}

// GetCreated returns the value of the field Created.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetCreated() *fhir.DateTime {
	if cp == nil {
		return nil
	}
	return cp.Created
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetDescription() *fhir.String {
	if cp == nil {
		return nil
	}
	return cp.Description
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetEncounter() *fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetExtension() []*fhir.Extension {
	if cp == nil {
		return nil
	}
	return cp.Extension
}

// GetGoal returns the value of the field Goal.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetGoal() []*fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.Goal
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetID() string {
	if cp == nil {
		return ""
	}
	return cp.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetIdentifier() []*fhir.Identifier {
	if cp == nil {
		return nil
	}
	return cp.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetImplicitRules() *fhir.URI {
	if cp == nil {
		return nil
	}
	return cp.ImplicitRules
}

// GetInstantiatesCanonical returns the value of the field InstantiatesCanonical.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetInstantiatesCanonical() []*fhir.Canonical {
	if cp == nil {
		return nil
	}
	return cp.InstantiatesCanonical
}

// GetInstantiatesURI returns the value of the field InstantiatesURI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetInstantiatesURI() []*fhir.URI {
	if cp == nil {
		return nil
	}
	return cp.InstantiatesURI
}

// GetIntent returns the value of the field Intent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetIntent() *fhir.Code {
	if cp == nil {
		return nil
	}
	return cp.Intent
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetLanguage() *fhir.Code {
	if cp == nil {
		return nil
	}
	return cp.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetMeta() *fhir.Meta {
	if cp == nil {
		return nil
	}
	return cp.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetModifierExtension() []*fhir.Extension {
	if cp == nil {
		return nil
	}
	return cp.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetNote() []*fhir.Annotation {
	if cp == nil {
		return nil
	}
	return cp.Note
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetPartOf() []*fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.PartOf
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetPeriod() *fhir.Period {
	if cp == nil {
		return nil
	}
	return cp.Period
}

// GetReplaces returns the value of the field Replaces.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetReplaces() []*fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.Replaces
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetStatus() *fhir.Code {
	if cp == nil {
		return nil
	}
	return cp.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetSubject() *fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.Subject
}

// GetSupportingInfo returns the value of the field SupportingInfo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetSupportingInfo() []*fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.SupportingInfo
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetText() *fhir.Narrative {
	if cp == nil {
		return nil
	}
	return cp.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *CarePlan) GetTitle() *fhir.String {
	if cp == nil {
		return nil
	}
	return cp.Title
}

// Action to occur as part of plan// Identifies a planned action to occur as part of the plan. For example, a
// medication to be used, lab tests to perform, self-monitoring, education,
// etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CarePlan.json
type CarePlanActivity struct {

	// A simple summary of a planned activity suitable for a general care plan
	// system (e.g. form driven) that doesn't know about specific resources such as
	// procedure etc.
	Detail *CarePlanActivityDetail `fhirpath:"detail"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Identifies the outcome at the point when the status of the activity is
	// assessed. For example, the outcome of an education activity could be patient
	// understands (or not).
	OutcomeCodeableConcept []*fhir.CodeableConcept `fhirpath:"outcomeCodeableConcept"`

	// Details of the outcome or action resulting from the activity. The reference
	// to an "event" resource, such as Procedure or Encounter or Observation, is
	// the result/outcome of the activity itself. The activity can be conveyed
	// using CarePlan.activity.detail OR using the CarePlan.activity.reference (a
	// reference to a “request” resource).
	OutcomeReference []*fhir.Reference `fhirpath:"outcomeReference"`

	// Notes about the adherence/status/progress of the activity.
	Progress []*fhir.Annotation `fhirpath:"progress"`

	// The details of the proposed activity represented in a specific resource.
	Reference *fhir.Reference `fhirpath:"reference"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpa *CarePlanActivity) GetDetail() *CarePlanActivityDetail {
	if cpa == nil {
		return nil
	}
	return cpa.Detail
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpa *CarePlanActivity) GetExtension() []*fhir.Extension {
	if cpa == nil {
		return nil
	}
	return cpa.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpa *CarePlanActivity) GetID() string {
	if cpa == nil {
		return ""
	}
	return cpa.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpa *CarePlanActivity) GetModifierExtension() []*fhir.Extension {
	if cpa == nil {
		return nil
	}
	return cpa.ModifierExtension
}

// GetOutcomeCodeableConcept returns the value of the field OutcomeCodeableConcept.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpa *CarePlanActivity) GetOutcomeCodeableConcept() []*fhir.CodeableConcept {
	if cpa == nil {
		return nil
	}
	return cpa.OutcomeCodeableConcept
}

// GetOutcomeReference returns the value of the field OutcomeReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpa *CarePlanActivity) GetOutcomeReference() []*fhir.Reference {
	if cpa == nil {
		return nil
	}
	return cpa.OutcomeReference
}

// GetProgress returns the value of the field Progress.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpa *CarePlanActivity) GetProgress() []*fhir.Annotation {
	if cpa == nil {
		return nil
	}
	return cpa.Progress
}

// GetReference returns the value of the field Reference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpa *CarePlanActivity) GetReference() *fhir.Reference {
	if cpa == nil {
		return nil
	}
	return cpa.Reference
}

// In-line definition of activity// A simple summary of a planned activity suitable for a general care plan
// system (e.g. form driven) that doesn't know about specific resources such as
// procedure etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CarePlan.json
type CarePlanActivityDetail struct {

	// Detailed description of the type of planned activity; e.g. what lab test,
	// what procedure, what kind of encounter.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// Identifies the quantity expected to be consumed in a given day.
	DailyAmount *fhir.Quantity `fhirpath:"dailyAmount"`

	// This provides a textual description of constraints on the intended activity
	// occurrence, including relation to other activities. It may also include
	// objectives, pre-conditions and end-conditions. Finally, it may convey
	// specifics about the activity such as body site, method, route, etc.
	Description *fhir.String `fhirpath:"description"`

	// If true, indicates that the described activity is one that must NOT be
	// engaged in when following the plan. If false, or missing, indicates that the
	// described activity is one that should be engaged in when following the plan.
	DoNotPerform *fhir.Boolean `fhirpath:"doNotPerform"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Internal reference that identifies the goals that this activity is intended
	// to contribute towards meeting.
	Goal []*fhir.Reference `fhirpath:"goal"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The URL pointing to a FHIR-defined protocol, guideline, questionnaire or
	// other definition that is adhered to in whole or in part by this CarePlan
	// activity.
	InstantiatesCanonical []*fhir.Canonical `fhirpath:"instantiatesCanonical"`

	// The URL pointing to an externally maintained protocol, guideline,
	// questionnaire or other definition that is adhered to in whole or in part by
	// this CarePlan activity.
	InstantiatesURI []*fhir.URI `fhirpath:"instantiatesUri"`

	// A description of the kind of resource the in-line definition of a care plan
	// activity is representing. The CarePlan.activity.detail is an in-line
	// definition when a resource is not referenced using
	// CarePlan.activity.reference. For example, a MedicationRequest, a
	// ServiceRequest, or a CommunicationRequest.
	Kind *fhir.Code `fhirpath:"kind"`

	// Identifies the facility where the activity will occur; e.g. home, hospital,
	// specific clinic, etc.
	Location *fhir.Reference `fhirpath:"location"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Identifies who's expected to be involved in the activity.
	Performer []*fhir.Reference `fhirpath:"performer"`

	// Identifies the food, drug or other product to be consumed or supplied in the
	// activity.
	Product fhir.Element `fhirpath:"product"`

	// Identifies the quantity expected to be supplied, administered or consumed by
	// the subject.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// Provides the rationale that drove the inclusion of this particular activity
	// as part of the plan or the reason why the activity was prohibited.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Indicates another resource, such as the health condition(s), whose existence
	// justifies this request and drove the inclusion of this particular activity
	// as part of the plan.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// The period, timing or frequency upon which the described activity is to
	// occur.
	Scheduled fhir.Element `fhirpath:"scheduled"`

	// Identifies what progress is being made for the specific activity.
	Status *fhir.Code `fhirpath:"status"`

	// Provides reason why the activity isn't yet started, is on hold, was
	// cancelled, etc.
	StatusReason *fhir.CodeableConcept `fhirpath:"statusReason"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetCode() *fhir.CodeableConcept {
	if cpad == nil {
		return nil
	}
	return cpad.Code
}

// GetDailyAmount returns the value of the field DailyAmount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetDailyAmount() *fhir.Quantity {
	if cpad == nil {
		return nil
	}
	return cpad.DailyAmount
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetDescription() *fhir.String {
	if cpad == nil {
		return nil
	}
	return cpad.Description
}

// GetDoNotPerform returns the value of the field DoNotPerform.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetDoNotPerform() *fhir.Boolean {
	if cpad == nil {
		return nil
	}
	return cpad.DoNotPerform
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetExtension() []*fhir.Extension {
	if cpad == nil {
		return nil
	}
	return cpad.Extension
}

// GetGoal returns the value of the field Goal.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetGoal() []*fhir.Reference {
	if cpad == nil {
		return nil
	}
	return cpad.Goal
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetID() string {
	if cpad == nil {
		return ""
	}
	return cpad.ID
}

// GetInstantiatesCanonical returns the value of the field InstantiatesCanonical.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetInstantiatesCanonical() []*fhir.Canonical {
	if cpad == nil {
		return nil
	}
	return cpad.InstantiatesCanonical
}

// GetInstantiatesURI returns the value of the field InstantiatesURI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetInstantiatesURI() []*fhir.URI {
	if cpad == nil {
		return nil
	}
	return cpad.InstantiatesURI
}

// GetKind returns the value of the field Kind.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetKind() *fhir.Code {
	if cpad == nil {
		return nil
	}
	return cpad.Kind
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetLocation() *fhir.Reference {
	if cpad == nil {
		return nil
	}
	return cpad.Location
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetModifierExtension() []*fhir.Extension {
	if cpad == nil {
		return nil
	}
	return cpad.ModifierExtension
}

// GetPerformer returns the value of the field Performer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetPerformer() []*fhir.Reference {
	if cpad == nil {
		return nil
	}
	return cpad.Performer
}

// GetProduct returns the value of the field Product.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetProduct() fhir.Element {
	if cpad == nil {
		return nil
	}
	return cpad.Product
}

// GetProductCodeableConcept returns the value of the field Product.
func (cpad *CarePlanActivityDetail) GetProductCodeableConcept() *fhir.CodeableConcept {
	if cpad == nil {
		return nil
	}
	val, ok := cpad.Product.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetProductReference returns the value of the field Product.
func (cpad *CarePlanActivityDetail) GetProductReference() *fhir.Reference {
	if cpad == nil {
		return nil
	}
	val, ok := cpad.Product.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetQuantity() *fhir.Quantity {
	if cpad == nil {
		return nil
	}
	return cpad.Quantity
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetReasonCode() []*fhir.CodeableConcept {
	if cpad == nil {
		return nil
	}
	return cpad.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetReasonReference() []*fhir.Reference {
	if cpad == nil {
		return nil
	}
	return cpad.ReasonReference
}

// GetScheduled returns the value of the field Scheduled.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetScheduled() fhir.Element {
	if cpad == nil {
		return nil
	}
	return cpad.Scheduled
}

// GetScheduledTiming returns the value of the field Scheduled.
func (cpad *CarePlanActivityDetail) GetScheduledTiming() *fhir.Timing {
	if cpad == nil {
		return nil
	}
	val, ok := cpad.Scheduled.(*fhir.Timing)
	if !ok {
		return nil
	}
	return val
}

// GetScheduledPeriod returns the value of the field Scheduled.
func (cpad *CarePlanActivityDetail) GetScheduledPeriod() *fhir.Period {
	if cpad == nil {
		return nil
	}
	val, ok := cpad.Scheduled.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetScheduledString returns the value of the field Scheduled.
func (cpad *CarePlanActivityDetail) GetScheduledString() *fhir.String {
	if cpad == nil {
		return nil
	}
	val, ok := cpad.Scheduled.(*fhir.String)
	if !ok {
		return nil
	}
	return val
} // GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetStatus() *fhir.Code {
	if cpad == nil {
		return nil
	}
	return cpad.Status
}

// GetStatusReason returns the value of the field StatusReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cpad *CarePlanActivityDetail) GetStatusReason() *fhir.CodeableConcept {
	if cpad == nil {
		return nil
	}
	return cpad.StatusReason
}
