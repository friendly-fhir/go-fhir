// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package structuremap

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A Map of relationships between 2 structures that can be used to transform
// data.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/StructureMap
//   - Source File: StructureDefinition-StructureMap.json
type StructureMap struct {

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the structure map and/or its contents.
	// Copyright statements are generally legal restrictions on the use and
	// publishing of the structure map.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the structure map was published. The
	// date must change when the business version changes and it must change if the
	// status code changes. In addition, it should change when the substantive
	// content of the structure map changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the structure map from a
	// consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// A Boolean value to indicate that this structure map is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used
	// for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Organizes the mapping into manageable chunks for human review/ease of
	// maintenance.
	Group []*StructureMapGroup `fhirpath:"group"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this structure map when it is
	// represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Other maps used by this map (canonical URLs).
	Import []*fhir.Canonical `fhirpath:"import"`

	// A legal or geographic region in which the structure map is intended to be
	// used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the structure map. This name should be
	// usable as an identifier for the module by machine processing applications
	// such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// The name of the organization or individual that published the structure map.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this structure map is needed and why it has been designed
	// as it has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// The status of this structure map. Enables tracking the life-cycle of the
	// content.
	Status *fhir.Code `fhirpath:"status"`

	// A structure definition used by this map. The structure definition may
	// describe instances that are converted, or the instances that are produced.
	Structure []*StructureMapStructure `fhirpath:"structure"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the structure map.
	Title *fhir.String `fhirpath:"title"`

	// An absolute URI that is used to identify this structure map when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal
	// address at which at which an authoritative instance of this structure map is
	// (or will be) published. This URL can be the target of a canonical reference.
	// It SHALL remain the same when the structure map is stored on different
	// servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// structure map instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the structure map
	// when it is referenced in a specification, model, design or instance. This is
	// an arbitrary value managed by the structure map author and is not expected
	// to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd)
	// if a managed version is not available. There is also no expectation that
	// versions can be placed in a lexicographical sequence.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetContact() []*fhir.ContactDetail {
	if sm == nil {
		return nil
	}
	return sm.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetContained() []fhir.Resource {
	if sm == nil {
		return nil
	}
	return sm.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetCopyright() *fhir.Markdown {
	if sm == nil {
		return nil
	}
	return sm.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetDate() *fhir.DateTime {
	if sm == nil {
		return nil
	}
	return sm.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetDescription() *fhir.Markdown {
	if sm == nil {
		return nil
	}
	return sm.Description
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetExperimental() *fhir.Boolean {
	if sm == nil {
		return nil
	}
	return sm.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetExtension() []*fhir.Extension {
	if sm == nil {
		return nil
	}
	return sm.Extension
}

// GetGroup returns the value of the field Group.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetGroup() []*StructureMapGroup {
	if sm == nil {
		return nil
	}
	return sm.Group
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetID() string {
	if sm == nil {
		return ""
	}
	return sm.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetIdentifier() []*fhir.Identifier {
	if sm == nil {
		return nil
	}
	return sm.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetImplicitRules() *fhir.URI {
	if sm == nil {
		return nil
	}
	return sm.ImplicitRules
}

// GetImport returns the value of the field Import.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetImport() []*fhir.Canonical {
	if sm == nil {
		return nil
	}
	return sm.Import
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetJurisdiction() []*fhir.CodeableConcept {
	if sm == nil {
		return nil
	}
	return sm.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetLanguage() *fhir.Code {
	if sm == nil {
		return nil
	}
	return sm.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetMeta() *fhir.Meta {
	if sm == nil {
		return nil
	}
	return sm.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetModifierExtension() []*fhir.Extension {
	if sm == nil {
		return nil
	}
	return sm.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetName() *fhir.String {
	if sm == nil {
		return nil
	}
	return sm.Name
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetPublisher() *fhir.String {
	if sm == nil {
		return nil
	}
	return sm.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetPurpose() *fhir.Markdown {
	if sm == nil {
		return nil
	}
	return sm.Purpose
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetStatus() *fhir.Code {
	if sm == nil {
		return nil
	}
	return sm.Status
}

// GetStructure returns the value of the field Structure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetStructure() []*StructureMapStructure {
	if sm == nil {
		return nil
	}
	return sm.Structure
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetText() *fhir.Narrative {
	if sm == nil {
		return nil
	}
	return sm.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetTitle() *fhir.String {
	if sm == nil {
		return nil
	}
	return sm.Title
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetURL() *fhir.URI {
	if sm == nil {
		return nil
	}
	return sm.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetUseContext() []*fhir.UsageContext {
	if sm == nil {
		return nil
	}
	return sm.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sm *StructureMap) GetVersion() *fhir.String {
	if sm == nil {
		return nil
	}
	return sm.Version
}

// Named sections for reader convenience// Organizes the mapping into manageable chunks for human review/ease of
// maintenance.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureMap.json
type StructureMapGroup struct {

	// Additional supporting documentation that explains the purpose of the group
	// and the types of mappings within it.
	Documentation *fhir.String `fhirpath:"documentation"`

	// Another group that this group adds rules to.
	Extends *fhir.ID `fhirpath:"extends"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A name assigned to an instance of data. The instance must be provided when
	// the mapping is invoked.
	Input []*StructureMapGroupInput `fhirpath:"input"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A unique name for the group for the convenience of human readers.
	Name *fhir.ID `fhirpath:"name"`

	// Transform Rule from source to target.
	Rule []*StructureMapGroupRule `fhirpath:"rule"`

	// If this is the default rule set to apply for the source type or this
	// combination of types.
	TypeMode *fhir.Code `fhirpath:"typeMode"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smg *StructureMapGroup) GetDocumentation() *fhir.String {
	if smg == nil {
		return nil
	}
	return smg.Documentation
}

// GetExtends returns the value of the field Extends.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smg *StructureMapGroup) GetExtends() *fhir.ID {
	if smg == nil {
		return nil
	}
	return smg.Extends
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smg *StructureMapGroup) GetExtension() []*fhir.Extension {
	if smg == nil {
		return nil
	}
	return smg.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smg *StructureMapGroup) GetID() string {
	if smg == nil {
		return ""
	}
	return smg.ID
}

// GetInput returns the value of the field Input.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smg *StructureMapGroup) GetInput() []*StructureMapGroupInput {
	if smg == nil {
		return nil
	}
	return smg.Input
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smg *StructureMapGroup) GetModifierExtension() []*fhir.Extension {
	if smg == nil {
		return nil
	}
	return smg.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smg *StructureMapGroup) GetName() *fhir.ID {
	if smg == nil {
		return nil
	}
	return smg.Name
}

// GetRule returns the value of the field Rule.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smg *StructureMapGroup) GetRule() []*StructureMapGroupRule {
	if smg == nil {
		return nil
	}
	return smg.Rule
}

// GetTypeMode returns the value of the field TypeMode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smg *StructureMapGroup) GetTypeMode() *fhir.Code {
	if smg == nil {
		return nil
	}
	return smg.TypeMode
}

// Named instance provided when invoking the map// A name assigned to an instance of data. The instance must be provided when
// the mapping is invoked.// If no inputs are named, then the entry mappings are type based.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureMap.json
type StructureMapGroupInput struct {

	// Documentation for this instance of data.
	Documentation *fhir.String `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Mode for this instance of data.
	Mode *fhir.Code `fhirpath:"mode"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Name for this instance of data.
	Name *fhir.ID `fhirpath:"name"`

	// Type for this instance of data.
	Type *fhir.String `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgi *StructureMapGroupInput) GetDocumentation() *fhir.String {
	if smgi == nil {
		return nil
	}
	return smgi.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgi *StructureMapGroupInput) GetExtension() []*fhir.Extension {
	if smgi == nil {
		return nil
	}
	return smgi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgi *StructureMapGroupInput) GetID() string {
	if smgi == nil {
		return ""
	}
	return smgi.ID
}

// GetMode returns the value of the field Mode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgi *StructureMapGroupInput) GetMode() *fhir.Code {
	if smgi == nil {
		return nil
	}
	return smgi.Mode
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgi *StructureMapGroupInput) GetModifierExtension() []*fhir.Extension {
	if smgi == nil {
		return nil
	}
	return smgi.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgi *StructureMapGroupInput) GetName() *fhir.ID {
	if smgi == nil {
		return nil
	}
	return smgi.Name
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgi *StructureMapGroupInput) GetType() *fhir.String {
	if smgi == nil {
		return nil
	}
	return smgi.Type
}

// Transform Rule from source to target// Transform Rule from source to target.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureMap.json
type StructureMapGroupRule struct {

	// Which other rules to apply in the context of this rule.
	Dependent []*StructureMapGroupRuleDependent `fhirpath:"dependent"`

	// Documentation for this instance of data.
	Documentation *fhir.String `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Name of the rule for internal references.
	Name *fhir.ID `fhirpath:"name"`

	// Source inputs to the mapping.
	Source []*StructureMapGroupRuleSource `fhirpath:"source"`

	// Content to create because of this mapping rule.
	Target []*StructureMapGroupRuleTarget `fhirpath:"target"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDependent returns the value of the field Dependent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgr *StructureMapGroupRule) GetDependent() []*StructureMapGroupRuleDependent {
	if smgr == nil {
		return nil
	}
	return smgr.Dependent
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgr *StructureMapGroupRule) GetDocumentation() *fhir.String {
	if smgr == nil {
		return nil
	}
	return smgr.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgr *StructureMapGroupRule) GetExtension() []*fhir.Extension {
	if smgr == nil {
		return nil
	}
	return smgr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgr *StructureMapGroupRule) GetID() string {
	if smgr == nil {
		return ""
	}
	return smgr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgr *StructureMapGroupRule) GetModifierExtension() []*fhir.Extension {
	if smgr == nil {
		return nil
	}
	return smgr.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgr *StructureMapGroupRule) GetName() *fhir.ID {
	if smgr == nil {
		return nil
	}
	return smgr.Name
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgr *StructureMapGroupRule) GetSource() []*StructureMapGroupRuleSource {
	if smgr == nil {
		return nil
	}
	return smgr.Source
}

// GetTarget returns the value of the field Target.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgr *StructureMapGroupRule) GetTarget() []*StructureMapGroupRuleTarget {
	if smgr == nil {
		return nil
	}
	return smgr.Target
}

// Which other rules to apply in the context of this rule// Which other rules to apply in the context of this rule.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureMap.json
type StructureMapGroupRuleDependent struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Name of a rule or group to apply.
	Name *fhir.ID `fhirpath:"name"`

	// Variable to pass to the rule or group.
	Variable []*fhir.String `fhirpath:"variable"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrd *StructureMapGroupRuleDependent) GetExtension() []*fhir.Extension {
	if smgrd == nil {
		return nil
	}
	return smgrd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrd *StructureMapGroupRuleDependent) GetID() string {
	if smgrd == nil {
		return ""
	}
	return smgrd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrd *StructureMapGroupRuleDependent) GetModifierExtension() []*fhir.Extension {
	if smgrd == nil {
		return nil
	}
	return smgrd.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrd *StructureMapGroupRuleDependent) GetName() *fhir.ID {
	if smgrd == nil {
		return nil
	}
	return smgrd.Name
}

// GetVariable returns the value of the field Variable.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrd *StructureMapGroupRuleDependent) GetVariable() []*fhir.String {
	if smgrd == nil {
		return nil
	}
	return smgrd.Variable
}

// Source inputs to the mapping// Source inputs to the mapping.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureMap.json
type StructureMapGroupRuleSource struct {

	// FHIRPath expression - must be true or the mapping engine throws an error
	// instead of completing.
	Check *fhir.String `fhirpath:"check"`

	// FHIRPath expression - must be true or the rule does not apply.
	Condition *fhir.String `fhirpath:"condition"`

	// Type or variable this rule applies to.
	Context *fhir.ID `fhirpath:"context"`

	// A value to use if there is no existing value in the source object.
	DefaultValue fhir.Element `fhirpath:"defaultValue"`

	// Optional field for this source.
	Element *fhir.String `fhirpath:"element"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// How to handle the list mode for this element.
	ListMode *fhir.Code `fhirpath:"listMode"`

	// A FHIRPath expression which specifies a message to put in the transform log
	// when content matching the source rule is found.
	LogMessage *fhir.String `fhirpath:"logMessage"`

	// Specified maximum cardinality for the element - a number or a "*". This is
	// optional; if present, it acts an implicit check on the input content (* just
	// serves as documentation; it's the default value).
	Max *fhir.String `fhirpath:"max"`

	// Specified minimum cardinality for the element. This is optional; if present,
	// it acts an implicit check on the input content.
	Min *fhir.Integer `fhirpath:"min"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Specified type for the element. This works as a condition on the mapping -
	// use for polymorphic elements.
	Type *fhir.String `fhirpath:"type"`

	// Named context for field, if a field is specified.
	Variable *fhir.ID `fhirpath:"variable"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCheck returns the value of the field Check.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetCheck() *fhir.String {
	if smgrs == nil {
		return nil
	}
	return smgrs.Check
}

// GetCondition returns the value of the field Condition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetCondition() *fhir.String {
	if smgrs == nil {
		return nil
	}
	return smgrs.Condition
}

// GetContext returns the value of the field Context.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetContext() *fhir.ID {
	if smgrs == nil {
		return nil
	}
	return smgrs.Context
}

// GetDefaultValue returns the value of the field DefaultValue.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValue() fhir.Element {
	if smgrs == nil {
		return nil
	}
	return smgrs.DefaultValue
}

// GetDefaultValueBase64Binary returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueBase64Binary() *fhir.Base64Binary {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Base64Binary)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueBoolean returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueBoolean() *fhir.Boolean {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueCanonical returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueCanonical() *fhir.Canonical {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Canonical)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueCode returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueCode() *fhir.Code {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Code)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueDate returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueDate() *fhir.Date {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueDateTime returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueDateTime() *fhir.DateTime {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueDecimal returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueDecimal() *fhir.Decimal {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Decimal)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueID returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueID() *fhir.ID {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.ID)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueInstant returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueInstant() *fhir.Instant {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Instant)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueInteger returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueInteger() *fhir.Integer {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueMarkdown returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueMarkdown() *fhir.Markdown {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Markdown)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueOID returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueOID() *fhir.OID {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.OID)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValuePositiveInt returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValuePositiveInt() *fhir.PositiveInt {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.PositiveInt)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueString returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueString() *fhir.String {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueTime returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueTime() *fhir.Time {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Time)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueUnsignedInt returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueUnsignedInt() *fhir.UnsignedInt {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.UnsignedInt)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueURI returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueURI() *fhir.URI {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.URI)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueURL returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueURL() *fhir.URL {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.URL)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueUUID returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueUUID() *fhir.UUID {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.UUID)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueAddress returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueAddress() *fhir.Address {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Address)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueAge returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueAge() *fhir.Age {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Age)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueAnnotation returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueAnnotation() *fhir.Annotation {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Annotation)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueAttachment returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueAttachment() *fhir.Attachment {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Attachment)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueCodeableConcept returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueCodeableConcept() *fhir.CodeableConcept {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueCoding returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueCoding() *fhir.Coding {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Coding)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueContactPoint returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueContactPoint() *fhir.ContactPoint {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.ContactPoint)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueCount returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueCount() *fhir.Count {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Count)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueDistance returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueDistance() *fhir.Distance {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Distance)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueDuration returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueDuration() *fhir.Duration {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Duration)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueHumanName returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueHumanName() *fhir.HumanName {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.HumanName)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueIdentifier returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueIdentifier() *fhir.Identifier {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Identifier)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueMoney returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueMoney() *fhir.Money {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Money)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValuePeriod returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValuePeriod() *fhir.Period {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueQuantity returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueQuantity() *fhir.Quantity {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueRange returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueRange() *fhir.Range {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueRatio returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueRatio() *fhir.Ratio {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Ratio)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueReference returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueReference() *fhir.Reference {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueSampledData returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueSampledData() *fhir.SampledData {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.SampledData)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueSignature returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueSignature() *fhir.Signature {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Signature)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueTiming returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueTiming() *fhir.Timing {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Timing)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueContactDetail returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueContactDetail() *fhir.ContactDetail {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.ContactDetail)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueContributor returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueContributor() *fhir.Contributor {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Contributor)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueDataRequirement returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueDataRequirement() *fhir.DataRequirement {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.DataRequirement)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueExpression returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueExpression() *fhir.Expression {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Expression)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueParameterDefinition returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueParameterDefinition() *fhir.ParameterDefinition {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.ParameterDefinition)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueRelatedArtifact returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueRelatedArtifact() *fhir.RelatedArtifact {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.RelatedArtifact)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueTriggerDefinition returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueTriggerDefinition() *fhir.TriggerDefinition {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.TriggerDefinition)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueUsageContext returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueUsageContext() *fhir.UsageContext {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.UsageContext)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueDosage returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueDosage() *fhir.Dosage {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Dosage)
	if !ok {
		return nil
	}
	return val
}

// GetDefaultValueMeta returns the value of the field DefaultValue.
func (smgrs *StructureMapGroupRuleSource) GetDefaultValueMeta() *fhir.Meta {
	if smgrs == nil {
		return nil
	}
	val, ok := smgrs.DefaultValue.(*fhir.Meta)
	if !ok {
		return nil
	}
	return val
} // GetElement returns the value of the field Element.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetElement() *fhir.String {
	if smgrs == nil {
		return nil
	}
	return smgrs.Element
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetExtension() []*fhir.Extension {
	if smgrs == nil {
		return nil
	}
	return smgrs.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetID() string {
	if smgrs == nil {
		return ""
	}
	return smgrs.ID
}

// GetListMode returns the value of the field ListMode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetListMode() *fhir.Code {
	if smgrs == nil {
		return nil
	}
	return smgrs.ListMode
}

// GetLogMessage returns the value of the field LogMessage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetLogMessage() *fhir.String {
	if smgrs == nil {
		return nil
	}
	return smgrs.LogMessage
}

// GetMax returns the value of the field Max.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetMax() *fhir.String {
	if smgrs == nil {
		return nil
	}
	return smgrs.Max
}

// GetMin returns the value of the field Min.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetMin() *fhir.Integer {
	if smgrs == nil {
		return nil
	}
	return smgrs.Min
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetModifierExtension() []*fhir.Extension {
	if smgrs == nil {
		return nil
	}
	return smgrs.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetType() *fhir.String {
	if smgrs == nil {
		return nil
	}
	return smgrs.Type
}

// GetVariable returns the value of the field Variable.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrs *StructureMapGroupRuleSource) GetVariable() *fhir.ID {
	if smgrs == nil {
		return nil
	}
	return smgrs.Variable
}

// Content to create because of this mapping rule// Content to create because of this mapping rule.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureMap.json
type StructureMapGroupRuleTarget struct {

	// Type or variable this rule applies to.
	Context *fhir.ID `fhirpath:"context"`

	// How to interpret the context.
	ContextType *fhir.Code `fhirpath:"contextType"`

	// Field to create in the context.
	Element *fhir.String `fhirpath:"element"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// If field is a list, how to manage the list.
	ListMode []*fhir.Code `fhirpath:"listMode"`

	// Internal rule reference for shared list items.
	ListRuleID *fhir.ID `fhirpath:"listRuleId"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Parameters to the transform.
	Parameter []*StructureMapGroupRuleTargetParameter `fhirpath:"parameter"`

	// How the data is copied / created.
	Transform *fhir.Code `fhirpath:"transform"`

	// Named context for field, if desired, and a field is specified.
	Variable *fhir.ID `fhirpath:"variable"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetContext returns the value of the field Context.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetContext() *fhir.ID {
	if smgrt == nil {
		return nil
	}
	return smgrt.Context
}

// GetContextType returns the value of the field ContextType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetContextType() *fhir.Code {
	if smgrt == nil {
		return nil
	}
	return smgrt.ContextType
}

// GetElement returns the value of the field Element.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetElement() *fhir.String {
	if smgrt == nil {
		return nil
	}
	return smgrt.Element
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetExtension() []*fhir.Extension {
	if smgrt == nil {
		return nil
	}
	return smgrt.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetID() string {
	if smgrt == nil {
		return ""
	}
	return smgrt.ID
}

// GetListMode returns the value of the field ListMode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetListMode() []*fhir.Code {
	if smgrt == nil {
		return nil
	}
	return smgrt.ListMode
}

// GetListRuleID returns the value of the field ListRuleID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetListRuleID() *fhir.ID {
	if smgrt == nil {
		return nil
	}
	return smgrt.ListRuleID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetModifierExtension() []*fhir.Extension {
	if smgrt == nil {
		return nil
	}
	return smgrt.ModifierExtension
}

// GetParameter returns the value of the field Parameter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetParameter() []*StructureMapGroupRuleTargetParameter {
	if smgrt == nil {
		return nil
	}
	return smgrt.Parameter
}

// GetTransform returns the value of the field Transform.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetTransform() *fhir.Code {
	if smgrt == nil {
		return nil
	}
	return smgrt.Transform
}

// GetVariable returns the value of the field Variable.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrt *StructureMapGroupRuleTarget) GetVariable() *fhir.ID {
	if smgrt == nil {
		return nil
	}
	return smgrt.Variable
}

// Parameters to the transform// Parameters to the transform.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureMap.json
type StructureMapGroupRuleTargetParameter struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Parameter value - variable or literal.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrtp *StructureMapGroupRuleTargetParameter) GetExtension() []*fhir.Extension {
	if smgrtp == nil {
		return nil
	}
	return smgrtp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrtp *StructureMapGroupRuleTargetParameter) GetID() string {
	if smgrtp == nil {
		return ""
	}
	return smgrtp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrtp *StructureMapGroupRuleTargetParameter) GetModifierExtension() []*fhir.Extension {
	if smgrtp == nil {
		return nil
	}
	return smgrtp.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (smgrtp *StructureMapGroupRuleTargetParameter) GetValue() fhir.Element {
	if smgrtp == nil {
		return nil
	}
	return smgrtp.Value
}

// GetValueID returns the value of the field Value.
func (smgrtp *StructureMapGroupRuleTargetParameter) GetValueID() *fhir.ID {
	if smgrtp == nil {
		return nil
	}
	val, ok := smgrtp.Value.(*fhir.ID)
	if !ok {
		return nil
	}
	return val
}

// GetValueString returns the value of the field Value.
func (smgrtp *StructureMapGroupRuleTargetParameter) GetValueString() *fhir.String {
	if smgrtp == nil {
		return nil
	}
	val, ok := smgrtp.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueBoolean returns the value of the field Value.
func (smgrtp *StructureMapGroupRuleTargetParameter) GetValueBoolean() *fhir.Boolean {
	if smgrtp == nil {
		return nil
	}
	val, ok := smgrtp.Value.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetValueInteger returns the value of the field Value.
func (smgrtp *StructureMapGroupRuleTargetParameter) GetValueInteger() *fhir.Integer {
	if smgrtp == nil {
		return nil
	}
	val, ok := smgrtp.Value.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
}

// GetValueDecimal returns the value of the field Value.
func (smgrtp *StructureMapGroupRuleTargetParameter) GetValueDecimal() *fhir.Decimal {
	if smgrtp == nil {
		return nil
	}
	val, ok := smgrtp.Value.(*fhir.Decimal)
	if !ok {
		return nil
	}
	return val
}

// Structure Definition used by this map// A structure definition used by this map. The structure definition may
// describe instances that are converted, or the instances that are produced.// It is not necessary for a structure map to identify any dependent
// structures, though not listing them may restrict its usefulness.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureMap.json
type StructureMapStructure struct {

	// The name used for this type in the map.
	Alias *fhir.String `fhirpath:"alias"`

	// Documentation that describes how the structure is used in the mapping.
	Documentation *fhir.String `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// How the referenced structure is used in this mapping.
	Mode *fhir.Code `fhirpath:"mode"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The canonical reference to the structure.
	URL *fhir.Canonical `fhirpath:"url"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAlias returns the value of the field Alias.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sms *StructureMapStructure) GetAlias() *fhir.String {
	if sms == nil {
		return nil
	}
	return sms.Alias
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sms *StructureMapStructure) GetDocumentation() *fhir.String {
	if sms == nil {
		return nil
	}
	return sms.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sms *StructureMapStructure) GetExtension() []*fhir.Extension {
	if sms == nil {
		return nil
	}
	return sms.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sms *StructureMapStructure) GetID() string {
	if sms == nil {
		return ""
	}
	return sms.ID
}

// GetMode returns the value of the field Mode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sms *StructureMapStructure) GetMode() *fhir.Code {
	if sms == nil {
		return nil
	}
	return sms.Mode
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sms *StructureMapStructure) GetModifierExtension() []*fhir.Extension {
	if sms == nil {
		return nil
	}
	return sms.ModifierExtension
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sms *StructureMapStructure) GetURL() *fhir.Canonical {
	if sms == nil {
		return nil
	}
	return sms.URL
}
