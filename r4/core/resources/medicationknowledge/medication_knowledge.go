// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package medicationknowledge

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Information about a medication that is used to support knowledge.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MedicationKnowledge
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledge struct {

	// Guidelines for the administration of the medication.
	AdministrationGuidelines []*MedicationKnowledgeAdministrationGuidelines `fhirpath:"administrationGuidelines"`

	// Specific amount of the drug in the packaged product. For example, when
	// specifying a product that has the same strength (For example, Insulin
	// glargine 100 unit per mL solution for injection), this attribute provides
	// additional clarification of the package amount (For example, 3 mL, 10mL,
	// etc.).
	Amount *fhir.Quantity `fhirpath:"amount"`

	// Associated or related medications. For example, if the medication is a
	// branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g.
	// Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this
	// would link to a branded product (e.g. Crestor).
	AssociatedMedication []*fhir.Reference `fhirpath:"associatedMedication"`

	// A code that specifies this medication, or a textual description if no code
	// is available. Usage note: This could be a standard medication code such as a
	// code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local
	// formulary code, optionally with translations to other code systems.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Potential clinical issue with or between medication(s) (for example,
	// drug-drug interaction, drug-disease contraindication, drug-allergy
	// interaction, etc.).
	Contraindication []*fhir.Reference `fhirpath:"contraindication"`

	// The price of the medication.
	Cost []*MedicationKnowledgeCost `fhirpath:"cost"`

	// Describes the form of the item. Powder; tablets; capsule.
	DoseForm *fhir.CodeableConcept `fhirpath:"doseForm"`

	// Specifies descriptive properties of the medicine, such as color, shape,
	// imprints, etc.
	DrugCharacteristic []*MedicationKnowledgeDrugCharacteristic `fhirpath:"drugCharacteristic"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Identifies a particular constituent of interest in the product.
	Ingredient []*MedicationKnowledgeIngredient `fhirpath:"ingredient"`

	// The intended or approved route of administration.
	IntendedRoute []*fhir.CodeableConcept `fhirpath:"intendedRoute"`

	// The time course of drug absorption, distribution, metabolism and excretion
	// of a medication from the body.
	Kinetics []*MedicationKnowledgeKinetics `fhirpath:"kinetics"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Describes the details of the manufacturer of the medication product. This is
	// not intended to represent the distributor of a medication product.
	Manufacturer *fhir.Reference `fhirpath:"manufacturer"`

	// Categorization of the medication within a formulary or classification
	// system.
	MedicineClassification []*MedicationKnowledgeMedicineClassification `fhirpath:"medicineClassification"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The program under which the medication is reviewed.
	MonitoringProgram []*MedicationKnowledgeMonitoringProgram `fhirpath:"monitoringProgram"`

	// Associated documentation about the medication.
	Monograph []*MedicationKnowledgeMonograph `fhirpath:"monograph"`

	// Information that only applies to packages (not products).
	Packaging *MedicationKnowledgePackaging `fhirpath:"packaging"`

	// The instructions for preparing the medication.
	PreparationInstruction *fhir.Markdown `fhirpath:"preparationInstruction"`

	// Category of the medication or product (e.g. branded product, therapeutic
	// moeity, generic product, innovator product, etc.).
	ProductType []*fhir.CodeableConcept `fhirpath:"productType"`

	// Regulatory information about a medication.
	Regulatory []*MedicationKnowledgeRegulatory `fhirpath:"regulatory"`

	// Associated or related knowledge about a medication.
	RelatedMedicationKnowledge []*MedicationKnowledgeRelatedMedicationKnowledge `fhirpath:"relatedMedicationKnowledge"`

	// A code to indicate if the medication is in active use. The status refers to
	// the validity about the information of the medication and not to its
	// medicinal properties.
	Status *fhir.Code `fhirpath:"status"`

	// Additional names for a medication, for example, the name(s) given to a
	// medication in different countries. For example, acetaminophen and
	// paracetamol or salbutamol and albuterol.
	Synonym []*fhir.String `fhirpath:"synonym"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAdministrationGuidelines returns the value of the field AdministrationGuidelines.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetAdministrationGuidelines() []*MedicationKnowledgeAdministrationGuidelines {
	if mk == nil {
		return nil
	}
	return mk.AdministrationGuidelines
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetAmount() *fhir.Quantity {
	if mk == nil {
		return nil
	}
	return mk.Amount
}

// GetAssociatedMedication returns the value of the field AssociatedMedication.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetAssociatedMedication() []*fhir.Reference {
	if mk == nil {
		return nil
	}
	return mk.AssociatedMedication
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetCode() *fhir.CodeableConcept {
	if mk == nil {
		return nil
	}
	return mk.Code
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetContained() []fhir.Resource {
	if mk == nil {
		return nil
	}
	return mk.Contained
}

// GetContraindication returns the value of the field Contraindication.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetContraindication() []*fhir.Reference {
	if mk == nil {
		return nil
	}
	return mk.Contraindication
}

// GetCost returns the value of the field Cost.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetCost() []*MedicationKnowledgeCost {
	if mk == nil {
		return nil
	}
	return mk.Cost
}

// GetDoseForm returns the value of the field DoseForm.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetDoseForm() *fhir.CodeableConcept {
	if mk == nil {
		return nil
	}
	return mk.DoseForm
}

// GetDrugCharacteristic returns the value of the field DrugCharacteristic.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetDrugCharacteristic() []*MedicationKnowledgeDrugCharacteristic {
	if mk == nil {
		return nil
	}
	return mk.DrugCharacteristic
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetExtension() []*fhir.Extension {
	if mk == nil {
		return nil
	}
	return mk.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetID() string {
	if mk == nil {
		return ""
	}
	return mk.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetImplicitRules() *fhir.URI {
	if mk == nil {
		return nil
	}
	return mk.ImplicitRules
}

// GetIngredient returns the value of the field Ingredient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetIngredient() []*MedicationKnowledgeIngredient {
	if mk == nil {
		return nil
	}
	return mk.Ingredient
}

// GetIntendedRoute returns the value of the field IntendedRoute.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetIntendedRoute() []*fhir.CodeableConcept {
	if mk == nil {
		return nil
	}
	return mk.IntendedRoute
}

// GetKinetics returns the value of the field Kinetics.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetKinetics() []*MedicationKnowledgeKinetics {
	if mk == nil {
		return nil
	}
	return mk.Kinetics
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetLanguage() *fhir.Code {
	if mk == nil {
		return nil
	}
	return mk.Language
}

// GetManufacturer returns the value of the field Manufacturer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetManufacturer() *fhir.Reference {
	if mk == nil {
		return nil
	}
	return mk.Manufacturer
}

// GetMedicineClassification returns the value of the field MedicineClassification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetMedicineClassification() []*MedicationKnowledgeMedicineClassification {
	if mk == nil {
		return nil
	}
	return mk.MedicineClassification
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetMeta() *fhir.Meta {
	if mk == nil {
		return nil
	}
	return mk.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetModifierExtension() []*fhir.Extension {
	if mk == nil {
		return nil
	}
	return mk.ModifierExtension
}

// GetMonitoringProgram returns the value of the field MonitoringProgram.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetMonitoringProgram() []*MedicationKnowledgeMonitoringProgram {
	if mk == nil {
		return nil
	}
	return mk.MonitoringProgram
}

// GetMonograph returns the value of the field Monograph.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetMonograph() []*MedicationKnowledgeMonograph {
	if mk == nil {
		return nil
	}
	return mk.Monograph
}

// GetPackaging returns the value of the field Packaging.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetPackaging() *MedicationKnowledgePackaging {
	if mk == nil {
		return nil
	}
	return mk.Packaging
}

// GetPreparationInstruction returns the value of the field PreparationInstruction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetPreparationInstruction() *fhir.Markdown {
	if mk == nil {
		return nil
	}
	return mk.PreparationInstruction
}

// GetProductType returns the value of the field ProductType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetProductType() []*fhir.CodeableConcept {
	if mk == nil {
		return nil
	}
	return mk.ProductType
}

// GetRegulatory returns the value of the field Regulatory.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetRegulatory() []*MedicationKnowledgeRegulatory {
	if mk == nil {
		return nil
	}
	return mk.Regulatory
}

// GetRelatedMedicationKnowledge returns the value of the field RelatedMedicationKnowledge.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetRelatedMedicationKnowledge() []*MedicationKnowledgeRelatedMedicationKnowledge {
	if mk == nil {
		return nil
	}
	return mk.RelatedMedicationKnowledge
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetStatus() *fhir.Code {
	if mk == nil {
		return nil
	}
	return mk.Status
}

// GetSynonym returns the value of the field Synonym.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetSynonym() []*fhir.String {
	if mk == nil {
		return nil
	}
	return mk.Synonym
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mk *MedicationKnowledge) GetText() *fhir.Narrative {
	if mk == nil {
		return nil
	}
	return mk.Text
}

// Guidelines for administration of the medication// Guidelines for the administration of the medication.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeAdministrationGuidelines struct {

	// Dosage for the medication for the specific guidelines.
	Dosage []*MedicationKnowledgeAdministrationGuidelinesDosage `fhirpath:"dosage"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Indication for use that apply to the specific administration guidelines.
	Indication fhir.Element `fhirpath:"indication"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Characteristics of the patient that are relevant to the administration
	// guidelines (for example, height, weight, gender, etc.).
	PatientCharacteristics []*MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics `fhirpath:"patientCharacteristics"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDosage returns the value of the field Dosage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkag *MedicationKnowledgeAdministrationGuidelines) GetDosage() []*MedicationKnowledgeAdministrationGuidelinesDosage {
	if mkag == nil {
		return nil
	}
	return mkag.Dosage
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkag *MedicationKnowledgeAdministrationGuidelines) GetExtension() []*fhir.Extension {
	if mkag == nil {
		return nil
	}
	return mkag.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkag *MedicationKnowledgeAdministrationGuidelines) GetID() string {
	if mkag == nil {
		return ""
	}
	return mkag.ID
}

// GetIndication returns the value of the field Indication.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkag *MedicationKnowledgeAdministrationGuidelines) GetIndication() fhir.Element {
	if mkag == nil {
		return nil
	}
	return mkag.Indication
}

// GetIndicationCodeableConcept returns the value of the field Indication.
func (mkag *MedicationKnowledgeAdministrationGuidelines) GetIndicationCodeableConcept() *fhir.CodeableConcept {
	if mkag == nil {
		return nil
	}
	val, ok := mkag.Indication.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetIndicationReference returns the value of the field Indication.
func (mkag *MedicationKnowledgeAdministrationGuidelines) GetIndicationReference() *fhir.Reference {
	if mkag == nil {
		return nil
	}
	val, ok := mkag.Indication.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkag *MedicationKnowledgeAdministrationGuidelines) GetModifierExtension() []*fhir.Extension {
	if mkag == nil {
		return nil
	}
	return mkag.ModifierExtension
}

// GetPatientCharacteristics returns the value of the field PatientCharacteristics.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkag *MedicationKnowledgeAdministrationGuidelines) GetPatientCharacteristics() []*MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics {
	if mkag == nil {
		return nil
	}
	return mkag.PatientCharacteristics
}

// Dosage for the medication for the specific guidelines// Dosage for the medication for the specific guidelines.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeAdministrationGuidelinesDosage struct {

	// Dosage for the medication for the specific guidelines.
	Dosage []*fhir.Dosage `fhirpath:"dosage"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type of dosage (for example, prophylaxis, maintenance, therapeutic,
	// etc.).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDosage returns the value of the field Dosage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkagd *MedicationKnowledgeAdministrationGuidelinesDosage) GetDosage() []*fhir.Dosage {
	if mkagd == nil {
		return nil
	}
	return mkagd.Dosage
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkagd *MedicationKnowledgeAdministrationGuidelinesDosage) GetExtension() []*fhir.Extension {
	if mkagd == nil {
		return nil
	}
	return mkagd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkagd *MedicationKnowledgeAdministrationGuidelinesDosage) GetID() string {
	if mkagd == nil {
		return ""
	}
	return mkagd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkagd *MedicationKnowledgeAdministrationGuidelinesDosage) GetModifierExtension() []*fhir.Extension {
	if mkagd == nil {
		return nil
	}
	return mkagd.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkagd *MedicationKnowledgeAdministrationGuidelinesDosage) GetType() *fhir.CodeableConcept {
	if mkagd == nil {
		return nil
	}
	return mkagd.Type
}

// Characteristics of the patient that are relevant to the administration
// guidelines// Characteristics of the patient that are relevant to the administration
// guidelines (for example, height, weight, gender, etc.).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics struct {

	// Specific characteristic that is relevant to the administration guideline
	// (e.g. height, weight, gender).
	Characteristic fhir.Element `fhirpath:"characteristic"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The specific characteristic (e.g. height, weight, gender, etc.).
	Value []*fhir.String `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCharacteristic returns the value of the field Characteristic.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkagpc *MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics) GetCharacteristic() fhir.Element {
	if mkagpc == nil {
		return nil
	}
	return mkagpc.Characteristic
}

// GetCharacteristicCodeableConcept returns the value of the field Characteristic.
func (mkagpc *MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics) GetCharacteristicCodeableConcept() *fhir.CodeableConcept {
	if mkagpc == nil {
		return nil
	}
	val, ok := mkagpc.Characteristic.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetCharacteristicQuantity returns the value of the field Characteristic.
func (mkagpc *MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics) GetCharacteristicQuantity() *fhir.Quantity {
	if mkagpc == nil {
		return nil
	}
	val, ok := mkagpc.Characteristic.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkagpc *MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics) GetExtension() []*fhir.Extension {
	if mkagpc == nil {
		return nil
	}
	return mkagpc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkagpc *MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics) GetID() string {
	if mkagpc == nil {
		return ""
	}
	return mkagpc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkagpc *MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics) GetModifierExtension() []*fhir.Extension {
	if mkagpc == nil {
		return nil
	}
	return mkagpc.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkagpc *MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics) GetValue() []*fhir.String {
	if mkagpc == nil {
		return nil
	}
	return mkagpc.Value
}

// The pricing of the medication// The price of the medication.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeCost struct {

	// The price of the medication.
	Cost *fhir.Money `fhirpath:"cost"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The source or owner that assigns the price to the medication.
	Source *fhir.String `fhirpath:"source"`

	// The category of the cost information. For example, manufacturers' cost,
	// patient cost, claim reimbursement cost, actual acquisition cost.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCost returns the value of the field Cost.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkc *MedicationKnowledgeCost) GetCost() *fhir.Money {
	if mkc == nil {
		return nil
	}
	return mkc.Cost
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkc *MedicationKnowledgeCost) GetExtension() []*fhir.Extension {
	if mkc == nil {
		return nil
	}
	return mkc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkc *MedicationKnowledgeCost) GetID() string {
	if mkc == nil {
		return ""
	}
	return mkc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkc *MedicationKnowledgeCost) GetModifierExtension() []*fhir.Extension {
	if mkc == nil {
		return nil
	}
	return mkc.ModifierExtension
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkc *MedicationKnowledgeCost) GetSource() *fhir.String {
	if mkc == nil {
		return nil
	}
	return mkc.Source
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkc *MedicationKnowledgeCost) GetType() *fhir.CodeableConcept {
	if mkc == nil {
		return nil
	}
	return mkc.Type
}

// Specifies descriptive properties of the medicine// Specifies descriptive properties of the medicine, such as color, shape,
// imprints, etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeDrugCharacteristic struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A code specifying which characteristic of the medicine is being described
	// (for example, colour, shape, imprint).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// Description of the characteristic.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkdc *MedicationKnowledgeDrugCharacteristic) GetExtension() []*fhir.Extension {
	if mkdc == nil {
		return nil
	}
	return mkdc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkdc *MedicationKnowledgeDrugCharacteristic) GetID() string {
	if mkdc == nil {
		return ""
	}
	return mkdc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkdc *MedicationKnowledgeDrugCharacteristic) GetModifierExtension() []*fhir.Extension {
	if mkdc == nil {
		return nil
	}
	return mkdc.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkdc *MedicationKnowledgeDrugCharacteristic) GetType() *fhir.CodeableConcept {
	if mkdc == nil {
		return nil
	}
	return mkdc.Type
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkdc *MedicationKnowledgeDrugCharacteristic) GetValue() fhir.Element {
	if mkdc == nil {
		return nil
	}
	return mkdc.Value
}

// GetValueCodeableConcept returns the value of the field Value.
func (mkdc *MedicationKnowledgeDrugCharacteristic) GetValueCodeableConcept() *fhir.CodeableConcept {
	if mkdc == nil {
		return nil
	}
	val, ok := mkdc.Value.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetValueString returns the value of the field Value.
func (mkdc *MedicationKnowledgeDrugCharacteristic) GetValueString() *fhir.String {
	if mkdc == nil {
		return nil
	}
	val, ok := mkdc.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueQuantity returns the value of the field Value.
func (mkdc *MedicationKnowledgeDrugCharacteristic) GetValueQuantity() *fhir.Quantity {
	if mkdc == nil {
		return nil
	}
	val, ok := mkdc.Value.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetValueBase64Binary returns the value of the field Value.
func (mkdc *MedicationKnowledgeDrugCharacteristic) GetValueBase64Binary() *fhir.Base64Binary {
	if mkdc == nil {
		return nil
	}
	val, ok := mkdc.Value.(*fhir.Base64Binary)
	if !ok {
		return nil
	}
	return val
}

// Active or inactive ingredient// Identifies a particular constituent of interest in the product.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeIngredient struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Indication of whether this ingredient affects the therapeutic action of the
	// drug.
	IsActive *fhir.Boolean `fhirpath:"isActive"`

	// The actual ingredient - either a substance (simple ingredient) or another
	// medication.
	Item fhir.Element `fhirpath:"item"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Specifies how many (or how much) of the items there are in this Medication.
	// For example, 250 mg per tablet. This is expressed as a ratio where the
	// numerator is 250mg and the denominator is 1 tablet.
	Strength *fhir.Ratio `fhirpath:"strength"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mki *MedicationKnowledgeIngredient) GetExtension() []*fhir.Extension {
	if mki == nil {
		return nil
	}
	return mki.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mki *MedicationKnowledgeIngredient) GetID() string {
	if mki == nil {
		return ""
	}
	return mki.ID
}

// GetIsActive returns the value of the field IsActive.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mki *MedicationKnowledgeIngredient) GetIsActive() *fhir.Boolean {
	if mki == nil {
		return nil
	}
	return mki.IsActive
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mki *MedicationKnowledgeIngredient) GetItem() fhir.Element {
	if mki == nil {
		return nil
	}
	return mki.Item
}

// GetItemCodeableConcept returns the value of the field Item.
func (mki *MedicationKnowledgeIngredient) GetItemCodeableConcept() *fhir.CodeableConcept {
	if mki == nil {
		return nil
	}
	val, ok := mki.Item.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetItemReference returns the value of the field Item.
func (mki *MedicationKnowledgeIngredient) GetItemReference() *fhir.Reference {
	if mki == nil {
		return nil
	}
	val, ok := mki.Item.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mki *MedicationKnowledgeIngredient) GetModifierExtension() []*fhir.Extension {
	if mki == nil {
		return nil
	}
	return mki.ModifierExtension
}

// GetStrength returns the value of the field Strength.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mki *MedicationKnowledgeIngredient) GetStrength() *fhir.Ratio {
	if mki == nil {
		return nil
	}
	return mki.Strength
}

// The time course of drug absorption, distribution, metabolism and excretion
// of a medication from the body// The time course of drug absorption, distribution, metabolism and excretion
// of a medication from the body.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeKinetics struct {

	// The drug concentration measured at certain discrete points in time.
	AreaUnderCurve []*fhir.Quantity `fhirpath:"areaUnderCurve"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The time required for any specified property (e.g., the concentration of a
	// substance in the body) to decrease by half.
	HalfLifePeriod *fhir.Duration `fhirpath:"halfLifePeriod"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The median lethal dose of a drug.
	LethalDose50 []*fhir.Quantity `fhirpath:"lethalDose50"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAreaUnderCurve returns the value of the field AreaUnderCurve.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkk *MedicationKnowledgeKinetics) GetAreaUnderCurve() []*fhir.Quantity {
	if mkk == nil {
		return nil
	}
	return mkk.AreaUnderCurve
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkk *MedicationKnowledgeKinetics) GetExtension() []*fhir.Extension {
	if mkk == nil {
		return nil
	}
	return mkk.Extension
}

// GetHalfLifePeriod returns the value of the field HalfLifePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkk *MedicationKnowledgeKinetics) GetHalfLifePeriod() *fhir.Duration {
	if mkk == nil {
		return nil
	}
	return mkk.HalfLifePeriod
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkk *MedicationKnowledgeKinetics) GetID() string {
	if mkk == nil {
		return ""
	}
	return mkk.ID
}

// GetLethalDose50 returns the value of the field LethalDose50.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkk *MedicationKnowledgeKinetics) GetLethalDose50() []*fhir.Quantity {
	if mkk == nil {
		return nil
	}
	return mkk.LethalDose50
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkk *MedicationKnowledgeKinetics) GetModifierExtension() []*fhir.Extension {
	if mkk == nil {
		return nil
	}
	return mkk.ModifierExtension
}

// Categorization of the medication within a formulary or classification system// Categorization of the medication within a formulary or classification
// system.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeMedicineClassification struct {

	// Specific category assigned to the medication (e.g. anti-infective,
	// anti-hypertensive, antibiotic, etc.).
	Classification []*fhir.CodeableConcept `fhirpath:"classification"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type of category for the medication (for example, therapeutic
	// classification, therapeutic sub-classification).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetClassification returns the value of the field Classification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkmc *MedicationKnowledgeMedicineClassification) GetClassification() []*fhir.CodeableConcept {
	if mkmc == nil {
		return nil
	}
	return mkmc.Classification
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkmc *MedicationKnowledgeMedicineClassification) GetExtension() []*fhir.Extension {
	if mkmc == nil {
		return nil
	}
	return mkmc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkmc *MedicationKnowledgeMedicineClassification) GetID() string {
	if mkmc == nil {
		return ""
	}
	return mkmc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkmc *MedicationKnowledgeMedicineClassification) GetModifierExtension() []*fhir.Extension {
	if mkmc == nil {
		return nil
	}
	return mkmc.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkmc *MedicationKnowledgeMedicineClassification) GetType() *fhir.CodeableConcept {
	if mkmc == nil {
		return nil
	}
	return mkmc.Type
}

// Program under which a medication is reviewed// The program under which the medication is reviewed.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeMonitoringProgram struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Name of the reviewing program.
	Name *fhir.String `fhirpath:"name"`

	// Type of program under which the medication is monitored.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkmp *MedicationKnowledgeMonitoringProgram) GetExtension() []*fhir.Extension {
	if mkmp == nil {
		return nil
	}
	return mkmp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkmp *MedicationKnowledgeMonitoringProgram) GetID() string {
	if mkmp == nil {
		return ""
	}
	return mkmp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkmp *MedicationKnowledgeMonitoringProgram) GetModifierExtension() []*fhir.Extension {
	if mkmp == nil {
		return nil
	}
	return mkmp.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkmp *MedicationKnowledgeMonitoringProgram) GetName() *fhir.String {
	if mkmp == nil {
		return nil
	}
	return mkmp.Name
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkmp *MedicationKnowledgeMonitoringProgram) GetType() *fhir.CodeableConcept {
	if mkmp == nil {
		return nil
	}
	return mkmp.Type
}

// Associated documentation about the medication// Associated documentation about the medication.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeMonograph struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Associated documentation about the medication.
	Source *fhir.Reference `fhirpath:"source"`

	// The category of documentation about the medication. (e.g. professional
	// monograph, patient education monograph).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkm *MedicationKnowledgeMonograph) GetExtension() []*fhir.Extension {
	if mkm == nil {
		return nil
	}
	return mkm.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkm *MedicationKnowledgeMonograph) GetID() string {
	if mkm == nil {
		return ""
	}
	return mkm.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkm *MedicationKnowledgeMonograph) GetModifierExtension() []*fhir.Extension {
	if mkm == nil {
		return nil
	}
	return mkm.ModifierExtension
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkm *MedicationKnowledgeMonograph) GetSource() *fhir.Reference {
	if mkm == nil {
		return nil
	}
	return mkm.Source
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkm *MedicationKnowledgeMonograph) GetType() *fhir.CodeableConcept {
	if mkm == nil {
		return nil
	}
	return mkm.Type
}

// Details about packaged medications// Information that only applies to packages (not products).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgePackaging struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The number of product units the package would contain if fully loaded.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// A code that defines the specific type of packaging that the medication can
	// be found in (e.g. blister sleeve, tube, bottle).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkp *MedicationKnowledgePackaging) GetExtension() []*fhir.Extension {
	if mkp == nil {
		return nil
	}
	return mkp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkp *MedicationKnowledgePackaging) GetID() string {
	if mkp == nil {
		return ""
	}
	return mkp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkp *MedicationKnowledgePackaging) GetModifierExtension() []*fhir.Extension {
	if mkp == nil {
		return nil
	}
	return mkp.ModifierExtension
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkp *MedicationKnowledgePackaging) GetQuantity() *fhir.Quantity {
	if mkp == nil {
		return nil
	}
	return mkp.Quantity
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkp *MedicationKnowledgePackaging) GetType() *fhir.CodeableConcept {
	if mkp == nil {
		return nil
	}
	return mkp.Type
}

// Regulatory information about a medication// Regulatory information about a medication.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeRegulatory struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The maximum number of units of the medication that can be dispensed in a
	// period.
	MaxDispense *MedicationKnowledgeRegulatoryMaxDispense `fhirpath:"maxDispense"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The authority that is specifying the regulations.
	RegulatoryAuthority *fhir.Reference `fhirpath:"regulatoryAuthority"`

	// Specifies the schedule of a medication in jurisdiction.
	Schedule []*MedicationKnowledgeRegulatorySchedule `fhirpath:"schedule"`

	// Specifies if changes are allowed when dispensing a medication from a
	// regulatory perspective.
	Substitution []*MedicationKnowledgeRegulatorySubstitution `fhirpath:"substitution"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkr *MedicationKnowledgeRegulatory) GetExtension() []*fhir.Extension {
	if mkr == nil {
		return nil
	}
	return mkr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkr *MedicationKnowledgeRegulatory) GetID() string {
	if mkr == nil {
		return ""
	}
	return mkr.ID
}

// GetMaxDispense returns the value of the field MaxDispense.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkr *MedicationKnowledgeRegulatory) GetMaxDispense() *MedicationKnowledgeRegulatoryMaxDispense {
	if mkr == nil {
		return nil
	}
	return mkr.MaxDispense
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkr *MedicationKnowledgeRegulatory) GetModifierExtension() []*fhir.Extension {
	if mkr == nil {
		return nil
	}
	return mkr.ModifierExtension
}

// GetRegulatoryAuthority returns the value of the field RegulatoryAuthority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkr *MedicationKnowledgeRegulatory) GetRegulatoryAuthority() *fhir.Reference {
	if mkr == nil {
		return nil
	}
	return mkr.RegulatoryAuthority
}

// GetSchedule returns the value of the field Schedule.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkr *MedicationKnowledgeRegulatory) GetSchedule() []*MedicationKnowledgeRegulatorySchedule {
	if mkr == nil {
		return nil
	}
	return mkr.Schedule
}

// GetSubstitution returns the value of the field Substitution.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkr *MedicationKnowledgeRegulatory) GetSubstitution() []*MedicationKnowledgeRegulatorySubstitution {
	if mkr == nil {
		return nil
	}
	return mkr.Substitution
}

// The maximum number of units of the medication that can be dispensed in a
// period// The maximum number of units of the medication that can be dispensed in a
// period.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeRegulatoryMaxDispense struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The period that applies to the maximum number of units.
	Period *fhir.Duration `fhirpath:"period"`

	// The maximum number of units of the medication that can be dispensed.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrmd *MedicationKnowledgeRegulatoryMaxDispense) GetExtension() []*fhir.Extension {
	if mkrmd == nil {
		return nil
	}
	return mkrmd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrmd *MedicationKnowledgeRegulatoryMaxDispense) GetID() string {
	if mkrmd == nil {
		return ""
	}
	return mkrmd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrmd *MedicationKnowledgeRegulatoryMaxDispense) GetModifierExtension() []*fhir.Extension {
	if mkrmd == nil {
		return nil
	}
	return mkrmd.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrmd *MedicationKnowledgeRegulatoryMaxDispense) GetPeriod() *fhir.Duration {
	if mkrmd == nil {
		return nil
	}
	return mkrmd.Period
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrmd *MedicationKnowledgeRegulatoryMaxDispense) GetQuantity() *fhir.Quantity {
	if mkrmd == nil {
		return nil
	}
	return mkrmd.Quantity
}

// Specifies the schedule of a medication in jurisdiction// Specifies the schedule of a medication in jurisdiction.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeRegulatorySchedule struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Specifies the specific drug schedule.
	Schedule *fhir.CodeableConcept `fhirpath:"schedule"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrs *MedicationKnowledgeRegulatorySchedule) GetExtension() []*fhir.Extension {
	if mkrs == nil {
		return nil
	}
	return mkrs.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrs *MedicationKnowledgeRegulatorySchedule) GetID() string {
	if mkrs == nil {
		return ""
	}
	return mkrs.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrs *MedicationKnowledgeRegulatorySchedule) GetModifierExtension() []*fhir.Extension {
	if mkrs == nil {
		return nil
	}
	return mkrs.ModifierExtension
}

// GetSchedule returns the value of the field Schedule.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrs *MedicationKnowledgeRegulatorySchedule) GetSchedule() *fhir.CodeableConcept {
	if mkrs == nil {
		return nil
	}
	return mkrs.Schedule
}

// Specifies if changes are allowed when dispensing a medication from a
// regulatory perspective// Specifies if changes are allowed when dispensing a medication from a
// regulatory perspective.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeRegulatorySubstitution struct {

	// Specifies if regulation allows for changes in the medication when
	// dispensing.
	Allowed *fhir.Boolean `fhirpath:"allowed"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Specifies the type of substitution allowed.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAllowed returns the value of the field Allowed.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrs *MedicationKnowledgeRegulatorySubstitution) GetAllowed() *fhir.Boolean {
	if mkrs == nil {
		return nil
	}
	return mkrs.Allowed
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrs *MedicationKnowledgeRegulatorySubstitution) GetExtension() []*fhir.Extension {
	if mkrs == nil {
		return nil
	}
	return mkrs.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrs *MedicationKnowledgeRegulatorySubstitution) GetID() string {
	if mkrs == nil {
		return ""
	}
	return mkrs.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrs *MedicationKnowledgeRegulatorySubstitution) GetModifierExtension() []*fhir.Extension {
	if mkrs == nil {
		return nil
	}
	return mkrs.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrs *MedicationKnowledgeRegulatorySubstitution) GetType() *fhir.CodeableConcept {
	if mkrs == nil {
		return nil
	}
	return mkrs.Type
}

// Associated or related medication information// Associated or related knowledge about a medication.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationKnowledge.json
type MedicationKnowledgeRelatedMedicationKnowledge struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Associated documentation about the associated medication knowledge.
	Reference []*fhir.Reference `fhirpath:"reference"`

	// The category of the associated medication knowledge reference.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrmk *MedicationKnowledgeRelatedMedicationKnowledge) GetExtension() []*fhir.Extension {
	if mkrmk == nil {
		return nil
	}
	return mkrmk.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrmk *MedicationKnowledgeRelatedMedicationKnowledge) GetID() string {
	if mkrmk == nil {
		return ""
	}
	return mkrmk.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrmk *MedicationKnowledgeRelatedMedicationKnowledge) GetModifierExtension() []*fhir.Extension {
	if mkrmk == nil {
		return nil
	}
	return mkrmk.ModifierExtension
}

// GetReference returns the value of the field Reference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrmk *MedicationKnowledgeRelatedMedicationKnowledge) GetReference() []*fhir.Reference {
	if mkrmk == nil {
		return nil
	}
	return mkrmk.Reference
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mkrmk *MedicationKnowledgeRelatedMedicationKnowledge) GetType() *fhir.CodeableConcept {
	if mkrmk == nil {
		return nil
	}
	return mkrmk.Type
}

func (mk *MedicationKnowledge) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mk *MedicationKnowledge) UnmarshalJSON(data []byte) error {
	var raw struct {
		AdministrationGuidelines []*MedicationKnowledgeAdministrationGuidelines `json:"administrationGuidelines"`
		Amount                   *fhir.Quantity                                 `json:"amount"`
		AssociatedMedication     []*fhir.Reference                              `json:"associatedMedication"`
		Code                     *fhir.CodeableConcept                          `json:"code"`
		Contained                []fhir.Resource                                `json:"contained"`
		Contraindication         []*fhir.Reference                              `json:"contraindication"`
		Cost                     []*MedicationKnowledgeCost                     `json:"cost"`
		DoseForm                 *fhir.CodeableConcept                          `json:"doseForm"`
		DrugCharacteristic       []*MedicationKnowledgeDrugCharacteristic       `json:"drugCharacteristic"`
		Extension                []*fhir.Extension                              `json:"extension"`

		ID                         string                                           `json:"id"`
		ImplicitRules              *fhir.URI                                        `json:"implicitRules"`
		Ingredient                 []*MedicationKnowledgeIngredient                 `json:"ingredient"`
		IntendedRoute              []*fhir.CodeableConcept                          `json:"intendedRoute"`
		Kinetics                   []*MedicationKnowledgeKinetics                   `json:"kinetics"`
		Language                   *fhir.Code                                       `json:"language"`
		Manufacturer               *fhir.Reference                                  `json:"manufacturer"`
		MedicineClassification     []*MedicationKnowledgeMedicineClassification     `json:"medicineClassification"`
		Meta                       *fhir.Meta                                       `json:"meta"`
		ModifierExtension          []*fhir.Extension                                `json:"modifierExtension"`
		MonitoringProgram          []*MedicationKnowledgeMonitoringProgram          `json:"monitoringProgram"`
		Monograph                  []*MedicationKnowledgeMonograph                  `json:"monograph"`
		Packaging                  *MedicationKnowledgePackaging                    `json:"packaging"`
		PreparationInstruction     *fhir.Markdown                                   `json:"preparationInstruction"`
		ProductType                []*fhir.CodeableConcept                          `json:"productType"`
		Regulatory                 []*MedicationKnowledgeRegulatory                 `json:"regulatory"`
		RelatedMedicationKnowledge []*MedicationKnowledgeRelatedMedicationKnowledge `json:"relatedMedicationKnowledge"`
		Status                     *fhir.Code                                       `json:"status"`
		Synonym                    []*fhir.String                                   `json:"synonym"`
		Text                       *fhir.Narrative                                  `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mk.AdministrationGuidelines = raw.AdministrationGuidelines
	mk.Amount = raw.Amount
	mk.AssociatedMedication = raw.AssociatedMedication
	mk.Code = raw.Code
	mk.Contained = raw.Contained
	mk.Contraindication = raw.Contraindication
	mk.Cost = raw.Cost
	mk.DoseForm = raw.DoseForm
	mk.DrugCharacteristic = raw.DrugCharacteristic
	mk.Extension = raw.Extension
	mk.ID = raw.ID
	mk.ImplicitRules = raw.ImplicitRules
	mk.Ingredient = raw.Ingredient
	mk.IntendedRoute = raw.IntendedRoute
	mk.Kinetics = raw.Kinetics
	mk.Language = raw.Language
	mk.Manufacturer = raw.Manufacturer
	mk.MedicineClassification = raw.MedicineClassification
	mk.Meta = raw.Meta
	mk.ModifierExtension = raw.ModifierExtension
	mk.MonitoringProgram = raw.MonitoringProgram
	mk.Monograph = raw.Monograph
	mk.Packaging = raw.Packaging
	mk.PreparationInstruction = raw.PreparationInstruction
	mk.ProductType = raw.ProductType
	mk.Regulatory = raw.Regulatory
	mk.RelatedMedicationKnowledge = raw.RelatedMedicationKnowledge
	mk.Status = raw.Status
	mk.Synonym = raw.Synonym
	mk.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*MedicationKnowledge)(nil)
var _ json.Unmarshaler = (*MedicationKnowledge)(nil)

func (mkag *MedicationKnowledgeAdministrationGuidelines) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkag *MedicationKnowledgeAdministrationGuidelines) UnmarshalJSON(data []byte) error {
	var raw struct {
		Dosage    []*MedicationKnowledgeAdministrationGuidelinesDosage `json:"dosage"`
		Extension []*fhir.Extension                                    `json:"extension"`

		ID                        string                                                               `json:"id"`
		IndicationCodeableConcept *fhir.CodeableConcept                                                `json:"indicationCodeableConcept"`
		IndicationReference       *fhir.Reference                                                      `json:"indicationReference"`
		ModifierExtension         []*fhir.Extension                                                    `json:"modifierExtension"`
		PatientCharacteristics    []*MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics `json:"patientCharacteristics"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkag.Dosage = raw.Dosage
	mkag.Extension = raw.Extension
	mkag.ID = raw.ID
	mkag.Indication, err = validate.SelectOneOf[fhir.Element]("MedicationKnowledge.administrationGuidelines.indication",
		raw.IndicationCodeableConcept,
		raw.IndicationReference)
	if err != nil {
		return err
	}
	mkag.ModifierExtension = raw.ModifierExtension
	mkag.PatientCharacteristics = raw.PatientCharacteristics
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeAdministrationGuidelines)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeAdministrationGuidelines)(nil)

func (mkagd *MedicationKnowledgeAdministrationGuidelinesDosage) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkagd *MedicationKnowledgeAdministrationGuidelinesDosage) UnmarshalJSON(data []byte) error {
	var raw struct {
		Dosage    []*fhir.Dosage    `json:"dosage"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkagd.Dosage = raw.Dosage
	mkagd.Extension = raw.Extension
	mkagd.ID = raw.ID
	mkagd.ModifierExtension = raw.ModifierExtension
	mkagd.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeAdministrationGuidelinesDosage)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeAdministrationGuidelinesDosage)(nil)

func (mkagpc *MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkagpc *MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics) UnmarshalJSON(data []byte) error {
	var raw struct {
		CharacteristicCodeableConcept *fhir.CodeableConcept `json:"characteristicCodeableConcept"`
		CharacteristicQuantity        *fhir.Quantity        `json:"characteristicQuantity"`
		Extension                     []*fhir.Extension     `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Value             []*fhir.String    `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkagpc.Characteristic, err = validate.SelectOneOf[fhir.Element]("MedicationKnowledge.administrationGuidelines.patientCharacteristics.characteristic",
		raw.CharacteristicCodeableConcept,
		raw.CharacteristicQuantity)
	if err != nil {
		return err
	}
	mkagpc.Extension = raw.Extension
	mkagpc.ID = raw.ID
	mkagpc.ModifierExtension = raw.ModifierExtension
	mkagpc.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics)(nil)

func (mkc *MedicationKnowledgeCost) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkc *MedicationKnowledgeCost) UnmarshalJSON(data []byte) error {
	var raw struct {
		Cost      *fhir.Money       `json:"cost"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Source            *fhir.String          `json:"source"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkc.Cost = raw.Cost
	mkc.Extension = raw.Extension
	mkc.ID = raw.ID
	mkc.ModifierExtension = raw.ModifierExtension
	mkc.Source = raw.Source
	mkc.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeCost)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeCost)(nil)

func (mkdc *MedicationKnowledgeDrugCharacteristic) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkdc *MedicationKnowledgeDrugCharacteristic) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                   string                `json:"id"`
		ModifierExtension    []*fhir.Extension     `json:"modifierExtension"`
		Type                 *fhir.CodeableConcept `json:"type"`
		ValueCodeableConcept *fhir.CodeableConcept `json:"valueCodeableConcept"`
		ValueString          *fhir.String          `json:"valueString"`
		ValueQuantity        *fhir.Quantity        `json:"valueQuantity"`
		ValueBase64Binary    *fhir.Base64Binary    `json:"valueBase64Binary"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkdc.Extension = raw.Extension
	mkdc.ID = raw.ID
	mkdc.ModifierExtension = raw.ModifierExtension
	mkdc.Type = raw.Type
	mkdc.Value, err = validate.SelectOneOf[fhir.Element]("MedicationKnowledge.drugCharacteristic.value",
		raw.ValueCodeableConcept,
		raw.ValueString,
		raw.ValueQuantity,
		raw.ValueBase64Binary)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeDrugCharacteristic)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeDrugCharacteristic)(nil)

func (mki *MedicationKnowledgeIngredient) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mki *MedicationKnowledgeIngredient) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                  string                `json:"id"`
		IsActive            *fhir.Boolean         `json:"isActive"`
		ItemCodeableConcept *fhir.CodeableConcept `json:"itemCodeableConcept"`
		ItemReference       *fhir.Reference       `json:"itemReference"`
		ModifierExtension   []*fhir.Extension     `json:"modifierExtension"`
		Strength            *fhir.Ratio           `json:"strength"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mki.Extension = raw.Extension
	mki.ID = raw.ID
	mki.IsActive = raw.IsActive
	mki.Item, err = validate.SelectOneOf[fhir.Element]("MedicationKnowledge.ingredient.item",
		raw.ItemCodeableConcept,
		raw.ItemReference)
	if err != nil {
		return err
	}
	mki.ModifierExtension = raw.ModifierExtension
	mki.Strength = raw.Strength
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeIngredient)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeIngredient)(nil)

func (mkk *MedicationKnowledgeKinetics) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkk *MedicationKnowledgeKinetics) UnmarshalJSON(data []byte) error {
	var raw struct {
		AreaUnderCurve []*fhir.Quantity  `json:"areaUnderCurve"`
		Extension      []*fhir.Extension `json:"extension"`
		HalfLifePeriod *fhir.Duration    `json:"halfLifePeriod"`

		ID                string            `json:"id"`
		LethalDose50      []*fhir.Quantity  `json:"lethalDose50"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkk.AreaUnderCurve = raw.AreaUnderCurve
	mkk.Extension = raw.Extension
	mkk.HalfLifePeriod = raw.HalfLifePeriod
	mkk.ID = raw.ID
	mkk.LethalDose50 = raw.LethalDose50
	mkk.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeKinetics)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeKinetics)(nil)

func (mkmc *MedicationKnowledgeMedicineClassification) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkmc *MedicationKnowledgeMedicineClassification) UnmarshalJSON(data []byte) error {
	var raw struct {
		Classification []*fhir.CodeableConcept `json:"classification"`
		Extension      []*fhir.Extension       `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkmc.Classification = raw.Classification
	mkmc.Extension = raw.Extension
	mkmc.ID = raw.ID
	mkmc.ModifierExtension = raw.ModifierExtension
	mkmc.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeMedicineClassification)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeMedicineClassification)(nil)

func (mkmp *MedicationKnowledgeMonitoringProgram) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkmp *MedicationKnowledgeMonitoringProgram) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Name              *fhir.String          `json:"name"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkmp.Extension = raw.Extension
	mkmp.ID = raw.ID
	mkmp.ModifierExtension = raw.ModifierExtension
	mkmp.Name = raw.Name
	mkmp.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeMonitoringProgram)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeMonitoringProgram)(nil)

func (mkm *MedicationKnowledgeMonograph) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkm *MedicationKnowledgeMonograph) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Source            *fhir.Reference       `json:"source"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkm.Extension = raw.Extension
	mkm.ID = raw.ID
	mkm.ModifierExtension = raw.ModifierExtension
	mkm.Source = raw.Source
	mkm.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeMonograph)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeMonograph)(nil)

func (mkp *MedicationKnowledgePackaging) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkp *MedicationKnowledgePackaging) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Quantity          *fhir.Quantity        `json:"quantity"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkp.Extension = raw.Extension
	mkp.ID = raw.ID
	mkp.ModifierExtension = raw.ModifierExtension
	mkp.Quantity = raw.Quantity
	mkp.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgePackaging)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgePackaging)(nil)

func (mkr *MedicationKnowledgeRegulatory) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkr *MedicationKnowledgeRegulatory) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                  string                                       `json:"id"`
		MaxDispense         *MedicationKnowledgeRegulatoryMaxDispense    `json:"maxDispense"`
		ModifierExtension   []*fhir.Extension                            `json:"modifierExtension"`
		RegulatoryAuthority *fhir.Reference                              `json:"regulatoryAuthority"`
		Schedule            []*MedicationKnowledgeRegulatorySchedule     `json:"schedule"`
		Substitution        []*MedicationKnowledgeRegulatorySubstitution `json:"substitution"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkr.Extension = raw.Extension
	mkr.ID = raw.ID
	mkr.MaxDispense = raw.MaxDispense
	mkr.ModifierExtension = raw.ModifierExtension
	mkr.RegulatoryAuthority = raw.RegulatoryAuthority
	mkr.Schedule = raw.Schedule
	mkr.Substitution = raw.Substitution
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeRegulatory)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeRegulatory)(nil)

func (mkrmd *MedicationKnowledgeRegulatoryMaxDispense) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkrmd *MedicationKnowledgeRegulatoryMaxDispense) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Period            *fhir.Duration    `json:"period"`
		Quantity          *fhir.Quantity    `json:"quantity"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkrmd.Extension = raw.Extension
	mkrmd.ID = raw.ID
	mkrmd.ModifierExtension = raw.ModifierExtension
	mkrmd.Period = raw.Period
	mkrmd.Quantity = raw.Quantity
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeRegulatoryMaxDispense)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeRegulatoryMaxDispense)(nil)

func (mkrs *MedicationKnowledgeRegulatorySchedule) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkrs *MedicationKnowledgeRegulatorySchedule) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Schedule          *fhir.CodeableConcept `json:"schedule"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkrs.Extension = raw.Extension
	mkrs.ID = raw.ID
	mkrs.ModifierExtension = raw.ModifierExtension
	mkrs.Schedule = raw.Schedule
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeRegulatorySchedule)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeRegulatorySchedule)(nil)

func (mkrs *MedicationKnowledgeRegulatorySubstitution) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkrs *MedicationKnowledgeRegulatorySubstitution) UnmarshalJSON(data []byte) error {
	var raw struct {
		Allowed   *fhir.Boolean     `json:"allowed"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkrs.Allowed = raw.Allowed
	mkrs.Extension = raw.Extension
	mkrs.ID = raw.ID
	mkrs.ModifierExtension = raw.ModifierExtension
	mkrs.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeRegulatorySubstitution)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeRegulatorySubstitution)(nil)

func (mkrmk *MedicationKnowledgeRelatedMedicationKnowledge) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mkrmk *MedicationKnowledgeRelatedMedicationKnowledge) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Reference         []*fhir.Reference     `json:"reference"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mkrmk.Extension = raw.Extension
	mkrmk.ID = raw.ID
	mkrmk.ModifierExtension = raw.ModifierExtension
	mkrmk.Reference = raw.Reference
	mkrmk.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*MedicationKnowledgeRelatedMedicationKnowledge)(nil)
var _ json.Unmarshaler = (*MedicationKnowledgeRelatedMedicationKnowledge)(nil)
