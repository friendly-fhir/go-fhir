// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package specimen

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A sample to be used for analysis.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Specimen
//   - Source File: StructureDefinition-Specimen.json
type Specimen struct {

	// The identifier assigned by the lab when accessioning specimen(s). This is
	// not necessarily the same as the specimen identifier, depending on local lab
	// procedures.
	AccessionIdentifier *fhir.Identifier `fhirpath:"accessionIdentifier"`

	// Details concerning the specimen collection.
	Collection *SpecimenCollection `fhirpath:"collection"`

	// A mode or state of being that describes the nature of the specimen.
	Condition []*fhir.CodeableConcept `fhirpath:"condition"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The container holding the specimen. The recursive nature of containers; i.e.
	// blood in tube in tray in rack is not addressed here.
	Container []*SpecimenContainer `fhirpath:"container"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Id for specimen.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// To communicate any details or issues about the specimen or during the
	// specimen collection. (for example: broken vial, sent with patient, frozen).
	Note []*fhir.Annotation `fhirpath:"note"`

	// Reference to the parent (source) specimen which is used when the specimen
	// was either derived from or a component of another specimen.
	Parent []*fhir.Reference `fhirpath:"parent"`

	// Details concerning processing and processing steps for the specimen.
	Processing []*SpecimenProcessing `fhirpath:"processing"`

	// Time when specimen was received for processing or testing.
	ReceivedTime *fhir.DateTime `fhirpath:"receivedTime"`

	// Details concerning a service request that required a specimen to be
	// collected.
	Request []*fhir.Reference `fhirpath:"request"`

	// The availability of the specimen.
	Status *fhir.Code `fhirpath:"status"`

	// Where the specimen came from. This may be from patient(s), from a location
	// (e.g., the source of an environmental sample), or a sampling of a substance
	// or a device.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// The kind of material that forms the specimen.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAccessionIdentifier returns the value of the field AccessionIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetAccessionIdentifier() *fhir.Identifier {
	if s == nil {
		return nil
	}
	return s.AccessionIdentifier
}

// GetCollection returns the value of the field Collection.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetCollection() *SpecimenCollection {
	if s == nil {
		return nil
	}
	return s.Collection
}

// GetCondition returns the value of the field Condition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetCondition() []*fhir.CodeableConcept {
	if s == nil {
		return nil
	}
	return s.Condition
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetContained() []fhir.Resource {
	if s == nil {
		return nil
	}
	return s.Contained
}

// GetContainer returns the value of the field Container.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetContainer() []*SpecimenContainer {
	if s == nil {
		return nil
	}
	return s.Container
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetIdentifier() []*fhir.Identifier {
	if s == nil {
		return nil
	}
	return s.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetImplicitRules() *fhir.URI {
	if s == nil {
		return nil
	}
	return s.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetLanguage() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetMeta() *fhir.Meta {
	if s == nil {
		return nil
	}
	return s.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetModifierExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetNote() []*fhir.Annotation {
	if s == nil {
		return nil
	}
	return s.Note
}

// GetParent returns the value of the field Parent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetParent() []*fhir.Reference {
	if s == nil {
		return nil
	}
	return s.Parent
}

// GetProcessing returns the value of the field Processing.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetProcessing() []*SpecimenProcessing {
	if s == nil {
		return nil
	}
	return s.Processing
}

// GetReceivedTime returns the value of the field ReceivedTime.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetReceivedTime() *fhir.DateTime {
	if s == nil {
		return nil
	}
	return s.ReceivedTime
}

// GetRequest returns the value of the field Request.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetRequest() []*fhir.Reference {
	if s == nil {
		return nil
	}
	return s.Request
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetStatus() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetSubject() *fhir.Reference {
	if s == nil {
		return nil
	}
	return s.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetText() *fhir.Narrative {
	if s == nil {
		return nil
	}
	return s.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Specimen) GetType() *fhir.CodeableConcept {
	if s == nil {
		return nil
	}
	return s.Type
}

// Collection details// Details concerning the specimen collection.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Specimen.json
type SpecimenCollection struct {

	// Anatomical location from which the specimen was collected (if subject is a
	// patient). This is the target site. This element is not used for
	// environmental specimens.
	BodySite *fhir.CodeableConcept `fhirpath:"bodySite"`

	// Time when specimen was collected from subject - the physiologically relevant
	// time.
	Collected fhir.Element `fhirpath:"collected"`

	// Person who collected the specimen.
	Collector *fhir.Reference `fhirpath:"collector"`

	// The span of time over which the collection of a specimen occurred.
	Duration *fhir.Duration `fhirpath:"duration"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Abstinence or reduction from some or all food, drink, or both, for a period
	// of time prior to sample collection.
	FastingStatus fhir.Element `fhirpath:"fastingStatus"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A coded value specifying the technique that is used to perform the
	// procedure.
	Method *fhir.CodeableConcept `fhirpath:"method"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity of specimen collected; for instance the volume of a blood
	// sample, or the physical measurement of an anatomic pathology sample.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBodySite returns the value of the field BodySite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenCollection) GetBodySite() *fhir.CodeableConcept {
	if sc == nil {
		return nil
	}
	return sc.BodySite
}

// GetCollected returns the value of the field Collected.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenCollection) GetCollected() fhir.Element {
	if sc == nil {
		return nil
	}
	return sc.Collected
}

// GetCollectedDateTime returns the value of the field Collected.
func (sc *SpecimenCollection) GetCollectedDateTime() *fhir.DateTime {
	if sc == nil {
		return nil
	}
	val, ok := sc.Collected.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetCollectedPeriod returns the value of the field Collected.
func (sc *SpecimenCollection) GetCollectedPeriod() *fhir.Period {
	if sc == nil {
		return nil
	}
	val, ok := sc.Collected.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetCollector returns the value of the field Collector.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenCollection) GetCollector() *fhir.Reference {
	if sc == nil {
		return nil
	}
	return sc.Collector
}

// GetDuration returns the value of the field Duration.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenCollection) GetDuration() *fhir.Duration {
	if sc == nil {
		return nil
	}
	return sc.Duration
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenCollection) GetExtension() []*fhir.Extension {
	if sc == nil {
		return nil
	}
	return sc.Extension
}

// GetFastingStatus returns the value of the field FastingStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenCollection) GetFastingStatus() fhir.Element {
	if sc == nil {
		return nil
	}
	return sc.FastingStatus
}

// GetFastingStatusCodeableConcept returns the value of the field FastingStatus.
func (sc *SpecimenCollection) GetFastingStatusCodeableConcept() *fhir.CodeableConcept {
	if sc == nil {
		return nil
	}
	val, ok := sc.FastingStatus.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetFastingStatusDuration returns the value of the field FastingStatus.
func (sc *SpecimenCollection) GetFastingStatusDuration() *fhir.Duration {
	if sc == nil {
		return nil
	}
	val, ok := sc.FastingStatus.(*fhir.Duration)
	if !ok {
		return nil
	}
	return val
} // GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenCollection) GetID() string {
	if sc == nil {
		return ""
	}
	return sc.ID
}

// GetMethod returns the value of the field Method.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenCollection) GetMethod() *fhir.CodeableConcept {
	if sc == nil {
		return nil
	}
	return sc.Method
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenCollection) GetModifierExtension() []*fhir.Extension {
	if sc == nil {
		return nil
	}
	return sc.ModifierExtension
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenCollection) GetQuantity() *fhir.Quantity {
	if sc == nil {
		return nil
	}
	return sc.Quantity
}

// Direct container of specimen (tube/slide, etc.)// The container holding the specimen. The recursive nature of containers; i.e.
// blood in tube in tray in rack is not addressed here.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Specimen.json
type SpecimenContainer struct {

	// Introduced substance to preserve, maintain or enhance the specimen.
	// Examples: Formalin, Citrate, EDTA.
	Additive fhir.Element `fhirpath:"additive"`

	// The capacity (volume or other measure) the container may contain.
	Capacity *fhir.Quantity `fhirpath:"capacity"`

	// Textual description of the container.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Id for container. There may be multiple; a manufacturer's bar code, lab
	// assigned identifier, etc. The container ID may differ from the specimen id
	// in some circumstances.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity of specimen in the container; may be volume, dimensions, or
	// other appropriate measurements, depending on the specimen type.
	SpecimenQuantity *fhir.Quantity `fhirpath:"specimenQuantity"`

	// The type of container associated with the specimen (e.g. slide, aliquot,
	// etc.).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAdditive returns the value of the field Additive.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenContainer) GetAdditive() fhir.Element {
	if sc == nil {
		return nil
	}
	return sc.Additive
}

// GetAdditiveCodeableConcept returns the value of the field Additive.
func (sc *SpecimenContainer) GetAdditiveCodeableConcept() *fhir.CodeableConcept {
	if sc == nil {
		return nil
	}
	val, ok := sc.Additive.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetAdditiveReference returns the value of the field Additive.
func (sc *SpecimenContainer) GetAdditiveReference() *fhir.Reference {
	if sc == nil {
		return nil
	}
	val, ok := sc.Additive.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetCapacity returns the value of the field Capacity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenContainer) GetCapacity() *fhir.Quantity {
	if sc == nil {
		return nil
	}
	return sc.Capacity
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenContainer) GetDescription() *fhir.String {
	if sc == nil {
		return nil
	}
	return sc.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenContainer) GetExtension() []*fhir.Extension {
	if sc == nil {
		return nil
	}
	return sc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenContainer) GetID() string {
	if sc == nil {
		return ""
	}
	return sc.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenContainer) GetIdentifier() []*fhir.Identifier {
	if sc == nil {
		return nil
	}
	return sc.Identifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenContainer) GetModifierExtension() []*fhir.Extension {
	if sc == nil {
		return nil
	}
	return sc.ModifierExtension
}

// GetSpecimenQuantity returns the value of the field SpecimenQuantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenContainer) GetSpecimenQuantity() *fhir.Quantity {
	if sc == nil {
		return nil
	}
	return sc.SpecimenQuantity
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sc *SpecimenContainer) GetType() *fhir.CodeableConcept {
	if sc == nil {
		return nil
	}
	return sc.Type
}

// Processing and processing step details// Details concerning processing and processing steps for the specimen.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Specimen.json
type SpecimenProcessing struct {

	// Material used in the processing step.
	Additive []*fhir.Reference `fhirpath:"additive"`

	// Textual description of procedure.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A coded value specifying the procedure used to process the specimen.
	Procedure *fhir.CodeableConcept `fhirpath:"procedure"`

	// A record of the time or period when the specimen processing occurred. For
	// example the time of sample fixation or the period of time the sample was in
	// formalin.
	Time fhir.Element `fhirpath:"time"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAdditive returns the value of the field Additive.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SpecimenProcessing) GetAdditive() []*fhir.Reference {
	if sp == nil {
		return nil
	}
	return sp.Additive
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SpecimenProcessing) GetDescription() *fhir.String {
	if sp == nil {
		return nil
	}
	return sp.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SpecimenProcessing) GetExtension() []*fhir.Extension {
	if sp == nil {
		return nil
	}
	return sp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SpecimenProcessing) GetID() string {
	if sp == nil {
		return ""
	}
	return sp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SpecimenProcessing) GetModifierExtension() []*fhir.Extension {
	if sp == nil {
		return nil
	}
	return sp.ModifierExtension
}

// GetProcedure returns the value of the field Procedure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SpecimenProcessing) GetProcedure() *fhir.CodeableConcept {
	if sp == nil {
		return nil
	}
	return sp.Procedure
}

// GetTime returns the value of the field Time.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SpecimenProcessing) GetTime() fhir.Element {
	if sp == nil {
		return nil
	}
	return sp.Time
}

// GetTimeDateTime returns the value of the field Time.
func (sp *SpecimenProcessing) GetTimeDateTime() *fhir.DateTime {
	if sp == nil {
		return nil
	}
	val, ok := sp.Time.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetTimePeriod returns the value of the field Time.
func (sp *SpecimenProcessing) GetTimePeriod() *fhir.Period {
	if sp == nil {
		return nil
	}
	val, ok := sp.Time.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}
