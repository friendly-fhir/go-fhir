// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package devicemetric

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Describes a measurement, calculation or setting capability of a medical
// device.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/DeviceMetric
//   - Source File: StructureDefinition-DeviceMetric.json
type DeviceMetric struct {

	// Describes the calibrations that have been performed or that are required to
	// be performed.
	Calibration []*DeviceMetricCalibration `fhirpath:"calibration"`

	// Indicates the category of the observation generation process. A DeviceMetric
	// can be for example a setting, measurement, or calculation.
	Category *fhir.Code `fhirpath:"category"`

	// Describes the color representation for the metric. This is often used to aid
	// clinicians to track and identify parameter types by color. In practice,
	// consider a Patient Monitor that has ECG/HR and Pleth for example; the
	// parameters are displayed in different characteristic colors, such as
	// HR-blue, BP-green, and PR and SpO2- magenta.
	Color *fhir.Code `fhirpath:"color"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Unique instance identifiers assigned to a device by the device or gateway
	// software, manufacturers, other organizations or owners. For example: handle
	// ID.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Describes the measurement repetition time. This is not necessarily the same
	// as the update period. The measurement repetition time can range from
	// milliseconds up to hours. An example for a measurement repetition time in
	// the range of milliseconds is the sampling rate of an ECG. An example for a
	// measurement repetition time in the range of hours is a NIBP that is
	// triggered automatically every hour. The update period may be different than
	// the measurement repetition time, if the device does not update the published
	// observed value with the same frequency as it was measured.
	MeasurementPeriod *fhir.Timing `fhirpath:"measurementPeriod"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Indicates current operational state of the device. For example: On, Off,
	// Standby, etc.
	OperationalStatus *fhir.Code `fhirpath:"operationalStatus"`

	// Describes the link to the Device that this DeviceMetric belongs to and that
	// provide information about the location of this DeviceMetric in the
	// containment structure of the parent Device. An example would be a Device
	// that represents a Channel. This reference can be used by a client
	// application to distinguish DeviceMetrics that have the same type, but should
	// be interpreted based on their containment location.
	Parent *fhir.Reference `fhirpath:"parent"`

	// Describes the link to the Device that this DeviceMetric belongs to and that
	// contains administrative device information such as manufacturer, serial
	// number, etc.
	Source *fhir.Reference `fhirpath:"source"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Describes the type of the metric. For example: Heart Rate, PEEP Setting,
	// etc.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// Describes the unit that an observed value determined for this metric will
	// have. For example: Percent, Seconds, etc.
	Unit *fhir.CodeableConcept `fhirpath:"unit"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetCalibration returns the value of the field Calibration.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetCalibration() []*DeviceMetricCalibration {
	if dm == nil {
		return nil
	}
	return dm.Calibration
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetCategory() *fhir.Code {
	if dm == nil {
		return nil
	}
	return dm.Category
}

// GetColor returns the value of the field Color.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetColor() *fhir.Code {
	if dm == nil {
		return nil
	}
	return dm.Color
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetContained() []fhir.Resource {
	if dm == nil {
		return nil
	}
	return dm.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetExtension() []*fhir.Extension {
	if dm == nil {
		return nil
	}
	return dm.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetID() string {
	if dm == nil {
		return ""
	}
	return dm.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetIdentifier() []*fhir.Identifier {
	if dm == nil {
		return nil
	}
	return dm.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetImplicitRules() *fhir.URI {
	if dm == nil {
		return nil
	}
	return dm.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetLanguage() *fhir.Code {
	if dm == nil {
		return nil
	}
	return dm.Language
}

// GetMeasurementPeriod returns the value of the field MeasurementPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetMeasurementPeriod() *fhir.Timing {
	if dm == nil {
		return nil
	}
	return dm.MeasurementPeriod
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetMeta() *fhir.Meta {
	if dm == nil {
		return nil
	}
	return dm.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetModifierExtension() []*fhir.Extension {
	if dm == nil {
		return nil
	}
	return dm.ModifierExtension
}

// GetOperationalStatus returns the value of the field OperationalStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetOperationalStatus() *fhir.Code {
	if dm == nil {
		return nil
	}
	return dm.OperationalStatus
}

// GetParent returns the value of the field Parent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetParent() *fhir.Reference {
	if dm == nil {
		return nil
	}
	return dm.Parent
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetSource() *fhir.Reference {
	if dm == nil {
		return nil
	}
	return dm.Source
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetText() *fhir.Narrative {
	if dm == nil {
		return nil
	}
	return dm.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetType() *fhir.CodeableConcept {
	if dm == nil {
		return nil
	}
	return dm.Type
}

// GetUnit returns the value of the field Unit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dm *DeviceMetric) GetUnit() *fhir.CodeableConcept {
	if dm == nil {
		return nil
	}
	return dm.Unit
}

// Describes the calibrations that have been performed or that are required to
// be performed// Describes the calibrations that have been performed or that are required to
// be performed.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DeviceMetric.json
type DeviceMetricCalibration struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Describes the state of the calibration.
	State *fhir.Code `fhirpath:"state"`

	// Describes the time last calibration has been performed.
	Time *fhir.Instant `fhirpath:"time"`

	// Describes the type of the calibration method.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dmc *DeviceMetricCalibration) GetExtension() []*fhir.Extension {
	if dmc == nil {
		return nil
	}
	return dmc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dmc *DeviceMetricCalibration) GetID() string {
	if dmc == nil {
		return ""
	}
	return dmc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dmc *DeviceMetricCalibration) GetModifierExtension() []*fhir.Extension {
	if dmc == nil {
		return nil
	}
	return dmc.ModifierExtension
}

// GetState returns the value of the field State.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dmc *DeviceMetricCalibration) GetState() *fhir.Code {
	if dmc == nil {
		return nil
	}
	return dmc.State
}

// GetTime returns the value of the field Time.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dmc *DeviceMetricCalibration) GetTime() *fhir.Instant {
	if dmc == nil {
		return nil
	}
	return dmc.Time
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dmc *DeviceMetricCalibration) GetType() *fhir.Code {
	if dmc == nil {
		return nil
	}
	return dmc.Type
}
