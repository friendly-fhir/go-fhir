// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package devicedefinition

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// The characteristics, operational status and capabilities of a
// medical-related component of a medical device.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/DeviceDefinition
//   - Source File: StructureDefinition-DeviceDefinition.json
type DeviceDefinition struct {

	// Device capabilities.
	Capability []*DeviceDefinitionCapability `fhirpath:"capability"`

	// Contact details for an organization or a particular human that is
	// responsible for the device.
	Contact []*fhir.ContactPoint `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A name given to the device to identify it.
	DeviceName []*DeviceDefinitionDeviceName `fhirpath:"deviceName"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Unique instance identifiers assigned to a device by the software,
	// manufacturers, other organizations or owners. For example: handle ID.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Language code for the human-readable text strings produced by the device
	// (all supported).
	LanguageCode []*fhir.CodeableConcept `fhirpath:"languageCode"`

	// A name of the manufacturer.
	Manufacturer fhir.Element `fhirpath:"manufacturer"`

	// A substance used to create the material(s) of which the device is made.
	Material []*DeviceDefinitionMaterial `fhirpath:"material"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// The model number for the device.
	ModelNumber *fhir.String `fhirpath:"modelNumber"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Descriptive information, usage information or implantation information that
	// is not captured in an existing element.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Access to on-line information about the device.
	OnlineInformation *fhir.URI `fhirpath:"onlineInformation"`

	// An organization that is responsible for the provision and ongoing
	// maintenance of the device.
	Owner *fhir.Reference `fhirpath:"owner"`

	// The parent device it can be part of.
	ParentDevice *fhir.Reference `fhirpath:"parentDevice"`

	// Dimensions, color etc.
	PhysicalCharacteristics *fhir.ProdCharacteristic `fhirpath:"physicalCharacteristics"`

	// The actual configuration settings of a device as it actually operates, e.g.,
	// regulation status, time properties.
	Property []*DeviceDefinitionProperty `fhirpath:"property"`

	// The quantity of the device present in the packaging (e.g. the number of
	// devices present in a pack, or the number of devices in the same package of
	// the medicinal product).
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// Safety characteristics of the device.
	Safety []*fhir.CodeableConcept `fhirpath:"safety"`

	// Shelf Life and storage information.
	ShelfLifeStorage []*fhir.ProductShelfLife `fhirpath:"shelfLifeStorage"`

	// The capabilities supported on a device, the standards to which the device
	// conforms for a particular purpose, and used for the communication.
	Specialization []*DeviceDefinitionSpecialization `fhirpath:"specialization"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// What kind of device or device system this is.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// Unique device identifier (UDI) assigned to device label or package. Note
	// that the Device may include multiple udiCarriers as it either may include
	// just the udiCarrier for the jurisdiction it is sold, or for multiple
	// jurisdictions it could have been sold.
	UdiDeviceIdentifier []*DeviceDefinitionUdiDeviceIdentifier `fhirpath:"udiDeviceIdentifier"`

	// A network address on which the device may be contacted directly.
	URL *fhir.URI `fhirpath:"url"`

	// The available versions of the device, e.g., software versions.
	Version []*fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetCapability returns the value of the field Capability.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetCapability() []*DeviceDefinitionCapability {
	if dd == nil {
		return nil
	}
	return dd.Capability
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetContact() []*fhir.ContactPoint {
	if dd == nil {
		return nil
	}
	return dd.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetContained() []fhir.Resource {
	if dd == nil {
		return nil
	}
	return dd.Contained
}

// GetDeviceName returns the value of the field DeviceName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetDeviceName() []*DeviceDefinitionDeviceName {
	if dd == nil {
		return nil
	}
	return dd.DeviceName
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetExtension() []*fhir.Extension {
	if dd == nil {
		return nil
	}
	return dd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetID() string {
	if dd == nil {
		return ""
	}
	return dd.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetIdentifier() []*fhir.Identifier {
	if dd == nil {
		return nil
	}
	return dd.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetImplicitRules() *fhir.URI {
	if dd == nil {
		return nil
	}
	return dd.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetLanguage() *fhir.Code {
	if dd == nil {
		return nil
	}
	return dd.Language
}

// GetLanguageCode returns the value of the field LanguageCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetLanguageCode() []*fhir.CodeableConcept {
	if dd == nil {
		return nil
	}
	return dd.LanguageCode
}

// GetManufacturer returns the value of the field Manufacturer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetManufacturer() fhir.Element {
	if dd == nil {
		return nil
	}
	return dd.Manufacturer
}

// GetManufacturerString returns the value of the field Manufacturer.
func (dd *DeviceDefinition) GetManufacturerString() *fhir.String {
	if dd == nil {
		return nil
	}
	val, ok := dd.Manufacturer.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetManufacturerReference returns the value of the field Manufacturer.
func (dd *DeviceDefinition) GetManufacturerReference() *fhir.Reference {
	if dd == nil {
		return nil
	}
	val, ok := dd.Manufacturer.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetMaterial returns the value of the field Material.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetMaterial() []*DeviceDefinitionMaterial {
	if dd == nil {
		return nil
	}
	return dd.Material
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetMeta() *fhir.Meta {
	if dd == nil {
		return nil
	}
	return dd.Meta
}

// GetModelNumber returns the value of the field ModelNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetModelNumber() *fhir.String {
	if dd == nil {
		return nil
	}
	return dd.ModelNumber
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetModifierExtension() []*fhir.Extension {
	if dd == nil {
		return nil
	}
	return dd.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetNote() []*fhir.Annotation {
	if dd == nil {
		return nil
	}
	return dd.Note
}

// GetOnlineInformation returns the value of the field OnlineInformation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetOnlineInformation() *fhir.URI {
	if dd == nil {
		return nil
	}
	return dd.OnlineInformation
}

// GetOwner returns the value of the field Owner.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetOwner() *fhir.Reference {
	if dd == nil {
		return nil
	}
	return dd.Owner
}

// GetParentDevice returns the value of the field ParentDevice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetParentDevice() *fhir.Reference {
	if dd == nil {
		return nil
	}
	return dd.ParentDevice
}

// GetPhysicalCharacteristics returns the value of the field PhysicalCharacteristics.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetPhysicalCharacteristics() *fhir.ProdCharacteristic {
	if dd == nil {
		return nil
	}
	return dd.PhysicalCharacteristics
}

// GetProperty returns the value of the field Property.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetProperty() []*DeviceDefinitionProperty {
	if dd == nil {
		return nil
	}
	return dd.Property
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetQuantity() *fhir.Quantity {
	if dd == nil {
		return nil
	}
	return dd.Quantity
}

// GetSafety returns the value of the field Safety.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetSafety() []*fhir.CodeableConcept {
	if dd == nil {
		return nil
	}
	return dd.Safety
}

// GetShelfLifeStorage returns the value of the field ShelfLifeStorage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetShelfLifeStorage() []*fhir.ProductShelfLife {
	if dd == nil {
		return nil
	}
	return dd.ShelfLifeStorage
}

// GetSpecialization returns the value of the field Specialization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetSpecialization() []*DeviceDefinitionSpecialization {
	if dd == nil {
		return nil
	}
	return dd.Specialization
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetText() *fhir.Narrative {
	if dd == nil {
		return nil
	}
	return dd.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetType() *fhir.CodeableConcept {
	if dd == nil {
		return nil
	}
	return dd.Type
}

// GetUdiDeviceIdentifier returns the value of the field UdiDeviceIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetUdiDeviceIdentifier() []*DeviceDefinitionUdiDeviceIdentifier {
	if dd == nil {
		return nil
	}
	return dd.UdiDeviceIdentifier
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetURL() *fhir.URI {
	if dd == nil {
		return nil
	}
	return dd.URL
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dd *DeviceDefinition) GetVersion() []*fhir.String {
	if dd == nil {
		return nil
	}
	return dd.Version
}

// Device capabilities// Device capabilities.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DeviceDefinition.json
type DeviceDefinitionCapability struct {

	// Description of capability.
	Description []*fhir.CodeableConcept `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Type of capability.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddc *DeviceDefinitionCapability) GetDescription() []*fhir.CodeableConcept {
	if ddc == nil {
		return nil
	}
	return ddc.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddc *DeviceDefinitionCapability) GetExtension() []*fhir.Extension {
	if ddc == nil {
		return nil
	}
	return ddc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddc *DeviceDefinitionCapability) GetID() string {
	if ddc == nil {
		return ""
	}
	return ddc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddc *DeviceDefinitionCapability) GetModifierExtension() []*fhir.Extension {
	if ddc == nil {
		return nil
	}
	return ddc.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddc *DeviceDefinitionCapability) GetType() *fhir.CodeableConcept {
	if ddc == nil {
		return nil
	}
	return ddc.Type
}

// A name given to the device to identify it// A name given to the device to identify it.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DeviceDefinition.json
type DeviceDefinitionDeviceName struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of the device.
	Name *fhir.String `fhirpath:"name"`

	// The type of deviceName. UDILabelName | UserFriendlyName |
	// PatientReportedName | ManufactureDeviceName | ModelName.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dddn *DeviceDefinitionDeviceName) GetExtension() []*fhir.Extension {
	if dddn == nil {
		return nil
	}
	return dddn.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dddn *DeviceDefinitionDeviceName) GetID() string {
	if dddn == nil {
		return ""
	}
	return dddn.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dddn *DeviceDefinitionDeviceName) GetModifierExtension() []*fhir.Extension {
	if dddn == nil {
		return nil
	}
	return dddn.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dddn *DeviceDefinitionDeviceName) GetName() *fhir.String {
	if dddn == nil {
		return nil
	}
	return dddn.Name
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dddn *DeviceDefinitionDeviceName) GetType() *fhir.Code {
	if dddn == nil {
		return nil
	}
	return dddn.Type
}

// A substance used to create the material(s) of which the device is made// A substance used to create the material(s) of which the device is made.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DeviceDefinition.json
type DeviceDefinitionMaterial struct {

	// Whether the substance is a known or suspected allergen.
	AllergenicIndicator *fhir.Boolean `fhirpath:"allergenicIndicator"`

	// Indicates an alternative material of the device.
	Alternate *fhir.Boolean `fhirpath:"alternate"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The substance.
	Substance *fhir.CodeableConcept `fhirpath:"substance"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAllergenicIndicator returns the value of the field AllergenicIndicator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddm *DeviceDefinitionMaterial) GetAllergenicIndicator() *fhir.Boolean {
	if ddm == nil {
		return nil
	}
	return ddm.AllergenicIndicator
}

// GetAlternate returns the value of the field Alternate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddm *DeviceDefinitionMaterial) GetAlternate() *fhir.Boolean {
	if ddm == nil {
		return nil
	}
	return ddm.Alternate
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddm *DeviceDefinitionMaterial) GetExtension() []*fhir.Extension {
	if ddm == nil {
		return nil
	}
	return ddm.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddm *DeviceDefinitionMaterial) GetID() string {
	if ddm == nil {
		return ""
	}
	return ddm.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddm *DeviceDefinitionMaterial) GetModifierExtension() []*fhir.Extension {
	if ddm == nil {
		return nil
	}
	return ddm.ModifierExtension
}

// GetSubstance returns the value of the field Substance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddm *DeviceDefinitionMaterial) GetSubstance() *fhir.CodeableConcept {
	if ddm == nil {
		return nil
	}
	return ddm.Substance
}

// The actual configuration settings of a device as it actually operates, e.g.,
// regulation status, time properties// The actual configuration settings of a device as it actually operates, e.g.,
// regulation status, time properties.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DeviceDefinition.json
type DeviceDefinitionProperty struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// Property value as a code, e.g., NTP4 (synced to NTP).
	ValueCode []*fhir.CodeableConcept `fhirpath:"valueCode"`

	// Property value as a quantity.
	ValueQuantity []*fhir.Quantity `fhirpath:"valueQuantity"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddp *DeviceDefinitionProperty) GetExtension() []*fhir.Extension {
	if ddp == nil {
		return nil
	}
	return ddp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddp *DeviceDefinitionProperty) GetID() string {
	if ddp == nil {
		return ""
	}
	return ddp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddp *DeviceDefinitionProperty) GetModifierExtension() []*fhir.Extension {
	if ddp == nil {
		return nil
	}
	return ddp.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddp *DeviceDefinitionProperty) GetType() *fhir.CodeableConcept {
	if ddp == nil {
		return nil
	}
	return ddp.Type
}

// GetValueCode returns the value of the field ValueCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddp *DeviceDefinitionProperty) GetValueCode() []*fhir.CodeableConcept {
	if ddp == nil {
		return nil
	}
	return ddp.ValueCode
}

// GetValueQuantity returns the value of the field ValueQuantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddp *DeviceDefinitionProperty) GetValueQuantity() []*fhir.Quantity {
	if ddp == nil {
		return nil
	}
	return ddp.ValueQuantity
}

// The capabilities supported on a device, the standards to which the device
// conforms for a particular purpose, and used for the communication// The capabilities supported on a device, the standards to which the device
// conforms for a particular purpose, and used for the communication.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DeviceDefinition.json
type DeviceDefinitionSpecialization struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The standard that is used to operate and communicate.
	SystemType *fhir.String `fhirpath:"systemType"`

	// The version of the standard that is used to operate and communicate.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dds *DeviceDefinitionSpecialization) GetExtension() []*fhir.Extension {
	if dds == nil {
		return nil
	}
	return dds.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dds *DeviceDefinitionSpecialization) GetID() string {
	if dds == nil {
		return ""
	}
	return dds.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dds *DeviceDefinitionSpecialization) GetModifierExtension() []*fhir.Extension {
	if dds == nil {
		return nil
	}
	return dds.ModifierExtension
}

// GetSystemType returns the value of the field SystemType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dds *DeviceDefinitionSpecialization) GetSystemType() *fhir.String {
	if dds == nil {
		return nil
	}
	return dds.SystemType
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dds *DeviceDefinitionSpecialization) GetVersion() *fhir.String {
	if dds == nil {
		return nil
	}
	return dds.Version
}

// Unique Device Identifier (UDI) Barcode string// Unique device identifier (UDI) assigned to device label or package. Note
// that the Device may include multiple udiCarriers as it either may include
// just the udiCarrier for the jurisdiction it is sold, or for multiple
// jurisdictions it could have been sold.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DeviceDefinition.json
type DeviceDefinitionUdiDeviceIdentifier struct {

	// The identifier that is to be associated with every Device that references
	// this DeviceDefintiion for the issuer and jurisdication porvided in the
	// DeviceDefinition.udiDeviceIdentifier.
	DeviceIdentifier *fhir.String `fhirpath:"deviceIdentifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The organization that assigns the identifier algorithm.
	Issuer *fhir.URI `fhirpath:"issuer"`

	// The jurisdiction to which the deviceIdentifier applies.
	Jurisdiction *fhir.URI `fhirpath:"jurisdiction"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDeviceIdentifier returns the value of the field DeviceIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddudi *DeviceDefinitionUdiDeviceIdentifier) GetDeviceIdentifier() *fhir.String {
	if ddudi == nil {
		return nil
	}
	return ddudi.DeviceIdentifier
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddudi *DeviceDefinitionUdiDeviceIdentifier) GetExtension() []*fhir.Extension {
	if ddudi == nil {
		return nil
	}
	return ddudi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddudi *DeviceDefinitionUdiDeviceIdentifier) GetID() string {
	if ddudi == nil {
		return ""
	}
	return ddudi.ID
}

// GetIssuer returns the value of the field Issuer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddudi *DeviceDefinitionUdiDeviceIdentifier) GetIssuer() *fhir.URI {
	if ddudi == nil {
		return nil
	}
	return ddudi.Issuer
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddudi *DeviceDefinitionUdiDeviceIdentifier) GetJurisdiction() *fhir.URI {
	if ddudi == nil {
		return nil
	}
	return ddudi.Jurisdiction
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ddudi *DeviceDefinitionUdiDeviceIdentifier) GetModifierExtension() []*fhir.Extension {
	if ddudi == nil {
		return nil
	}
	return ddudi.ModifierExtension
}
