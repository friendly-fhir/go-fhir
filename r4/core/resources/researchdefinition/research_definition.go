// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package researchdefinition

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// The ResearchDefinition resource describes the conditional state (population
// and any exposures being compared within the population) and outcome (if
// specified) that the knowledge (evidence, assertion, recommendation) is
// about.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ResearchDefinition
//   - Source File: StructureDefinition-ResearchDefinition.json
type ResearchDefinition struct {

	// The date on which the resource content was approved by the publisher.
	// Approval happens once when the content is officially approved for usage.
	ApprovalDate *fhir.Date `fhirpath:"approvalDate"`

	// An individiual or organization primarily involved in the creation and
	// maintenance of the content.
	Author []*fhir.ContactDetail `fhirpath:"author"`

	// A human-readable string to clarify or explain concepts about the resource.
	Comment []*fhir.String `fhirpath:"comment"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the research definition and/or its
	// contents. Copyright statements are generally legal restrictions on the use
	// and publishing of the research definition.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the research definition was published.
	// The date must change when the business version changes and it must change if
	// the status code changes. In addition, it should change when the substantive
	// content of the research definition changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the research definition from a
	// consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// An individual or organization primarily responsible for internal coherence
	// of the content.
	Editor []*fhir.ContactDetail `fhirpath:"editor"`

	// The period during which the research definition content was or is planned to
	// be in active use.
	EffectivePeriod *fhir.Period `fhirpath:"effectivePeriod"`

	// An individual or organization responsible for officially endorsing the
	// content for use in some setting.
	Endorser []*fhir.ContactDetail `fhirpath:"endorser"`

	// A Boolean value to indicate that this research definition is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to
	// be used for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// A reference to a ResearchElementDefinition resource that defines the
	// exposure for the research.
	Exposure *fhir.Reference `fhirpath:"exposure"`

	// A reference to a ResearchElementDefinition resource that defines the
	// exposureAlternative for the research.
	ExposureAlternative *fhir.Reference `fhirpath:"exposureAlternative"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this research definition when
	// it is represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A legal or geographic region in which the research definition is intended to
	// be used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate *fhir.Date `fhirpath:"lastReviewDate"`

	// A reference to a Library resource containing the formal logic used by the
	// ResearchDefinition.
	Library []*fhir.Canonical `fhirpath:"library"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the research definition. This name
	// should be usable as an identifier for the module by machine processing
	// applications such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// A reference to a ResearchElementDefinition resomece that defines the outcome
	// for the research.
	Outcome *fhir.Reference `fhirpath:"outcome"`

	// A reference to a ResearchElementDefinition resource that defines the
	// population for the research.
	Population *fhir.Reference `fhirpath:"population"`

	// The name of the organization or individual that published the research
	// definition.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this research definition is needed and why it has been
	// designed as it has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// Related artifacts such as additional documentation, justification, or
	// bibliographic references.
	RelatedArtifact []*fhir.RelatedArtifact `fhirpath:"relatedArtifact"`

	// An individual or organization primarily responsible for review of some
	// aspect of the content.
	Reviewer []*fhir.ContactDetail `fhirpath:"reviewer"`

	// The short title provides an alternate title for use in informal descriptive
	// contexts where the full, formal title is not necessary.
	ShortTitle *fhir.String `fhirpath:"shortTitle"`

	// The status of this research definition. Enables tracking the life-cycle of
	// the content.
	Status *fhir.Code `fhirpath:"status"`

	// The intended subjects for the ResearchDefinition. If this element is not
	// provided, a Patient subject is assumed, but the subject of the
	// ResearchDefinition can be anything.
	Subject fhir.Element `fhirpath:"subject"`

	// An explanatory or alternate title for the ResearchDefinition giving
	// additional information about its content.
	Subtitle *fhir.String `fhirpath:"subtitle"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the research definition.
	Title *fhir.String `fhirpath:"title"`

	// Descriptive topics related to the content of the ResearchDefinition. Topics
	// provide a high-level categorization grouping types of ResearchDefinitions
	// that can be useful for filtering and searching.
	Topic []*fhir.CodeableConcept `fhirpath:"topic"`

	// An absolute URI that is used to identify this research definition when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal
	// address at which at which an authoritative instance of this research
	// definition is (or will be) published. This URL can be the target of a
	// canonical reference. It SHALL remain the same when the research definition
	// is stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// A detailed description, from a clinical perspective, of how the
	// ResearchDefinition is used.
	Usage *fhir.String `fhirpath:"usage"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// research definition instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the research
	// definition when it is referenced in a specification, model, design or
	// instance. This is an arbitrary value managed by the research definition
	// author and is not expected to be globally unique. For example, it might be a
	// timestamp (e.g. yyyymmdd) if a managed version is not available. There is
	// also no expectation that versions can be placed in a lexicographical
	// sequence. To provide a version consistent with the Decision Support Service
	// specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more
	// information on versioning knowledge assets, refer to the Decision Support
	// Service specification. Note that a version is required for non-experimental
	// active artifacts.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetApprovalDate returns the value of the field ApprovalDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetApprovalDate() *fhir.Date {
	if rd == nil {
		return nil
	}
	return rd.ApprovalDate
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetAuthor() []*fhir.ContactDetail {
	if rd == nil {
		return nil
	}
	return rd.Author
}

// GetComment returns the value of the field Comment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetComment() []*fhir.String {
	if rd == nil {
		return nil
	}
	return rd.Comment
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetContact() []*fhir.ContactDetail {
	if rd == nil {
		return nil
	}
	return rd.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetContained() []fhir.Resource {
	if rd == nil {
		return nil
	}
	return rd.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetCopyright() *fhir.Markdown {
	if rd == nil {
		return nil
	}
	return rd.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetDate() *fhir.DateTime {
	if rd == nil {
		return nil
	}
	return rd.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetDescription() *fhir.Markdown {
	if rd == nil {
		return nil
	}
	return rd.Description
}

// GetEditor returns the value of the field Editor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetEditor() []*fhir.ContactDetail {
	if rd == nil {
		return nil
	}
	return rd.Editor
}

// GetEffectivePeriod returns the value of the field EffectivePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetEffectivePeriod() *fhir.Period {
	if rd == nil {
		return nil
	}
	return rd.EffectivePeriod
}

// GetEndorser returns the value of the field Endorser.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetEndorser() []*fhir.ContactDetail {
	if rd == nil {
		return nil
	}
	return rd.Endorser
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetExperimental() *fhir.Boolean {
	if rd == nil {
		return nil
	}
	return rd.Experimental
}

// GetExposure returns the value of the field Exposure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetExposure() *fhir.Reference {
	if rd == nil {
		return nil
	}
	return rd.Exposure
}

// GetExposureAlternative returns the value of the field ExposureAlternative.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetExposureAlternative() *fhir.Reference {
	if rd == nil {
		return nil
	}
	return rd.ExposureAlternative
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetExtension() []*fhir.Extension {
	if rd == nil {
		return nil
	}
	return rd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetID() string {
	if rd == nil {
		return ""
	}
	return rd.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetIdentifier() []*fhir.Identifier {
	if rd == nil {
		return nil
	}
	return rd.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetImplicitRules() *fhir.URI {
	if rd == nil {
		return nil
	}
	return rd.ImplicitRules
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetJurisdiction() []*fhir.CodeableConcept {
	if rd == nil {
		return nil
	}
	return rd.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetLanguage() *fhir.Code {
	if rd == nil {
		return nil
	}
	return rd.Language
}

// GetLastReviewDate returns the value of the field LastReviewDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetLastReviewDate() *fhir.Date {
	if rd == nil {
		return nil
	}
	return rd.LastReviewDate
}

// GetLibrary returns the value of the field Library.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetLibrary() []*fhir.Canonical {
	if rd == nil {
		return nil
	}
	return rd.Library
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetMeta() *fhir.Meta {
	if rd == nil {
		return nil
	}
	return rd.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetModifierExtension() []*fhir.Extension {
	if rd == nil {
		return nil
	}
	return rd.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetName() *fhir.String {
	if rd == nil {
		return nil
	}
	return rd.Name
}

// GetOutcome returns the value of the field Outcome.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetOutcome() *fhir.Reference {
	if rd == nil {
		return nil
	}
	return rd.Outcome
}

// GetPopulation returns the value of the field Population.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetPopulation() *fhir.Reference {
	if rd == nil {
		return nil
	}
	return rd.Population
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetPublisher() *fhir.String {
	if rd == nil {
		return nil
	}
	return rd.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetPurpose() *fhir.Markdown {
	if rd == nil {
		return nil
	}
	return rd.Purpose
}

// GetRelatedArtifact returns the value of the field RelatedArtifact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetRelatedArtifact() []*fhir.RelatedArtifact {
	if rd == nil {
		return nil
	}
	return rd.RelatedArtifact
}

// GetReviewer returns the value of the field Reviewer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetReviewer() []*fhir.ContactDetail {
	if rd == nil {
		return nil
	}
	return rd.Reviewer
}

// GetShortTitle returns the value of the field ShortTitle.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetShortTitle() *fhir.String {
	if rd == nil {
		return nil
	}
	return rd.ShortTitle
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetStatus() *fhir.Code {
	if rd == nil {
		return nil
	}
	return rd.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetSubject() fhir.Element {
	if rd == nil {
		return nil
	}
	return rd.Subject
}

// GetSubjectCodeableConcept returns the value of the field Subject.
func (rd *ResearchDefinition) GetSubjectCodeableConcept() *fhir.CodeableConcept {
	if rd == nil {
		return nil
	}
	val, ok := rd.Subject.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetSubjectReference returns the value of the field Subject.
func (rd *ResearchDefinition) GetSubjectReference() *fhir.Reference {
	if rd == nil {
		return nil
	}
	val, ok := rd.Subject.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetSubtitle returns the value of the field Subtitle.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetSubtitle() *fhir.String {
	if rd == nil {
		return nil
	}
	return rd.Subtitle
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetText() *fhir.Narrative {
	if rd == nil {
		return nil
	}
	return rd.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetTitle() *fhir.String {
	if rd == nil {
		return nil
	}
	return rd.Title
}

// GetTopic returns the value of the field Topic.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetTopic() []*fhir.CodeableConcept {
	if rd == nil {
		return nil
	}
	return rd.Topic
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetURL() *fhir.URI {
	if rd == nil {
		return nil
	}
	return rd.URL
}

// GetUsage returns the value of the field Usage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetUsage() *fhir.String {
	if rd == nil {
		return nil
	}
	return rd.Usage
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetUseContext() []*fhir.UsageContext {
	if rd == nil {
		return nil
	}
	return rd.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rd *ResearchDefinition) GetVersion() *fhir.String {
	if rd == nil {
		return nil
	}
	return rd.Version
}

func (rd *ResearchDefinition) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (rd *ResearchDefinition) UnmarshalJSON(data []byte) error {
	var raw struct {
		ApprovalDate        *fhir.Date            `json:"approvalDate"`
		Author              []*fhir.ContactDetail `json:"author"`
		Comment             []*fhir.String        `json:"comment"`
		Contact             []*fhir.ContactDetail `json:"contact"`
		Contained           []fhir.Resource       `json:"contained"`
		Copyright           *fhir.Markdown        `json:"copyright"`
		Date                *fhir.DateTime        `json:"date"`
		Description         *fhir.Markdown        `json:"description"`
		Editor              []*fhir.ContactDetail `json:"editor"`
		EffectivePeriod     *fhir.Period          `json:"effectivePeriod"`
		Endorser            []*fhir.ContactDetail `json:"endorser"`
		Experimental        *fhir.Boolean         `json:"experimental"`
		Exposure            *fhir.Reference       `json:"exposure"`
		ExposureAlternative *fhir.Reference       `json:"exposureAlternative"`
		Extension           []*fhir.Extension     `json:"extension"`

		ID                     string                  `json:"id"`
		Identifier             []*fhir.Identifier      `json:"identifier"`
		ImplicitRules          *fhir.URI               `json:"implicitRules"`
		Jurisdiction           []*fhir.CodeableConcept `json:"jurisdiction"`
		Language               *fhir.Code              `json:"language"`
		LastReviewDate         *fhir.Date              `json:"lastReviewDate"`
		Library                []*fhir.Canonical       `json:"library"`
		Meta                   *fhir.Meta              `json:"meta"`
		ModifierExtension      []*fhir.Extension       `json:"modifierExtension"`
		Name                   *fhir.String            `json:"name"`
		Outcome                *fhir.Reference         `json:"outcome"`
		Population             *fhir.Reference         `json:"population"`
		Publisher              *fhir.String            `json:"publisher"`
		Purpose                *fhir.Markdown          `json:"purpose"`
		RelatedArtifact        []*fhir.RelatedArtifact `json:"relatedArtifact"`
		Reviewer               []*fhir.ContactDetail   `json:"reviewer"`
		ShortTitle             *fhir.String            `json:"shortTitle"`
		Status                 *fhir.Code              `json:"status"`
		SubjectCodeableConcept *fhir.CodeableConcept   `json:"subjectCodeableConcept"`
		SubjectReference       *fhir.Reference         `json:"subjectReference"`
		Subtitle               *fhir.String            `json:"subtitle"`
		Text                   *fhir.Narrative         `json:"text"`
		Title                  *fhir.String            `json:"title"`
		Topic                  []*fhir.CodeableConcept `json:"topic"`
		URL                    *fhir.URI               `json:"url"`
		Usage                  *fhir.String            `json:"usage"`
		UseContext             []*fhir.UsageContext    `json:"useContext"`
		Version                *fhir.String            `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	rd.ApprovalDate = raw.ApprovalDate
	rd.Author = raw.Author
	rd.Comment = raw.Comment
	rd.Contact = raw.Contact
	rd.Contained = raw.Contained
	rd.Copyright = raw.Copyright
	rd.Date = raw.Date
	rd.Description = raw.Description
	rd.Editor = raw.Editor
	rd.EffectivePeriod = raw.EffectivePeriod
	rd.Endorser = raw.Endorser
	rd.Experimental = raw.Experimental
	rd.Exposure = raw.Exposure
	rd.ExposureAlternative = raw.ExposureAlternative
	rd.Extension = raw.Extension
	rd.ID = raw.ID
	rd.Identifier = raw.Identifier
	rd.ImplicitRules = raw.ImplicitRules
	rd.Jurisdiction = raw.Jurisdiction
	rd.Language = raw.Language
	rd.LastReviewDate = raw.LastReviewDate
	rd.Library = raw.Library
	rd.Meta = raw.Meta
	rd.ModifierExtension = raw.ModifierExtension
	rd.Name = raw.Name
	rd.Outcome = raw.Outcome
	rd.Population = raw.Population
	rd.Publisher = raw.Publisher
	rd.Purpose = raw.Purpose
	rd.RelatedArtifact = raw.RelatedArtifact
	rd.Reviewer = raw.Reviewer
	rd.ShortTitle = raw.ShortTitle
	rd.Status = raw.Status
	rd.Subject, err = validate.SelectOneOf[fhir.Element]("ResearchDefinition.subject",
		raw.SubjectCodeableConcept,
		raw.SubjectReference)
	if err != nil {
		return err
	}
	rd.Subtitle = raw.Subtitle
	rd.Text = raw.Text
	rd.Title = raw.Title
	rd.Topic = raw.Topic
	rd.URL = raw.URL
	rd.Usage = raw.Usage
	rd.UseContext = raw.UseContext
	rd.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*ResearchDefinition)(nil)
var _ json.Unmarshaler = (*ResearchDefinition)(nil)
