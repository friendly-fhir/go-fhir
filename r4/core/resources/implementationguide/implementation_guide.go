// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package implementationguide

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A set of rules of how a particular interoperability or standards problem is
// solved - typically through the use of FHIR resources. This resource is used
// to gather all the parts of an implementation guide into a logical whole and
// to publish a computable definition of all the parts.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ImplementationGuide
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuide struct {

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the implementation guide and/or its
	// contents. Copyright statements are generally legal restrictions on the use
	// and publishing of the implementation guide.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the implementation guide was published.
	// The date must change when the business version changes and it must change if
	// the status code changes. In addition, it should change when the substantive
	// content of the implementation guide changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// The information needed by an IG publisher tool to publish the whole
	// implementation guide.
	Definition *ImplementationGuideDefinition `fhirpath:"definition"`

	// Another implementation guide that this implementation depends on. Typically,
	// an implementation guide uses value sets, profiles etc.defined in other
	// implementation guides.
	DependsOn []*ImplementationGuideDependsOn `fhirpath:"dependsOn"`

	// A free text natural language description of the implementation guide from a
	// consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// A Boolean value to indicate that this implementation guide is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to
	// be used for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The version(s) of the FHIR specification that this ImplementationGuide
	// targets - e.g. describes how to use. The value of this element is the formal
	// version of the specification, without the revision number, e.g.
	// [publication].[major].[minor], which is 4.0.1. for this version.
	FhirVersion []*fhir.Code `fhirpath:"fhirVersion"`

	// A set of profiles that all resources covered by this implementation guide
	// must conform to.
	Global []*ImplementationGuideGlobal `fhirpath:"global"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A legal or geographic region in which the implementation guide is intended
	// to be used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The license that applies to this Implementation Guide, using an SPDX license
	// code, or 'not-open-source'.
	License *fhir.Code `fhirpath:"license"`

	// Information about an assembled implementation guide, created by the
	// publication tooling.
	Manifest *ImplementationGuideManifest `fhirpath:"manifest"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the implementation guide. This name
	// should be usable as an identifier for the module by machine processing
	// applications such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// The NPM package name for this Implementation Guide, used in the NPM package
	// distribution, which is the primary mechanism by which FHIR based tooling
	// manages IG dependencies. This value must be globally unique, and should be
	// assigned with care.
	PackageID *fhir.ID `fhirpath:"packageId"`

	// The name of the organization or individual that published the implementation
	// guide.
	Publisher *fhir.String `fhirpath:"publisher"`

	// The status of this implementation guide. Enables tracking the life-cycle of
	// the content.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the implementation guide.
	Title *fhir.String `fhirpath:"title"`

	// An absolute URI that is used to identify this implementation guide when it
	// is referenced in a specification, model, design or an instance; also called
	// its canonical identifier. This SHOULD be globally unique and SHOULD be a
	// literal address at which at which an authoritative instance of this
	// implementation guide is (or will be) published. This URL can be the target
	// of a canonical reference. It SHALL remain the same when the implementation
	// guide is stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// implementation guide instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the implementation
	// guide when it is referenced in a specification, model, design or instance.
	// This is an arbitrary value managed by the implementation guide author and is
	// not expected to be globally unique. For example, it might be a timestamp
	// (e.g. yyyymmdd) if a managed version is not available. There is also no
	// expectation that versions can be placed in a lexicographical sequence.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetContact() []*fhir.ContactDetail {
	if ig == nil {
		return nil
	}
	return ig.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetContained() []fhir.Resource {
	if ig == nil {
		return nil
	}
	return ig.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetCopyright() *fhir.Markdown {
	if ig == nil {
		return nil
	}
	return ig.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetDate() *fhir.DateTime {
	if ig == nil {
		return nil
	}
	return ig.Date
}

// GetDefinition returns the value of the field Definition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetDefinition() *ImplementationGuideDefinition {
	if ig == nil {
		return nil
	}
	return ig.Definition
}

// GetDependsOn returns the value of the field DependsOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetDependsOn() []*ImplementationGuideDependsOn {
	if ig == nil {
		return nil
	}
	return ig.DependsOn
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetDescription() *fhir.Markdown {
	if ig == nil {
		return nil
	}
	return ig.Description
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetExperimental() *fhir.Boolean {
	if ig == nil {
		return nil
	}
	return ig.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetExtension() []*fhir.Extension {
	if ig == nil {
		return nil
	}
	return ig.Extension
}

// GetFhirVersion returns the value of the field FhirVersion.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetFhirVersion() []*fhir.Code {
	if ig == nil {
		return nil
	}
	return ig.FhirVersion
}

// GetGlobal returns the value of the field Global.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetGlobal() []*ImplementationGuideGlobal {
	if ig == nil {
		return nil
	}
	return ig.Global
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetID() string {
	if ig == nil {
		return ""
	}
	return ig.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetImplicitRules() *fhir.URI {
	if ig == nil {
		return nil
	}
	return ig.ImplicitRules
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetJurisdiction() []*fhir.CodeableConcept {
	if ig == nil {
		return nil
	}
	return ig.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetLanguage() *fhir.Code {
	if ig == nil {
		return nil
	}
	return ig.Language
}

// GetLicense returns the value of the field License.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetLicense() *fhir.Code {
	if ig == nil {
		return nil
	}
	return ig.License
}

// GetManifest returns the value of the field Manifest.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetManifest() *ImplementationGuideManifest {
	if ig == nil {
		return nil
	}
	return ig.Manifest
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetMeta() *fhir.Meta {
	if ig == nil {
		return nil
	}
	return ig.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetModifierExtension() []*fhir.Extension {
	if ig == nil {
		return nil
	}
	return ig.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetName() *fhir.String {
	if ig == nil {
		return nil
	}
	return ig.Name
}

// GetPackageID returns the value of the field PackageID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetPackageID() *fhir.ID {
	if ig == nil {
		return nil
	}
	return ig.PackageID
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetPublisher() *fhir.String {
	if ig == nil {
		return nil
	}
	return ig.Publisher
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetStatus() *fhir.Code {
	if ig == nil {
		return nil
	}
	return ig.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetText() *fhir.Narrative {
	if ig == nil {
		return nil
	}
	return ig.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetTitle() *fhir.String {
	if ig == nil {
		return nil
	}
	return ig.Title
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetURL() *fhir.URI {
	if ig == nil {
		return nil
	}
	return ig.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetUseContext() []*fhir.UsageContext {
	if ig == nil {
		return nil
	}
	return ig.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ig *ImplementationGuide) GetVersion() *fhir.String {
	if ig == nil {
		return nil
	}
	return ig.Version
}

// Information needed to build the IG// The information needed by an IG publisher tool to publish the whole
// implementation guide.// Principally, this consists of information abuot source resource and file
// locations, and build parameters and templates.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideDefinition struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A logical group of resources. Logical groups can be used when building
	// pages.
	Grouping []*ImplementationGuideDefinitionGrouping `fhirpath:"grouping"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A page / section in the implementation guide. The root page is the
	// implementation guide home page.
	Page *ImplementationGuideDefinitionPage `fhirpath:"page"`

	// Defines how IG is built by tools.
	Parameter []*ImplementationGuideDefinitionParameter `fhirpath:"parameter"`

	// A resource that is part of the implementation guide. Conformance resources
	// (value set, structure definition, capability statements etc.) are obvious
	// candidates for inclusion, but any kind of resource can be included as an
	// example resource.
	Resource []*ImplementationGuideDefinitionResource `fhirpath:"resource"`

	// A template for building resources.
	Template []*ImplementationGuideDefinitionTemplate `fhirpath:"template"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igd *ImplementationGuideDefinition) GetExtension() []*fhir.Extension {
	if igd == nil {
		return nil
	}
	return igd.Extension
}

// GetGrouping returns the value of the field Grouping.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igd *ImplementationGuideDefinition) GetGrouping() []*ImplementationGuideDefinitionGrouping {
	if igd == nil {
		return nil
	}
	return igd.Grouping
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igd *ImplementationGuideDefinition) GetID() string {
	if igd == nil {
		return ""
	}
	return igd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igd *ImplementationGuideDefinition) GetModifierExtension() []*fhir.Extension {
	if igd == nil {
		return nil
	}
	return igd.ModifierExtension
}

// GetPage returns the value of the field Page.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igd *ImplementationGuideDefinition) GetPage() *ImplementationGuideDefinitionPage {
	if igd == nil {
		return nil
	}
	return igd.Page
}

// GetParameter returns the value of the field Parameter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igd *ImplementationGuideDefinition) GetParameter() []*ImplementationGuideDefinitionParameter {
	if igd == nil {
		return nil
	}
	return igd.Parameter
}

// GetResource returns the value of the field Resource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igd *ImplementationGuideDefinition) GetResource() []*ImplementationGuideDefinitionResource {
	if igd == nil {
		return nil
	}
	return igd.Resource
}

// GetTemplate returns the value of the field Template.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igd *ImplementationGuideDefinition) GetTemplate() []*ImplementationGuideDefinitionTemplate {
	if igd == nil {
		return nil
	}
	return igd.Template
}

// Grouping used to present related resources in the IG// A logical group of resources. Logical groups can be used when building
// pages.// Groupings are arbitrary sub-divisions of content. Typically, they are used
// to help build Table of Contents automatically.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideDefinitionGrouping struct {

	// Human readable text describing the package.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The human-readable title to display for the package of resources when
	// rendering the implementation guide.
	Name *fhir.String `fhirpath:"name"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdg *ImplementationGuideDefinitionGrouping) GetDescription() *fhir.String {
	if igdg == nil {
		return nil
	}
	return igdg.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdg *ImplementationGuideDefinitionGrouping) GetExtension() []*fhir.Extension {
	if igdg == nil {
		return nil
	}
	return igdg.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdg *ImplementationGuideDefinitionGrouping) GetID() string {
	if igdg == nil {
		return ""
	}
	return igdg.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdg *ImplementationGuideDefinitionGrouping) GetModifierExtension() []*fhir.Extension {
	if igdg == nil {
		return nil
	}
	return igdg.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdg *ImplementationGuideDefinitionGrouping) GetName() *fhir.String {
	if igdg == nil {
		return nil
	}
	return igdg.Name
}

// Page/Section in the Guide// A page / section in the implementation guide. The root page is the
// implementation guide home page.// Pages automatically become sections if they have sub-pages. By convention,
// the home page is called index.html.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideDefinitionPage struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A code that indicates how the page is generated.
	Generation *fhir.Code `fhirpath:"generation"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The source address for the page.
	Name fhir.Element `fhirpath:"name"`

	// A short title used to represent this page in navigational structures such as
	// table of contents, bread crumbs, etc.
	Title *fhir.String `fhirpath:"title"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionPage) GetExtension() []*fhir.Extension {
	if igdp == nil {
		return nil
	}
	return igdp.Extension
}

// GetGeneration returns the value of the field Generation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionPage) GetGeneration() *fhir.Code {
	if igdp == nil {
		return nil
	}
	return igdp.Generation
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionPage) GetID() string {
	if igdp == nil {
		return ""
	}
	return igdp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionPage) GetModifierExtension() []*fhir.Extension {
	if igdp == nil {
		return nil
	}
	return igdp.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionPage) GetName() fhir.Element {
	if igdp == nil {
		return nil
	}
	return igdp.Name
}

// GetNameURL returns the value of the field Name.
func (igdp *ImplementationGuideDefinitionPage) GetNameURL() *fhir.URL {
	if igdp == nil {
		return nil
	}
	val, ok := igdp.Name.(*fhir.URL)
	if !ok {
		return nil
	}
	return val
}

// GetNameReference returns the value of the field Name.
func (igdp *ImplementationGuideDefinitionPage) GetNameReference() *fhir.Reference {
	if igdp == nil {
		return nil
	}
	val, ok := igdp.Name.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionPage) GetTitle() *fhir.String {
	if igdp == nil {
		return nil
	}
	return igdp.Title
}

// Defines how IG is built by tools// Defines how IG is built by tools.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideDefinitionParameter struct {

	// apply | path-resource | path-pages | path-tx-cache | expansion-parameter |
	// rule-broken-links | generate-xml | generate-json | generate-turtle |
	// html-template.
	Code *fhir.Code `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Value for named type.
	Value *fhir.String `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionParameter) GetCode() *fhir.Code {
	if igdp == nil {
		return nil
	}
	return igdp.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionParameter) GetExtension() []*fhir.Extension {
	if igdp == nil {
		return nil
	}
	return igdp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionParameter) GetID() string {
	if igdp == nil {
		return ""
	}
	return igdp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionParameter) GetModifierExtension() []*fhir.Extension {
	if igdp == nil {
		return nil
	}
	return igdp.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdp *ImplementationGuideDefinitionParameter) GetValue() *fhir.String {
	if igdp == nil {
		return nil
	}
	return igdp.Value
}

// Resource in the implementation guide// A resource that is part of the implementation guide. Conformance resources
// (value set, structure definition, capability statements etc.) are obvious
// candidates for inclusion, but any kind of resource can be included as an
// example resource.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideDefinitionResource struct {

	// A description of the reason that a resource has been included in the
	// implementation guide.
	Description *fhir.String `fhirpath:"description"`

	// If true or a reference, indicates the resource is an example instance. If a
	// reference is present, indicates that the example is an example of the
	// specified profile.
	Example fhir.Element `fhirpath:"example"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Indicates the FHIR Version(s) this artifact is intended to apply to. If no
	// versions are specified, the resource is assumed to apply to all the versions
	// stated in ImplementationGuide.fhirVersion.
	FhirVersion []*fhir.Code `fhirpath:"fhirVersion"`

	// Reference to the id of the grouping this resource appears in.
	GroupingID *fhir.ID `fhirpath:"groupingId"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A human assigned name for the resource. All resources SHOULD have a name,
	// but the name may be extracted from the resource (e.g. ValueSet.name).
	Name *fhir.String `fhirpath:"name"`

	// Where this resource is found.
	Reference *fhir.Reference `fhirpath:"reference"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdr *ImplementationGuideDefinitionResource) GetDescription() *fhir.String {
	if igdr == nil {
		return nil
	}
	return igdr.Description
}

// GetExample returns the value of the field Example.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdr *ImplementationGuideDefinitionResource) GetExample() fhir.Element {
	if igdr == nil {
		return nil
	}
	return igdr.Example
}

// GetExampleBoolean returns the value of the field Example.
func (igdr *ImplementationGuideDefinitionResource) GetExampleBoolean() *fhir.Boolean {
	if igdr == nil {
		return nil
	}
	val, ok := igdr.Example.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetExampleCanonical returns the value of the field Example.
func (igdr *ImplementationGuideDefinitionResource) GetExampleCanonical() *fhir.Canonical {
	if igdr == nil {
		return nil
	}
	val, ok := igdr.Example.(*fhir.Canonical)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdr *ImplementationGuideDefinitionResource) GetExtension() []*fhir.Extension {
	if igdr == nil {
		return nil
	}
	return igdr.Extension
}

// GetFhirVersion returns the value of the field FhirVersion.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdr *ImplementationGuideDefinitionResource) GetFhirVersion() []*fhir.Code {
	if igdr == nil {
		return nil
	}
	return igdr.FhirVersion
}

// GetGroupingID returns the value of the field GroupingID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdr *ImplementationGuideDefinitionResource) GetGroupingID() *fhir.ID {
	if igdr == nil {
		return nil
	}
	return igdr.GroupingID
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdr *ImplementationGuideDefinitionResource) GetID() string {
	if igdr == nil {
		return ""
	}
	return igdr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdr *ImplementationGuideDefinitionResource) GetModifierExtension() []*fhir.Extension {
	if igdr == nil {
		return nil
	}
	return igdr.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdr *ImplementationGuideDefinitionResource) GetName() *fhir.String {
	if igdr == nil {
		return nil
	}
	return igdr.Name
}

// GetReference returns the value of the field Reference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdr *ImplementationGuideDefinitionResource) GetReference() *fhir.Reference {
	if igdr == nil {
		return nil
	}
	return igdr.Reference
}

// A template for building resources// A template for building resources.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideDefinitionTemplate struct {

	// Type of template specified.
	Code *fhir.Code `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The scope in which the template applies.
	Scope *fhir.String `fhirpath:"scope"`

	// The source location for the template.
	Source *fhir.String `fhirpath:"source"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdt *ImplementationGuideDefinitionTemplate) GetCode() *fhir.Code {
	if igdt == nil {
		return nil
	}
	return igdt.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdt *ImplementationGuideDefinitionTemplate) GetExtension() []*fhir.Extension {
	if igdt == nil {
		return nil
	}
	return igdt.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdt *ImplementationGuideDefinitionTemplate) GetID() string {
	if igdt == nil {
		return ""
	}
	return igdt.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdt *ImplementationGuideDefinitionTemplate) GetModifierExtension() []*fhir.Extension {
	if igdt == nil {
		return nil
	}
	return igdt.ModifierExtension
}

// GetScope returns the value of the field Scope.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdt *ImplementationGuideDefinitionTemplate) GetScope() *fhir.String {
	if igdt == nil {
		return nil
	}
	return igdt.Scope
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdt *ImplementationGuideDefinitionTemplate) GetSource() *fhir.String {
	if igdt == nil {
		return nil
	}
	return igdt.Source
}

// Another Implementation guide this depends on// Another implementation guide that this implementation depends on. Typically,
// an implementation guide uses value sets, profiles etc.defined in other
// implementation guides.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideDependsOn struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The NPM package name for the Implementation Guide that this IG depends on.
	PackageID *fhir.ID `fhirpath:"packageId"`

	// A canonical reference to the Implementation guide for the dependency.
	URI *fhir.Canonical `fhirpath:"uri"`

	// The version of the IG that is depended on, when the correct version is
	// required to understand the IG correctly.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdo *ImplementationGuideDependsOn) GetExtension() []*fhir.Extension {
	if igdo == nil {
		return nil
	}
	return igdo.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdo *ImplementationGuideDependsOn) GetID() string {
	if igdo == nil {
		return ""
	}
	return igdo.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdo *ImplementationGuideDependsOn) GetModifierExtension() []*fhir.Extension {
	if igdo == nil {
		return nil
	}
	return igdo.ModifierExtension
}

// GetPackageID returns the value of the field PackageID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdo *ImplementationGuideDependsOn) GetPackageID() *fhir.ID {
	if igdo == nil {
		return nil
	}
	return igdo.PackageID
}

// GetURI returns the value of the field URI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdo *ImplementationGuideDependsOn) GetURI() *fhir.Canonical {
	if igdo == nil {
		return nil
	}
	return igdo.URI
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igdo *ImplementationGuideDependsOn) GetVersion() *fhir.String {
	if igdo == nil {
		return nil
	}
	return igdo.Version
}

// Profiles that apply globally// A set of profiles that all resources covered by this implementation guide
// must conform to.// See [Default Profiles](implementationguide.html#default) for a discussion of
// which resources are 'covered' by an implementation guide.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideGlobal struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A reference to the profile that all instances must conform to.
	Profile *fhir.Canonical `fhirpath:"profile"`

	// The type of resource that all instances must conform to.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igg *ImplementationGuideGlobal) GetExtension() []*fhir.Extension {
	if igg == nil {
		return nil
	}
	return igg.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igg *ImplementationGuideGlobal) GetID() string {
	if igg == nil {
		return ""
	}
	return igg.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igg *ImplementationGuideGlobal) GetModifierExtension() []*fhir.Extension {
	if igg == nil {
		return nil
	}
	return igg.ModifierExtension
}

// GetProfile returns the value of the field Profile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igg *ImplementationGuideGlobal) GetProfile() *fhir.Canonical {
	if igg == nil {
		return nil
	}
	return igg.Profile
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igg *ImplementationGuideGlobal) GetType() *fhir.Code {
	if igg == nil {
		return nil
	}
	return igg.Type
}

// Information about an assembled IG// Information about an assembled implementation guide, created by the
// publication tooling.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideManifest struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Indicates a relative path to an image that exists within the IG.
	Image []*fhir.String `fhirpath:"image"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Indicates the relative path of an additional non-page, non-image file that
	// is part of the IG - e.g. zip, jar and similar files that could be the target
	// of a hyperlink in a derived IG.
	Other []*fhir.String `fhirpath:"other"`

	// Information about a page within the IG.
	Page []*ImplementationGuideManifestPage `fhirpath:"page"`

	// A pointer to official web page, PDF or other rendering of the implementation
	// guide.
	Rendering *fhir.URL `fhirpath:"rendering"`

	// A resource that is part of the implementation guide. Conformance resources
	// (value set, structure definition, capability statements etc.) are obvious
	// candidates for inclusion, but any kind of resource can be included as an
	// example resource.
	Resource []*ImplementationGuideManifestResource `fhirpath:"resource"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igm *ImplementationGuideManifest) GetExtension() []*fhir.Extension {
	if igm == nil {
		return nil
	}
	return igm.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igm *ImplementationGuideManifest) GetID() string {
	if igm == nil {
		return ""
	}
	return igm.ID
}

// GetImage returns the value of the field Image.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igm *ImplementationGuideManifest) GetImage() []*fhir.String {
	if igm == nil {
		return nil
	}
	return igm.Image
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igm *ImplementationGuideManifest) GetModifierExtension() []*fhir.Extension {
	if igm == nil {
		return nil
	}
	return igm.ModifierExtension
}

// GetOther returns the value of the field Other.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igm *ImplementationGuideManifest) GetOther() []*fhir.String {
	if igm == nil {
		return nil
	}
	return igm.Other
}

// GetPage returns the value of the field Page.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igm *ImplementationGuideManifest) GetPage() []*ImplementationGuideManifestPage {
	if igm == nil {
		return nil
	}
	return igm.Page
}

// GetRendering returns the value of the field Rendering.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igm *ImplementationGuideManifest) GetRendering() *fhir.URL {
	if igm == nil {
		return nil
	}
	return igm.Rendering
}

// GetResource returns the value of the field Resource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igm *ImplementationGuideManifest) GetResource() []*ImplementationGuideManifestResource {
	if igm == nil {
		return nil
	}
	return igm.Resource
}

// HTML page within the parent IG// Information about a page within the IG.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideManifestPage struct {

	// The name of an anchor available on the page.
	Anchor []*fhir.String `fhirpath:"anchor"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Relative path to the page.
	Name *fhir.String `fhirpath:"name"`

	// Label for the page intended for human display.
	Title *fhir.String `fhirpath:"title"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAnchor returns the value of the field Anchor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmp *ImplementationGuideManifestPage) GetAnchor() []*fhir.String {
	if igmp == nil {
		return nil
	}
	return igmp.Anchor
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmp *ImplementationGuideManifestPage) GetExtension() []*fhir.Extension {
	if igmp == nil {
		return nil
	}
	return igmp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmp *ImplementationGuideManifestPage) GetID() string {
	if igmp == nil {
		return ""
	}
	return igmp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmp *ImplementationGuideManifestPage) GetModifierExtension() []*fhir.Extension {
	if igmp == nil {
		return nil
	}
	return igmp.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmp *ImplementationGuideManifestPage) GetName() *fhir.String {
	if igmp == nil {
		return nil
	}
	return igmp.Name
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmp *ImplementationGuideManifestPage) GetTitle() *fhir.String {
	if igmp == nil {
		return nil
	}
	return igmp.Title
}

// Resource in the implementation guide// A resource that is part of the implementation guide. Conformance resources
// (value set, structure definition, capability statements etc.) are obvious
// candidates for inclusion, but any kind of resource can be included as an
// example resource.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImplementationGuide.json
type ImplementationGuideManifestResource struct {

	// If true or a reference, indicates the resource is an example instance. If a
	// reference is present, indicates that the example is an example of the
	// specified profile.
	Example fhir.Element `fhirpath:"example"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Where this resource is found.
	Reference *fhir.Reference `fhirpath:"reference"`

	// The relative path for primary page for this resource within the IG.
	RelativePath *fhir.URL `fhirpath:"relativePath"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExample returns the value of the field Example.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmr *ImplementationGuideManifestResource) GetExample() fhir.Element {
	if igmr == nil {
		return nil
	}
	return igmr.Example
}

// GetExampleBoolean returns the value of the field Example.
func (igmr *ImplementationGuideManifestResource) GetExampleBoolean() *fhir.Boolean {
	if igmr == nil {
		return nil
	}
	val, ok := igmr.Example.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetExampleCanonical returns the value of the field Example.
func (igmr *ImplementationGuideManifestResource) GetExampleCanonical() *fhir.Canonical {
	if igmr == nil {
		return nil
	}
	val, ok := igmr.Example.(*fhir.Canonical)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmr *ImplementationGuideManifestResource) GetExtension() []*fhir.Extension {
	if igmr == nil {
		return nil
	}
	return igmr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmr *ImplementationGuideManifestResource) GetID() string {
	if igmr == nil {
		return ""
	}
	return igmr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmr *ImplementationGuideManifestResource) GetModifierExtension() []*fhir.Extension {
	if igmr == nil {
		return nil
	}
	return igmr.ModifierExtension
}

// GetReference returns the value of the field Reference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmr *ImplementationGuideManifestResource) GetReference() *fhir.Reference {
	if igmr == nil {
		return nil
	}
	return igmr.Reference
}

// GetRelativePath returns the value of the field RelativePath.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (igmr *ImplementationGuideManifestResource) GetRelativePath() *fhir.URL {
	if igmr == nil {
		return nil
	}
	return igmr.RelativePath
}

func (ig *ImplementationGuide) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ig *ImplementationGuide) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contact      []*fhir.ContactDetail           `json:"contact"`
		Contained    []fhir.Resource                 `json:"contained"`
		Copyright    *fhir.Markdown                  `json:"copyright"`
		Date         *fhir.DateTime                  `json:"date"`
		Definition   *ImplementationGuideDefinition  `json:"definition"`
		DependsOn    []*ImplementationGuideDependsOn `json:"dependsOn"`
		Description  *fhir.Markdown                  `json:"description"`
		Experimental *fhir.Boolean                   `json:"experimental"`
		Extension    []*fhir.Extension               `json:"extension"`
		FhirVersion  []*fhir.Code                    `json:"fhirVersion"`
		Global       []*ImplementationGuideGlobal    `json:"global"`

		ID                string                       `json:"id"`
		ImplicitRules     *fhir.URI                    `json:"implicitRules"`
		Jurisdiction      []*fhir.CodeableConcept      `json:"jurisdiction"`
		Language          *fhir.Code                   `json:"language"`
		License           *fhir.Code                   `json:"license"`
		Manifest          *ImplementationGuideManifest `json:"manifest"`
		Meta              *fhir.Meta                   `json:"meta"`
		ModifierExtension []*fhir.Extension            `json:"modifierExtension"`
		Name              *fhir.String                 `json:"name"`
		PackageID         *fhir.ID                     `json:"packageId"`
		Publisher         *fhir.String                 `json:"publisher"`
		Status            *fhir.Code                   `json:"status"`
		Text              *fhir.Narrative              `json:"text"`
		Title             *fhir.String                 `json:"title"`
		URL               *fhir.URI                    `json:"url"`
		UseContext        []*fhir.UsageContext         `json:"useContext"`
		Version           *fhir.String                 `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ig.Contact = raw.Contact
	ig.Contained = raw.Contained
	ig.Copyright = raw.Copyright
	ig.Date = raw.Date
	ig.Definition = raw.Definition
	ig.DependsOn = raw.DependsOn
	ig.Description = raw.Description
	ig.Experimental = raw.Experimental
	ig.Extension = raw.Extension
	ig.FhirVersion = raw.FhirVersion
	ig.Global = raw.Global
	ig.ID = raw.ID
	ig.ImplicitRules = raw.ImplicitRules
	ig.Jurisdiction = raw.Jurisdiction
	ig.Language = raw.Language
	ig.License = raw.License
	ig.Manifest = raw.Manifest
	ig.Meta = raw.Meta
	ig.ModifierExtension = raw.ModifierExtension
	ig.Name = raw.Name
	ig.PackageID = raw.PackageID
	ig.Publisher = raw.Publisher
	ig.Status = raw.Status
	ig.Text = raw.Text
	ig.Title = raw.Title
	ig.URL = raw.URL
	ig.UseContext = raw.UseContext
	ig.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*ImplementationGuide)(nil)
var _ json.Unmarshaler = (*ImplementationGuide)(nil)

func (igd *ImplementationGuideDefinition) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igd *ImplementationGuideDefinition) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension                        `json:"extension"`
		Grouping  []*ImplementationGuideDefinitionGrouping `json:"grouping"`

		ID                string                                    `json:"id"`
		ModifierExtension []*fhir.Extension                         `json:"modifierExtension"`
		Page              *ImplementationGuideDefinitionPage        `json:"page"`
		Parameter         []*ImplementationGuideDefinitionParameter `json:"parameter"`
		Resource          []*ImplementationGuideDefinitionResource  `json:"resource"`
		Template          []*ImplementationGuideDefinitionTemplate  `json:"template"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igd.Extension = raw.Extension
	igd.Grouping = raw.Grouping
	igd.ID = raw.ID
	igd.ModifierExtension = raw.ModifierExtension
	igd.Page = raw.Page
	igd.Parameter = raw.Parameter
	igd.Resource = raw.Resource
	igd.Template = raw.Template
	return nil
}

var _ json.Marshaler = (*ImplementationGuideDefinition)(nil)
var _ json.Unmarshaler = (*ImplementationGuideDefinition)(nil)

func (igdg *ImplementationGuideDefinitionGrouping) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igdg *ImplementationGuideDefinitionGrouping) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description *fhir.String      `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Name              *fhir.String      `json:"name"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igdg.Description = raw.Description
	igdg.Extension = raw.Extension
	igdg.ID = raw.ID
	igdg.ModifierExtension = raw.ModifierExtension
	igdg.Name = raw.Name
	return nil
}

var _ json.Marshaler = (*ImplementationGuideDefinitionGrouping)(nil)
var _ json.Unmarshaler = (*ImplementationGuideDefinitionGrouping)(nil)

func (igdp *ImplementationGuideDefinitionPage) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igdp *ImplementationGuideDefinitionPage) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension  []*fhir.Extension `json:"extension"`
		Generation *fhir.Code        `json:"generation"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		NameURL           *fhir.URL         `json:"nameURL"`
		NameReference     *fhir.Reference   `json:"nameReference"`
		Title             *fhir.String      `json:"title"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igdp.Extension = raw.Extension
	igdp.Generation = raw.Generation
	igdp.ID = raw.ID
	igdp.ModifierExtension = raw.ModifierExtension
	igdp.Name, err = validate.SelectOneOf[fhir.Element]("ImplementationGuide.definition.page.name",
		raw.NameURL,
		raw.NameReference)
	if err != nil {
		return err
	}
	igdp.Title = raw.Title
	return nil
}

var _ json.Marshaler = (*ImplementationGuideDefinitionPage)(nil)
var _ json.Unmarshaler = (*ImplementationGuideDefinitionPage)(nil)

func (igdp *ImplementationGuideDefinitionParameter) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igdp *ImplementationGuideDefinitionParameter) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *fhir.Code        `json:"code"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Value             *fhir.String      `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igdp.Code = raw.Code
	igdp.Extension = raw.Extension
	igdp.ID = raw.ID
	igdp.ModifierExtension = raw.ModifierExtension
	igdp.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*ImplementationGuideDefinitionParameter)(nil)
var _ json.Unmarshaler = (*ImplementationGuideDefinitionParameter)(nil)

func (igdr *ImplementationGuideDefinitionResource) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igdr *ImplementationGuideDefinitionResource) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description      *fhir.String      `json:"description"`
		ExampleBoolean   *fhir.Boolean     `json:"exampleBoolean"`
		ExampleCanonical *fhir.Canonical   `json:"exampleCanonical"`
		Extension        []*fhir.Extension `json:"extension"`
		FhirVersion      []*fhir.Code      `json:"fhirVersion"`
		GroupingID       *fhir.ID          `json:"groupingId"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Name              *fhir.String      `json:"name"`
		Reference         *fhir.Reference   `json:"reference"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igdr.Description = raw.Description
	igdr.Example, err = validate.SelectOneOf[fhir.Element]("ImplementationGuide.definition.resource.example",
		raw.ExampleBoolean,
		raw.ExampleCanonical)
	if err != nil {
		return err
	}
	igdr.Extension = raw.Extension
	igdr.FhirVersion = raw.FhirVersion
	igdr.GroupingID = raw.GroupingID
	igdr.ID = raw.ID
	igdr.ModifierExtension = raw.ModifierExtension
	igdr.Name = raw.Name
	igdr.Reference = raw.Reference
	return nil
}

var _ json.Marshaler = (*ImplementationGuideDefinitionResource)(nil)
var _ json.Unmarshaler = (*ImplementationGuideDefinitionResource)(nil)

func (igdt *ImplementationGuideDefinitionTemplate) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igdt *ImplementationGuideDefinitionTemplate) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *fhir.Code        `json:"code"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Scope             *fhir.String      `json:"scope"`
		Source            *fhir.String      `json:"source"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igdt.Code = raw.Code
	igdt.Extension = raw.Extension
	igdt.ID = raw.ID
	igdt.ModifierExtension = raw.ModifierExtension
	igdt.Scope = raw.Scope
	igdt.Source = raw.Source
	return nil
}

var _ json.Marshaler = (*ImplementationGuideDefinitionTemplate)(nil)
var _ json.Unmarshaler = (*ImplementationGuideDefinitionTemplate)(nil)

func (igdo *ImplementationGuideDependsOn) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igdo *ImplementationGuideDependsOn) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		PackageID         *fhir.ID          `json:"packageId"`
		URI               *fhir.Canonical   `json:"uri"`
		Version           *fhir.String      `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igdo.Extension = raw.Extension
	igdo.ID = raw.ID
	igdo.ModifierExtension = raw.ModifierExtension
	igdo.PackageID = raw.PackageID
	igdo.URI = raw.URI
	igdo.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*ImplementationGuideDependsOn)(nil)
var _ json.Unmarshaler = (*ImplementationGuideDependsOn)(nil)

func (igg *ImplementationGuideGlobal) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igg *ImplementationGuideGlobal) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Profile           *fhir.Canonical   `json:"profile"`
		Type              *fhir.Code        `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igg.Extension = raw.Extension
	igg.ID = raw.ID
	igg.ModifierExtension = raw.ModifierExtension
	igg.Profile = raw.Profile
	igg.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*ImplementationGuideGlobal)(nil)
var _ json.Unmarshaler = (*ImplementationGuideGlobal)(nil)

func (igm *ImplementationGuideManifest) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igm *ImplementationGuideManifest) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                                 `json:"id"`
		Image             []*fhir.String                         `json:"image"`
		ModifierExtension []*fhir.Extension                      `json:"modifierExtension"`
		Other             []*fhir.String                         `json:"other"`
		Page              []*ImplementationGuideManifestPage     `json:"page"`
		Rendering         *fhir.URL                              `json:"rendering"`
		Resource          []*ImplementationGuideManifestResource `json:"resource"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igm.Extension = raw.Extension
	igm.ID = raw.ID
	igm.Image = raw.Image
	igm.ModifierExtension = raw.ModifierExtension
	igm.Other = raw.Other
	igm.Page = raw.Page
	igm.Rendering = raw.Rendering
	igm.Resource = raw.Resource
	return nil
}

var _ json.Marshaler = (*ImplementationGuideManifest)(nil)
var _ json.Unmarshaler = (*ImplementationGuideManifest)(nil)

func (igmp *ImplementationGuideManifestPage) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igmp *ImplementationGuideManifestPage) UnmarshalJSON(data []byte) error {
	var raw struct {
		Anchor    []*fhir.String    `json:"anchor"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Name              *fhir.String      `json:"name"`
		Title             *fhir.String      `json:"title"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igmp.Anchor = raw.Anchor
	igmp.Extension = raw.Extension
	igmp.ID = raw.ID
	igmp.ModifierExtension = raw.ModifierExtension
	igmp.Name = raw.Name
	igmp.Title = raw.Title
	return nil
}

var _ json.Marshaler = (*ImplementationGuideManifestPage)(nil)
var _ json.Unmarshaler = (*ImplementationGuideManifestPage)(nil)

func (igmr *ImplementationGuideManifestResource) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (igmr *ImplementationGuideManifestResource) UnmarshalJSON(data []byte) error {
	var raw struct {
		ExampleBoolean   *fhir.Boolean     `json:"exampleBoolean"`
		ExampleCanonical *fhir.Canonical   `json:"exampleCanonical"`
		Extension        []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Reference         *fhir.Reference   `json:"reference"`
		RelativePath      *fhir.URL         `json:"relativePath"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	igmr.Example, err = validate.SelectOneOf[fhir.Element]("ImplementationGuide.manifest.resource.example",
		raw.ExampleBoolean,
		raw.ExampleCanonical)
	if err != nil {
		return err
	}
	igmr.Extension = raw.Extension
	igmr.ID = raw.ID
	igmr.ModifierExtension = raw.ModifierExtension
	igmr.Reference = raw.Reference
	igmr.RelativePath = raw.RelativePath
	return nil
}

var _ json.Marshaler = (*ImplementationGuideManifestResource)(nil)
var _ json.Unmarshaler = (*ImplementationGuideManifestResource)(nil)
