// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package auditevent

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A record of an event made for purposes of maintaining a security log.
// Typical uses include detection of intrusion attempts and monitoring for
// inappropriate usage.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/AuditEvent
//   - Source File: StructureDefinition-AuditEvent.json
type AuditEvent struct {

	// Indicator for type of action performed during the event that generated the
	// audit.
	Action *fhir.Code `fhirpath:"action"`

	// An actor taking an active role in the event or activity that is logged.
	Agent []*AuditEventAgent `fhirpath:"agent"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Specific instances of data or objects that have been accessed.
	Entity []*AuditEventEntity `fhirpath:"entity"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Indicates whether the event succeeded or failed.
	Outcome *fhir.Code `fhirpath:"outcome"`

	// A free text description of the outcome of the event.
	OutcomeDesc *fhir.String `fhirpath:"outcomeDesc"`

	// The period during which the activity occurred.
	Period *fhir.Period `fhirpath:"period"`

	// The purposeOfUse (reason) that was used during the event being recorded.
	PurposeOfEvent []*fhir.CodeableConcept `fhirpath:"purposeOfEvent"`

	// The time when the event was recorded.
	Recorded *fhir.Instant `fhirpath:"recorded"`

	// The system that is reporting the event.
	Source *AuditEventSource `fhirpath:"source"`

	// Identifier for the category of event.
	Subtype []*fhir.Coding `fhirpath:"subtype"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Identifier for a family of the event. For example, a menu item, program,
	// rule, policy, function code, application name or URL. It identifies the
	// performed function.
	Type *fhir.Coding `fhirpath:"type"`

	profileimpl.BaseAuditEvent
	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAction returns the value of the field Action.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetAction() *fhir.Code {
	if ae == nil {
		return nil
	}
	return ae.Action
}

// GetAgent returns the value of the field Agent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetAgent() []*AuditEventAgent {
	if ae == nil {
		return nil
	}
	return ae.Agent
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetContained() []fhir.Resource {
	if ae == nil {
		return nil
	}
	return ae.Contained
}

// GetEntity returns the value of the field Entity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetEntity() []*AuditEventEntity {
	if ae == nil {
		return nil
	}
	return ae.Entity
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetExtension() []*fhir.Extension {
	if ae == nil {
		return nil
	}
	return ae.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetID() string {
	if ae == nil {
		return ""
	}
	return ae.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetImplicitRules() *fhir.URI {
	if ae == nil {
		return nil
	}
	return ae.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetLanguage() *fhir.Code {
	if ae == nil {
		return nil
	}
	return ae.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetMeta() *fhir.Meta {
	if ae == nil {
		return nil
	}
	return ae.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetModifierExtension() []*fhir.Extension {
	if ae == nil {
		return nil
	}
	return ae.ModifierExtension
}

// GetOutcome returns the value of the field Outcome.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetOutcome() *fhir.Code {
	if ae == nil {
		return nil
	}
	return ae.Outcome
}

// GetOutcomeDesc returns the value of the field OutcomeDesc.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetOutcomeDesc() *fhir.String {
	if ae == nil {
		return nil
	}
	return ae.OutcomeDesc
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetPeriod() *fhir.Period {
	if ae == nil {
		return nil
	}
	return ae.Period
}

// GetPurposeOfEvent returns the value of the field PurposeOfEvent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetPurposeOfEvent() []*fhir.CodeableConcept {
	if ae == nil {
		return nil
	}
	return ae.PurposeOfEvent
}

// GetRecorded returns the value of the field Recorded.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetRecorded() *fhir.Instant {
	if ae == nil {
		return nil
	}
	return ae.Recorded
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetSource() *AuditEventSource {
	if ae == nil {
		return nil
	}
	return ae.Source
}

// GetSubtype returns the value of the field Subtype.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetSubtype() []*fhir.Coding {
	if ae == nil {
		return nil
	}
	return ae.Subtype
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetText() *fhir.Narrative {
	if ae == nil {
		return nil
	}
	return ae.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ae *AuditEvent) GetType() *fhir.Coding {
	if ae == nil {
		return nil
	}
	return ae.Type
}

// Actor involved in the event// An actor taking an active role in the event or activity that is logged.// Several agents may be associated (i.e. have some responsibility for an
// activity) with an event or activity.
// For example, an activity may be initiated by one user for other users or
// involve more than one user. However, only one user may be the
// initiator/requestor for the activity.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-AuditEvent.json
type AuditEventAgent struct {

	// Alternative agent Identifier. For a human, this should be a user identifier
	// text string from authentication system. This identifier would be one known
	// to a common authentication system (e.g. single sign-on), if available.
	AltID *fhir.String `fhirpath:"altId"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Where the event occurred.
	Location *fhir.Reference `fhirpath:"location"`

	// Type of media involved. Used when the event is about exporting/importing
	// onto media.
	Media *fhir.Coding `fhirpath:"media"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Human-meaningful name for the agent.
	Name *fhir.String `fhirpath:"name"`

	// Logical network location for application activity, if the activity has a
	// network location.
	Network *AuditEventAgentNetwork `fhirpath:"network"`

	// The policy or plan that authorized the activity being recorded. Typically, a
	// single activity may have multiple applicable policies, such as patient
	// consent, guarantor funding, etc. The policy would also indicate the security
	// token used.
	Policy []*fhir.URI `fhirpath:"policy"`

	// The reason (purpose of use), specific to this agent, that was used during
	// the event being recorded.
	PurposeOfUse []*fhir.CodeableConcept `fhirpath:"purposeOfUse"`

	// Indicator that the user is or is not the requestor, or initiator, for the
	// event being audited.
	Requestor *fhir.Boolean `fhirpath:"requestor"`

	// The security role that the user was acting under, that come from local codes
	// defined by the access control security system (e.g. RBAC, ABAC) used in the
	// local context.
	Role []*fhir.CodeableConcept `fhirpath:"role"`

	// Specification of the participation type the user plays when performing the
	// event.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// Reference to who this agent is that was involved in the event.
	Who *fhir.Reference `fhirpath:"who"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAltID returns the value of the field AltID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetAltID() *fhir.String {
	if aea == nil {
		return nil
	}
	return aea.AltID
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetExtension() []*fhir.Extension {
	if aea == nil {
		return nil
	}
	return aea.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetID() string {
	if aea == nil {
		return ""
	}
	return aea.ID
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetLocation() *fhir.Reference {
	if aea == nil {
		return nil
	}
	return aea.Location
}

// GetMedia returns the value of the field Media.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetMedia() *fhir.Coding {
	if aea == nil {
		return nil
	}
	return aea.Media
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetModifierExtension() []*fhir.Extension {
	if aea == nil {
		return nil
	}
	return aea.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetName() *fhir.String {
	if aea == nil {
		return nil
	}
	return aea.Name
}

// GetNetwork returns the value of the field Network.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetNetwork() *AuditEventAgentNetwork {
	if aea == nil {
		return nil
	}
	return aea.Network
}

// GetPolicy returns the value of the field Policy.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetPolicy() []*fhir.URI {
	if aea == nil {
		return nil
	}
	return aea.Policy
}

// GetPurposeOfUse returns the value of the field PurposeOfUse.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetPurposeOfUse() []*fhir.CodeableConcept {
	if aea == nil {
		return nil
	}
	return aea.PurposeOfUse
}

// GetRequestor returns the value of the field Requestor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetRequestor() *fhir.Boolean {
	if aea == nil {
		return nil
	}
	return aea.Requestor
}

// GetRole returns the value of the field Role.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetRole() []*fhir.CodeableConcept {
	if aea == nil {
		return nil
	}
	return aea.Role
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetType() *fhir.CodeableConcept {
	if aea == nil {
		return nil
	}
	return aea.Type
}

// GetWho returns the value of the field Who.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aea *AuditEventAgent) GetWho() *fhir.Reference {
	if aea == nil {
		return nil
	}
	return aea.Who
}

// Logical network location for application activity// Logical network location for application activity, if the activity has a
// network location.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-AuditEvent.json
type AuditEventAgentNetwork struct {

	// An identifier for the network access point of the user device for the audit
	// event.
	Address *fhir.String `fhirpath:"address"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// An identifier for the type of network access point that originated the audit
	// event.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAddress returns the value of the field Address.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aean *AuditEventAgentNetwork) GetAddress() *fhir.String {
	if aean == nil {
		return nil
	}
	return aean.Address
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aean *AuditEventAgentNetwork) GetExtension() []*fhir.Extension {
	if aean == nil {
		return nil
	}
	return aean.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aean *AuditEventAgentNetwork) GetID() string {
	if aean == nil {
		return ""
	}
	return aean.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aean *AuditEventAgentNetwork) GetModifierExtension() []*fhir.Extension {
	if aean == nil {
		return nil
	}
	return aean.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aean *AuditEventAgentNetwork) GetType() *fhir.Code {
	if aean == nil {
		return nil
	}
	return aean.Type
}

// Data or objects used// Specific instances of data or objects that have been accessed.// Required unless the values for event identification, agent identification,
// and audit source identification are sufficient to document the entire
// auditable event. Because events may have more than one entity, this group
// can be a repeating set of values.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-AuditEvent.json
type AuditEventEntity struct {

	// Text that describes the entity in more detail.
	Description *fhir.String `fhirpath:"description"`

	// Tagged value pairs for conveying additional information about the entity.
	Detail []*AuditEventEntityDetail `fhirpath:"detail"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Identifier for the data life-cycle stage for the entity.
	Lifecycle *fhir.Coding `fhirpath:"lifecycle"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A name of the entity in the audit event.
	Name *fhir.String `fhirpath:"name"`

	// The query parameters for a query-type entities.
	Query *fhir.Base64Binary `fhirpath:"query"`

	// Code representing the role the entity played in the event being audited.
	Role *fhir.Coding `fhirpath:"role"`

	// Security labels for the identified entity.
	SecurityLabel []*fhir.Coding `fhirpath:"securityLabel"`

	// The type of the object that was involved in this audit event.
	Type *fhir.Coding `fhirpath:"type"`

	// Identifies a specific instance of the entity. The reference should be
	// version specific.
	What *fhir.Reference `fhirpath:"what"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetDescription() *fhir.String {
	if aee == nil {
		return nil
	}
	return aee.Description
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetDetail() []*AuditEventEntityDetail {
	if aee == nil {
		return nil
	}
	return aee.Detail
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetExtension() []*fhir.Extension {
	if aee == nil {
		return nil
	}
	return aee.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetID() string {
	if aee == nil {
		return ""
	}
	return aee.ID
}

// GetLifecycle returns the value of the field Lifecycle.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetLifecycle() *fhir.Coding {
	if aee == nil {
		return nil
	}
	return aee.Lifecycle
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetModifierExtension() []*fhir.Extension {
	if aee == nil {
		return nil
	}
	return aee.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetName() *fhir.String {
	if aee == nil {
		return nil
	}
	return aee.Name
}

// GetQuery returns the value of the field Query.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetQuery() *fhir.Base64Binary {
	if aee == nil {
		return nil
	}
	return aee.Query
}

// GetRole returns the value of the field Role.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetRole() *fhir.Coding {
	if aee == nil {
		return nil
	}
	return aee.Role
}

// GetSecurityLabel returns the value of the field SecurityLabel.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetSecurityLabel() []*fhir.Coding {
	if aee == nil {
		return nil
	}
	return aee.SecurityLabel
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetType() *fhir.Coding {
	if aee == nil {
		return nil
	}
	return aee.Type
}

// GetWhat returns the value of the field What.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aee *AuditEventEntity) GetWhat() *fhir.Reference {
	if aee == nil {
		return nil
	}
	return aee.What
}

// Additional Information about the entity// Tagged value pairs for conveying additional information about the entity.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-AuditEvent.json
type AuditEventEntityDetail struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type of extra detail provided in the value.
	Type *fhir.String `fhirpath:"type"`

	// The value of the extra detail.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aeed *AuditEventEntityDetail) GetExtension() []*fhir.Extension {
	if aeed == nil {
		return nil
	}
	return aeed.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aeed *AuditEventEntityDetail) GetID() string {
	if aeed == nil {
		return ""
	}
	return aeed.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aeed *AuditEventEntityDetail) GetModifierExtension() []*fhir.Extension {
	if aeed == nil {
		return nil
	}
	return aeed.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aeed *AuditEventEntityDetail) GetType() *fhir.String {
	if aeed == nil {
		return nil
	}
	return aeed.Type
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aeed *AuditEventEntityDetail) GetValue() fhir.Element {
	if aeed == nil {
		return nil
	}
	return aeed.Value
}

// GetValueString returns the value of the field Value.
func (aeed *AuditEventEntityDetail) GetValueString() *fhir.String {
	if aeed == nil {
		return nil
	}
	val, ok := aeed.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueBase64Binary returns the value of the field Value.
func (aeed *AuditEventEntityDetail) GetValueBase64Binary() *fhir.Base64Binary {
	if aeed == nil {
		return nil
	}
	val, ok := aeed.Value.(*fhir.Base64Binary)
	if !ok {
		return nil
	}
	return val
}

// Audit Event Reporter// The system that is reporting the event.// Since multi-tier, distributed, or composite applications make source
// identification ambiguous, this collection of fields may repeat for each
// application or process actively involved in the event. For example, multiple
// value-sets can identify participating web servers, application processes,
// and database server threads in an n-tier distributed application. Passive
// event participants (e.g. low-level network transports) need not be
// identified.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-AuditEvent.json
type AuditEventSource struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Identifier of the source where the event was detected.
	Observer *fhir.Reference `fhirpath:"observer"`

	// Logical source location within the healthcare enterprise network. For
	// example, a hospital or other provider location within a multi-entity
	// provider group.
	Site *fhir.String `fhirpath:"site"`

	// Code specifying the type of source where event originated.
	Type []*fhir.Coding `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aes *AuditEventSource) GetExtension() []*fhir.Extension {
	if aes == nil {
		return nil
	}
	return aes.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aes *AuditEventSource) GetID() string {
	if aes == nil {
		return ""
	}
	return aes.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aes *AuditEventSource) GetModifierExtension() []*fhir.Extension {
	if aes == nil {
		return nil
	}
	return aes.ModifierExtension
}

// GetObserver returns the value of the field Observer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aes *AuditEventSource) GetObserver() *fhir.Reference {
	if aes == nil {
		return nil
	}
	return aes.Observer
}

// GetSite returns the value of the field Site.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aes *AuditEventSource) GetSite() *fhir.String {
	if aes == nil {
		return nil
	}
	return aes.Site
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (aes *AuditEventSource) GetType() []*fhir.Coding {
	if aes == nil {
		return nil
	}
	return aes.Type
}

func (ae *AuditEvent) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ae *AuditEvent) UnmarshalJSON(data []byte) error {
	var raw struct {
		Action    *fhir.Code          `json:"action"`
		Agent     []*AuditEventAgent  `json:"agent"`
		Contained []fhir.Resource     `json:"contained"`
		Entity    []*AuditEventEntity `json:"entity"`
		Extension []*fhir.Extension   `json:"extension"`

		ID                string                  `json:"id"`
		ImplicitRules     *fhir.URI               `json:"implicitRules"`
		Language          *fhir.Code              `json:"language"`
		Meta              *fhir.Meta              `json:"meta"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Outcome           *fhir.Code              `json:"outcome"`
		OutcomeDesc       *fhir.String            `json:"outcomeDesc"`
		Period            *fhir.Period            `json:"period"`
		PurposeOfEvent    []*fhir.CodeableConcept `json:"purposeOfEvent"`
		Recorded          *fhir.Instant           `json:"recorded"`
		Source            *AuditEventSource       `json:"source"`
		Subtype           []*fhir.Coding          `json:"subtype"`
		Text              *fhir.Narrative         `json:"text"`
		Type              *fhir.Coding            `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ae.Action = raw.Action
	ae.Agent = raw.Agent
	ae.Contained = raw.Contained
	ae.Entity = raw.Entity
	ae.Extension = raw.Extension
	ae.ID = raw.ID
	ae.ImplicitRules = raw.ImplicitRules
	ae.Language = raw.Language
	ae.Meta = raw.Meta
	ae.ModifierExtension = raw.ModifierExtension
	ae.Outcome = raw.Outcome
	ae.OutcomeDesc = raw.OutcomeDesc
	ae.Period = raw.Period
	ae.PurposeOfEvent = raw.PurposeOfEvent
	ae.Recorded = raw.Recorded
	ae.Source = raw.Source
	ae.Subtype = raw.Subtype
	ae.Text = raw.Text
	ae.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*AuditEvent)(nil)
var _ json.Unmarshaler = (*AuditEvent)(nil)

func (aea *AuditEventAgent) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (aea *AuditEventAgent) UnmarshalJSON(data []byte) error {
	var raw struct {
		AltID     *fhir.String      `json:"altId"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                  `json:"id"`
		Location          *fhir.Reference         `json:"location"`
		Media             *fhir.Coding            `json:"media"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Name              *fhir.String            `json:"name"`
		Network           *AuditEventAgentNetwork `json:"network"`
		Policy            []*fhir.URI             `json:"policy"`
		PurposeOfUse      []*fhir.CodeableConcept `json:"purposeOfUse"`
		Requestor         *fhir.Boolean           `json:"requestor"`
		Role              []*fhir.CodeableConcept `json:"role"`
		Type              *fhir.CodeableConcept   `json:"type"`
		Who               *fhir.Reference         `json:"who"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	aea.AltID = raw.AltID
	aea.Extension = raw.Extension
	aea.ID = raw.ID
	aea.Location = raw.Location
	aea.Media = raw.Media
	aea.ModifierExtension = raw.ModifierExtension
	aea.Name = raw.Name
	aea.Network = raw.Network
	aea.Policy = raw.Policy
	aea.PurposeOfUse = raw.PurposeOfUse
	aea.Requestor = raw.Requestor
	aea.Role = raw.Role
	aea.Type = raw.Type
	aea.Who = raw.Who
	return nil
}

var _ json.Marshaler = (*AuditEventAgent)(nil)
var _ json.Unmarshaler = (*AuditEventAgent)(nil)

func (aean *AuditEventAgentNetwork) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (aean *AuditEventAgentNetwork) UnmarshalJSON(data []byte) error {
	var raw struct {
		Address   *fhir.String      `json:"address"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Type              *fhir.Code        `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	aean.Address = raw.Address
	aean.Extension = raw.Extension
	aean.ID = raw.ID
	aean.ModifierExtension = raw.ModifierExtension
	aean.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*AuditEventAgentNetwork)(nil)
var _ json.Unmarshaler = (*AuditEventAgentNetwork)(nil)

func (aee *AuditEventEntity) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (aee *AuditEventEntity) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description *fhir.String              `json:"description"`
		Detail      []*AuditEventEntityDetail `json:"detail"`
		Extension   []*fhir.Extension         `json:"extension"`

		ID                string             `json:"id"`
		Lifecycle         *fhir.Coding       `json:"lifecycle"`
		ModifierExtension []*fhir.Extension  `json:"modifierExtension"`
		Name              *fhir.String       `json:"name"`
		Query             *fhir.Base64Binary `json:"query"`
		Role              *fhir.Coding       `json:"role"`
		SecurityLabel     []*fhir.Coding     `json:"securityLabel"`
		Type              *fhir.Coding       `json:"type"`
		What              *fhir.Reference    `json:"what"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	aee.Description = raw.Description
	aee.Detail = raw.Detail
	aee.Extension = raw.Extension
	aee.ID = raw.ID
	aee.Lifecycle = raw.Lifecycle
	aee.ModifierExtension = raw.ModifierExtension
	aee.Name = raw.Name
	aee.Query = raw.Query
	aee.Role = raw.Role
	aee.SecurityLabel = raw.SecurityLabel
	aee.Type = raw.Type
	aee.What = raw.What
	return nil
}

var _ json.Marshaler = (*AuditEventEntity)(nil)
var _ json.Unmarshaler = (*AuditEventEntity)(nil)

func (aeed *AuditEventEntityDetail) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (aeed *AuditEventEntityDetail) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string             `json:"id"`
		ModifierExtension []*fhir.Extension  `json:"modifierExtension"`
		Type              *fhir.String       `json:"type"`
		ValueString       *fhir.String       `json:"valueString"`
		ValueBase64Binary *fhir.Base64Binary `json:"valueBase64Binary"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	aeed.Extension = raw.Extension
	aeed.ID = raw.ID
	aeed.ModifierExtension = raw.ModifierExtension
	aeed.Type = raw.Type
	aeed.Value, err = validate.SelectOneOf[fhir.Element]("AuditEvent.entity.detail.value",
		raw.ValueString,
		raw.ValueBase64Binary)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*AuditEventEntityDetail)(nil)
var _ json.Unmarshaler = (*AuditEventEntityDetail)(nil)

func (aes *AuditEventSource) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (aes *AuditEventSource) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Observer          *fhir.Reference   `json:"observer"`
		Site              *fhir.String      `json:"site"`
		Type              []*fhir.Coding    `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	aes.Extension = raw.Extension
	aes.ID = raw.ID
	aes.ModifierExtension = raw.ModifierExtension
	aes.Observer = raw.Observer
	aes.Site = raw.Site
	aes.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*AuditEventSource)(nil)
var _ json.Unmarshaler = (*AuditEventSource)(nil)
