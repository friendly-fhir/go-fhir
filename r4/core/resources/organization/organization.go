// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package organization

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A formally or informally recognized grouping of people or organizations
// formed for the purpose of achieving some form of collective action. Includes
// companies, institutions, corporations, departments, community groups,
// healthcare practice groups, payer/insurer, etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Organization
//   - Source File: StructureDefinition-Organization.json
type Organization struct {

	// Whether the organization's record is still in active use.
	Active *fhir.Boolean `fhirpath:"active"`

	// An address for the organization.
	Address []*fhir.Address `fhirpath:"address"`

	// A list of alternate names that the organization is known as, or was known as
	// in the past.
	Alias []*fhir.String `fhirpath:"alias"`

	// Contact for the organization for a certain purpose.
	Contact []*OrganizationContact `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Technical endpoints providing access to services operated for the
	// organization.
	Endpoint []*fhir.Reference `fhirpath:"endpoint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifier for the organization that is used to identify the organization
	// across multiple disparate systems.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A name associated with the organization.
	Name *fhir.String `fhirpath:"name"`

	// The organization of which this organization forms a part.
	PartOf *fhir.Reference `fhirpath:"partOf"`

	// A contact detail for the organization.
	Telecom []*fhir.ContactPoint `fhirpath:"telecom"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// The kind(s) of organization that this is.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetActive returns the value of the field Active.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetActive() *fhir.Boolean {
	if o == nil {
		return nil
	}
	return o.Active
}

// GetAddress returns the value of the field Address.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetAddress() []*fhir.Address {
	if o == nil {
		return nil
	}
	return o.Address
}

// GetAlias returns the value of the field Alias.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetAlias() []*fhir.String {
	if o == nil {
		return nil
	}
	return o.Alias
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetContact() []*OrganizationContact {
	if o == nil {
		return nil
	}
	return o.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetContained() []fhir.Resource {
	if o == nil {
		return nil
	}
	return o.Contained
}

// GetEndpoint returns the value of the field Endpoint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetEndpoint() []*fhir.Reference {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetExtension() []*fhir.Extension {
	if o == nil {
		return nil
	}
	return o.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetIdentifier() []*fhir.Identifier {
	if o == nil {
		return nil
	}
	return o.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetImplicitRules() *fhir.URI {
	if o == nil {
		return nil
	}
	return o.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetLanguage() *fhir.Code {
	if o == nil {
		return nil
	}
	return o.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetMeta() *fhir.Meta {
	if o == nil {
		return nil
	}
	return o.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetModifierExtension() []*fhir.Extension {
	if o == nil {
		return nil
	}
	return o.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetName() *fhir.String {
	if o == nil {
		return nil
	}
	return o.Name
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetPartOf() *fhir.Reference {
	if o == nil {
		return nil
	}
	return o.PartOf
}

// GetTelecom returns the value of the field Telecom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetTelecom() []*fhir.ContactPoint {
	if o == nil {
		return nil
	}
	return o.Telecom
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetText() *fhir.Narrative {
	if o == nil {
		return nil
	}
	return o.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (o *Organization) GetType() []*fhir.CodeableConcept {
	if o == nil {
		return nil
	}
	return o.Type
}

// Contact for the organization for a certain purpose// Contact for the organization for a certain purpose.// Where multiple contacts for the same purpose are provided there is a
// standard extension that can be used to determine which one is the preferred
// contact to use.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Organization.json
type OrganizationContact struct {

	// Visiting or postal addresses for the contact.
	Address *fhir.Address `fhirpath:"address"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A name associated with the contact.
	Name *fhir.HumanName `fhirpath:"name"`

	// Indicates a purpose for which the contact can be reached.
	Purpose *fhir.CodeableConcept `fhirpath:"purpose"`

	// A contact detail (e.g. a telephone number or an email address) by which the
	// party may be contacted.
	Telecom []*fhir.ContactPoint `fhirpath:"telecom"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAddress returns the value of the field Address.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (oc *OrganizationContact) GetAddress() *fhir.Address {
	if oc == nil {
		return nil
	}
	return oc.Address
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (oc *OrganizationContact) GetExtension() []*fhir.Extension {
	if oc == nil {
		return nil
	}
	return oc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (oc *OrganizationContact) GetID() string {
	if oc == nil {
		return ""
	}
	return oc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (oc *OrganizationContact) GetModifierExtension() []*fhir.Extension {
	if oc == nil {
		return nil
	}
	return oc.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (oc *OrganizationContact) GetName() *fhir.HumanName {
	if oc == nil {
		return nil
	}
	return oc.Name
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (oc *OrganizationContact) GetPurpose() *fhir.CodeableConcept {
	if oc == nil {
		return nil
	}
	return oc.Purpose
}

// GetTelecom returns the value of the field Telecom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (oc *OrganizationContact) GetTelecom() []*fhir.ContactPoint {
	if oc == nil {
		return nil
	}
	return oc.Telecom
}
