// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package riskassessment

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// An assessment of the likely outcome(s) for a patient or other subject as
// well as the likelihood of each outcome.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/RiskAssessment
//   - Source File: StructureDefinition-RiskAssessment.json
type RiskAssessment struct {

	// A reference to the request that is fulfilled by this risk assessment.
	BasedOn *fhir.Reference `fhirpath:"basedOn"`

	// Indicates the source data considered as part of the assessment (for example,
	// FamilyHistory, Observations, Procedures, Conditions, etc.).
	Basis []*fhir.Reference `fhirpath:"basis"`

	// The type of the risk assessment performed.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// For assessments or prognosis specific to a particular condition, indicates
	// the condition being assessed.
	Condition *fhir.Reference `fhirpath:"condition"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The encounter where the assessment was performed.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifier assigned to the risk assessment.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// The algorithm, process or mechanism used to evaluate the risk.
	Method *fhir.CodeableConcept `fhirpath:"method"`

	// A description of the steps that might be taken to reduce the identified
	// risk(s).
	Mitigation *fhir.String `fhirpath:"mitigation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Additional comments about the risk assessment.
	Note []*fhir.Annotation `fhirpath:"note"`

	// The date (and possibly time) the risk assessment was performed.
	Occurrence fhir.Element `fhirpath:"occurrence"`

	// A reference to a resource that this risk assessment is part of, such as a
	// Procedure.
	Parent *fhir.Reference `fhirpath:"parent"`

	// The provider or software application that performed the assessment.
	Performer *fhir.Reference `fhirpath:"performer"`

	// Describes the expected outcome for the subject.
	Prediction []*RiskAssessmentPrediction `fhirpath:"prediction"`

	// The reason the risk assessment was performed.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Resources supporting the reason the risk assessment was performed.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// The status of the RiskAssessment, using the same statuses as an Observation.
	Status *fhir.Code `fhirpath:"status"`

	// The patient or group the risk assessment applies to.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetBasedOn() *fhir.Reference {
	if ra == nil {
		return nil
	}
	return ra.BasedOn
}

// GetBasis returns the value of the field Basis.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetBasis() []*fhir.Reference {
	if ra == nil {
		return nil
	}
	return ra.Basis
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetCode() *fhir.CodeableConcept {
	if ra == nil {
		return nil
	}
	return ra.Code
}

// GetCondition returns the value of the field Condition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetCondition() *fhir.Reference {
	if ra == nil {
		return nil
	}
	return ra.Condition
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetContained() []fhir.Resource {
	if ra == nil {
		return nil
	}
	return ra.Contained
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetEncounter() *fhir.Reference {
	if ra == nil {
		return nil
	}
	return ra.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetExtension() []*fhir.Extension {
	if ra == nil {
		return nil
	}
	return ra.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetID() string {
	if ra == nil {
		return ""
	}
	return ra.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetIdentifier() []*fhir.Identifier {
	if ra == nil {
		return nil
	}
	return ra.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetImplicitRules() *fhir.URI {
	if ra == nil {
		return nil
	}
	return ra.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetLanguage() *fhir.Code {
	if ra == nil {
		return nil
	}
	return ra.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetMeta() *fhir.Meta {
	if ra == nil {
		return nil
	}
	return ra.Meta
}

// GetMethod returns the value of the field Method.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetMethod() *fhir.CodeableConcept {
	if ra == nil {
		return nil
	}
	return ra.Method
}

// GetMitigation returns the value of the field Mitigation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetMitigation() *fhir.String {
	if ra == nil {
		return nil
	}
	return ra.Mitigation
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetModifierExtension() []*fhir.Extension {
	if ra == nil {
		return nil
	}
	return ra.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetNote() []*fhir.Annotation {
	if ra == nil {
		return nil
	}
	return ra.Note
}

// GetOccurrence returns the value of the field Occurrence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetOccurrence() fhir.Element {
	if ra == nil {
		return nil
	}
	return ra.Occurrence
}

// GetOccurrenceDateTime returns the value of the field Occurrence.
func (ra *RiskAssessment) GetOccurrenceDateTime() *fhir.DateTime {
	if ra == nil {
		return nil
	}
	val, ok := ra.Occurrence.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetOccurrencePeriod returns the value of the field Occurrence.
func (ra *RiskAssessment) GetOccurrencePeriod() *fhir.Period {
	if ra == nil {
		return nil
	}
	val, ok := ra.Occurrence.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetParent returns the value of the field Parent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetParent() *fhir.Reference {
	if ra == nil {
		return nil
	}
	return ra.Parent
}

// GetPerformer returns the value of the field Performer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetPerformer() *fhir.Reference {
	if ra == nil {
		return nil
	}
	return ra.Performer
}

// GetPrediction returns the value of the field Prediction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetPrediction() []*RiskAssessmentPrediction {
	if ra == nil {
		return nil
	}
	return ra.Prediction
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetReasonCode() []*fhir.CodeableConcept {
	if ra == nil {
		return nil
	}
	return ra.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetReasonReference() []*fhir.Reference {
	if ra == nil {
		return nil
	}
	return ra.ReasonReference
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetStatus() *fhir.Code {
	if ra == nil {
		return nil
	}
	return ra.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetSubject() *fhir.Reference {
	if ra == nil {
		return nil
	}
	return ra.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ra *RiskAssessment) GetText() *fhir.Narrative {
	if ra == nil {
		return nil
	}
	return ra.Text
}

// Outcome predicted// Describes the expected outcome for the subject.// Multiple repetitions can be used to identify the same type of outcome in
// different timeframes as well as different types of outcomes.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-RiskAssessment.json
type RiskAssessmentPrediction struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// One of the potential outcomes for the patient (e.g. remission, death, a
	// particular condition).
	Outcome *fhir.CodeableConcept `fhirpath:"outcome"`

	// Indicates how likely the outcome is (in the specified timeframe).
	Probability fhir.Element `fhirpath:"probability"`

	// Indicates how likely the outcome is (in the specified timeframe), expressed
	// as a qualitative value (e.g. low, medium, or high).
	QualitativeRisk *fhir.CodeableConcept `fhirpath:"qualitativeRisk"`

	// Additional information explaining the basis for the prediction.
	Rationale *fhir.String `fhirpath:"rationale"`

	// Indicates the risk for this particular subject (with their specific
	// characteristics) divided by the risk of the population in general. (Numbers
	// greater than 1 = higher risk than the population, numbers less than 1 =
	// lower risk.).
	RelativeRisk *fhir.Decimal `fhirpath:"relativeRisk"`

	// Indicates the period of time or age range of the subject to which the
	// specified probability applies.
	When fhir.Element `fhirpath:"when"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rap *RiskAssessmentPrediction) GetExtension() []*fhir.Extension {
	if rap == nil {
		return nil
	}
	return rap.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rap *RiskAssessmentPrediction) GetID() string {
	if rap == nil {
		return ""
	}
	return rap.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rap *RiskAssessmentPrediction) GetModifierExtension() []*fhir.Extension {
	if rap == nil {
		return nil
	}
	return rap.ModifierExtension
}

// GetOutcome returns the value of the field Outcome.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rap *RiskAssessmentPrediction) GetOutcome() *fhir.CodeableConcept {
	if rap == nil {
		return nil
	}
	return rap.Outcome
}

// GetProbability returns the value of the field Probability.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rap *RiskAssessmentPrediction) GetProbability() fhir.Element {
	if rap == nil {
		return nil
	}
	return rap.Probability
}

// GetProbabilityDecimal returns the value of the field Probability.
func (rap *RiskAssessmentPrediction) GetProbabilityDecimal() *fhir.Decimal {
	if rap == nil {
		return nil
	}
	val, ok := rap.Probability.(*fhir.Decimal)
	if !ok {
		return nil
	}
	return val
}

// GetProbabilityRange returns the value of the field Probability.
func (rap *RiskAssessmentPrediction) GetProbabilityRange() *fhir.Range {
	if rap == nil {
		return nil
	}
	val, ok := rap.Probability.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
} // GetQualitativeRisk returns the value of the field QualitativeRisk.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rap *RiskAssessmentPrediction) GetQualitativeRisk() *fhir.CodeableConcept {
	if rap == nil {
		return nil
	}
	return rap.QualitativeRisk
}

// GetRationale returns the value of the field Rationale.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rap *RiskAssessmentPrediction) GetRationale() *fhir.String {
	if rap == nil {
		return nil
	}
	return rap.Rationale
}

// GetRelativeRisk returns the value of the field RelativeRisk.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rap *RiskAssessmentPrediction) GetRelativeRisk() *fhir.Decimal {
	if rap == nil {
		return nil
	}
	return rap.RelativeRisk
}

// GetWhen returns the value of the field When.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rap *RiskAssessmentPrediction) GetWhen() fhir.Element {
	if rap == nil {
		return nil
	}
	return rap.When
}

// GetWhenPeriod returns the value of the field When.
func (rap *RiskAssessmentPrediction) GetWhenPeriod() *fhir.Period {
	if rap == nil {
		return nil
	}
	val, ok := rap.When.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetWhenRange returns the value of the field When.
func (rap *RiskAssessmentPrediction) GetWhenRange() *fhir.Range {
	if rap == nil {
		return nil
	}
	val, ok := rap.When.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
}
