// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package catalogentry

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Catalog entries are wrappers that contextualize items included in a catalog.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/CatalogEntry
//   - Source File: StructureDefinition-CatalogEntry.json
type CatalogEntry struct {

	// Used for examplefor Out of Formulary, or any specifics.
	AdditionalCharacteristic []*fhir.CodeableConcept `fhirpath:"additionalCharacteristic"`

	// User for example for ATC classification, or.
	AdditionalClassification []*fhir.CodeableConcept `fhirpath:"additionalClassification"`

	// Used in supporting related concepts, e.g. NDC to RxNorm.
	AdditionalIdentifier []*fhir.Identifier `fhirpath:"additionalIdentifier"`

	// Classes of devices, or ATC for medication.
	Classification []*fhir.CodeableConcept `fhirpath:"classification"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Used in supporting different identifiers for the same product, e.g.
	// manufacturer code and retailer code.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Typically date of issue is different from the beginning of the validity.
	// This can be used to see when an item was last updated.
	LastUpdated *fhir.DateTime `fhirpath:"lastUpdated"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Whether the entry represents an orderable item.
	Orderable *fhir.Boolean `fhirpath:"orderable"`

	// The item in a catalog or definition.
	ReferencedItem *fhir.Reference `fhirpath:"referencedItem"`

	// Used for example, to point to a substance, or to a device used to administer
	// a medication.
	RelatedEntry []*CatalogEntryRelatedEntry `fhirpath:"relatedEntry"`

	// Used to support catalog exchange even for unsupported products, e.g. getting
	// list of medications even if not prescribable.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// The type of item - medication, device, service, protocol or other.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// The date until which this catalog entry is expected to be active.
	ValidTo *fhir.DateTime `fhirpath:"validTo"`

	// The time period in which this catalog entry is expected to be active.
	ValidityPeriod *fhir.Period `fhirpath:"validityPeriod"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAdditionalCharacteristic returns the value of the field AdditionalCharacteristic.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetAdditionalCharacteristic() []*fhir.CodeableConcept {
	if ce == nil {
		return nil
	}
	return ce.AdditionalCharacteristic
}

// GetAdditionalClassification returns the value of the field AdditionalClassification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetAdditionalClassification() []*fhir.CodeableConcept {
	if ce == nil {
		return nil
	}
	return ce.AdditionalClassification
}

// GetAdditionalIdentifier returns the value of the field AdditionalIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetAdditionalIdentifier() []*fhir.Identifier {
	if ce == nil {
		return nil
	}
	return ce.AdditionalIdentifier
}

// GetClassification returns the value of the field Classification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetClassification() []*fhir.CodeableConcept {
	if ce == nil {
		return nil
	}
	return ce.Classification
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetContained() []fhir.Resource {
	if ce == nil {
		return nil
	}
	return ce.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetExtension() []*fhir.Extension {
	if ce == nil {
		return nil
	}
	return ce.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetID() string {
	if ce == nil {
		return ""
	}
	return ce.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetIdentifier() []*fhir.Identifier {
	if ce == nil {
		return nil
	}
	return ce.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetImplicitRules() *fhir.URI {
	if ce == nil {
		return nil
	}
	return ce.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetLanguage() *fhir.Code {
	if ce == nil {
		return nil
	}
	return ce.Language
}

// GetLastUpdated returns the value of the field LastUpdated.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetLastUpdated() *fhir.DateTime {
	if ce == nil {
		return nil
	}
	return ce.LastUpdated
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetMeta() *fhir.Meta {
	if ce == nil {
		return nil
	}
	return ce.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetModifierExtension() []*fhir.Extension {
	if ce == nil {
		return nil
	}
	return ce.ModifierExtension
}

// GetOrderable returns the value of the field Orderable.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetOrderable() *fhir.Boolean {
	if ce == nil {
		return nil
	}
	return ce.Orderable
}

// GetReferencedItem returns the value of the field ReferencedItem.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetReferencedItem() *fhir.Reference {
	if ce == nil {
		return nil
	}
	return ce.ReferencedItem
}

// GetRelatedEntry returns the value of the field RelatedEntry.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetRelatedEntry() []*CatalogEntryRelatedEntry {
	if ce == nil {
		return nil
	}
	return ce.RelatedEntry
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetStatus() *fhir.Code {
	if ce == nil {
		return nil
	}
	return ce.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetText() *fhir.Narrative {
	if ce == nil {
		return nil
	}
	return ce.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetType() *fhir.CodeableConcept {
	if ce == nil {
		return nil
	}
	return ce.Type
}

// GetValidTo returns the value of the field ValidTo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetValidTo() *fhir.DateTime {
	if ce == nil {
		return nil
	}
	return ce.ValidTo
}

// GetValidityPeriod returns the value of the field ValidityPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ce *CatalogEntry) GetValidityPeriod() *fhir.Period {
	if ce == nil {
		return nil
	}
	return ce.ValidityPeriod
}

// An item that this catalog entry is related to// Used for example, to point to a substance, or to a device used to administer
// a medication.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CatalogEntry.json
type CatalogEntryRelatedEntry struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The reference to the related item.
	Item *fhir.Reference `fhirpath:"item"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type of relation to the related item: child, parent, packageContent,
	// containerPackage, usedIn, uses, requires, etc.
	Relationtype *fhir.Code `fhirpath:"relationtype"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cere *CatalogEntryRelatedEntry) GetExtension() []*fhir.Extension {
	if cere == nil {
		return nil
	}
	return cere.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cere *CatalogEntryRelatedEntry) GetID() string {
	if cere == nil {
		return ""
	}
	return cere.ID
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cere *CatalogEntryRelatedEntry) GetItem() *fhir.Reference {
	if cere == nil {
		return nil
	}
	return cere.Item
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cere *CatalogEntryRelatedEntry) GetModifierExtension() []*fhir.Extension {
	if cere == nil {
		return nil
	}
	return cere.ModifierExtension
}

// GetRelationtype returns the value of the field Relationtype.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cere *CatalogEntryRelatedEntry) GetRelationtype() *fhir.Code {
	if cere == nil {
		return nil
	}
	return cere.Relationtype
}

func (ce *CatalogEntry) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ce *CatalogEntry) UnmarshalJSON(data []byte) error {
	var raw struct {
		AdditionalCharacteristic []*fhir.CodeableConcept `json:"additionalCharacteristic"`
		AdditionalClassification []*fhir.CodeableConcept `json:"additionalClassification"`
		AdditionalIdentifier     []*fhir.Identifier      `json:"additionalIdentifier"`
		Classification           []*fhir.CodeableConcept `json:"classification"`
		Contained                []fhir.Resource         `json:"contained"`
		Extension                []*fhir.Extension       `json:"extension"`

		ID                string                      `json:"id"`
		Identifier        []*fhir.Identifier          `json:"identifier"`
		ImplicitRules     *fhir.URI                   `json:"implicitRules"`
		Language          *fhir.Code                  `json:"language"`
		LastUpdated       *fhir.DateTime              `json:"lastUpdated"`
		Meta              *fhir.Meta                  `json:"meta"`
		ModifierExtension []*fhir.Extension           `json:"modifierExtension"`
		Orderable         *fhir.Boolean               `json:"orderable"`
		ReferencedItem    *fhir.Reference             `json:"referencedItem"`
		RelatedEntry      []*CatalogEntryRelatedEntry `json:"relatedEntry"`
		Status            *fhir.Code                  `json:"status"`
		Text              *fhir.Narrative             `json:"text"`
		Type              *fhir.CodeableConcept       `json:"type"`
		ValidTo           *fhir.DateTime              `json:"validTo"`
		ValidityPeriod    *fhir.Period                `json:"validityPeriod"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ce.AdditionalCharacteristic = raw.AdditionalCharacteristic
	ce.AdditionalClassification = raw.AdditionalClassification
	ce.AdditionalIdentifier = raw.AdditionalIdentifier
	ce.Classification = raw.Classification
	ce.Contained = raw.Contained
	ce.Extension = raw.Extension
	ce.ID = raw.ID
	ce.Identifier = raw.Identifier
	ce.ImplicitRules = raw.ImplicitRules
	ce.Language = raw.Language
	ce.LastUpdated = raw.LastUpdated
	ce.Meta = raw.Meta
	ce.ModifierExtension = raw.ModifierExtension
	ce.Orderable = raw.Orderable
	ce.ReferencedItem = raw.ReferencedItem
	ce.RelatedEntry = raw.RelatedEntry
	ce.Status = raw.Status
	ce.Text = raw.Text
	ce.Type = raw.Type
	ce.ValidTo = raw.ValidTo
	ce.ValidityPeriod = raw.ValidityPeriod
	return nil
}

var _ json.Marshaler = (*CatalogEntry)(nil)
var _ json.Unmarshaler = (*CatalogEntry)(nil)

func (cere *CatalogEntryRelatedEntry) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cere *CatalogEntryRelatedEntry) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Item              *fhir.Reference   `json:"item"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Relationtype      *fhir.Code        `json:"relationtype"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cere.Extension = raw.Extension
	cere.ID = raw.ID
	cere.Item = raw.Item
	cere.ModifierExtension = raw.ModifierExtension
	cere.Relationtype = raw.Relationtype
	return nil
}

var _ json.Marshaler = (*CatalogEntryRelatedEntry)(nil)
var _ json.Unmarshaler = (*CatalogEntryRelatedEntry)(nil)
