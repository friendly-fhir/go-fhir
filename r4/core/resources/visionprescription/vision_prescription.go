// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package visionprescription

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// An authorization for the provision of glasses and/or contact lenses to a
// patient.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/VisionPrescription
//   - Source File: StructureDefinition-VisionPrescription.json
type VisionPrescription struct {

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date this resource was created.
	Created *fhir.DateTime `fhirpath:"created"`

	// The date (and perhaps time) when the prescription was written.
	DateWritten *fhir.DateTime `fhirpath:"dateWritten"`

	// A reference to a resource that identifies the particular occurrence of
	// contact between patient and health care provider during which the
	// prescription was issued.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier assigned to this vision prescription.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Contain the details of the individual lens specifications and serves as the
	// authorization for the fullfillment by certified professionals.
	LensSpecification []*VisionPrescriptionLensSpecification `fhirpath:"lensSpecification"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A resource reference to the person to whom the vision prescription applies.
	Patient *fhir.Reference `fhirpath:"patient"`

	// The healthcare professional responsible for authorizing the prescription.
	Prescriber *fhir.Reference `fhirpath:"prescriber"`

	// The status of the resource instance.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetContained() []fhir.Resource {
	if vp == nil {
		return nil
	}
	return vp.Contained
}

// GetCreated returns the value of the field Created.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetCreated() *fhir.DateTime {
	if vp == nil {
		return nil
	}
	return vp.Created
}

// GetDateWritten returns the value of the field DateWritten.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetDateWritten() *fhir.DateTime {
	if vp == nil {
		return nil
	}
	return vp.DateWritten
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetEncounter() *fhir.Reference {
	if vp == nil {
		return nil
	}
	return vp.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetExtension() []*fhir.Extension {
	if vp == nil {
		return nil
	}
	return vp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetID() string {
	if vp == nil {
		return ""
	}
	return vp.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetIdentifier() []*fhir.Identifier {
	if vp == nil {
		return nil
	}
	return vp.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetImplicitRules() *fhir.URI {
	if vp == nil {
		return nil
	}
	return vp.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetLanguage() *fhir.Code {
	if vp == nil {
		return nil
	}
	return vp.Language
}

// GetLensSpecification returns the value of the field LensSpecification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetLensSpecification() []*VisionPrescriptionLensSpecification {
	if vp == nil {
		return nil
	}
	return vp.LensSpecification
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetMeta() *fhir.Meta {
	if vp == nil {
		return nil
	}
	return vp.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetModifierExtension() []*fhir.Extension {
	if vp == nil {
		return nil
	}
	return vp.ModifierExtension
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetPatient() *fhir.Reference {
	if vp == nil {
		return nil
	}
	return vp.Patient
}

// GetPrescriber returns the value of the field Prescriber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetPrescriber() *fhir.Reference {
	if vp == nil {
		return nil
	}
	return vp.Prescriber
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetStatus() *fhir.Code {
	if vp == nil {
		return nil
	}
	return vp.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vp *VisionPrescription) GetText() *fhir.Narrative {
	if vp == nil {
		return nil
	}
	return vp.Text
}

// Vision lens authorization// Contain the details of the individual lens specifications and serves as the
// authorization for the fullfillment by certified professionals.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-VisionPrescription.json
type VisionPrescriptionLensSpecification struct {

	// Power adjustment for multifocal lenses measured in dioptres (0.25 units).
	Add *fhir.Decimal `fhirpath:"add"`

	// Adjustment for astigmatism measured in integer degrees.
	Axis *fhir.Integer `fhirpath:"axis"`

	// Back curvature measured in millimetres.
	BackCurve *fhir.Decimal `fhirpath:"backCurve"`

	// Brand recommendations or restrictions.
	Brand *fhir.String `fhirpath:"brand"`

	// Special color or pattern.
	Color *fhir.String `fhirpath:"color"`

	// Power adjustment for astigmatism measured in dioptres (0.25 units).
	Cylinder *fhir.Decimal `fhirpath:"cylinder"`

	// Contact lens diameter measured in millimetres.
	Diameter *fhir.Decimal `fhirpath:"diameter"`

	// The recommended maximum wear period for the lens.
	Duration *fhir.Quantity `fhirpath:"duration"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The eye for which the lens specification applies.
	Eye *fhir.Code `fhirpath:"eye"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Notes for special requirements such as coatings and lens materials.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Contact lens power measured in dioptres (0.25 units).
	Power *fhir.Decimal `fhirpath:"power"`

	// Allows for adjustment on two axis.
	Prism []*VisionPrescriptionLensSpecificationPrism `fhirpath:"prism"`

	// Identifies the type of vision correction product which is required for the
	// patient.
	Product *fhir.CodeableConcept `fhirpath:"product"`

	// Lens power measured in dioptres (0.25 units).
	Sphere *fhir.Decimal `fhirpath:"sphere"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAdd returns the value of the field Add.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetAdd() *fhir.Decimal {
	if vpls == nil {
		return nil
	}
	return vpls.Add
}

// GetAxis returns the value of the field Axis.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetAxis() *fhir.Integer {
	if vpls == nil {
		return nil
	}
	return vpls.Axis
}

// GetBackCurve returns the value of the field BackCurve.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetBackCurve() *fhir.Decimal {
	if vpls == nil {
		return nil
	}
	return vpls.BackCurve
}

// GetBrand returns the value of the field Brand.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetBrand() *fhir.String {
	if vpls == nil {
		return nil
	}
	return vpls.Brand
}

// GetColor returns the value of the field Color.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetColor() *fhir.String {
	if vpls == nil {
		return nil
	}
	return vpls.Color
}

// GetCylinder returns the value of the field Cylinder.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetCylinder() *fhir.Decimal {
	if vpls == nil {
		return nil
	}
	return vpls.Cylinder
}

// GetDiameter returns the value of the field Diameter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetDiameter() *fhir.Decimal {
	if vpls == nil {
		return nil
	}
	return vpls.Diameter
}

// GetDuration returns the value of the field Duration.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetDuration() *fhir.Quantity {
	if vpls == nil {
		return nil
	}
	return vpls.Duration
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetExtension() []*fhir.Extension {
	if vpls == nil {
		return nil
	}
	return vpls.Extension
}

// GetEye returns the value of the field Eye.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetEye() *fhir.Code {
	if vpls == nil {
		return nil
	}
	return vpls.Eye
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetID() string {
	if vpls == nil {
		return ""
	}
	return vpls.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetModifierExtension() []*fhir.Extension {
	if vpls == nil {
		return nil
	}
	return vpls.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetNote() []*fhir.Annotation {
	if vpls == nil {
		return nil
	}
	return vpls.Note
}

// GetPower returns the value of the field Power.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetPower() *fhir.Decimal {
	if vpls == nil {
		return nil
	}
	return vpls.Power
}

// GetPrism returns the value of the field Prism.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetPrism() []*VisionPrescriptionLensSpecificationPrism {
	if vpls == nil {
		return nil
	}
	return vpls.Prism
}

// GetProduct returns the value of the field Product.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetProduct() *fhir.CodeableConcept {
	if vpls == nil {
		return nil
	}
	return vpls.Product
}

// GetSphere returns the value of the field Sphere.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vpls *VisionPrescriptionLensSpecification) GetSphere() *fhir.Decimal {
	if vpls == nil {
		return nil
	}
	return vpls.Sphere
}

// Eye alignment compensation// Allows for adjustment on two axis.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-VisionPrescription.json
type VisionPrescriptionLensSpecificationPrism struct {

	// Amount of prism to compensate for eye alignment in fractional units.
	Amount *fhir.Decimal `fhirpath:"amount"`

	// The relative base, or reference lens edge, for the prism.
	Base *fhir.Code `fhirpath:"base"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vplsp *VisionPrescriptionLensSpecificationPrism) GetAmount() *fhir.Decimal {
	if vplsp == nil {
		return nil
	}
	return vplsp.Amount
}

// GetBase returns the value of the field Base.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vplsp *VisionPrescriptionLensSpecificationPrism) GetBase() *fhir.Code {
	if vplsp == nil {
		return nil
	}
	return vplsp.Base
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vplsp *VisionPrescriptionLensSpecificationPrism) GetExtension() []*fhir.Extension {
	if vplsp == nil {
		return nil
	}
	return vplsp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vplsp *VisionPrescriptionLensSpecificationPrism) GetID() string {
	if vplsp == nil {
		return ""
	}
	return vplsp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (vplsp *VisionPrescriptionLensSpecificationPrism) GetModifierExtension() []*fhir.Extension {
	if vplsp == nil {
		return nil
	}
	return vplsp.ModifierExtension
}

func (vp *VisionPrescription) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (vp *VisionPrescription) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contained   []fhir.Resource   `json:"contained"`
		Created     *fhir.DateTime    `json:"created"`
		DateWritten *fhir.DateTime    `json:"dateWritten"`
		Encounter   *fhir.Reference   `json:"encounter"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string                                 `json:"id"`
		Identifier        []*fhir.Identifier                     `json:"identifier"`
		ImplicitRules     *fhir.URI                              `json:"implicitRules"`
		Language          *fhir.Code                             `json:"language"`
		LensSpecification []*VisionPrescriptionLensSpecification `json:"lensSpecification"`
		Meta              *fhir.Meta                             `json:"meta"`
		ModifierExtension []*fhir.Extension                      `json:"modifierExtension"`
		Patient           *fhir.Reference                        `json:"patient"`
		Prescriber        *fhir.Reference                        `json:"prescriber"`
		Status            *fhir.Code                             `json:"status"`
		Text              *fhir.Narrative                        `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	vp.Contained = raw.Contained
	vp.Created = raw.Created
	vp.DateWritten = raw.DateWritten
	vp.Encounter = raw.Encounter
	vp.Extension = raw.Extension
	vp.ID = raw.ID
	vp.Identifier = raw.Identifier
	vp.ImplicitRules = raw.ImplicitRules
	vp.Language = raw.Language
	vp.LensSpecification = raw.LensSpecification
	vp.Meta = raw.Meta
	vp.ModifierExtension = raw.ModifierExtension
	vp.Patient = raw.Patient
	vp.Prescriber = raw.Prescriber
	vp.Status = raw.Status
	vp.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*VisionPrescription)(nil)
var _ json.Unmarshaler = (*VisionPrescription)(nil)

func (vpls *VisionPrescriptionLensSpecification) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (vpls *VisionPrescriptionLensSpecification) UnmarshalJSON(data []byte) error {
	var raw struct {
		Add       *fhir.Decimal     `json:"add"`
		Axis      *fhir.Integer     `json:"axis"`
		BackCurve *fhir.Decimal     `json:"backCurve"`
		Brand     *fhir.String      `json:"brand"`
		Color     *fhir.String      `json:"color"`
		Cylinder  *fhir.Decimal     `json:"cylinder"`
		Diameter  *fhir.Decimal     `json:"diameter"`
		Duration  *fhir.Quantity    `json:"duration"`
		Extension []*fhir.Extension `json:"extension"`
		Eye       *fhir.Code        `json:"eye"`

		ID                string                                      `json:"id"`
		ModifierExtension []*fhir.Extension                           `json:"modifierExtension"`
		Note              []*fhir.Annotation                          `json:"note"`
		Power             *fhir.Decimal                               `json:"power"`
		Prism             []*VisionPrescriptionLensSpecificationPrism `json:"prism"`
		Product           *fhir.CodeableConcept                       `json:"product"`
		Sphere            *fhir.Decimal                               `json:"sphere"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	vpls.Add = raw.Add
	vpls.Axis = raw.Axis
	vpls.BackCurve = raw.BackCurve
	vpls.Brand = raw.Brand
	vpls.Color = raw.Color
	vpls.Cylinder = raw.Cylinder
	vpls.Diameter = raw.Diameter
	vpls.Duration = raw.Duration
	vpls.Extension = raw.Extension
	vpls.Eye = raw.Eye
	vpls.ID = raw.ID
	vpls.ModifierExtension = raw.ModifierExtension
	vpls.Note = raw.Note
	vpls.Power = raw.Power
	vpls.Prism = raw.Prism
	vpls.Product = raw.Product
	vpls.Sphere = raw.Sphere
	return nil
}

var _ json.Marshaler = (*VisionPrescriptionLensSpecification)(nil)
var _ json.Unmarshaler = (*VisionPrescriptionLensSpecification)(nil)

func (vplsp *VisionPrescriptionLensSpecificationPrism) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (vplsp *VisionPrescriptionLensSpecificationPrism) UnmarshalJSON(data []byte) error {
	var raw struct {
		Amount    *fhir.Decimal     `json:"amount"`
		Base      *fhir.Code        `json:"base"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	vplsp.Amount = raw.Amount
	vplsp.Base = raw.Base
	vplsp.Extension = raw.Extension
	vplsp.ID = raw.ID
	vplsp.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*VisionPrescriptionLensSpecificationPrism)(nil)
var _ json.Unmarshaler = (*VisionPrescriptionLensSpecificationPrism)(nil)
