// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package medication

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// This resource is primarily used for the identification and definition of a
// medication for the purposes of prescribing, dispensing, and administering a
// medication as well as for making statements about medication use.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Medication
//   - Source File: StructureDefinition-Medication.json
type Medication struct {

	// Specific amount of the drug in the packaged product. For example, when
	// specifying a product that has the same strength (For example, Insulin
	// glargine 100 unit per mL solution for injection), this attribute provides
	// additional clarification of the package amount (For example, 3 mL, 10mL,
	// etc.).
	Amount *fhir.Ratio `fhirpath:"amount"`

	// Information that only applies to packages (not products).
	Batch *MedicationBatch `fhirpath:"batch"`

	// A code (or set of codes) that specify this medication, or a textual
	// description if no code is available. Usage note: This could be a standard
	// medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could
	// also be a national or local formulary code, optionally with translations to
	// other code systems.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Describes the form of the item. Powder; tablets; capsule.
	Form *fhir.CodeableConcept `fhirpath:"form"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifier for this medication.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Identifies a particular constituent of interest in the product.
	Ingredient []*MedicationIngredient `fhirpath:"ingredient"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Describes the details of the manufacturer of the medication product. This is
	// not intended to represent the distributor of a medication product.
	Manufacturer *fhir.Reference `fhirpath:"manufacturer"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A code to indicate if the medication is in active use.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetAmount() *fhir.Ratio {
	if m == nil {
		return nil
	}
	return m.Amount
}

// GetBatch returns the value of the field Batch.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetBatch() *MedicationBatch {
	if m == nil {
		return nil
	}
	return m.Batch
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetCode() *fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.Code
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetContained() []fhir.Resource {
	if m == nil {
		return nil
	}
	return m.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetExtension() []*fhir.Extension {
	if m == nil {
		return nil
	}
	return m.Extension
}

// GetForm returns the value of the field Form.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetForm() *fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.Form
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetIdentifier() []*fhir.Identifier {
	if m == nil {
		return nil
	}
	return m.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetImplicitRules() *fhir.URI {
	if m == nil {
		return nil
	}
	return m.ImplicitRules
}

// GetIngredient returns the value of the field Ingredient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetIngredient() []*MedicationIngredient {
	if m == nil {
		return nil
	}
	return m.Ingredient
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetLanguage() *fhir.Code {
	if m == nil {
		return nil
	}
	return m.Language
}

// GetManufacturer returns the value of the field Manufacturer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetManufacturer() *fhir.Reference {
	if m == nil {
		return nil
	}
	return m.Manufacturer
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetMeta() *fhir.Meta {
	if m == nil {
		return nil
	}
	return m.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetModifierExtension() []*fhir.Extension {
	if m == nil {
		return nil
	}
	return m.ModifierExtension
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetStatus() *fhir.Code {
	if m == nil {
		return nil
	}
	return m.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Medication) GetText() *fhir.Narrative {
	if m == nil {
		return nil
	}
	return m.Text
}

// Details about packaged medications// Information that only applies to packages (not products).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Medication.json
type MedicationBatch struct {

	// When this specific batch of product will expire.
	ExpirationDate *fhir.DateTime `fhirpath:"expirationDate"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The assigned lot number of a batch of the specified product.
	LotNumber *fhir.String `fhirpath:"lotNumber"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExpirationDate returns the value of the field ExpirationDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mb *MedicationBatch) GetExpirationDate() *fhir.DateTime {
	if mb == nil {
		return nil
	}
	return mb.ExpirationDate
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mb *MedicationBatch) GetExtension() []*fhir.Extension {
	if mb == nil {
		return nil
	}
	return mb.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mb *MedicationBatch) GetID() string {
	if mb == nil {
		return ""
	}
	return mb.ID
}

// GetLotNumber returns the value of the field LotNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mb *MedicationBatch) GetLotNumber() *fhir.String {
	if mb == nil {
		return nil
	}
	return mb.LotNumber
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mb *MedicationBatch) GetModifierExtension() []*fhir.Extension {
	if mb == nil {
		return nil
	}
	return mb.ModifierExtension
}

// Active or inactive ingredient// Identifies a particular constituent of interest in the product.// The ingredients need not be a complete list. If an ingredient is not
// specified, this does not indicate whether an ingredient is present or
// absent. If an ingredient is specified it does not mean that all ingredients
// are specified. It is possible to specify both inactive and active
// ingredients.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Medication.json
type MedicationIngredient struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Indication of whether this ingredient affects the therapeutic action of the
	// drug.
	IsActive *fhir.Boolean `fhirpath:"isActive"`

	// The actual ingredient - either a substance (simple ingredient) or another
	// medication of a medication.
	Item fhir.Element `fhirpath:"item"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Specifies how many (or how much) of the items there are in this Medication.
	// For example, 250 mg per tablet. This is expressed as a ratio where the
	// numerator is 250mg and the denominator is 1 tablet.
	Strength *fhir.Ratio `fhirpath:"strength"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mi *MedicationIngredient) GetExtension() []*fhir.Extension {
	if mi == nil {
		return nil
	}
	return mi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mi *MedicationIngredient) GetID() string {
	if mi == nil {
		return ""
	}
	return mi.ID
}

// GetIsActive returns the value of the field IsActive.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mi *MedicationIngredient) GetIsActive() *fhir.Boolean {
	if mi == nil {
		return nil
	}
	return mi.IsActive
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mi *MedicationIngredient) GetItem() fhir.Element {
	if mi == nil {
		return nil
	}
	return mi.Item
}

// GetItemCodeableConcept returns the value of the field Item.
func (mi *MedicationIngredient) GetItemCodeableConcept() *fhir.CodeableConcept {
	if mi == nil {
		return nil
	}
	val, ok := mi.Item.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetItemReference returns the value of the field Item.
func (mi *MedicationIngredient) GetItemReference() *fhir.Reference {
	if mi == nil {
		return nil
	}
	val, ok := mi.Item.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mi *MedicationIngredient) GetModifierExtension() []*fhir.Extension {
	if mi == nil {
		return nil
	}
	return mi.ModifierExtension
}

// GetStrength returns the value of the field Strength.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mi *MedicationIngredient) GetStrength() *fhir.Ratio {
	if mi == nil {
		return nil
	}
	return mi.Strength
}
