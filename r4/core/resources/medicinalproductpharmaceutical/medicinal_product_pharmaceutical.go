// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package medicinalproductpharmaceutical

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A pharmaceutical product described in terms of its composition and dose
// form.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MedicinalProductPharmaceutical
//   - Source File: StructureDefinition-MedicinalProductPharmaceutical.json
type MedicinalProductPharmaceutical struct {

	// The administrable dose form, after necessary reconstitution.
	AdministrableDoseForm *fhir.CodeableConcept `fhirpath:"administrableDoseForm"`

	// Characteristics e.g. a products onset of action.
	Characteristics []*MedicinalProductPharmaceuticalCharacteristics `fhirpath:"characteristics"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Accompanying device.
	Device []*fhir.Reference `fhirpath:"device"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// An identifier for the pharmaceutical medicinal product.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Ingredient.
	Ingredient []*fhir.Reference `fhirpath:"ingredient"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The path by which the pharmaceutical product is taken into or makes contact
	// with the body.
	RouteOfAdministration []*MedicinalProductPharmaceuticalRouteOfAdministration `fhirpath:"routeOfAdministration"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Todo.
	UnitOfPresentation *fhir.CodeableConcept `fhirpath:"unitOfPresentation"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAdministrableDoseForm returns the value of the field AdministrableDoseForm.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetAdministrableDoseForm() *fhir.CodeableConcept {
	if mpp == nil {
		return nil
	}
	return mpp.AdministrableDoseForm
}

// GetCharacteristics returns the value of the field Characteristics.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetCharacteristics() []*MedicinalProductPharmaceuticalCharacteristics {
	if mpp == nil {
		return nil
	}
	return mpp.Characteristics
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetContained() []fhir.Resource {
	if mpp == nil {
		return nil
	}
	return mpp.Contained
}

// GetDevice returns the value of the field Device.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetDevice() []*fhir.Reference {
	if mpp == nil {
		return nil
	}
	return mpp.Device
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetExtension() []*fhir.Extension {
	if mpp == nil {
		return nil
	}
	return mpp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetID() string {
	if mpp == nil {
		return ""
	}
	return mpp.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetIdentifier() []*fhir.Identifier {
	if mpp == nil {
		return nil
	}
	return mpp.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetImplicitRules() *fhir.URI {
	if mpp == nil {
		return nil
	}
	return mpp.ImplicitRules
}

// GetIngredient returns the value of the field Ingredient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetIngredient() []*fhir.Reference {
	if mpp == nil {
		return nil
	}
	return mpp.Ingredient
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetLanguage() *fhir.Code {
	if mpp == nil {
		return nil
	}
	return mpp.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetMeta() *fhir.Meta {
	if mpp == nil {
		return nil
	}
	return mpp.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetModifierExtension() []*fhir.Extension {
	if mpp == nil {
		return nil
	}
	return mpp.ModifierExtension
}

// GetRouteOfAdministration returns the value of the field RouteOfAdministration.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetRouteOfAdministration() []*MedicinalProductPharmaceuticalRouteOfAdministration {
	if mpp == nil {
		return nil
	}
	return mpp.RouteOfAdministration
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetText() *fhir.Narrative {
	if mpp == nil {
		return nil
	}
	return mpp.Text
}

// GetUnitOfPresentation returns the value of the field UnitOfPresentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPharmaceutical) GetUnitOfPresentation() *fhir.CodeableConcept {
	if mpp == nil {
		return nil
	}
	return mpp.UnitOfPresentation
}

// Characteristics e.g. a products onset of action// Characteristics e.g. a products onset of action.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductPharmaceutical.json
type MedicinalProductPharmaceuticalCharacteristics struct {

	// A coded characteristic.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The status of characteristic e.g. assigned or pending.
	Status *fhir.CodeableConcept `fhirpath:"status"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mppc *MedicinalProductPharmaceuticalCharacteristics) GetCode() *fhir.CodeableConcept {
	if mppc == nil {
		return nil
	}
	return mppc.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mppc *MedicinalProductPharmaceuticalCharacteristics) GetExtension() []*fhir.Extension {
	if mppc == nil {
		return nil
	}
	return mppc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mppc *MedicinalProductPharmaceuticalCharacteristics) GetID() string {
	if mppc == nil {
		return ""
	}
	return mppc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mppc *MedicinalProductPharmaceuticalCharacteristics) GetModifierExtension() []*fhir.Extension {
	if mppc == nil {
		return nil
	}
	return mppc.ModifierExtension
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mppc *MedicinalProductPharmaceuticalCharacteristics) GetStatus() *fhir.CodeableConcept {
	if mppc == nil {
		return nil
	}
	return mppc.Status
}

// The path by which the pharmaceutical product is taken into or makes contact
// with the body// The path by which the pharmaceutical product is taken into or makes contact
// with the body.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductPharmaceutical.json
type MedicinalProductPharmaceuticalRouteOfAdministration struct {

	// Coded expression for the route.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The first dose (dose quantity) administered in humans can be specified, for
	// a product under investigation, using a numerical value and its unit of
	// measurement.
	FirstDose *fhir.Quantity `fhirpath:"firstDose"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The maximum dose per day (maximum dose quantity to be administered in any
	// one 24-h period) that can be administered as per the protocol referenced in
	// the clinical trial authorisation.
	MaxDosePerDay *fhir.Quantity `fhirpath:"maxDosePerDay"`

	// The maximum dose per treatment period that can be administered as per the
	// protocol referenced in the clinical trial authorisation.
	MaxDosePerTreatmentPeriod *fhir.Ratio `fhirpath:"maxDosePerTreatmentPeriod"`

	// The maximum single dose that can be administered as per the protocol of a
	// clinical trial can be specified using a numerical value and its unit of
	// measurement.
	MaxSingleDose *fhir.Quantity `fhirpath:"maxSingleDose"`

	// The maximum treatment period during which an Investigational Medicinal
	// Product can be administered as per the protocol referenced in the clinical
	// trial authorisation.
	MaxTreatmentPeriod *fhir.Duration `fhirpath:"maxTreatmentPeriod"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A species for which this route applies.
	TargetSpecies []*MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies `fhirpath:"targetSpecies"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproa *MedicinalProductPharmaceuticalRouteOfAdministration) GetCode() *fhir.CodeableConcept {
	if mpproa == nil {
		return nil
	}
	return mpproa.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproa *MedicinalProductPharmaceuticalRouteOfAdministration) GetExtension() []*fhir.Extension {
	if mpproa == nil {
		return nil
	}
	return mpproa.Extension
}

// GetFirstDose returns the value of the field FirstDose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproa *MedicinalProductPharmaceuticalRouteOfAdministration) GetFirstDose() *fhir.Quantity {
	if mpproa == nil {
		return nil
	}
	return mpproa.FirstDose
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproa *MedicinalProductPharmaceuticalRouteOfAdministration) GetID() string {
	if mpproa == nil {
		return ""
	}
	return mpproa.ID
}

// GetMaxDosePerDay returns the value of the field MaxDosePerDay.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproa *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxDosePerDay() *fhir.Quantity {
	if mpproa == nil {
		return nil
	}
	return mpproa.MaxDosePerDay
}

// GetMaxDosePerTreatmentPeriod returns the value of the field MaxDosePerTreatmentPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproa *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxDosePerTreatmentPeriod() *fhir.Ratio {
	if mpproa == nil {
		return nil
	}
	return mpproa.MaxDosePerTreatmentPeriod
}

// GetMaxSingleDose returns the value of the field MaxSingleDose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproa *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxSingleDose() *fhir.Quantity {
	if mpproa == nil {
		return nil
	}
	return mpproa.MaxSingleDose
}

// GetMaxTreatmentPeriod returns the value of the field MaxTreatmentPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproa *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxTreatmentPeriod() *fhir.Duration {
	if mpproa == nil {
		return nil
	}
	return mpproa.MaxTreatmentPeriod
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproa *MedicinalProductPharmaceuticalRouteOfAdministration) GetModifierExtension() []*fhir.Extension {
	if mpproa == nil {
		return nil
	}
	return mpproa.ModifierExtension
}

// GetTargetSpecies returns the value of the field TargetSpecies.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproa *MedicinalProductPharmaceuticalRouteOfAdministration) GetTargetSpecies() []*MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies {
	if mpproa == nil {
		return nil
	}
	return mpproa.TargetSpecies
}

// A species for which this route applies// A species for which this route applies.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductPharmaceutical.json
type MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies struct {

	// Coded expression for the species.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A species specific time during which consumption of animal product is not
	// appropriate.
	WithdrawalPeriod []*MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod `fhirpath:"withdrawalPeriod"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproats *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies) GetCode() *fhir.CodeableConcept {
	if mpproats == nil {
		return nil
	}
	return mpproats.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproats *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies) GetExtension() []*fhir.Extension {
	if mpproats == nil {
		return nil
	}
	return mpproats.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproats *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies) GetID() string {
	if mpproats == nil {
		return ""
	}
	return mpproats.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproats *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies) GetModifierExtension() []*fhir.Extension {
	if mpproats == nil {
		return nil
	}
	return mpproats.ModifierExtension
}

// GetWithdrawalPeriod returns the value of the field WithdrawalPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproats *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies) GetWithdrawalPeriod() []*MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod {
	if mpproats == nil {
		return nil
	}
	return mpproats.WithdrawalPeriod
}

// A species specific time during which consumption of animal product is not
// appropriate// A species specific time during which consumption of animal product is not
// appropriate.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductPharmaceutical.json
type MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Extra information about the withdrawal period.
	SupportingInformation *fhir.String `fhirpath:"supportingInformation"`

	// Coded expression for the type of tissue for which the withdrawal period
	// applues, e.g. meat, milk.
	Tissue *fhir.CodeableConcept `fhirpath:"tissue"`

	// A value for the time.
	Value *fhir.Quantity `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproatswp *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod) GetExtension() []*fhir.Extension {
	if mpproatswp == nil {
		return nil
	}
	return mpproatswp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproatswp *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod) GetID() string {
	if mpproatswp == nil {
		return ""
	}
	return mpproatswp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproatswp *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod) GetModifierExtension() []*fhir.Extension {
	if mpproatswp == nil {
		return nil
	}
	return mpproatswp.ModifierExtension
}

// GetSupportingInformation returns the value of the field SupportingInformation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproatswp *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod) GetSupportingInformation() *fhir.String {
	if mpproatswp == nil {
		return nil
	}
	return mpproatswp.SupportingInformation
}

// GetTissue returns the value of the field Tissue.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproatswp *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod) GetTissue() *fhir.CodeableConcept {
	if mpproatswp == nil {
		return nil
	}
	return mpproatswp.Tissue
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpproatswp *MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod) GetValue() *fhir.Quantity {
	if mpproatswp == nil {
		return nil
	}
	return mpproatswp.Value
}
