// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package imagingstudy

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Representation of the content produced in a DICOM imaging study. A study
// comprises a set of series, each of which includes a set of Service-Object
// Pair Instances (SOP Instances - images or other data) acquired or produced
// in a common context. A series is of only one modality (e.g. X-ray, CT, MR,
// ultrasound), but a study may have multiple series of different modalities.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ImagingStudy
//   - Source File: StructureDefinition-ImagingStudy.json
type ImagingStudy struct {

	// A list of the diagnostic requests that resulted in this imaging study being
	// performed.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The Imaging Manager description of the study. Institution-generated
	// description or classification of the Study (component) performed.
	Description *fhir.String `fhirpath:"description"`

	// The healthcare event (e.g. a patient and healthcare provider interaction)
	// during which this ImagingStudy is made.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// The network service providing access (e.g., query, view, or retrieval) for
	// the study. See implementation notes for information about using DICOM
	// endpoints. A study-level endpoint applies to each series in the study,
	// unless overridden by a series-level endpoint with the same
	// Endpoint.connectionType.
	Endpoint []*fhir.Reference `fhirpath:"endpoint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifiers for the ImagingStudy such as DICOM Study Instance UID, and
	// Accession Number.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Who read the study and interpreted the images or other content.
	Interpreter []*fhir.Reference `fhirpath:"interpreter"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The principal physical location where the ImagingStudy was performed.
	Location *fhir.Reference `fhirpath:"location"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// A list of all the series.modality values that are actual acquisition
	// modalities, i.e. those in the DICOM Context Group 29 (value set OID
	// 1.2.840.10008.6.1.19).
	Modality []*fhir.Coding `fhirpath:"modality"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Per the recommended DICOM mapping, this element is derived from the Study
	// Description attribute (0008,1030). Observations or findings about the
	// imaging study should be recorded in another resource, e.g. Observation, and
	// not in this element.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Number of SOP Instances in Study. This value given may be larger than the
	// number of instance elements this resource contains due to resource
	// availability, security, or other factors. This element should be present if
	// any instance elements are present.
	NumberOfInstances *fhir.UnsignedInt `fhirpath:"numberOfInstances"`

	// Number of Series in the Study. This value given may be larger than the
	// number of series elements this Resource contains due to resource
	// availability, security, or other factors. This element should be present if
	// any series elements are present.
	NumberOfSeries *fhir.UnsignedInt `fhirpath:"numberOfSeries"`

	// The code for the performed procedure type.
	ProcedureCode []*fhir.CodeableConcept `fhirpath:"procedureCode"`

	// The procedure which this ImagingStudy was part of.
	ProcedureReference *fhir.Reference `fhirpath:"procedureReference"`

	// Description of clinical condition indicating why the ImagingStudy was
	// requested.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Indicates another resource whose existence justifies this Study.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// The requesting/referring physician.
	Referrer *fhir.Reference `fhirpath:"referrer"`

	// Each study has one or more series of images or other content.
	Series []*ImagingStudySeries `fhirpath:"series"`

	// Date and time the study started.
	Started *fhir.DateTime `fhirpath:"started"`

	// The current state of the ImagingStudy.
	Status *fhir.Code `fhirpath:"status"`

	// The subject, typically a patient, of the imaging study.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetBasedOn() []*fhir.Reference {
	if is == nil {
		return nil
	}
	return is.BasedOn
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetContained() []fhir.Resource {
	if is == nil {
		return nil
	}
	return is.Contained
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetDescription() *fhir.String {
	if is == nil {
		return nil
	}
	return is.Description
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetEncounter() *fhir.Reference {
	if is == nil {
		return nil
	}
	return is.Encounter
}

// GetEndpoint returns the value of the field Endpoint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetEndpoint() []*fhir.Reference {
	if is == nil {
		return nil
	}
	return is.Endpoint
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetExtension() []*fhir.Extension {
	if is == nil {
		return nil
	}
	return is.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetID() string {
	if is == nil {
		return ""
	}
	return is.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetIdentifier() []*fhir.Identifier {
	if is == nil {
		return nil
	}
	return is.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetImplicitRules() *fhir.URI {
	if is == nil {
		return nil
	}
	return is.ImplicitRules
}

// GetInterpreter returns the value of the field Interpreter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetInterpreter() []*fhir.Reference {
	if is == nil {
		return nil
	}
	return is.Interpreter
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetLanguage() *fhir.Code {
	if is == nil {
		return nil
	}
	return is.Language
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetLocation() *fhir.Reference {
	if is == nil {
		return nil
	}
	return is.Location
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetMeta() *fhir.Meta {
	if is == nil {
		return nil
	}
	return is.Meta
}

// GetModality returns the value of the field Modality.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetModality() []*fhir.Coding {
	if is == nil {
		return nil
	}
	return is.Modality
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetModifierExtension() []*fhir.Extension {
	if is == nil {
		return nil
	}
	return is.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetNote() []*fhir.Annotation {
	if is == nil {
		return nil
	}
	return is.Note
}

// GetNumberOfInstances returns the value of the field NumberOfInstances.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetNumberOfInstances() *fhir.UnsignedInt {
	if is == nil {
		return nil
	}
	return is.NumberOfInstances
}

// GetNumberOfSeries returns the value of the field NumberOfSeries.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetNumberOfSeries() *fhir.UnsignedInt {
	if is == nil {
		return nil
	}
	return is.NumberOfSeries
}

// GetProcedureCode returns the value of the field ProcedureCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetProcedureCode() []*fhir.CodeableConcept {
	if is == nil {
		return nil
	}
	return is.ProcedureCode
}

// GetProcedureReference returns the value of the field ProcedureReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetProcedureReference() *fhir.Reference {
	if is == nil {
		return nil
	}
	return is.ProcedureReference
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetReasonCode() []*fhir.CodeableConcept {
	if is == nil {
		return nil
	}
	return is.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetReasonReference() []*fhir.Reference {
	if is == nil {
		return nil
	}
	return is.ReasonReference
}

// GetReferrer returns the value of the field Referrer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetReferrer() *fhir.Reference {
	if is == nil {
		return nil
	}
	return is.Referrer
}

// GetSeries returns the value of the field Series.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetSeries() []*ImagingStudySeries {
	if is == nil {
		return nil
	}
	return is.Series
}

// GetStarted returns the value of the field Started.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetStarted() *fhir.DateTime {
	if is == nil {
		return nil
	}
	return is.Started
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetStatus() *fhir.Code {
	if is == nil {
		return nil
	}
	return is.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetSubject() *fhir.Reference {
	if is == nil {
		return nil
	}
	return is.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (is *ImagingStudy) GetText() *fhir.Narrative {
	if is == nil {
		return nil
	}
	return is.Text
}

// Each study has one or more series of instances// Each study has one or more series of images or other content.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImagingStudy.json
type ImagingStudySeries struct {

	// The anatomic structures examined. See DICOM Part 16 Annex L
	// (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html)
	// for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of
	// body part imaged; if so, it shall be consistent with any content of
	// ImagingStudy.series.laterality.
	BodySite *fhir.Coding `fhirpath:"bodySite"`

	// A description of the series.
	Description *fhir.String `fhirpath:"description"`

	// The network service providing access (e.g., query, view, or retrieval) for
	// this series. See implementation notes for information about using DICOM
	// endpoints. A series-level endpoint, if present, has precedence over a
	// study-level endpoint with the same Endpoint.connectionType.
	Endpoint []*fhir.Reference `fhirpath:"endpoint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A single SOP instance within the series, e.g. an image, or presentation
	// state.
	Instance []*ImagingStudySeriesInstance `fhirpath:"instance"`

	// The laterality of the (possibly paired) anatomic structures examined. E.g.,
	// the left knee, both lungs, or unpaired abdomen. If present, shall be
	// consistent with any laterality information indicated in
	// ImagingStudy.series.bodySite.
	Laterality *fhir.Coding `fhirpath:"laterality"`

	// The modality of this series sequence.
	Modality *fhir.Coding `fhirpath:"modality"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The numeric identifier of this series in the study.
	Number *fhir.UnsignedInt `fhirpath:"number"`

	// Number of SOP Instances in the Study. The value given may be larger than the
	// number of instance elements this resource contains due to resource
	// availability, security, or other factors. This element should be present if
	// any instance elements are present.
	NumberOfInstances *fhir.UnsignedInt `fhirpath:"numberOfInstances"`

	// Indicates who or what performed the series and how they were involved.
	Performer []*ImagingStudySeriesPerformer `fhirpath:"performer"`

	// The specimen imaged, e.g., for whole slide imaging of a biopsy.
	Specimen []*fhir.Reference `fhirpath:"specimen"`

	// The date and time the series was started.
	Started *fhir.DateTime `fhirpath:"started"`

	// The DICOM Series Instance UID for the series.
	Uid *fhir.ID `fhirpath:"uid"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBodySite returns the value of the field BodySite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetBodySite() *fhir.Coding {
	if iss == nil {
		return nil
	}
	return iss.BodySite
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetDescription() *fhir.String {
	if iss == nil {
		return nil
	}
	return iss.Description
}

// GetEndpoint returns the value of the field Endpoint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetEndpoint() []*fhir.Reference {
	if iss == nil {
		return nil
	}
	return iss.Endpoint
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetExtension() []*fhir.Extension {
	if iss == nil {
		return nil
	}
	return iss.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetID() string {
	if iss == nil {
		return ""
	}
	return iss.ID
}

// GetInstance returns the value of the field Instance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetInstance() []*ImagingStudySeriesInstance {
	if iss == nil {
		return nil
	}
	return iss.Instance
}

// GetLaterality returns the value of the field Laterality.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetLaterality() *fhir.Coding {
	if iss == nil {
		return nil
	}
	return iss.Laterality
}

// GetModality returns the value of the field Modality.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetModality() *fhir.Coding {
	if iss == nil {
		return nil
	}
	return iss.Modality
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetModifierExtension() []*fhir.Extension {
	if iss == nil {
		return nil
	}
	return iss.ModifierExtension
}

// GetNumber returns the value of the field Number.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetNumber() *fhir.UnsignedInt {
	if iss == nil {
		return nil
	}
	return iss.Number
}

// GetNumberOfInstances returns the value of the field NumberOfInstances.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetNumberOfInstances() *fhir.UnsignedInt {
	if iss == nil {
		return nil
	}
	return iss.NumberOfInstances
}

// GetPerformer returns the value of the field Performer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetPerformer() []*ImagingStudySeriesPerformer {
	if iss == nil {
		return nil
	}
	return iss.Performer
}

// GetSpecimen returns the value of the field Specimen.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetSpecimen() []*fhir.Reference {
	if iss == nil {
		return nil
	}
	return iss.Specimen
}

// GetStarted returns the value of the field Started.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetStarted() *fhir.DateTime {
	if iss == nil {
		return nil
	}
	return iss.Started
}

// GetUid returns the value of the field Uid.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (iss *ImagingStudySeries) GetUid() *fhir.ID {
	if iss == nil {
		return nil
	}
	return iss.Uid
}

// A single SOP instance from the series// A single SOP instance within the series, e.g. an image, or presentation
// state.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImagingStudy.json
type ImagingStudySeriesInstance struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The number of instance in the series.
	Number *fhir.UnsignedInt `fhirpath:"number"`

	// DICOM instance type.
	SopClass *fhir.Coding `fhirpath:"sopClass"`

	// The description of the instance.
	Title *fhir.String `fhirpath:"title"`

	// The DICOM SOP Instance UID for this image or other DICOM content.
	Uid *fhir.ID `fhirpath:"uid"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issi *ImagingStudySeriesInstance) GetExtension() []*fhir.Extension {
	if issi == nil {
		return nil
	}
	return issi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issi *ImagingStudySeriesInstance) GetID() string {
	if issi == nil {
		return ""
	}
	return issi.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issi *ImagingStudySeriesInstance) GetModifierExtension() []*fhir.Extension {
	if issi == nil {
		return nil
	}
	return issi.ModifierExtension
}

// GetNumber returns the value of the field Number.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issi *ImagingStudySeriesInstance) GetNumber() *fhir.UnsignedInt {
	if issi == nil {
		return nil
	}
	return issi.Number
}

// GetSopClass returns the value of the field SopClass.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issi *ImagingStudySeriesInstance) GetSopClass() *fhir.Coding {
	if issi == nil {
		return nil
	}
	return issi.SopClass
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issi *ImagingStudySeriesInstance) GetTitle() *fhir.String {
	if issi == nil {
		return nil
	}
	return issi.Title
}

// GetUid returns the value of the field Uid.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issi *ImagingStudySeriesInstance) GetUid() *fhir.ID {
	if issi == nil {
		return nil
	}
	return issi.Uid
}

// Who performed the series// Indicates who or what performed the series and how they were involved.// If the person who performed the series is not known, their Organization may
// be recorded. A patient, or related person, may be the performer, e.g. for
// patient-captured images.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImagingStudy.json
type ImagingStudySeriesPerformer struct {

	// Indicates who or what performed the series.
	Actor *fhir.Reference `fhirpath:"actor"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Distinguishes the type of involvement of the performer in the series.
	Function *fhir.CodeableConcept `fhirpath:"function"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetActor returns the value of the field Actor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issp *ImagingStudySeriesPerformer) GetActor() *fhir.Reference {
	if issp == nil {
		return nil
	}
	return issp.Actor
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issp *ImagingStudySeriesPerformer) GetExtension() []*fhir.Extension {
	if issp == nil {
		return nil
	}
	return issp.Extension
}

// GetFunction returns the value of the field Function.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issp *ImagingStudySeriesPerformer) GetFunction() *fhir.CodeableConcept {
	if issp == nil {
		return nil
	}
	return issp.Function
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issp *ImagingStudySeriesPerformer) GetID() string {
	if issp == nil {
		return ""
	}
	return issp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (issp *ImagingStudySeriesPerformer) GetModifierExtension() []*fhir.Extension {
	if issp == nil {
		return nil
	}
	return issp.ModifierExtension
}
