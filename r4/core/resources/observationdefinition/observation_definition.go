// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package observationdefinition

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Set of definitional characteristics for a kind of observation or measurement
// produced or consumed by an orderable health care service.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ObservationDefinition
//   - Source File: StructureDefinition-ObservationDefinition.json
type ObservationDefinition struct {

	// The set of abnormal coded results for the observation conforming to this
	// ObservationDefinition.
	AbnormalCodedValueSet *fhir.Reference `fhirpath:"abnormalCodedValueSet"`

	// A code that classifies the general type of observation.
	Category []*fhir.CodeableConcept `fhirpath:"category"`

	// Describes what will be observed. Sometimes this is called the observation
	// "name".
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The set of critical coded results for the observation conforming to this
	// ObservationDefinition.
	CriticalCodedValueSet *fhir.Reference `fhirpath:"criticalCodedValueSet"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier assigned to this ObservationDefinition artifact.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// The method or technique used to perform the observation.
	Method *fhir.CodeableConcept `fhirpath:"method"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Multiple results allowed for observations conforming to this
	// ObservationDefinition.
	MultipleResultsAllowed *fhir.Boolean `fhirpath:"multipleResultsAllowed"`

	// The set of normal coded results for the observations conforming to this
	// ObservationDefinition.
	NormalCodedValueSet *fhir.Reference `fhirpath:"normalCodedValueSet"`

	// The data types allowed for the value element of the instance observations
	// conforming to this ObservationDefinition.
	PermittedDataType []*fhir.Code `fhirpath:"permittedDataType"`

	// The preferred name to be used when reporting the results of observations
	// conforming to this ObservationDefinition.
	PreferredReportName *fhir.String `fhirpath:"preferredReportName"`

	// Multiple ranges of results qualified by different contexts for ordinal or
	// continuous observations conforming to this ObservationDefinition.
	QualifiedInterval []*ObservationDefinitionQualifiedInterval `fhirpath:"qualifiedInterval"`

	// Characteristics for quantitative results of this observation.
	QuantitativeDetails *ObservationDefinitionQuantitativeDetails `fhirpath:"quantitativeDetails"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// The set of valid coded results for the observations conforming to this
	// ObservationDefinition.
	ValidCodedValueSet *fhir.Reference `fhirpath:"validCodedValueSet"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAbnormalCodedValueSet returns the value of the field AbnormalCodedValueSet.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetAbnormalCodedValueSet() *fhir.Reference {
	if od == nil {
		return nil
	}
	return od.AbnormalCodedValueSet
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetCategory() []*fhir.CodeableConcept {
	if od == nil {
		return nil
	}
	return od.Category
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetCode() *fhir.CodeableConcept {
	if od == nil {
		return nil
	}
	return od.Code
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetContained() []fhir.Resource {
	if od == nil {
		return nil
	}
	return od.Contained
}

// GetCriticalCodedValueSet returns the value of the field CriticalCodedValueSet.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetCriticalCodedValueSet() *fhir.Reference {
	if od == nil {
		return nil
	}
	return od.CriticalCodedValueSet
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetExtension() []*fhir.Extension {
	if od == nil {
		return nil
	}
	return od.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetID() string {
	if od == nil {
		return ""
	}
	return od.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetIdentifier() []*fhir.Identifier {
	if od == nil {
		return nil
	}
	return od.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetImplicitRules() *fhir.URI {
	if od == nil {
		return nil
	}
	return od.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetLanguage() *fhir.Code {
	if od == nil {
		return nil
	}
	return od.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetMeta() *fhir.Meta {
	if od == nil {
		return nil
	}
	return od.Meta
}

// GetMethod returns the value of the field Method.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetMethod() *fhir.CodeableConcept {
	if od == nil {
		return nil
	}
	return od.Method
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetModifierExtension() []*fhir.Extension {
	if od == nil {
		return nil
	}
	return od.ModifierExtension
}

// GetMultipleResultsAllowed returns the value of the field MultipleResultsAllowed.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetMultipleResultsAllowed() *fhir.Boolean {
	if od == nil {
		return nil
	}
	return od.MultipleResultsAllowed
}

// GetNormalCodedValueSet returns the value of the field NormalCodedValueSet.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetNormalCodedValueSet() *fhir.Reference {
	if od == nil {
		return nil
	}
	return od.NormalCodedValueSet
}

// GetPermittedDataType returns the value of the field PermittedDataType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetPermittedDataType() []*fhir.Code {
	if od == nil {
		return nil
	}
	return od.PermittedDataType
}

// GetPreferredReportName returns the value of the field PreferredReportName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetPreferredReportName() *fhir.String {
	if od == nil {
		return nil
	}
	return od.PreferredReportName
}

// GetQualifiedInterval returns the value of the field QualifiedInterval.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetQualifiedInterval() []*ObservationDefinitionQualifiedInterval {
	if od == nil {
		return nil
	}
	return od.QualifiedInterval
}

// GetQuantitativeDetails returns the value of the field QuantitativeDetails.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetQuantitativeDetails() *ObservationDefinitionQuantitativeDetails {
	if od == nil {
		return nil
	}
	return od.QuantitativeDetails
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetText() *fhir.Narrative {
	if od == nil {
		return nil
	}
	return od.Text
}

// GetValidCodedValueSet returns the value of the field ValidCodedValueSet.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *ObservationDefinition) GetValidCodedValueSet() *fhir.Reference {
	if od == nil {
		return nil
	}
	return od.ValidCodedValueSet
}

// Qualified range for continuous and ordinal observation results// Multiple ranges of results qualified by different contexts for ordinal or
// continuous observations conforming to this ObservationDefinition.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ObservationDefinition.json
type ObservationDefinitionQualifiedInterval struct {

	// The age at which this reference range is applicable. This is a neonatal age
	// (e.g. number of weeks at term) if the meaning says so.
	Age *fhir.Range `fhirpath:"age"`

	// Codes to indicate the target population this reference range applies to.
	AppliesTo []*fhir.CodeableConcept `fhirpath:"appliesTo"`

	// The category of interval of values for continuous or ordinal observations
	// conforming to this ObservationDefinition.
	Category *fhir.Code `fhirpath:"category"`

	// Text based condition for which the reference range is valid.
	Condition *fhir.String `fhirpath:"condition"`

	// Codes to indicate the health context the range applies to. For example, the
	// normal or therapeutic range.
	Context *fhir.CodeableConcept `fhirpath:"context"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Sex of the population the range applies to.
	Gender *fhir.Code `fhirpath:"gender"`

	// The gestational age to which this reference range is applicable, in the
	// context of pregnancy.
	GestationalAge *fhir.Range `fhirpath:"gestationalAge"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The low and high values determining the interval. There may be only one of
	// the two.
	Range *fhir.Range `fhirpath:"range"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAge returns the value of the field Age.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetAge() *fhir.Range {
	if odqi == nil {
		return nil
	}
	return odqi.Age
}

// GetAppliesTo returns the value of the field AppliesTo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetAppliesTo() []*fhir.CodeableConcept {
	if odqi == nil {
		return nil
	}
	return odqi.AppliesTo
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetCategory() *fhir.Code {
	if odqi == nil {
		return nil
	}
	return odqi.Category
}

// GetCondition returns the value of the field Condition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetCondition() *fhir.String {
	if odqi == nil {
		return nil
	}
	return odqi.Condition
}

// GetContext returns the value of the field Context.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetContext() *fhir.CodeableConcept {
	if odqi == nil {
		return nil
	}
	return odqi.Context
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetExtension() []*fhir.Extension {
	if odqi == nil {
		return nil
	}
	return odqi.Extension
}

// GetGender returns the value of the field Gender.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetGender() *fhir.Code {
	if odqi == nil {
		return nil
	}
	return odqi.Gender
}

// GetGestationalAge returns the value of the field GestationalAge.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetGestationalAge() *fhir.Range {
	if odqi == nil {
		return nil
	}
	return odqi.GestationalAge
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetID() string {
	if odqi == nil {
		return ""
	}
	return odqi.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetModifierExtension() []*fhir.Extension {
	if odqi == nil {
		return nil
	}
	return odqi.ModifierExtension
}

// GetRange returns the value of the field Range.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqi *ObservationDefinitionQualifiedInterval) GetRange() *fhir.Range {
	if odqi == nil {
		return nil
	}
	return odqi.Range
}

// Characteristics of quantitative results// Characteristics for quantitative results of this observation.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ObservationDefinition.json
type ObservationDefinitionQuantitativeDetails struct {

	// Factor for converting value expressed with SI unit to value expressed with
	// customary unit.
	ConversionFactor *fhir.Decimal `fhirpath:"conversionFactor"`

	// Customary unit used to report quantitative results of observations
	// conforming to this ObservationDefinition.
	CustomaryUnit *fhir.CodeableConcept `fhirpath:"customaryUnit"`

	// Number of digits after decimal separator when the results of such
	// observations are of type Quantity.
	DecimalPrecision *fhir.Integer `fhirpath:"decimalPrecision"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// SI unit used to report quantitative results of observations conforming to
	// this ObservationDefinition.
	Unit *fhir.CodeableConcept `fhirpath:"unit"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetConversionFactor returns the value of the field ConversionFactor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqd *ObservationDefinitionQuantitativeDetails) GetConversionFactor() *fhir.Decimal {
	if odqd == nil {
		return nil
	}
	return odqd.ConversionFactor
}

// GetCustomaryUnit returns the value of the field CustomaryUnit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqd *ObservationDefinitionQuantitativeDetails) GetCustomaryUnit() *fhir.CodeableConcept {
	if odqd == nil {
		return nil
	}
	return odqd.CustomaryUnit
}

// GetDecimalPrecision returns the value of the field DecimalPrecision.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqd *ObservationDefinitionQuantitativeDetails) GetDecimalPrecision() *fhir.Integer {
	if odqd == nil {
		return nil
	}
	return odqd.DecimalPrecision
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqd *ObservationDefinitionQuantitativeDetails) GetExtension() []*fhir.Extension {
	if odqd == nil {
		return nil
	}
	return odqd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqd *ObservationDefinitionQuantitativeDetails) GetID() string {
	if odqd == nil {
		return ""
	}
	return odqd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqd *ObservationDefinitionQuantitativeDetails) GetModifierExtension() []*fhir.Extension {
	if odqd == nil {
		return nil
	}
	return odqd.ModifierExtension
}

// GetUnit returns the value of the field Unit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odqd *ObservationDefinitionQuantitativeDetails) GetUnit() *fhir.CodeableConcept {
	if odqd == nil {
		return nil
	}
	return odqd.Unit
}

func (od *ObservationDefinition) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (od *ObservationDefinition) UnmarshalJSON(data []byte) error {
	var raw struct {
		AbnormalCodedValueSet *fhir.Reference         `json:"abnormalCodedValueSet"`
		Category              []*fhir.CodeableConcept `json:"category"`
		Code                  *fhir.CodeableConcept   `json:"code"`
		Contained             []fhir.Resource         `json:"contained"`
		CriticalCodedValueSet *fhir.Reference         `json:"criticalCodedValueSet"`
		Extension             []*fhir.Extension       `json:"extension"`

		ID                     string                                    `json:"id"`
		Identifier             []*fhir.Identifier                        `json:"identifier"`
		ImplicitRules          *fhir.URI                                 `json:"implicitRules"`
		Language               *fhir.Code                                `json:"language"`
		Meta                   *fhir.Meta                                `json:"meta"`
		Method                 *fhir.CodeableConcept                     `json:"method"`
		ModifierExtension      []*fhir.Extension                         `json:"modifierExtension"`
		MultipleResultsAllowed *fhir.Boolean                             `json:"multipleResultsAllowed"`
		NormalCodedValueSet    *fhir.Reference                           `json:"normalCodedValueSet"`
		PermittedDataType      []*fhir.Code                              `json:"permittedDataType"`
		PreferredReportName    *fhir.String                              `json:"preferredReportName"`
		QualifiedInterval      []*ObservationDefinitionQualifiedInterval `json:"qualifiedInterval"`
		QuantitativeDetails    *ObservationDefinitionQuantitativeDetails `json:"quantitativeDetails"`
		Text                   *fhir.Narrative                           `json:"text"`
		ValidCodedValueSet     *fhir.Reference                           `json:"validCodedValueSet"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	od.AbnormalCodedValueSet = raw.AbnormalCodedValueSet
	od.Category = raw.Category
	od.Code = raw.Code
	od.Contained = raw.Contained
	od.CriticalCodedValueSet = raw.CriticalCodedValueSet
	od.Extension = raw.Extension
	od.ID = raw.ID
	od.Identifier = raw.Identifier
	od.ImplicitRules = raw.ImplicitRules
	od.Language = raw.Language
	od.Meta = raw.Meta
	od.Method = raw.Method
	od.ModifierExtension = raw.ModifierExtension
	od.MultipleResultsAllowed = raw.MultipleResultsAllowed
	od.NormalCodedValueSet = raw.NormalCodedValueSet
	od.PermittedDataType = raw.PermittedDataType
	od.PreferredReportName = raw.PreferredReportName
	od.QualifiedInterval = raw.QualifiedInterval
	od.QuantitativeDetails = raw.QuantitativeDetails
	od.Text = raw.Text
	od.ValidCodedValueSet = raw.ValidCodedValueSet
	return nil
}

var _ json.Marshaler = (*ObservationDefinition)(nil)
var _ json.Unmarshaler = (*ObservationDefinition)(nil)

func (odqi *ObservationDefinitionQualifiedInterval) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (odqi *ObservationDefinitionQualifiedInterval) UnmarshalJSON(data []byte) error {
	var raw struct {
		Age            *fhir.Range             `json:"age"`
		AppliesTo      []*fhir.CodeableConcept `json:"appliesTo"`
		Category       *fhir.Code              `json:"category"`
		Condition      *fhir.String            `json:"condition"`
		Context        *fhir.CodeableConcept   `json:"context"`
		Extension      []*fhir.Extension       `json:"extension"`
		Gender         *fhir.Code              `json:"gender"`
		GestationalAge *fhir.Range             `json:"gestationalAge"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Range             *fhir.Range       `json:"range"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	odqi.Age = raw.Age
	odqi.AppliesTo = raw.AppliesTo
	odqi.Category = raw.Category
	odqi.Condition = raw.Condition
	odqi.Context = raw.Context
	odqi.Extension = raw.Extension
	odqi.Gender = raw.Gender
	odqi.GestationalAge = raw.GestationalAge
	odqi.ID = raw.ID
	odqi.ModifierExtension = raw.ModifierExtension
	odqi.Range = raw.Range
	return nil
}

var _ json.Marshaler = (*ObservationDefinitionQualifiedInterval)(nil)
var _ json.Unmarshaler = (*ObservationDefinitionQualifiedInterval)(nil)

func (odqd *ObservationDefinitionQuantitativeDetails) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (odqd *ObservationDefinitionQuantitativeDetails) UnmarshalJSON(data []byte) error {
	var raw struct {
		ConversionFactor *fhir.Decimal         `json:"conversionFactor"`
		CustomaryUnit    *fhir.CodeableConcept `json:"customaryUnit"`
		DecimalPrecision *fhir.Integer         `json:"decimalPrecision"`
		Extension        []*fhir.Extension     `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Unit              *fhir.CodeableConcept `json:"unit"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	odqd.ConversionFactor = raw.ConversionFactor
	odqd.CustomaryUnit = raw.CustomaryUnit
	odqd.DecimalPrecision = raw.DecimalPrecision
	odqd.Extension = raw.Extension
	odqd.ID = raw.ID
	odqd.ModifierExtension = raw.ModifierExtension
	odqd.Unit = raw.Unit
	return nil
}

var _ json.Marshaler = (*ObservationDefinitionQuantitativeDetails)(nil)
var _ json.Unmarshaler = (*ObservationDefinitionQuantitativeDetails)(nil)
