// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package devicerequest

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Represents a request for a patient to employ a medical device. The device
// may be an implantable device, or an external assistive device, such as a
// walker.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/DeviceRequest
//   - Source File: StructureDefinition-DeviceRequest.json
type DeviceRequest struct {

	// When the request transitioned to being actionable.
	AuthoredOn *fhir.DateTime `fhirpath:"authoredOn"`

	// Plan/proposal/order fulfilled by this request.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// The details of the device to be used.
	Code fhir.Element `fhirpath:"code"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// An encounter that provides additional context in which this request is made.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Composite request this is part of.
	GroupIdentifier *fhir.Identifier `fhirpath:"groupIdentifier"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifiers assigned to this order by the orderer or by the receiver.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this DeviceRequest.
	InstantiatesCanonical []*fhir.Canonical `fhirpath:"instantiatesCanonical"`

	// The URL pointing to an externally maintained protocol, guideline, orderset
	// or other definition that is adhered to in whole or in part by this
	// DeviceRequest.
	InstantiatesURI []*fhir.URI `fhirpath:"instantiatesUri"`

	// Insurance plans, coverage extensions, pre-authorizations and/or
	// pre-determinations that may be required for delivering the requested
	// service.
	Insurance []*fhir.Reference `fhirpath:"insurance"`

	// Whether the request is a proposal, plan, an original order or a reflex
	// order.
	Intent *fhir.Code `fhirpath:"intent"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Details about this request that were not represented at all or sufficiently
	// in one of the attributes provided in a class. These may include for example
	// a comment, an instruction, or a note associated with the statement.
	Note []*fhir.Annotation `fhirpath:"note"`

	// The timing schedule for the use of the device. The Schedule data type allows
	// many different expressions, for example. "Every 8 hours"; "Three times a
	// day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct
	// 2013, 17 Oct 2013 and 1 Nov 2013".
	Occurrence fhir.Element `fhirpath:"occurrence"`

	// Specific parameters for the ordered item. For example, the prism value for
	// lenses.
	Parameter []*DeviceRequestParameter `fhirpath:"parameter"`

	// The desired performer for doing the diagnostic testing.
	Performer *fhir.Reference `fhirpath:"performer"`

	// Desired type of performer for doing the diagnostic testing.
	PerformerType *fhir.CodeableConcept `fhirpath:"performerType"`

	// The request takes the place of the referenced completed or terminated
	// request(s).
	PriorRequest []*fhir.Reference `fhirpath:"priorRequest"`

	// Indicates how quickly the {{title}} should be addressed with respect to
	// other requests.
	Priority *fhir.Code `fhirpath:"priority"`

	// Reason or justification for the use of this device.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Reason or justification for the use of this device.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// Key events in the history of the request.
	RelevantHistory []*fhir.Reference `fhirpath:"relevantHistory"`

	// The individual who initiated the request and has responsibility for its
	// activation.
	Requester *fhir.Reference `fhirpath:"requester"`

	// The status of the request.
	Status *fhir.Code `fhirpath:"status"`

	// The patient who will use the device.
	Subject *fhir.Reference `fhirpath:"subject"`

	// Additional clinical information about the patient that may influence the
	// request fulfilment. For example, this may include where on the subject's
	// body the device will be used (i.e. the target site).
	SupportingInfo []*fhir.Reference `fhirpath:"supportingInfo"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAuthoredOn returns the value of the field AuthoredOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetAuthoredOn() *fhir.DateTime {
	if dr == nil {
		return nil
	}
	return dr.AuthoredOn
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetBasedOn() []*fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.BasedOn
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetCode() fhir.Element {
	if dr == nil {
		return nil
	}
	return dr.Code
}

// GetCodeReference returns the value of the field Code.
func (dr *DeviceRequest) GetCodeReference() *fhir.Reference {
	if dr == nil {
		return nil
	}
	val, ok := dr.Code.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}

// GetCodeCodeableConcept returns the value of the field Code.
func (dr *DeviceRequest) GetCodeCodeableConcept() *fhir.CodeableConcept {
	if dr == nil {
		return nil
	}
	val, ok := dr.Code.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
} // GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetContained() []fhir.Resource {
	if dr == nil {
		return nil
	}
	return dr.Contained
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetEncounter() *fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetExtension() []*fhir.Extension {
	if dr == nil {
		return nil
	}
	return dr.Extension
}

// GetGroupIdentifier returns the value of the field GroupIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetGroupIdentifier() *fhir.Identifier {
	if dr == nil {
		return nil
	}
	return dr.GroupIdentifier
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetID() string {
	if dr == nil {
		return ""
	}
	return dr.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetIdentifier() []*fhir.Identifier {
	if dr == nil {
		return nil
	}
	return dr.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetImplicitRules() *fhir.URI {
	if dr == nil {
		return nil
	}
	return dr.ImplicitRules
}

// GetInstantiatesCanonical returns the value of the field InstantiatesCanonical.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetInstantiatesCanonical() []*fhir.Canonical {
	if dr == nil {
		return nil
	}
	return dr.InstantiatesCanonical
}

// GetInstantiatesURI returns the value of the field InstantiatesURI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetInstantiatesURI() []*fhir.URI {
	if dr == nil {
		return nil
	}
	return dr.InstantiatesURI
}

// GetInsurance returns the value of the field Insurance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetInsurance() []*fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.Insurance
}

// GetIntent returns the value of the field Intent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetIntent() *fhir.Code {
	if dr == nil {
		return nil
	}
	return dr.Intent
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetLanguage() *fhir.Code {
	if dr == nil {
		return nil
	}
	return dr.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetMeta() *fhir.Meta {
	if dr == nil {
		return nil
	}
	return dr.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetModifierExtension() []*fhir.Extension {
	if dr == nil {
		return nil
	}
	return dr.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetNote() []*fhir.Annotation {
	if dr == nil {
		return nil
	}
	return dr.Note
}

// GetOccurrence returns the value of the field Occurrence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetOccurrence() fhir.Element {
	if dr == nil {
		return nil
	}
	return dr.Occurrence
}

// GetOccurrenceDateTime returns the value of the field Occurrence.
func (dr *DeviceRequest) GetOccurrenceDateTime() *fhir.DateTime {
	if dr == nil {
		return nil
	}
	val, ok := dr.Occurrence.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetOccurrencePeriod returns the value of the field Occurrence.
func (dr *DeviceRequest) GetOccurrencePeriod() *fhir.Period {
	if dr == nil {
		return nil
	}
	val, ok := dr.Occurrence.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetOccurrenceTiming returns the value of the field Occurrence.
func (dr *DeviceRequest) GetOccurrenceTiming() *fhir.Timing {
	if dr == nil {
		return nil
	}
	val, ok := dr.Occurrence.(*fhir.Timing)
	if !ok {
		return nil
	}
	return val
} // GetParameter returns the value of the field Parameter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetParameter() []*DeviceRequestParameter {
	if dr == nil {
		return nil
	}
	return dr.Parameter
}

// GetPerformer returns the value of the field Performer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetPerformer() *fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.Performer
}

// GetPerformerType returns the value of the field PerformerType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetPerformerType() *fhir.CodeableConcept {
	if dr == nil {
		return nil
	}
	return dr.PerformerType
}

// GetPriorRequest returns the value of the field PriorRequest.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetPriorRequest() []*fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.PriorRequest
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetPriority() *fhir.Code {
	if dr == nil {
		return nil
	}
	return dr.Priority
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetReasonCode() []*fhir.CodeableConcept {
	if dr == nil {
		return nil
	}
	return dr.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetReasonReference() []*fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.ReasonReference
}

// GetRelevantHistory returns the value of the field RelevantHistory.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetRelevantHistory() []*fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.RelevantHistory
}

// GetRequester returns the value of the field Requester.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetRequester() *fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.Requester
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetStatus() *fhir.Code {
	if dr == nil {
		return nil
	}
	return dr.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetSubject() *fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.Subject
}

// GetSupportingInfo returns the value of the field SupportingInfo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetSupportingInfo() []*fhir.Reference {
	if dr == nil {
		return nil
	}
	return dr.SupportingInfo
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dr *DeviceRequest) GetText() *fhir.Narrative {
	if dr == nil {
		return nil
	}
	return dr.Text
}

// Device details// Specific parameters for the ordered item. For example, the prism value for
// lenses.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-DeviceRequest.json
type DeviceRequestParameter struct {

	// A code or string that identifies the device detail being asserted.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The value of the device detail.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drp *DeviceRequestParameter) GetCode() *fhir.CodeableConcept {
	if drp == nil {
		return nil
	}
	return drp.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drp *DeviceRequestParameter) GetExtension() []*fhir.Extension {
	if drp == nil {
		return nil
	}
	return drp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drp *DeviceRequestParameter) GetID() string {
	if drp == nil {
		return ""
	}
	return drp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drp *DeviceRequestParameter) GetModifierExtension() []*fhir.Extension {
	if drp == nil {
		return nil
	}
	return drp.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (drp *DeviceRequestParameter) GetValue() fhir.Element {
	if drp == nil {
		return nil
	}
	return drp.Value
}

// GetValueCodeableConcept returns the value of the field Value.
func (drp *DeviceRequestParameter) GetValueCodeableConcept() *fhir.CodeableConcept {
	if drp == nil {
		return nil
	}
	val, ok := drp.Value.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetValueQuantity returns the value of the field Value.
func (drp *DeviceRequestParameter) GetValueQuantity() *fhir.Quantity {
	if drp == nil {
		return nil
	}
	val, ok := drp.Value.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetValueRange returns the value of the field Value.
func (drp *DeviceRequestParameter) GetValueRange() *fhir.Range {
	if drp == nil {
		return nil
	}
	val, ok := drp.Value.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
}

// GetValueBoolean returns the value of the field Value.
func (drp *DeviceRequestParameter) GetValueBoolean() *fhir.Boolean {
	if drp == nil {
		return nil
	}
	val, ok := drp.Value.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

func (dr *DeviceRequest) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (dr *DeviceRequest) UnmarshalJSON(data []byte) error {
	var raw struct {
		AuthoredOn          *fhir.DateTime        `json:"authoredOn"`
		BasedOn             []*fhir.Reference     `json:"basedOn"`
		CodeReference       *fhir.Reference       `json:"codeReference"`
		CodeCodeableConcept *fhir.CodeableConcept `json:"codeCodeableConcept"`
		Contained           []fhir.Resource       `json:"contained"`
		Encounter           *fhir.Reference       `json:"encounter"`
		Extension           []*fhir.Extension     `json:"extension"`
		GroupIdentifier     *fhir.Identifier      `json:"groupIdentifier"`

		ID                    string                    `json:"id"`
		Identifier            []*fhir.Identifier        `json:"identifier"`
		ImplicitRules         *fhir.URI                 `json:"implicitRules"`
		InstantiatesCanonical []*fhir.Canonical         `json:"instantiatesCanonical"`
		InstantiatesURI       []*fhir.URI               `json:"instantiatesUri"`
		Insurance             []*fhir.Reference         `json:"insurance"`
		Intent                *fhir.Code                `json:"intent"`
		Language              *fhir.Code                `json:"language"`
		Meta                  *fhir.Meta                `json:"meta"`
		ModifierExtension     []*fhir.Extension         `json:"modifierExtension"`
		Note                  []*fhir.Annotation        `json:"note"`
		OccurrenceDateTime    *fhir.DateTime            `json:"occurrenceDateTime"`
		OccurrencePeriod      *fhir.Period              `json:"occurrencePeriod"`
		OccurrenceTiming      *fhir.Timing              `json:"occurrenceTiming"`
		Parameter             []*DeviceRequestParameter `json:"parameter"`
		Performer             *fhir.Reference           `json:"performer"`
		PerformerType         *fhir.CodeableConcept     `json:"performerType"`
		PriorRequest          []*fhir.Reference         `json:"priorRequest"`
		Priority              *fhir.Code                `json:"priority"`
		ReasonCode            []*fhir.CodeableConcept   `json:"reasonCode"`
		ReasonReference       []*fhir.Reference         `json:"reasonReference"`
		RelevantHistory       []*fhir.Reference         `json:"relevantHistory"`
		Requester             *fhir.Reference           `json:"requester"`
		Status                *fhir.Code                `json:"status"`
		Subject               *fhir.Reference           `json:"subject"`
		SupportingInfo        []*fhir.Reference         `json:"supportingInfo"`
		Text                  *fhir.Narrative           `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	dr.AuthoredOn = raw.AuthoredOn
	dr.BasedOn = raw.BasedOn
	dr.Code, err = validate.SelectOneOf[fhir.Element]("DeviceRequest.code",
		raw.CodeReference,
		raw.CodeCodeableConcept)
	if err != nil {
		return err
	}
	dr.Contained = raw.Contained
	dr.Encounter = raw.Encounter
	dr.Extension = raw.Extension
	dr.GroupIdentifier = raw.GroupIdentifier
	dr.ID = raw.ID
	dr.Identifier = raw.Identifier
	dr.ImplicitRules = raw.ImplicitRules
	dr.InstantiatesCanonical = raw.InstantiatesCanonical
	dr.InstantiatesURI = raw.InstantiatesURI
	dr.Insurance = raw.Insurance
	dr.Intent = raw.Intent
	dr.Language = raw.Language
	dr.Meta = raw.Meta
	dr.ModifierExtension = raw.ModifierExtension
	dr.Note = raw.Note
	dr.Occurrence, err = validate.SelectOneOf[fhir.Element]("DeviceRequest.occurrence",
		raw.OccurrenceDateTime,
		raw.OccurrencePeriod,
		raw.OccurrenceTiming)
	if err != nil {
		return err
	}
	dr.Parameter = raw.Parameter
	dr.Performer = raw.Performer
	dr.PerformerType = raw.PerformerType
	dr.PriorRequest = raw.PriorRequest
	dr.Priority = raw.Priority
	dr.ReasonCode = raw.ReasonCode
	dr.ReasonReference = raw.ReasonReference
	dr.RelevantHistory = raw.RelevantHistory
	dr.Requester = raw.Requester
	dr.Status = raw.Status
	dr.Subject = raw.Subject
	dr.SupportingInfo = raw.SupportingInfo
	dr.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*DeviceRequest)(nil)
var _ json.Unmarshaler = (*DeviceRequest)(nil)

func (drp *DeviceRequestParameter) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (drp *DeviceRequestParameter) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *fhir.CodeableConcept `json:"code"`
		Extension []*fhir.Extension     `json:"extension"`

		ID                   string                `json:"id"`
		ModifierExtension    []*fhir.Extension     `json:"modifierExtension"`
		ValueCodeableConcept *fhir.CodeableConcept `json:"valueCodeableConcept"`
		ValueQuantity        *fhir.Quantity        `json:"valueQuantity"`
		ValueRange           *fhir.Range           `json:"valueRange"`
		ValueBoolean         *fhir.Boolean         `json:"valueBoolean"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	drp.Code = raw.Code
	drp.Extension = raw.Extension
	drp.ID = raw.ID
	drp.ModifierExtension = raw.ModifierExtension
	drp.Value, err = validate.SelectOneOf[fhir.Element]("DeviceRequest.parameter.value",
		raw.ValueCodeableConcept,
		raw.ValueQuantity,
		raw.ValueRange,
		raw.ValueBoolean)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*DeviceRequestParameter)(nil)
var _ json.Unmarshaler = (*DeviceRequestParameter)(nil)
