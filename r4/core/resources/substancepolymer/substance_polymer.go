// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package substancepolymer

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Todo.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/SubstancePolymer
//   - Source File: StructureDefinition-SubstancePolymer.json
type SubstancePolymer struct {

	// Todo.
	Class *fhir.CodeableConcept `fhirpath:"class"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Todo.
	CopolymerConnectivity []*fhir.CodeableConcept `fhirpath:"copolymerConnectivity"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Todo.
	Geometry *fhir.CodeableConcept `fhirpath:"geometry"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// Todo.
	Modification []*fhir.String `fhirpath:"modification"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Todo.
	MonomerSet []*SubstancePolymerMonomerSet `fhirpath:"monomerSet"`

	// Todo.
	Repeat []*SubstancePolymerRepeat `fhirpath:"repeat"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetClass returns the value of the field Class.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetClass() *fhir.CodeableConcept {
	if sp == nil {
		return nil
	}
	return sp.Class
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetContained() []fhir.Resource {
	if sp == nil {
		return nil
	}
	return sp.Contained
}

// GetCopolymerConnectivity returns the value of the field CopolymerConnectivity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetCopolymerConnectivity() []*fhir.CodeableConcept {
	if sp == nil {
		return nil
	}
	return sp.CopolymerConnectivity
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetExtension() []*fhir.Extension {
	if sp == nil {
		return nil
	}
	return sp.Extension
}

// GetGeometry returns the value of the field Geometry.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetGeometry() *fhir.CodeableConcept {
	if sp == nil {
		return nil
	}
	return sp.Geometry
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetID() string {
	if sp == nil {
		return ""
	}
	return sp.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetImplicitRules() *fhir.URI {
	if sp == nil {
		return nil
	}
	return sp.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetLanguage() *fhir.Code {
	if sp == nil {
		return nil
	}
	return sp.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetMeta() *fhir.Meta {
	if sp == nil {
		return nil
	}
	return sp.Meta
}

// GetModification returns the value of the field Modification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetModification() []*fhir.String {
	if sp == nil {
		return nil
	}
	return sp.Modification
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetModifierExtension() []*fhir.Extension {
	if sp == nil {
		return nil
	}
	return sp.ModifierExtension
}

// GetMonomerSet returns the value of the field MonomerSet.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetMonomerSet() []*SubstancePolymerMonomerSet {
	if sp == nil {
		return nil
	}
	return sp.MonomerSet
}

// GetRepeat returns the value of the field Repeat.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetRepeat() []*SubstancePolymerRepeat {
	if sp == nil {
		return nil
	}
	return sp.Repeat
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sp *SubstancePolymer) GetText() *fhir.Narrative {
	if sp == nil {
		return nil
	}
	return sp.Text
}

// Todo// Todo.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstancePolymer.json
type SubstancePolymerMonomerSet struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Todo.
	RatioType *fhir.CodeableConcept `fhirpath:"ratioType"`

	// Todo.
	StartingMaterial []*SubstancePolymerMonomerSetStartingMaterial `fhirpath:"startingMaterial"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spms *SubstancePolymerMonomerSet) GetExtension() []*fhir.Extension {
	if spms == nil {
		return nil
	}
	return spms.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spms *SubstancePolymerMonomerSet) GetID() string {
	if spms == nil {
		return ""
	}
	return spms.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spms *SubstancePolymerMonomerSet) GetModifierExtension() []*fhir.Extension {
	if spms == nil {
		return nil
	}
	return spms.ModifierExtension
}

// GetRatioType returns the value of the field RatioType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spms *SubstancePolymerMonomerSet) GetRatioType() *fhir.CodeableConcept {
	if spms == nil {
		return nil
	}
	return spms.RatioType
}

// GetStartingMaterial returns the value of the field StartingMaterial.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spms *SubstancePolymerMonomerSet) GetStartingMaterial() []*SubstancePolymerMonomerSetStartingMaterial {
	if spms == nil {
		return nil
	}
	return spms.StartingMaterial
}

// Todo// Todo.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstancePolymer.json
type SubstancePolymerMonomerSetStartingMaterial struct {

	// Todo.
	Amount *fhir.SubstanceAmount `fhirpath:"amount"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Todo.
	IsDefining *fhir.Boolean `fhirpath:"isDefining"`

	// Todo.
	Material *fhir.CodeableConcept `fhirpath:"material"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Todo.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spmssm *SubstancePolymerMonomerSetStartingMaterial) GetAmount() *fhir.SubstanceAmount {
	if spmssm == nil {
		return nil
	}
	return spmssm.Amount
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spmssm *SubstancePolymerMonomerSetStartingMaterial) GetExtension() []*fhir.Extension {
	if spmssm == nil {
		return nil
	}
	return spmssm.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spmssm *SubstancePolymerMonomerSetStartingMaterial) GetID() string {
	if spmssm == nil {
		return ""
	}
	return spmssm.ID
}

// GetIsDefining returns the value of the field IsDefining.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spmssm *SubstancePolymerMonomerSetStartingMaterial) GetIsDefining() *fhir.Boolean {
	if spmssm == nil {
		return nil
	}
	return spmssm.IsDefining
}

// GetMaterial returns the value of the field Material.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spmssm *SubstancePolymerMonomerSetStartingMaterial) GetMaterial() *fhir.CodeableConcept {
	if spmssm == nil {
		return nil
	}
	return spmssm.Material
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spmssm *SubstancePolymerMonomerSetStartingMaterial) GetModifierExtension() []*fhir.Extension {
	if spmssm == nil {
		return nil
	}
	return spmssm.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spmssm *SubstancePolymerMonomerSetStartingMaterial) GetType() *fhir.CodeableConcept {
	if spmssm == nil {
		return nil
	}
	return spmssm.Type
}

// Todo// Todo.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstancePolymer.json
type SubstancePolymerRepeat struct {

	// Todo.
	AverageMolecularFormula *fhir.String `fhirpath:"averageMolecularFormula"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Todo.
	NumberOfUnits *fhir.Integer `fhirpath:"numberOfUnits"`

	// Todo.
	RepeatUnit []*SubstancePolymerRepeatRepeatUnit `fhirpath:"repeatUnit"`

	// Todo.
	RepeatUnitAmountType *fhir.CodeableConcept `fhirpath:"repeatUnitAmountType"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAverageMolecularFormula returns the value of the field AverageMolecularFormula.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spr *SubstancePolymerRepeat) GetAverageMolecularFormula() *fhir.String {
	if spr == nil {
		return nil
	}
	return spr.AverageMolecularFormula
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spr *SubstancePolymerRepeat) GetExtension() []*fhir.Extension {
	if spr == nil {
		return nil
	}
	return spr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spr *SubstancePolymerRepeat) GetID() string {
	if spr == nil {
		return ""
	}
	return spr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spr *SubstancePolymerRepeat) GetModifierExtension() []*fhir.Extension {
	if spr == nil {
		return nil
	}
	return spr.ModifierExtension
}

// GetNumberOfUnits returns the value of the field NumberOfUnits.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spr *SubstancePolymerRepeat) GetNumberOfUnits() *fhir.Integer {
	if spr == nil {
		return nil
	}
	return spr.NumberOfUnits
}

// GetRepeatUnit returns the value of the field RepeatUnit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spr *SubstancePolymerRepeat) GetRepeatUnit() []*SubstancePolymerRepeatRepeatUnit {
	if spr == nil {
		return nil
	}
	return spr.RepeatUnit
}

// GetRepeatUnitAmountType returns the value of the field RepeatUnitAmountType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (spr *SubstancePolymerRepeat) GetRepeatUnitAmountType() *fhir.CodeableConcept {
	if spr == nil {
		return nil
	}
	return spr.RepeatUnitAmountType
}

// Todo// Todo.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstancePolymer.json
type SubstancePolymerRepeatRepeatUnit struct {

	// Todo.
	Amount *fhir.SubstanceAmount `fhirpath:"amount"`

	// Todo.
	DegreeOfPolymerisation []*SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation `fhirpath:"degreeOfPolymerisation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Todo.
	OrientationOfPolymerisation *fhir.CodeableConcept `fhirpath:"orientationOfPolymerisation"`

	// Todo.
	RepeatUnit *fhir.String `fhirpath:"repeatUnit"`

	// Todo.
	StructuralRepresentation []*SubstancePolymerRepeatRepeatUnitStructuralRepresentation `fhirpath:"structuralRepresentation"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprru *SubstancePolymerRepeatRepeatUnit) GetAmount() *fhir.SubstanceAmount {
	if sprru == nil {
		return nil
	}
	return sprru.Amount
}

// GetDegreeOfPolymerisation returns the value of the field DegreeOfPolymerisation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprru *SubstancePolymerRepeatRepeatUnit) GetDegreeOfPolymerisation() []*SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation {
	if sprru == nil {
		return nil
	}
	return sprru.DegreeOfPolymerisation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprru *SubstancePolymerRepeatRepeatUnit) GetExtension() []*fhir.Extension {
	if sprru == nil {
		return nil
	}
	return sprru.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprru *SubstancePolymerRepeatRepeatUnit) GetID() string {
	if sprru == nil {
		return ""
	}
	return sprru.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprru *SubstancePolymerRepeatRepeatUnit) GetModifierExtension() []*fhir.Extension {
	if sprru == nil {
		return nil
	}
	return sprru.ModifierExtension
}

// GetOrientationOfPolymerisation returns the value of the field OrientationOfPolymerisation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprru *SubstancePolymerRepeatRepeatUnit) GetOrientationOfPolymerisation() *fhir.CodeableConcept {
	if sprru == nil {
		return nil
	}
	return sprru.OrientationOfPolymerisation
}

// GetRepeatUnit returns the value of the field RepeatUnit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprru *SubstancePolymerRepeatRepeatUnit) GetRepeatUnit() *fhir.String {
	if sprru == nil {
		return nil
	}
	return sprru.RepeatUnit
}

// GetStructuralRepresentation returns the value of the field StructuralRepresentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprru *SubstancePolymerRepeatRepeatUnit) GetStructuralRepresentation() []*SubstancePolymerRepeatRepeatUnitStructuralRepresentation {
	if sprru == nil {
		return nil
	}
	return sprru.StructuralRepresentation
}

// Todo// Todo.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstancePolymer.json
type SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation struct {

	// Todo.
	Amount *fhir.SubstanceAmount `fhirpath:"amount"`

	// Todo.
	Degree *fhir.CodeableConcept `fhirpath:"degree"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrudop *SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation) GetAmount() *fhir.SubstanceAmount {
	if sprrudop == nil {
		return nil
	}
	return sprrudop.Amount
}

// GetDegree returns the value of the field Degree.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrudop *SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation) GetDegree() *fhir.CodeableConcept {
	if sprrudop == nil {
		return nil
	}
	return sprrudop.Degree
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrudop *SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation) GetExtension() []*fhir.Extension {
	if sprrudop == nil {
		return nil
	}
	return sprrudop.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrudop *SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation) GetID() string {
	if sprrudop == nil {
		return ""
	}
	return sprrudop.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrudop *SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation) GetModifierExtension() []*fhir.Extension {
	if sprrudop == nil {
		return nil
	}
	return sprrudop.ModifierExtension
}

// Todo// Todo.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstancePolymer.json
type SubstancePolymerRepeatRepeatUnitStructuralRepresentation struct {

	// Todo.
	Attachment *fhir.Attachment `fhirpath:"attachment"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Todo.
	Representation *fhir.String `fhirpath:"representation"`

	// Todo.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAttachment returns the value of the field Attachment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrusr *SubstancePolymerRepeatRepeatUnitStructuralRepresentation) GetAttachment() *fhir.Attachment {
	if sprrusr == nil {
		return nil
	}
	return sprrusr.Attachment
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrusr *SubstancePolymerRepeatRepeatUnitStructuralRepresentation) GetExtension() []*fhir.Extension {
	if sprrusr == nil {
		return nil
	}
	return sprrusr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrusr *SubstancePolymerRepeatRepeatUnitStructuralRepresentation) GetID() string {
	if sprrusr == nil {
		return ""
	}
	return sprrusr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrusr *SubstancePolymerRepeatRepeatUnitStructuralRepresentation) GetModifierExtension() []*fhir.Extension {
	if sprrusr == nil {
		return nil
	}
	return sprrusr.ModifierExtension
}

// GetRepresentation returns the value of the field Representation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrusr *SubstancePolymerRepeatRepeatUnitStructuralRepresentation) GetRepresentation() *fhir.String {
	if sprrusr == nil {
		return nil
	}
	return sprrusr.Representation
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sprrusr *SubstancePolymerRepeatRepeatUnitStructuralRepresentation) GetType() *fhir.CodeableConcept {
	if sprrusr == nil {
		return nil
	}
	return sprrusr.Type
}

func (sp *SubstancePolymer) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (sp *SubstancePolymer) UnmarshalJSON(data []byte) error {
	var raw struct {
		Class                 *fhir.CodeableConcept   `json:"class"`
		Contained             []fhir.Resource         `json:"contained"`
		CopolymerConnectivity []*fhir.CodeableConcept `json:"copolymerConnectivity"`
		Extension             []*fhir.Extension       `json:"extension"`
		Geometry              *fhir.CodeableConcept   `json:"geometry"`

		ID                string                        `json:"id"`
		ImplicitRules     *fhir.URI                     `json:"implicitRules"`
		Language          *fhir.Code                    `json:"language"`
		Meta              *fhir.Meta                    `json:"meta"`
		Modification      []*fhir.String                `json:"modification"`
		ModifierExtension []*fhir.Extension             `json:"modifierExtension"`
		MonomerSet        []*SubstancePolymerMonomerSet `json:"monomerSet"`
		Repeat            []*SubstancePolymerRepeat     `json:"repeat"`
		Text              *fhir.Narrative               `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	sp.Class = raw.Class
	sp.Contained = raw.Contained
	sp.CopolymerConnectivity = raw.CopolymerConnectivity
	sp.Extension = raw.Extension
	sp.Geometry = raw.Geometry
	sp.ID = raw.ID
	sp.ImplicitRules = raw.ImplicitRules
	sp.Language = raw.Language
	sp.Meta = raw.Meta
	sp.Modification = raw.Modification
	sp.ModifierExtension = raw.ModifierExtension
	sp.MonomerSet = raw.MonomerSet
	sp.Repeat = raw.Repeat
	sp.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*SubstancePolymer)(nil)
var _ json.Unmarshaler = (*SubstancePolymer)(nil)

func (spms *SubstancePolymerMonomerSet) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (spms *SubstancePolymerMonomerSet) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                                        `json:"id"`
		ModifierExtension []*fhir.Extension                             `json:"modifierExtension"`
		RatioType         *fhir.CodeableConcept                         `json:"ratioType"`
		StartingMaterial  []*SubstancePolymerMonomerSetStartingMaterial `json:"startingMaterial"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	spms.Extension = raw.Extension
	spms.ID = raw.ID
	spms.ModifierExtension = raw.ModifierExtension
	spms.RatioType = raw.RatioType
	spms.StartingMaterial = raw.StartingMaterial
	return nil
}

var _ json.Marshaler = (*SubstancePolymerMonomerSet)(nil)
var _ json.Unmarshaler = (*SubstancePolymerMonomerSet)(nil)

func (spmssm *SubstancePolymerMonomerSetStartingMaterial) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (spmssm *SubstancePolymerMonomerSetStartingMaterial) UnmarshalJSON(data []byte) error {
	var raw struct {
		Amount    *fhir.SubstanceAmount `json:"amount"`
		Extension []*fhir.Extension     `json:"extension"`

		ID                string                `json:"id"`
		IsDefining        *fhir.Boolean         `json:"isDefining"`
		Material          *fhir.CodeableConcept `json:"material"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	spmssm.Amount = raw.Amount
	spmssm.Extension = raw.Extension
	spmssm.ID = raw.ID
	spmssm.IsDefining = raw.IsDefining
	spmssm.Material = raw.Material
	spmssm.ModifierExtension = raw.ModifierExtension
	spmssm.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*SubstancePolymerMonomerSetStartingMaterial)(nil)
var _ json.Unmarshaler = (*SubstancePolymerMonomerSetStartingMaterial)(nil)

func (spr *SubstancePolymerRepeat) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (spr *SubstancePolymerRepeat) UnmarshalJSON(data []byte) error {
	var raw struct {
		AverageMolecularFormula *fhir.String      `json:"averageMolecularFormula"`
		Extension               []*fhir.Extension `json:"extension"`

		ID                   string                              `json:"id"`
		ModifierExtension    []*fhir.Extension                   `json:"modifierExtension"`
		NumberOfUnits        *fhir.Integer                       `json:"numberOfUnits"`
		RepeatUnit           []*SubstancePolymerRepeatRepeatUnit `json:"repeatUnit"`
		RepeatUnitAmountType *fhir.CodeableConcept               `json:"repeatUnitAmountType"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	spr.AverageMolecularFormula = raw.AverageMolecularFormula
	spr.Extension = raw.Extension
	spr.ID = raw.ID
	spr.ModifierExtension = raw.ModifierExtension
	spr.NumberOfUnits = raw.NumberOfUnits
	spr.RepeatUnit = raw.RepeatUnit
	spr.RepeatUnitAmountType = raw.RepeatUnitAmountType
	return nil
}

var _ json.Marshaler = (*SubstancePolymerRepeat)(nil)
var _ json.Unmarshaler = (*SubstancePolymerRepeat)(nil)

func (sprru *SubstancePolymerRepeatRepeatUnit) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (sprru *SubstancePolymerRepeatRepeatUnit) UnmarshalJSON(data []byte) error {
	var raw struct {
		Amount                 *fhir.SubstanceAmount                                     `json:"amount"`
		DegreeOfPolymerisation []*SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation `json:"degreeOfPolymerisation"`
		Extension              []*fhir.Extension                                         `json:"extension"`

		ID                          string                                                      `json:"id"`
		ModifierExtension           []*fhir.Extension                                           `json:"modifierExtension"`
		OrientationOfPolymerisation *fhir.CodeableConcept                                       `json:"orientationOfPolymerisation"`
		RepeatUnit                  *fhir.String                                                `json:"repeatUnit"`
		StructuralRepresentation    []*SubstancePolymerRepeatRepeatUnitStructuralRepresentation `json:"structuralRepresentation"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	sprru.Amount = raw.Amount
	sprru.DegreeOfPolymerisation = raw.DegreeOfPolymerisation
	sprru.Extension = raw.Extension
	sprru.ID = raw.ID
	sprru.ModifierExtension = raw.ModifierExtension
	sprru.OrientationOfPolymerisation = raw.OrientationOfPolymerisation
	sprru.RepeatUnit = raw.RepeatUnit
	sprru.StructuralRepresentation = raw.StructuralRepresentation
	return nil
}

var _ json.Marshaler = (*SubstancePolymerRepeatRepeatUnit)(nil)
var _ json.Unmarshaler = (*SubstancePolymerRepeatRepeatUnit)(nil)

func (sprrudop *SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (sprrudop *SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation) UnmarshalJSON(data []byte) error {
	var raw struct {
		Amount    *fhir.SubstanceAmount `json:"amount"`
		Degree    *fhir.CodeableConcept `json:"degree"`
		Extension []*fhir.Extension     `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	sprrudop.Amount = raw.Amount
	sprrudop.Degree = raw.Degree
	sprrudop.Extension = raw.Extension
	sprrudop.ID = raw.ID
	sprrudop.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation)(nil)
var _ json.Unmarshaler = (*SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation)(nil)

func (sprrusr *SubstancePolymerRepeatRepeatUnitStructuralRepresentation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (sprrusr *SubstancePolymerRepeatRepeatUnitStructuralRepresentation) UnmarshalJSON(data []byte) error {
	var raw struct {
		Attachment *fhir.Attachment  `json:"attachment"`
		Extension  []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Representation    *fhir.String          `json:"representation"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	sprrusr.Attachment = raw.Attachment
	sprrusr.Extension = raw.Extension
	sprrusr.ID = raw.ID
	sprrusr.ModifierExtension = raw.ModifierExtension
	sprrusr.Representation = raw.Representation
	sprrusr.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*SubstancePolymerRepeatRepeatUnitStructuralRepresentation)(nil)
var _ json.Unmarshaler = (*SubstancePolymerRepeatRepeatUnitStructuralRepresentation)(nil)
