// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package structuredefinition

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A definition of a FHIR structure. This resource is used to describe the
// underlying resources, data types defined in FHIR, and also for describing
// extensions and constraints on resources and data types.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/StructureDefinition
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinition struct {

	// Whether structure this definition describes is abstract or not - that is,
	// whether the structure is not intended to be instantiated. For Resources and
	// Data types, abstract types will never be exchanged between systems.
	Abstract *fhir.Boolean `fhirpath:"abstract"`

	// An absolute URI that is the base structure from which this type is derived,
	// either by specialization or constraint.
	BaseDefinition *fhir.Canonical `fhirpath:"baseDefinition"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Identifies the types of resource or data type elements to which the
	// extension can be applied.
	Context []*StructureDefinitionContext `fhirpath:"context"`

	// A set of rules as FHIRPath Invariants about when the extension can be used
	// (e.g. co-occurrence variants for the extension). All the rules must be true.
	ContextInvariant []*fhir.String `fhirpath:"contextInvariant"`

	// A copyright statement relating to the structure definition and/or its
	// contents. Copyright statements are generally legal restrictions on the use
	// and publishing of the structure definition.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the structure definition was published.
	// The date must change when the business version changes and it must change if
	// the status code changes. In addition, it should change when the substantive
	// content of the structure definition changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// How the type relates to the baseDefinition.
	Derivation *fhir.Code `fhirpath:"derivation"`

	// A free text natural language description of the structure definition from a
	// consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// A differential view is expressed relative to the base StructureDefinition -
	// a statement of differences that it applies.
	Differential *StructureDefinitionDifferential `fhirpath:"differential"`

	// A Boolean value to indicate that this structure definition is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to
	// be used for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The version of the FHIR specification on which this StructureDefinition is
	// based - this is the formal version of the specification, without the
	// revision number, e.g. [publication].[major].[minor], which is 4.0.1. for
	// this version.
	FhirVersion *fhir.Code `fhirpath:"fhirVersion"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this structure definition when
	// it is represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A legal or geographic region in which the structure definition is intended
	// to be used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// A set of key words or terms from external terminologies that may be used to
	// assist with indexing and searching of templates nby describing the use of
	// this structure definition, or the content it describes.
	Keyword []*fhir.Coding `fhirpath:"keyword"`

	// Defines the kind of structure that this definition is describing.
	Kind *fhir.Code `fhirpath:"kind"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// An external specification that the content is mapped to.
	Mapping []*StructureDefinitionMapping `fhirpath:"mapping"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the structure definition. This name
	// should be usable as an identifier for the module by machine processing
	// applications such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// The name of the organization or individual that published the structure
	// definition.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this structure definition is needed and why it has been
	// designed as it has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// A snapshot view is expressed in a standalone form that can be used and
	// interpreted without considering the base StructureDefinition.
	Snapshot *StructureDefinitionSnapshot `fhirpath:"snapshot"`

	// The status of this structure definition. Enables tracking the life-cycle of
	// the content.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the structure definition.
	Title *fhir.String `fhirpath:"title"`

	// The type this structure describes. If the derivation kind is
	// 'specialization' then this is the master definition for a type, and there is
	// always one of these (a data type, an extension, a resource, including
	// abstract ones). Otherwise the structure definition is a constraint on the
	// stated type (and in this case, the type cannot be an abstract type).
	// References are URLs that are relative to
	// http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to
	// http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only
	// allowed in logical models.
	Type *fhir.URI `fhirpath:"type"`

	// An absolute URI that is used to identify this structure definition when it
	// is referenced in a specification, model, design or an instance; also called
	// its canonical identifier. This SHOULD be globally unique and SHOULD be a
	// literal address at which at which an authoritative instance of this
	// structure definition is (or will be) published. This URL can be the target
	// of a canonical reference. It SHALL remain the same when the structure
	// definition is stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// structure definition instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the structure
	// definition when it is referenced in a specification, model, design or
	// instance. This is an arbitrary value managed by the structure definition
	// author and is not expected to be globally unique. For example, it might be a
	// timestamp (e.g. yyyymmdd) if a managed version is not available. There is
	// also no expectation that versions can be placed in a lexicographical
	// sequence.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAbstract returns the value of the field Abstract.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetAbstract() *fhir.Boolean {
	if sd == nil {
		return nil
	}
	return sd.Abstract
}

// GetBaseDefinition returns the value of the field BaseDefinition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetBaseDefinition() *fhir.Canonical {
	if sd == nil {
		return nil
	}
	return sd.BaseDefinition
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetContact() []*fhir.ContactDetail {
	if sd == nil {
		return nil
	}
	return sd.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetContained() []fhir.Resource {
	if sd == nil {
		return nil
	}
	return sd.Contained
}

// GetContext returns the value of the field Context.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetContext() []*StructureDefinitionContext {
	if sd == nil {
		return nil
	}
	return sd.Context
}

// GetContextInvariant returns the value of the field ContextInvariant.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetContextInvariant() []*fhir.String {
	if sd == nil {
		return nil
	}
	return sd.ContextInvariant
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetCopyright() *fhir.Markdown {
	if sd == nil {
		return nil
	}
	return sd.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetDate() *fhir.DateTime {
	if sd == nil {
		return nil
	}
	return sd.Date
}

// GetDerivation returns the value of the field Derivation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetDerivation() *fhir.Code {
	if sd == nil {
		return nil
	}
	return sd.Derivation
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetDescription() *fhir.Markdown {
	if sd == nil {
		return nil
	}
	return sd.Description
}

// GetDifferential returns the value of the field Differential.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetDifferential() *StructureDefinitionDifferential {
	if sd == nil {
		return nil
	}
	return sd.Differential
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetExperimental() *fhir.Boolean {
	if sd == nil {
		return nil
	}
	return sd.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetExtension() []*fhir.Extension {
	if sd == nil {
		return nil
	}
	return sd.Extension
}

// GetFhirVersion returns the value of the field FhirVersion.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetFhirVersion() *fhir.Code {
	if sd == nil {
		return nil
	}
	return sd.FhirVersion
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetID() string {
	if sd == nil {
		return ""
	}
	return sd.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetIdentifier() []*fhir.Identifier {
	if sd == nil {
		return nil
	}
	return sd.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetImplicitRules() *fhir.URI {
	if sd == nil {
		return nil
	}
	return sd.ImplicitRules
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetJurisdiction() []*fhir.CodeableConcept {
	if sd == nil {
		return nil
	}
	return sd.Jurisdiction
}

// GetKeyword returns the value of the field Keyword.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetKeyword() []*fhir.Coding {
	if sd == nil {
		return nil
	}
	return sd.Keyword
}

// GetKind returns the value of the field Kind.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetKind() *fhir.Code {
	if sd == nil {
		return nil
	}
	return sd.Kind
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetLanguage() *fhir.Code {
	if sd == nil {
		return nil
	}
	return sd.Language
}

// GetMapping returns the value of the field Mapping.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetMapping() []*StructureDefinitionMapping {
	if sd == nil {
		return nil
	}
	return sd.Mapping
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetMeta() *fhir.Meta {
	if sd == nil {
		return nil
	}
	return sd.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetModifierExtension() []*fhir.Extension {
	if sd == nil {
		return nil
	}
	return sd.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetName() *fhir.String {
	if sd == nil {
		return nil
	}
	return sd.Name
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetPublisher() *fhir.String {
	if sd == nil {
		return nil
	}
	return sd.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetPurpose() *fhir.Markdown {
	if sd == nil {
		return nil
	}
	return sd.Purpose
}

// GetSnapshot returns the value of the field Snapshot.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetSnapshot() *StructureDefinitionSnapshot {
	if sd == nil {
		return nil
	}
	return sd.Snapshot
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetStatus() *fhir.Code {
	if sd == nil {
		return nil
	}
	return sd.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetText() *fhir.Narrative {
	if sd == nil {
		return nil
	}
	return sd.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetTitle() *fhir.String {
	if sd == nil {
		return nil
	}
	return sd.Title
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetType() *fhir.URI {
	if sd == nil {
		return nil
	}
	return sd.Type
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetURL() *fhir.URI {
	if sd == nil {
		return nil
	}
	return sd.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetUseContext() []*fhir.UsageContext {
	if sd == nil {
		return nil
	}
	return sd.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sd *StructureDefinition) GetVersion() *fhir.String {
	if sd == nil {
		return nil
	}
	return sd.Version
}

// If an extension, where it can be used in instances// Identifies the types of resource or data type elements to which the
// extension can be applied.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinitionContext struct {

	// An expression that defines where an extension can be used in resources.
	Expression *fhir.String `fhirpath:"expression"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Defines how to interpret the expression that defines what the context of the
	// extension is.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExpression returns the value of the field Expression.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdc *StructureDefinitionContext) GetExpression() *fhir.String {
	if sdc == nil {
		return nil
	}
	return sdc.Expression
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdc *StructureDefinitionContext) GetExtension() []*fhir.Extension {
	if sdc == nil {
		return nil
	}
	return sdc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdc *StructureDefinitionContext) GetID() string {
	if sdc == nil {
		return ""
	}
	return sdc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdc *StructureDefinitionContext) GetModifierExtension() []*fhir.Extension {
	if sdc == nil {
		return nil
	}
	return sdc.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdc *StructureDefinitionContext) GetType() *fhir.Code {
	if sdc == nil {
		return nil
	}
	return sdc.Type
}

// Differential view of the structure// A differential view is expressed relative to the base StructureDefinition -
// a statement of differences that it applies.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinitionDifferential struct {

	// Captures constraints on each element within the resource.
	Element []*fhir.ElementDefinition `fhirpath:"element"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetElement returns the value of the field Element.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdd *StructureDefinitionDifferential) GetElement() []*fhir.ElementDefinition {
	if sdd == nil {
		return nil
	}
	return sdd.Element
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdd *StructureDefinitionDifferential) GetExtension() []*fhir.Extension {
	if sdd == nil {
		return nil
	}
	return sdd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdd *StructureDefinitionDifferential) GetID() string {
	if sdd == nil {
		return ""
	}
	return sdd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdd *StructureDefinitionDifferential) GetModifierExtension() []*fhir.Extension {
	if sdd == nil {
		return nil
	}
	return sdd.ModifierExtension
}

// External specification that the content is mapped to// An external specification that the content is mapped to.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinitionMapping struct {

	// Comments about this mapping, including version notes, issues, scope
	// limitations, and other important notes for usage.
	Comment *fhir.String `fhirpath:"comment"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// An Internal id that is used to identify this mapping set when specific
	// mappings are made.
	Identity *fhir.ID `fhirpath:"identity"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A name for the specification that is being mapped to.
	Name *fhir.String `fhirpath:"name"`

	// An absolute URI that identifies the specification that this mapping is
	// expressed to.
	URI *fhir.URI `fhirpath:"uri"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetComment returns the value of the field Comment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdm *StructureDefinitionMapping) GetComment() *fhir.String {
	if sdm == nil {
		return nil
	}
	return sdm.Comment
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdm *StructureDefinitionMapping) GetExtension() []*fhir.Extension {
	if sdm == nil {
		return nil
	}
	return sdm.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdm *StructureDefinitionMapping) GetID() string {
	if sdm == nil {
		return ""
	}
	return sdm.ID
}

// GetIdentity returns the value of the field Identity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdm *StructureDefinitionMapping) GetIdentity() *fhir.ID {
	if sdm == nil {
		return nil
	}
	return sdm.Identity
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdm *StructureDefinitionMapping) GetModifierExtension() []*fhir.Extension {
	if sdm == nil {
		return nil
	}
	return sdm.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdm *StructureDefinitionMapping) GetName() *fhir.String {
	if sdm == nil {
		return nil
	}
	return sdm.Name
}

// GetURI returns the value of the field URI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sdm *StructureDefinitionMapping) GetURI() *fhir.URI {
	if sdm == nil {
		return nil
	}
	return sdm.URI
}

// Snapshot view of the structure// A snapshot view is expressed in a standalone form that can be used and
// interpreted without considering the base StructureDefinition.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinitionSnapshot struct {

	// Captures constraints on each element within the resource.
	Element []*fhir.ElementDefinition `fhirpath:"element"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetElement returns the value of the field Element.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sds *StructureDefinitionSnapshot) GetElement() []*fhir.ElementDefinition {
	if sds == nil {
		return nil
	}
	return sds.Element
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sds *StructureDefinitionSnapshot) GetExtension() []*fhir.Extension {
	if sds == nil {
		return nil
	}
	return sds.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sds *StructureDefinitionSnapshot) GetID() string {
	if sds == nil {
		return ""
	}
	return sds.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (sds *StructureDefinitionSnapshot) GetModifierExtension() []*fhir.Extension {
	if sds == nil {
		return nil
	}
	return sds.ModifierExtension
}

func (sd *StructureDefinition) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (sd *StructureDefinition) UnmarshalJSON(data []byte) error {
	var raw struct {
		Abstract         *fhir.Boolean                    `json:"abstract"`
		BaseDefinition   *fhir.Canonical                  `json:"baseDefinition"`
		Contact          []*fhir.ContactDetail            `json:"contact"`
		Contained        []fhir.Resource                  `json:"contained"`
		Context          []*StructureDefinitionContext    `json:"context"`
		ContextInvariant []*fhir.String                   `json:"contextInvariant"`
		Copyright        *fhir.Markdown                   `json:"copyright"`
		Date             *fhir.DateTime                   `json:"date"`
		Derivation       *fhir.Code                       `json:"derivation"`
		Description      *fhir.Markdown                   `json:"description"`
		Differential     *StructureDefinitionDifferential `json:"differential"`
		Experimental     *fhir.Boolean                    `json:"experimental"`
		Extension        []*fhir.Extension                `json:"extension"`
		FhirVersion      *fhir.Code                       `json:"fhirVersion"`

		ID                string                        `json:"id"`
		Identifier        []*fhir.Identifier            `json:"identifier"`
		ImplicitRules     *fhir.URI                     `json:"implicitRules"`
		Jurisdiction      []*fhir.CodeableConcept       `json:"jurisdiction"`
		Keyword           []*fhir.Coding                `json:"keyword"`
		Kind              *fhir.Code                    `json:"kind"`
		Language          *fhir.Code                    `json:"language"`
		Mapping           []*StructureDefinitionMapping `json:"mapping"`
		Meta              *fhir.Meta                    `json:"meta"`
		ModifierExtension []*fhir.Extension             `json:"modifierExtension"`
		Name              *fhir.String                  `json:"name"`
		Publisher         *fhir.String                  `json:"publisher"`
		Purpose           *fhir.Markdown                `json:"purpose"`
		Snapshot          *StructureDefinitionSnapshot  `json:"snapshot"`
		Status            *fhir.Code                    `json:"status"`
		Text              *fhir.Narrative               `json:"text"`
		Title             *fhir.String                  `json:"title"`
		Type              *fhir.URI                     `json:"type"`
		URL               *fhir.URI                     `json:"url"`
		UseContext        []*fhir.UsageContext          `json:"useContext"`
		Version           *fhir.String                  `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	sd.Abstract = raw.Abstract
	sd.BaseDefinition = raw.BaseDefinition
	sd.Contact = raw.Contact
	sd.Contained = raw.Contained
	sd.Context = raw.Context
	sd.ContextInvariant = raw.ContextInvariant
	sd.Copyright = raw.Copyright
	sd.Date = raw.Date
	sd.Derivation = raw.Derivation
	sd.Description = raw.Description
	sd.Differential = raw.Differential
	sd.Experimental = raw.Experimental
	sd.Extension = raw.Extension
	sd.FhirVersion = raw.FhirVersion
	sd.ID = raw.ID
	sd.Identifier = raw.Identifier
	sd.ImplicitRules = raw.ImplicitRules
	sd.Jurisdiction = raw.Jurisdiction
	sd.Keyword = raw.Keyword
	sd.Kind = raw.Kind
	sd.Language = raw.Language
	sd.Mapping = raw.Mapping
	sd.Meta = raw.Meta
	sd.ModifierExtension = raw.ModifierExtension
	sd.Name = raw.Name
	sd.Publisher = raw.Publisher
	sd.Purpose = raw.Purpose
	sd.Snapshot = raw.Snapshot
	sd.Status = raw.Status
	sd.Text = raw.Text
	sd.Title = raw.Title
	sd.Type = raw.Type
	sd.URL = raw.URL
	sd.UseContext = raw.UseContext
	sd.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*StructureDefinition)(nil)
var _ json.Unmarshaler = (*StructureDefinition)(nil)

func (sdc *StructureDefinitionContext) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (sdc *StructureDefinitionContext) UnmarshalJSON(data []byte) error {
	var raw struct {
		Expression *fhir.String      `json:"expression"`
		Extension  []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Type              *fhir.Code        `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	sdc.Expression = raw.Expression
	sdc.Extension = raw.Extension
	sdc.ID = raw.ID
	sdc.ModifierExtension = raw.ModifierExtension
	sdc.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*StructureDefinitionContext)(nil)
var _ json.Unmarshaler = (*StructureDefinitionContext)(nil)

func (sdd *StructureDefinitionDifferential) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (sdd *StructureDefinitionDifferential) UnmarshalJSON(data []byte) error {
	var raw struct {
		Element   []*fhir.ElementDefinition `json:"element"`
		Extension []*fhir.Extension         `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	sdd.Element = raw.Element
	sdd.Extension = raw.Extension
	sdd.ID = raw.ID
	sdd.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*StructureDefinitionDifferential)(nil)
var _ json.Unmarshaler = (*StructureDefinitionDifferential)(nil)

func (sdm *StructureDefinitionMapping) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (sdm *StructureDefinitionMapping) UnmarshalJSON(data []byte) error {
	var raw struct {
		Comment   *fhir.String      `json:"comment"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Identity          *fhir.ID          `json:"identity"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Name              *fhir.String      `json:"name"`
		URI               *fhir.URI         `json:"uri"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	sdm.Comment = raw.Comment
	sdm.Extension = raw.Extension
	sdm.ID = raw.ID
	sdm.Identity = raw.Identity
	sdm.ModifierExtension = raw.ModifierExtension
	sdm.Name = raw.Name
	sdm.URI = raw.URI
	return nil
}

var _ json.Marshaler = (*StructureDefinitionMapping)(nil)
var _ json.Unmarshaler = (*StructureDefinitionMapping)(nil)

func (sds *StructureDefinitionSnapshot) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (sds *StructureDefinitionSnapshot) UnmarshalJSON(data []byte) error {
	var raw struct {
		Element   []*fhir.ElementDefinition `json:"element"`
		Extension []*fhir.Extension         `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	sds.Element = raw.Element
	sds.Extension = raw.Extension
	sds.ID = raw.ID
	sds.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*StructureDefinitionSnapshot)(nil)
var _ json.Unmarshaler = (*StructureDefinitionSnapshot)(nil)
