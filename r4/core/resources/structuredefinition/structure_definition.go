// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package structuredefinition

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A definition of a FHIR structure. This resource is used to describe the
// underlying resources, data types defined in FHIR, and also for describing
// extensions and constraints on resources and data types.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/StructureDefinition
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinition struct {

	// Whether structure this definition describes is abstract or not - that is,
	// whether the structure is not intended to be instantiated. For Resources and
	// Data types, abstract types will never be exchanged between systems.
	Abstract *fhir.Boolean `json:"abstract"`

	// An absolute URI that is the base structure from which this type is derived,
	// either by specialization or constraint.
	BaseDefinition *fhir.Canonical `json:"baseDefinition"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `json:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `json:"contained"`

	// Identifies the types of resource or data type elements to which the
	// extension can be applied.
	Context []fhir.BackboneElement `json:"context"`

	// A set of rules as FHIRPath Invariants about when the extension can be used
	// (e.g. co-occurrence variants for the extension). All the rules must be true.
	ContextInvariant []*fhir.String `json:"contextInvariant"`

	// A copyright statement relating to the structure definition and/or its
	// contents. Copyright statements are generally legal restrictions on the use
	// and publishing of the structure definition.
	Copyright *fhir.Markdown `json:"copyright"`

	// The date (and optionally time) when the structure definition was published.
	// The date must change when the business version changes and it must change if
	// the status code changes. In addition, it should change when the substantive
	// content of the structure definition changes.
	Date *fhir.DateTime `json:"date"`

	// How the type relates to the baseDefinition.
	Derivation *fhir.Code `json:"derivation"`

	// A free text natural language description of the structure definition from a
	// consumer's perspective.
	Description *fhir.Markdown `json:"description"`

	// A differential view is expressed relative to the base StructureDefinition -
	// a statement of differences that it applies.
	Differential fhir.BackboneElement `json:"differential"`

	// A Boolean value to indicate that this structure definition is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to
	// be used for genuine usage.
	Experimental *fhir.Boolean `json:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `json:"extension"`

	// The version of the FHIR specification on which this StructureDefinition is
	// based - this is the formal version of the specification, without the
	// revision number, e.g. [publication].[major].[minor], which is 4.0.1. for
	// this version.
	FhirVersion *fhir.Code `json:"fhirVersion"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	Id string `json:"id"`

	// A formal identifier that is used to identify this structure definition when
	// it is represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier []*fhir.Identifier `json:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.Uri `json:"implicitRules"`

	// A legal or geographic region in which the structure definition is intended
	// to be used.
	Jurisdiction []*fhir.CodeableConcept `json:"jurisdiction"`

	// A set of key words or terms from external terminologies that may be used to
	// assist with indexing and searching of templates nby describing the use of
	// this structure definition, or the content it describes.
	Keyword []*fhir.Coding `json:"keyword"`

	// Defines the kind of structure that this definition is describing.
	Kind *fhir.Code `json:"kind"`

	// The base language in which the resource is written.
	Language *fhir.Code `json:"language"`

	// An external specification that the content is mapped to.
	Mapping []fhir.BackboneElement `json:"mapping"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `json:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `json:"modifierExtension"`

	// A natural language name identifying the structure definition. This name
	// should be usable as an identifier for the module by machine processing
	// applications such as code generation.
	Name *fhir.String `json:"name"`

	// The name of the organization or individual that published the structure
	// definition.
	Publisher *fhir.String `json:"publisher"`

	// Explanation of why this structure definition is needed and why it has been
	// designed as it has.
	Purpose *fhir.Markdown `json:"purpose"`

	// A snapshot view is expressed in a standalone form that can be used and
	// interpreted without considering the base StructureDefinition.
	Snapshot fhir.BackboneElement `json:"snapshot"`

	// The status of this structure definition. Enables tracking the life-cycle of
	// the content.
	Status *fhir.Code `json:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `json:"text"`

	// A short, descriptive, user-friendly title for the structure definition.
	Title *fhir.String `json:"title"`

	// The type this structure describes. If the derivation kind is
	// 'specialization' then this is the master definition for a type, and there is
	// always one of these (a data type, an extension, a resource, including
	// abstract ones). Otherwise the structure definition is a constraint on the
	// stated type (and in this case, the type cannot be an abstract type).
	// References are URLs that are relative to
	// http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to
	// http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only
	// allowed in logical models.
	Type *fhir.Uri `json:"type"`

	// An absolute URI that is used to identify this structure definition when it
	// is referenced in a specification, model, design or an instance; also called
	// its canonical identifier. This SHOULD be globally unique and SHOULD be a
	// literal address at which at which an authoritative instance of this
	// structure definition is (or will be) published. This URL can be the target
	// of a canonical reference. It SHALL remain the same when the structure
	// definition is stored on different servers.
	Url *fhir.Uri `json:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// structure definition instances.
	UseContext []*fhir.UsageContext `json:"useContext"`

	// The identifier that is used to identify this version of the structure
	// definition when it is referenced in a specification, model, design or
	// instance. This is an arbitrary value managed by the structure definition
	// author and is not expected to be globally unique. For example, it might be a
	// timestamp (e.g. yyyymmdd) if a managed version is not available. There is
	// also no expectation that versions can be placed in a lexicographical
	// sequence.
	Version *fhir.String `json:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

func (s *StructureDefinition) GetAbstract() *fhir.Boolean {
	if s == nil {
		return nil
	}
	return s.Abstract
}

func (s *StructureDefinition) GetBaseDefinition() *fhir.Canonical {
	if s == nil {
		return nil
	}
	return s.BaseDefinition
}

func (s *StructureDefinition) GetContact() []*fhir.ContactDetail {
	if s == nil {
		return nil
	}
	return s.Contact
}

func (s *StructureDefinition) GetContained() []fhir.Resource {
	if s == nil {
		return nil
	}
	return s.Contained
}

func (s *StructureDefinition) GetContext() []fhir.BackboneElement {
	if s == nil {
		return nil
	}
	return s.Context
}

func (s *StructureDefinition) GetContextInvariant() []*fhir.String {
	if s == nil {
		return nil
	}
	return s.ContextInvariant
}

func (s *StructureDefinition) GetCopyright() *fhir.Markdown {
	if s == nil {
		return nil
	}
	return s.Copyright
}

func (s *StructureDefinition) GetDate() *fhir.DateTime {
	if s == nil {
		return nil
	}
	return s.Date
}

func (s *StructureDefinition) GetDerivation() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Derivation
}

func (s *StructureDefinition) GetDescription() *fhir.Markdown {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *StructureDefinition) GetDifferential() fhir.BackboneElement {
	if s == nil {
		return nil
	}
	return s.Differential
}

func (s *StructureDefinition) GetExperimental() *fhir.Boolean {
	if s == nil {
		return nil
	}
	return s.Experimental
}

func (s *StructureDefinition) GetExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

func (s *StructureDefinition) GetFhirVersion() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.FhirVersion
}

func (s *StructureDefinition) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *StructureDefinition) GetIdentifier() []*fhir.Identifier {
	if s == nil {
		return nil
	}
	return s.Identifier
}

func (s *StructureDefinition) GetImplicitRules() *fhir.Uri {
	if s == nil {
		return nil
	}
	return s.ImplicitRules
}

func (s *StructureDefinition) GetJurisdiction() []*fhir.CodeableConcept {
	if s == nil {
		return nil
	}
	return s.Jurisdiction
}

func (s *StructureDefinition) GetKeyword() []*fhir.Coding {
	if s == nil {
		return nil
	}
	return s.Keyword
}

func (s *StructureDefinition) GetKind() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Kind
}

func (s *StructureDefinition) GetLanguage() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Language
}

func (s *StructureDefinition) GetMapping() []fhir.BackboneElement {
	if s == nil {
		return nil
	}
	return s.Mapping
}

func (s *StructureDefinition) GetMeta() *fhir.Meta {
	if s == nil {
		return nil
	}
	return s.Meta
}

func (s *StructureDefinition) GetModifierExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.ModifierExtension
}

func (s *StructureDefinition) GetName() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *StructureDefinition) GetPublisher() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Publisher
}

func (s *StructureDefinition) GetPurpose() *fhir.Markdown {
	if s == nil {
		return nil
	}
	return s.Purpose
}

func (s *StructureDefinition) GetSnapshot() fhir.BackboneElement {
	if s == nil {
		return nil
	}
	return s.Snapshot
}

func (s *StructureDefinition) GetStatus() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Status
}

func (s *StructureDefinition) GetText() *fhir.Narrative {
	if s == nil {
		return nil
	}
	return s.Text
}

func (s *StructureDefinition) GetTitle() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Title
}

func (s *StructureDefinition) GetType() *fhir.Uri {
	if s == nil {
		return nil
	}
	return s.Type
}

func (s *StructureDefinition) GetUrl() *fhir.Uri {
	if s == nil {
		return nil
	}
	return s.Url
}

func (s *StructureDefinition) GetUseContext() []*fhir.UsageContext {
	if s == nil {
		return nil
	}
	return s.UseContext
}

func (s *StructureDefinition) GetVersion() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Version
}

// Contained, inline Resources// These resources do not have an independent existence apart from the resource
// that contains them - they cannot be identified independently, and nor can
// they have their own independent transaction scope.// This should never be done when the content can be identified properly, as
// once identification is lost, it is extremely difficult (and context
// dependent) to restore it again. Contained resources may have profiles and
// tags In their meta elements, but SHALL NOT have security labels.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinitionContained struct {
	profileimpl.BaseResource
}

// If an extension, where it can be used in instances// Identifies the types of resource or data type elements to which the
// extension can be applied.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinitionContext struct {

	// An expression that defines where an extension can be used in resources.
	Expression *fhir.String `json:"expression"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `json:"modifierExtension"`

	// Defines how to interpret the expression that defines what the context of the
	// extension is.
	Type *fhir.Code `json:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

func (s *StructureDefinitionContext) GetExpression() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Expression
}

func (s *StructureDefinitionContext) GetExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

func (s *StructureDefinitionContext) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *StructureDefinitionContext) GetModifierExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.ModifierExtension
}

func (s *StructureDefinitionContext) GetType() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Type
}

// Differential view of the structure// A differential view is expressed relative to the base StructureDefinition -
// a statement of differences that it applies.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinitionDifferential struct {

	// Captures constraints on each element within the resource.
	Element []*fhir.ElementDefinition `json:"element"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `json:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

func (s *StructureDefinitionDifferential) GetElement() []*fhir.ElementDefinition {
	if s == nil {
		return nil
	}
	return s.Element
}

func (s *StructureDefinitionDifferential) GetExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

func (s *StructureDefinitionDifferential) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *StructureDefinitionDifferential) GetModifierExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.ModifierExtension
}

// External specification that the content is mapped to// An external specification that the content is mapped to.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinitionMapping struct {

	// Comments about this mapping, including version notes, issues, scope
	// limitations, and other important notes for usage.
	Comment *fhir.String `json:"comment"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// An Internal id that is used to identify this mapping set when specific
	// mappings are made.
	Identity *fhir.Id `json:"identity"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `json:"modifierExtension"`

	// A name for the specification that is being mapped to.
	Name *fhir.String `json:"name"`

	// An absolute URI that identifies the specification that this mapping is
	// expressed to.
	Uri *fhir.Uri `json:"uri"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

func (s *StructureDefinitionMapping) GetComment() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Comment
}

func (s *StructureDefinitionMapping) GetExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

func (s *StructureDefinitionMapping) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *StructureDefinitionMapping) GetIdentity() *fhir.Id {
	if s == nil {
		return nil
	}
	return s.Identity
}

func (s *StructureDefinitionMapping) GetModifierExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.ModifierExtension
}

func (s *StructureDefinitionMapping) GetName() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *StructureDefinitionMapping) GetUri() *fhir.Uri {
	if s == nil {
		return nil
	}
	return s.Uri
}

// Snapshot view of the structure// A snapshot view is expressed in a standalone form that can be used and
// interpreted without considering the base StructureDefinition.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-StructureDefinition.json
type StructureDefinitionSnapshot struct {

	// Captures constraints on each element within the resource.
	Element []*fhir.ElementDefinition `json:"element"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `json:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

func (s *StructureDefinitionSnapshot) GetElement() []*fhir.ElementDefinition {
	if s == nil {
		return nil
	}
	return s.Element
}

func (s *StructureDefinitionSnapshot) GetExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

func (s *StructureDefinitionSnapshot) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *StructureDefinitionSnapshot) GetModifierExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.ModifierExtension
}
