// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package media

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A photo, video, or audio recording acquired or used in healthcare. The
// actual content may be inline or provided by direct reference.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Media
//   - Source File: StructureDefinition-Media.json
type Media struct {

	// A procedure that is fulfilled in whole or in part by the creation of this
	// media.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// Indicates the site on the subject's body where the observation was made
	// (i.e. the target site).
	BodySite *fhir.CodeableConcept `fhirpath:"bodySite"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The actual content of the media - inline or by direct reference to the media
	// source file.
	Content *fhir.Attachment `fhirpath:"content"`

	// The date and time(s) at which the media was collected.
	Created fhir.Element `fhirpath:"created"`

	// The device used to collect the media.
	Device *fhir.Reference `fhirpath:"device"`

	// The name of the device / manufacturer of the device that was used to make
	// the recording.
	DeviceName *fhir.String `fhirpath:"deviceName"`

	// The duration of the recording in seconds - for audio and video.
	Duration *fhir.Decimal `fhirpath:"duration"`

	// The encounter that establishes the context for this media.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The number of frames in a photo. This is used with a multi-page fax, or an
	// imaging acquisition context that takes multiple slices in a single image, or
	// an animated gif. If there is more than one frame, this SHALL have a value in
	// order to alert interface software that a multi-frame capable rendering
	// widget is required.
	Frames *fhir.PositiveInt `fhirpath:"frames"`

	// Height of the image in pixels (photo/video).
	Height *fhir.PositiveInt `fhirpath:"height"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifiers associated with the image - these may include identifiers for
	// the image itself, identifiers for the context of its collection (e.g. series
	// ids) and context ids such as accession numbers or other workflow
	// identifiers.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The date and time this version of the media was made available to providers,
	// typically after having been reviewed.
	Issued *fhir.Instant `fhirpath:"issued"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// Details of the type of the media - usually, how it was acquired (what type
	// of device). If images sourced from a DICOM system, are wrapped in a Media
	// resource, then this is the modality.
	Modality *fhir.CodeableConcept `fhirpath:"modality"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Comments made about the media by the performer, subject or other
	// participants.
	Note []*fhir.Annotation `fhirpath:"note"`

	// The person who administered the collection of the image.
	Operator *fhir.Reference `fhirpath:"operator"`

	// A larger event of which this particular event is a component or step.
	PartOf []*fhir.Reference `fhirpath:"partOf"`

	// Describes why the event occurred in coded or textual form.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// The current state of the {{title}}.
	Status *fhir.Code `fhirpath:"status"`

	// Who/What this Media is a record of.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A code that classifies whether the media is an image, video or audio
	// recording or some other media category.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// The name of the imaging view e.g. Lateral or Antero-posterior (AP).
	View *fhir.CodeableConcept `fhirpath:"view"`

	// Width of the image in pixels (photo/video).
	Width *fhir.PositiveInt `fhirpath:"width"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetBasedOn() []*fhir.Reference {
	if m == nil {
		return nil
	}
	return m.BasedOn
}

// GetBodySite returns the value of the field BodySite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetBodySite() *fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.BodySite
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetContained() []fhir.Resource {
	if m == nil {
		return nil
	}
	return m.Contained
}

// GetContent returns the value of the field Content.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetContent() *fhir.Attachment {
	if m == nil {
		return nil
	}
	return m.Content
}

// GetCreated returns the value of the field Created.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetCreated() fhir.Element {
	if m == nil {
		return nil
	}
	return m.Created
}

// GetCreatedDateTime returns the value of the field Created.
func (m *Media) GetCreatedDateTime() *fhir.DateTime {
	if m == nil {
		return nil
	}
	val, ok := m.Created.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetCreatedPeriod returns the value of the field Created.
func (m *Media) GetCreatedPeriod() *fhir.Period {
	if m == nil {
		return nil
	}
	val, ok := m.Created.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetDevice returns the value of the field Device.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetDevice() *fhir.Reference {
	if m == nil {
		return nil
	}
	return m.Device
}

// GetDeviceName returns the value of the field DeviceName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetDeviceName() *fhir.String {
	if m == nil {
		return nil
	}
	return m.DeviceName
}

// GetDuration returns the value of the field Duration.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetDuration() *fhir.Decimal {
	if m == nil {
		return nil
	}
	return m.Duration
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetEncounter() *fhir.Reference {
	if m == nil {
		return nil
	}
	return m.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetExtension() []*fhir.Extension {
	if m == nil {
		return nil
	}
	return m.Extension
}

// GetFrames returns the value of the field Frames.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetFrames() *fhir.PositiveInt {
	if m == nil {
		return nil
	}
	return m.Frames
}

// GetHeight returns the value of the field Height.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetHeight() *fhir.PositiveInt {
	if m == nil {
		return nil
	}
	return m.Height
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetIdentifier() []*fhir.Identifier {
	if m == nil {
		return nil
	}
	return m.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetImplicitRules() *fhir.URI {
	if m == nil {
		return nil
	}
	return m.ImplicitRules
}

// GetIssued returns the value of the field Issued.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetIssued() *fhir.Instant {
	if m == nil {
		return nil
	}
	return m.Issued
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetLanguage() *fhir.Code {
	if m == nil {
		return nil
	}
	return m.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetMeta() *fhir.Meta {
	if m == nil {
		return nil
	}
	return m.Meta
}

// GetModality returns the value of the field Modality.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetModality() *fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.Modality
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetModifierExtension() []*fhir.Extension {
	if m == nil {
		return nil
	}
	return m.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetNote() []*fhir.Annotation {
	if m == nil {
		return nil
	}
	return m.Note
}

// GetOperator returns the value of the field Operator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetOperator() *fhir.Reference {
	if m == nil {
		return nil
	}
	return m.Operator
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetPartOf() []*fhir.Reference {
	if m == nil {
		return nil
	}
	return m.PartOf
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetReasonCode() []*fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.ReasonCode
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetStatus() *fhir.Code {
	if m == nil {
		return nil
	}
	return m.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetSubject() *fhir.Reference {
	if m == nil {
		return nil
	}
	return m.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetText() *fhir.Narrative {
	if m == nil {
		return nil
	}
	return m.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetType() *fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.Type
}

// GetView returns the value of the field View.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetView() *fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.View
}

// GetWidth returns the value of the field Width.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Media) GetWidth() *fhir.PositiveInt {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *Media) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (m *Media) UnmarshalJSON(data []byte) error {
	var raw struct {
		BasedOn         []*fhir.Reference     `json:"basedOn"`
		BodySite        *fhir.CodeableConcept `json:"bodySite"`
		Contained       []fhir.Resource       `json:"contained"`
		Content         *fhir.Attachment      `json:"content"`
		CreatedDateTime *fhir.DateTime        `json:"createdDateTime"`
		CreatedPeriod   *fhir.Period          `json:"createdPeriod"`
		Device          *fhir.Reference       `json:"device"`
		DeviceName      *fhir.String          `json:"deviceName"`
		Duration        *fhir.Decimal         `json:"duration"`
		Encounter       *fhir.Reference       `json:"encounter"`
		Extension       []*fhir.Extension     `json:"extension"`
		Frames          *fhir.PositiveInt     `json:"frames"`
		Height          *fhir.PositiveInt     `json:"height"`

		ID                string                  `json:"id"`
		Identifier        []*fhir.Identifier      `json:"identifier"`
		ImplicitRules     *fhir.URI               `json:"implicitRules"`
		Issued            *fhir.Instant           `json:"issued"`
		Language          *fhir.Code              `json:"language"`
		Meta              *fhir.Meta              `json:"meta"`
		Modality          *fhir.CodeableConcept   `json:"modality"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Note              []*fhir.Annotation      `json:"note"`
		Operator          *fhir.Reference         `json:"operator"`
		PartOf            []*fhir.Reference       `json:"partOf"`
		ReasonCode        []*fhir.CodeableConcept `json:"reasonCode"`
		Status            *fhir.Code              `json:"status"`
		Subject           *fhir.Reference         `json:"subject"`
		Text              *fhir.Narrative         `json:"text"`
		Type              *fhir.CodeableConcept   `json:"type"`
		View              *fhir.CodeableConcept   `json:"view"`
		Width             *fhir.PositiveInt       `json:"width"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	m.BasedOn = raw.BasedOn
	m.BodySite = raw.BodySite
	m.Contained = raw.Contained
	m.Content = raw.Content
	m.Created, err = validate.SelectOneOf[fhir.Element]("Media.created",
		raw.CreatedDateTime,
		raw.CreatedPeriod)
	if err != nil {
		return err
	}
	m.Device = raw.Device
	m.DeviceName = raw.DeviceName
	m.Duration = raw.Duration
	m.Encounter = raw.Encounter
	m.Extension = raw.Extension
	m.Frames = raw.Frames
	m.Height = raw.Height
	m.ID = raw.ID
	m.Identifier = raw.Identifier
	m.ImplicitRules = raw.ImplicitRules
	m.Issued = raw.Issued
	m.Language = raw.Language
	m.Meta = raw.Meta
	m.Modality = raw.Modality
	m.ModifierExtension = raw.ModifierExtension
	m.Note = raw.Note
	m.Operator = raw.Operator
	m.PartOf = raw.PartOf
	m.ReasonCode = raw.ReasonCode
	m.Status = raw.Status
	m.Subject = raw.Subject
	m.Text = raw.Text
	m.Type = raw.Type
	m.View = raw.View
	m.Width = raw.Width
	return nil
}

var _ json.Marshaler = (*Media)(nil)
var _ json.Unmarshaler = (*Media)(nil)
