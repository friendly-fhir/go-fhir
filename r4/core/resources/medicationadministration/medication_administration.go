// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package medicationadministration

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Describes the event of a patient consuming or otherwise being administered a
// medication. This may be as simple as swallowing a tablet or it may be a long
// running infusion. Related resources tie this event to the authorizing
// prescription, and the specific encounter between patient and health care
// practitioner.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MedicationAdministration
//   - Source File: StructureDefinition-MedicationAdministration.json
type MedicationAdministration struct {

	// Indicates where the medication is expected to be consumed or administered.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The visit, admission, or other contact between patient and health care
	// provider during which the medication administration was performed.
	Context *fhir.Reference `fhirpath:"context"`

	// The device used in administering the medication to the patient. For example,
	// a particular infusion pump.
	Device []*fhir.Reference `fhirpath:"device"`

	// Describes the medication dosage information details e.g. dose, rate, site,
	// route, etc.
	Dosage *MedicationAdministrationDosage `fhirpath:"dosage"`

	// A specific date/time or interval of time during which the administration
	// took place (or did not take place, when the 'notGiven' attribute is true).
	// For many administrations, such as swallowing a tablet the use of dateTime is
	// more appropriate.
	Effective fhir.Element `fhirpath:"effective"`

	// A summary of the events of interest that have occurred, such as when the
	// administration was verified.
	EventHistory []*fhir.Reference `fhirpath:"eventHistory"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifiers associated with this Medication Administration that are defined
	// by business processes and/or used to refer to it when a direct URL reference
	// to the resource itself is not appropriate. They are business identifiers
	// assigned to this resource by the performer or other systems and remain
	// constant as the resource is updated and propagates from server to server.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A protocol, guideline, orderset, or other definition that was adhered to in
	// whole or in part by this event.
	Instantiates []*fhir.URI `fhirpath:"instantiates"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Identifies the medication that was administered. This is either a link to a
	// resource representing the details of the medication or a simple attribute
	// carrying a code that identifies the medication from a known list of
	// medications.
	Medication fhir.Element `fhirpath:"medication"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Extra information about the medication administration that is not conveyed
	// by the other attributes.
	Note []*fhir.Annotation `fhirpath:"note"`

	// A larger event of which this particular event is a component or step.
	PartOf []*fhir.Reference `fhirpath:"partOf"`

	// Indicates who or what performed the medication administration and how they
	// were involved.
	Performer []*MedicationAdministrationPerformer `fhirpath:"performer"`

	// A code indicating why the medication was given.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Condition or observation that supports why the medication was administered.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// The original request, instruction or authority to perform the
	// administration.
	Request *fhir.Reference `fhirpath:"request"`

	// Will generally be set to show that the administration has been completed.
	// For some long running administrations such as infusions, it is possible for
	// an administration to be started but not completed or it may be paused while
	// some other process is under way.
	Status *fhir.Code `fhirpath:"status"`

	// A code indicating why the administration was not performed.
	StatusReason []*fhir.CodeableConcept `fhirpath:"statusReason"`

	// The person or animal or group receiving the medication.
	Subject *fhir.Reference `fhirpath:"subject"`

	// Additional information (for example, patient height and weight) that
	// supports the administration of the medication.
	SupportingInformation []*fhir.Reference `fhirpath:"supportingInformation"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetCategory() *fhir.CodeableConcept {
	if ma == nil {
		return nil
	}
	return ma.Category
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetContained() []fhir.Resource {
	if ma == nil {
		return nil
	}
	return ma.Contained
}

// GetContext returns the value of the field Context.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetContext() *fhir.Reference {
	if ma == nil {
		return nil
	}
	return ma.Context
}

// GetDevice returns the value of the field Device.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetDevice() []*fhir.Reference {
	if ma == nil {
		return nil
	}
	return ma.Device
}

// GetDosage returns the value of the field Dosage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetDosage() *MedicationAdministrationDosage {
	if ma == nil {
		return nil
	}
	return ma.Dosage
}

// GetEffective returns the value of the field Effective.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetEffective() fhir.Element {
	if ma == nil {
		return nil
	}
	return ma.Effective
}

// GetEffectiveDateTime returns the value of the field Effective.
func (ma *MedicationAdministration) GetEffectiveDateTime() *fhir.DateTime {
	if ma == nil {
		return nil
	}
	val, ok := ma.Effective.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetEffectivePeriod returns the value of the field Effective.
func (ma *MedicationAdministration) GetEffectivePeriod() *fhir.Period {
	if ma == nil {
		return nil
	}
	val, ok := ma.Effective.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetEventHistory returns the value of the field EventHistory.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetEventHistory() []*fhir.Reference {
	if ma == nil {
		return nil
	}
	return ma.EventHistory
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetExtension() []*fhir.Extension {
	if ma == nil {
		return nil
	}
	return ma.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetID() string {
	if ma == nil {
		return ""
	}
	return ma.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetIdentifier() []*fhir.Identifier {
	if ma == nil {
		return nil
	}
	return ma.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetImplicitRules() *fhir.URI {
	if ma == nil {
		return nil
	}
	return ma.ImplicitRules
}

// GetInstantiates returns the value of the field Instantiates.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetInstantiates() []*fhir.URI {
	if ma == nil {
		return nil
	}
	return ma.Instantiates
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetLanguage() *fhir.Code {
	if ma == nil {
		return nil
	}
	return ma.Language
}

// GetMedication returns the value of the field Medication.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetMedication() fhir.Element {
	if ma == nil {
		return nil
	}
	return ma.Medication
}

// GetMedicationCodeableConcept returns the value of the field Medication.
func (ma *MedicationAdministration) GetMedicationCodeableConcept() *fhir.CodeableConcept {
	if ma == nil {
		return nil
	}
	val, ok := ma.Medication.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetMedicationReference returns the value of the field Medication.
func (ma *MedicationAdministration) GetMedicationReference() *fhir.Reference {
	if ma == nil {
		return nil
	}
	val, ok := ma.Medication.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetMeta() *fhir.Meta {
	if ma == nil {
		return nil
	}
	return ma.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetModifierExtension() []*fhir.Extension {
	if ma == nil {
		return nil
	}
	return ma.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetNote() []*fhir.Annotation {
	if ma == nil {
		return nil
	}
	return ma.Note
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetPartOf() []*fhir.Reference {
	if ma == nil {
		return nil
	}
	return ma.PartOf
}

// GetPerformer returns the value of the field Performer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetPerformer() []*MedicationAdministrationPerformer {
	if ma == nil {
		return nil
	}
	return ma.Performer
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetReasonCode() []*fhir.CodeableConcept {
	if ma == nil {
		return nil
	}
	return ma.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetReasonReference() []*fhir.Reference {
	if ma == nil {
		return nil
	}
	return ma.ReasonReference
}

// GetRequest returns the value of the field Request.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetRequest() *fhir.Reference {
	if ma == nil {
		return nil
	}
	return ma.Request
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetStatus() *fhir.Code {
	if ma == nil {
		return nil
	}
	return ma.Status
}

// GetStatusReason returns the value of the field StatusReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetStatusReason() []*fhir.CodeableConcept {
	if ma == nil {
		return nil
	}
	return ma.StatusReason
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetSubject() *fhir.Reference {
	if ma == nil {
		return nil
	}
	return ma.Subject
}

// GetSupportingInformation returns the value of the field SupportingInformation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetSupportingInformation() []*fhir.Reference {
	if ma == nil {
		return nil
	}
	return ma.SupportingInformation
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ma *MedicationAdministration) GetText() *fhir.Narrative {
	if ma == nil {
		return nil
	}
	return ma.Text
}

// Details of how medication was taken// Describes the medication dosage information details e.g. dose, rate, site,
// route, etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationAdministration.json
type MedicationAdministrationDosage struct {

	// The amount of the medication given at one administration event. Use this
	// value when the administration is essentially an instantaneous event such as
	// a swallowing a tablet or giving an injection.
	Dose *fhir.Quantity `fhirpath:"dose"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A coded value indicating the method by which the medication is intended to
	// be or was introduced into or on the body. This attribute will most often NOT
	// be populated. It is most commonly used for injections. For example, Slow
	// Push, Deep IV.
	Method *fhir.CodeableConcept `fhirpath:"method"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Identifies the speed with which the medication was or will be introduced
	// into the patient. Typically, the rate for an infusion e.g. 100 ml per 1 hour
	// or 100 ml/hr. May also be expressed as a rate per unit of time, e.g. 500 ml
	// per 2 hours. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8
	// hours.
	Rate fhir.Element `fhirpath:"rate"`

	// A code specifying the route or physiological path of administration of a
	// therapeutic agent into or onto the patient. For example, topical,
	// intravenous, etc.
	Route *fhir.CodeableConcept `fhirpath:"route"`

	// A coded specification of the anatomic site where the medication first
	// entered the body. For example, "left arm".
	Site *fhir.CodeableConcept `fhirpath:"site"`

	// Free text dosage can be used for cases where the dosage administered is too
	// complex to code. When coded dosage is present, the free text dosage may
	// still be present for display to humans. The dosage instructions should
	// reflect the dosage of the medication that was administered.
	Text *fhir.String `fhirpath:"text"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDose returns the value of the field Dose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mad *MedicationAdministrationDosage) GetDose() *fhir.Quantity {
	if mad == nil {
		return nil
	}
	return mad.Dose
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mad *MedicationAdministrationDosage) GetExtension() []*fhir.Extension {
	if mad == nil {
		return nil
	}
	return mad.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mad *MedicationAdministrationDosage) GetID() string {
	if mad == nil {
		return ""
	}
	return mad.ID
}

// GetMethod returns the value of the field Method.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mad *MedicationAdministrationDosage) GetMethod() *fhir.CodeableConcept {
	if mad == nil {
		return nil
	}
	return mad.Method
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mad *MedicationAdministrationDosage) GetModifierExtension() []*fhir.Extension {
	if mad == nil {
		return nil
	}
	return mad.ModifierExtension
}

// GetRate returns the value of the field Rate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mad *MedicationAdministrationDosage) GetRate() fhir.Element {
	if mad == nil {
		return nil
	}
	return mad.Rate
}

// GetRateRatio returns the value of the field Rate.
func (mad *MedicationAdministrationDosage) GetRateRatio() *fhir.Ratio {
	if mad == nil {
		return nil
	}
	val, ok := mad.Rate.(*fhir.Ratio)
	if !ok {
		return nil
	}
	return val
}

// GetRateQuantity returns the value of the field Rate.
func (mad *MedicationAdministrationDosage) GetRateQuantity() *fhir.Quantity {
	if mad == nil {
		return nil
	}
	val, ok := mad.Rate.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
} // GetRoute returns the value of the field Route.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mad *MedicationAdministrationDosage) GetRoute() *fhir.CodeableConcept {
	if mad == nil {
		return nil
	}
	return mad.Route
}

// GetSite returns the value of the field Site.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mad *MedicationAdministrationDosage) GetSite() *fhir.CodeableConcept {
	if mad == nil {
		return nil
	}
	return mad.Site
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mad *MedicationAdministrationDosage) GetText() *fhir.String {
	if mad == nil {
		return nil
	}
	return mad.Text
}

// Who performed the medication administration and what they did// Indicates who or what performed the medication administration and how they
// were involved.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicationAdministration.json
type MedicationAdministrationPerformer struct {

	// Indicates who or what performed the medication administration.
	Actor *fhir.Reference `fhirpath:"actor"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Distinguishes the type of involvement of the performer in the medication
	// administration.
	Function *fhir.CodeableConcept `fhirpath:"function"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetActor returns the value of the field Actor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *MedicationAdministrationPerformer) GetActor() *fhir.Reference {
	if a == nil {
		return nil
	}
	return a.Actor
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *MedicationAdministrationPerformer) GetExtension() []*fhir.Extension {
	if a == nil {
		return nil
	}
	return a.Extension
}

// GetFunction returns the value of the field Function.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *MedicationAdministrationPerformer) GetFunction() *fhir.CodeableConcept {
	if a == nil {
		return nil
	}
	return a.Function
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *MedicationAdministrationPerformer) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *MedicationAdministrationPerformer) GetModifierExtension() []*fhir.Extension {
	if a == nil {
		return nil
	}
	return a.ModifierExtension
}

func (ma *MedicationAdministration) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ma *MedicationAdministration) UnmarshalJSON(data []byte) error {
	var raw struct {
		Category          *fhir.CodeableConcept           `json:"category"`
		Contained         []fhir.Resource                 `json:"contained"`
		Context           *fhir.Reference                 `json:"context"`
		Device            []*fhir.Reference               `json:"device"`
		Dosage            *MedicationAdministrationDosage `json:"dosage"`
		EffectiveDateTime *fhir.DateTime                  `json:"effectiveDateTime"`
		EffectivePeriod   *fhir.Period                    `json:"effectivePeriod"`
		EventHistory      []*fhir.Reference               `json:"eventHistory"`
		Extension         []*fhir.Extension               `json:"extension"`

		ID                        string                               `json:"id"`
		Identifier                []*fhir.Identifier                   `json:"identifier"`
		ImplicitRules             *fhir.URI                            `json:"implicitRules"`
		Instantiates              []*fhir.URI                          `json:"instantiates"`
		Language                  *fhir.Code                           `json:"language"`
		MedicationCodeableConcept *fhir.CodeableConcept                `json:"medicationCodeableConcept"`
		MedicationReference       *fhir.Reference                      `json:"medicationReference"`
		Meta                      *fhir.Meta                           `json:"meta"`
		ModifierExtension         []*fhir.Extension                    `json:"modifierExtension"`
		Note                      []*fhir.Annotation                   `json:"note"`
		PartOf                    []*fhir.Reference                    `json:"partOf"`
		Performer                 []*MedicationAdministrationPerformer `json:"performer"`
		ReasonCode                []*fhir.CodeableConcept              `json:"reasonCode"`
		ReasonReference           []*fhir.Reference                    `json:"reasonReference"`
		Request                   *fhir.Reference                      `json:"request"`
		Status                    *fhir.Code                           `json:"status"`
		StatusReason              []*fhir.CodeableConcept              `json:"statusReason"`
		Subject                   *fhir.Reference                      `json:"subject"`
		SupportingInformation     []*fhir.Reference                    `json:"supportingInformation"`
		Text                      *fhir.Narrative                      `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ma.Category = raw.Category
	ma.Contained = raw.Contained
	ma.Context = raw.Context
	ma.Device = raw.Device
	ma.Dosage = raw.Dosage
	ma.Effective, err = validate.SelectOneOf[fhir.Element]("MedicationAdministration.effective",
		raw.EffectiveDateTime,
		raw.EffectivePeriod)
	if err != nil {
		return err
	}
	ma.EventHistory = raw.EventHistory
	ma.Extension = raw.Extension
	ma.ID = raw.ID
	ma.Identifier = raw.Identifier
	ma.ImplicitRules = raw.ImplicitRules
	ma.Instantiates = raw.Instantiates
	ma.Language = raw.Language
	ma.Medication, err = validate.SelectOneOf[fhir.Element]("MedicationAdministration.medication",
		raw.MedicationCodeableConcept,
		raw.MedicationReference)
	if err != nil {
		return err
	}
	ma.Meta = raw.Meta
	ma.ModifierExtension = raw.ModifierExtension
	ma.Note = raw.Note
	ma.PartOf = raw.PartOf
	ma.Performer = raw.Performer
	ma.ReasonCode = raw.ReasonCode
	ma.ReasonReference = raw.ReasonReference
	ma.Request = raw.Request
	ma.Status = raw.Status
	ma.StatusReason = raw.StatusReason
	ma.Subject = raw.Subject
	ma.SupportingInformation = raw.SupportingInformation
	ma.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*MedicationAdministration)(nil)
var _ json.Unmarshaler = (*MedicationAdministration)(nil)

func (mad *MedicationAdministrationDosage) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mad *MedicationAdministrationDosage) UnmarshalJSON(data []byte) error {
	var raw struct {
		Dose      *fhir.Quantity    `json:"dose"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		Method            *fhir.CodeableConcept `json:"method"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		RateRatio         *fhir.Ratio           `json:"rateRatio"`
		RateQuantity      *fhir.Quantity        `json:"rateQuantity"`
		Route             *fhir.CodeableConcept `json:"route"`
		Site              *fhir.CodeableConcept `json:"site"`
		Text              *fhir.String          `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mad.Dose = raw.Dose
	mad.Extension = raw.Extension
	mad.ID = raw.ID
	mad.Method = raw.Method
	mad.ModifierExtension = raw.ModifierExtension
	mad.Rate, err = validate.SelectOneOf[fhir.Element]("MedicationAdministration.dosage.rate",
		raw.RateRatio,
		raw.RateQuantity)
	if err != nil {
		return err
	}
	mad.Route = raw.Route
	mad.Site = raw.Site
	mad.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*MedicationAdministrationDosage)(nil)
var _ json.Unmarshaler = (*MedicationAdministrationDosage)(nil)

func (a *MedicationAdministrationPerformer) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (a *MedicationAdministrationPerformer) UnmarshalJSON(data []byte) error {
	var raw struct {
		Actor     *fhir.Reference       `json:"actor"`
		Extension []*fhir.Extension     `json:"extension"`
		Function  *fhir.CodeableConcept `json:"function"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	a.Actor = raw.Actor
	a.Extension = raw.Extension
	a.Function = raw.Function
	a.ID = raw.ID
	a.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*MedicationAdministrationPerformer)(nil)
var _ json.Unmarshaler = (*MedicationAdministrationPerformer)(nil)
