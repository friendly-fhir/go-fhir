// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package deviceusestatement

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A record of a device being used by a patient where the record is the result
// of a report from the patient or another clinician.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/DeviceUseStatement
//   - Source File: StructureDefinition-DeviceUseStatement.json
type DeviceUseStatement struct {

	// A plan, proposal or order that is fulfilled in whole or in part by this
	// DeviceUseStatement.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// Indicates the anotomic location on the subject's body where the device was
	// used ( i.e. the target).
	BodySite *fhir.CodeableConcept `fhirpath:"bodySite"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Allows linking the DeviceUseStatement to the underlying Request, or to other
	// information that supports or is used to derive the DeviceUseStatement.
	DerivedFrom []*fhir.Reference `fhirpath:"derivedFrom"`

	// The details of the device used.
	Device *fhir.Reference `fhirpath:"device"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// An external identifier for this statement such as an IRI.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Details about the device statement that were not represented at all or
	// sufficiently in one of the attributes provided in a class. These may include
	// for example a comment, an instruction, or a note associated with the
	// statement.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Reason or justification for the use of the device.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Indicates another resource whose existence justifies this
	// DeviceUseStatement.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// The time at which the statement was made/recorded.
	RecordedOn *fhir.DateTime `fhirpath:"recordedOn"`

	// Who reported the device was being used by the patient.
	Source *fhir.Reference `fhirpath:"source"`

	// A code representing the patient or other source's judgment about the state
	// of the device used that this statement is about. Generally this will be
	// active or completed.
	Status *fhir.Code `fhirpath:"status"`

	// The patient who used the device.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// How often the device was used.
	Timing fhir.Element `fhirpath:"timing"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetBasedOn() []*fhir.Reference {
	if dus == nil {
		return nil
	}
	return dus.BasedOn
}

// GetBodySite returns the value of the field BodySite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetBodySite() *fhir.CodeableConcept {
	if dus == nil {
		return nil
	}
	return dus.BodySite
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetContained() []fhir.Resource {
	if dus == nil {
		return nil
	}
	return dus.Contained
}

// GetDerivedFrom returns the value of the field DerivedFrom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetDerivedFrom() []*fhir.Reference {
	if dus == nil {
		return nil
	}
	return dus.DerivedFrom
}

// GetDevice returns the value of the field Device.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetDevice() *fhir.Reference {
	if dus == nil {
		return nil
	}
	return dus.Device
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetExtension() []*fhir.Extension {
	if dus == nil {
		return nil
	}
	return dus.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetID() string {
	if dus == nil {
		return ""
	}
	return dus.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetIdentifier() []*fhir.Identifier {
	if dus == nil {
		return nil
	}
	return dus.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetImplicitRules() *fhir.URI {
	if dus == nil {
		return nil
	}
	return dus.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetLanguage() *fhir.Code {
	if dus == nil {
		return nil
	}
	return dus.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetMeta() *fhir.Meta {
	if dus == nil {
		return nil
	}
	return dus.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetModifierExtension() []*fhir.Extension {
	if dus == nil {
		return nil
	}
	return dus.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetNote() []*fhir.Annotation {
	if dus == nil {
		return nil
	}
	return dus.Note
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetReasonCode() []*fhir.CodeableConcept {
	if dus == nil {
		return nil
	}
	return dus.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetReasonReference() []*fhir.Reference {
	if dus == nil {
		return nil
	}
	return dus.ReasonReference
}

// GetRecordedOn returns the value of the field RecordedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetRecordedOn() *fhir.DateTime {
	if dus == nil {
		return nil
	}
	return dus.RecordedOn
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetSource() *fhir.Reference {
	if dus == nil {
		return nil
	}
	return dus.Source
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetStatus() *fhir.Code {
	if dus == nil {
		return nil
	}
	return dus.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetSubject() *fhir.Reference {
	if dus == nil {
		return nil
	}
	return dus.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetText() *fhir.Narrative {
	if dus == nil {
		return nil
	}
	return dus.Text
}

// GetTiming returns the value of the field Timing.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (dus *DeviceUseStatement) GetTiming() fhir.Element {
	if dus == nil {
		return nil
	}
	return dus.Timing
}

// GetTimingTiming returns the value of the field Timing.
func (dus *DeviceUseStatement) GetTimingTiming() *fhir.Timing {
	if dus == nil {
		return nil
	}
	val, ok := dus.Timing.(*fhir.Timing)
	if !ok {
		return nil
	}
	return val
}

// GetTimingPeriod returns the value of the field Timing.
func (dus *DeviceUseStatement) GetTimingPeriod() *fhir.Period {
	if dus == nil {
		return nil
	}
	val, ok := dus.Timing.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetTimingDateTime returns the value of the field Timing.
func (dus *DeviceUseStatement) GetTimingDateTime() *fhir.DateTime {
	if dus == nil {
		return nil
	}
	val, ok := dus.Timing.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}
