// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package insuranceplan

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Details of a Health Insurance product/plan provided by an organization.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/InsurancePlan
//   - Source File: StructureDefinition-InsurancePlan.json
type InsurancePlan struct {

	// An organization which administer other services such as underwriting,
	// customer service and/or claims processing on behalf of the health insurance
	// product owner.
	AdministeredBy *fhir.Reference `fhirpath:"administeredBy"`

	// A list of alternate names that the product is known as, or was known as in
	// the past.
	Alias []*fhir.String `fhirpath:"alias"`

	// The contact for the health insurance product for a certain purpose.
	Contact []*InsurancePlanContact `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Details about the coverage offered by the insurance product.
	Coverage []*InsurancePlanCoverage `fhirpath:"coverage"`

	// The geographic region in which a health insurance product's benefits apply.
	CoverageArea []*fhir.Reference `fhirpath:"coverageArea"`

	// The technical endpoints providing access to services operated for the health
	// insurance product.
	Endpoint []*fhir.Reference `fhirpath:"endpoint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifiers assigned to this health insurance product which remain
	// constant as the resource is updated and propagates from server to server.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Official name of the health insurance product as designated by the owner.
	Name *fhir.String `fhirpath:"name"`

	// Reference to the network included in the health insurance product.
	Network []*fhir.Reference `fhirpath:"network"`

	// The entity that is providing the health insurance product and underwriting
	// the risk. This is typically an insurance carriers, other third-party payers,
	// or health plan sponsors comonly referred to as 'payers'.
	OwnedBy *fhir.Reference `fhirpath:"ownedBy"`

	// The period of time that the health insurance product is available.
	Period *fhir.Period `fhirpath:"period"`

	// Details about an insurance plan.
	Plan []*InsurancePlanPlan `fhirpath:"plan"`

	// The current state of the health insurance product.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// The kind of health insurance product.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAdministeredBy returns the value of the field AdministeredBy.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetAdministeredBy() *fhir.Reference {
	if ip == nil {
		return nil
	}
	return ip.AdministeredBy
}

// GetAlias returns the value of the field Alias.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetAlias() []*fhir.String {
	if ip == nil {
		return nil
	}
	return ip.Alias
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetContact() []*InsurancePlanContact {
	if ip == nil {
		return nil
	}
	return ip.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetContained() []fhir.Resource {
	if ip == nil {
		return nil
	}
	return ip.Contained
}

// GetCoverage returns the value of the field Coverage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetCoverage() []*InsurancePlanCoverage {
	if ip == nil {
		return nil
	}
	return ip.Coverage
}

// GetCoverageArea returns the value of the field CoverageArea.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetCoverageArea() []*fhir.Reference {
	if ip == nil {
		return nil
	}
	return ip.CoverageArea
}

// GetEndpoint returns the value of the field Endpoint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetEndpoint() []*fhir.Reference {
	if ip == nil {
		return nil
	}
	return ip.Endpoint
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetExtension() []*fhir.Extension {
	if ip == nil {
		return nil
	}
	return ip.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetID() string {
	if ip == nil {
		return ""
	}
	return ip.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetIdentifier() []*fhir.Identifier {
	if ip == nil {
		return nil
	}
	return ip.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetImplicitRules() *fhir.URI {
	if ip == nil {
		return nil
	}
	return ip.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetLanguage() *fhir.Code {
	if ip == nil {
		return nil
	}
	return ip.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetMeta() *fhir.Meta {
	if ip == nil {
		return nil
	}
	return ip.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetModifierExtension() []*fhir.Extension {
	if ip == nil {
		return nil
	}
	return ip.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetName() *fhir.String {
	if ip == nil {
		return nil
	}
	return ip.Name
}

// GetNetwork returns the value of the field Network.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetNetwork() []*fhir.Reference {
	if ip == nil {
		return nil
	}
	return ip.Network
}

// GetOwnedBy returns the value of the field OwnedBy.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetOwnedBy() *fhir.Reference {
	if ip == nil {
		return nil
	}
	return ip.OwnedBy
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetPeriod() *fhir.Period {
	if ip == nil {
		return nil
	}
	return ip.Period
}

// GetPlan returns the value of the field Plan.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetPlan() []*InsurancePlanPlan {
	if ip == nil {
		return nil
	}
	return ip.Plan
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetStatus() *fhir.Code {
	if ip == nil {
		return nil
	}
	return ip.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetText() *fhir.Narrative {
	if ip == nil {
		return nil
	}
	return ip.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ip *InsurancePlan) GetType() []*fhir.CodeableConcept {
	if ip == nil {
		return nil
	}
	return ip.Type
}

// Contact for the product// The contact for the health insurance product for a certain purpose.// Where multiple contacts for the same purpose are provided there is a
// standard extension that can be used to determine which one is the preferred
// contact to use.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-InsurancePlan.json
type InsurancePlanContact struct {

	// Visiting or postal addresses for the contact.
	Address *fhir.Address `fhirpath:"address"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A name associated with the contact.
	Name *fhir.HumanName `fhirpath:"name"`

	// Indicates a purpose for which the contact can be reached.
	Purpose *fhir.CodeableConcept `fhirpath:"purpose"`

	// A contact detail (e.g. a telephone number or an email address) by which the
	// party may be contacted.
	Telecom []*fhir.ContactPoint `fhirpath:"telecom"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAddress returns the value of the field Address.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanContact) GetAddress() *fhir.Address {
	if ipc == nil {
		return nil
	}
	return ipc.Address
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanContact) GetExtension() []*fhir.Extension {
	if ipc == nil {
		return nil
	}
	return ipc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanContact) GetID() string {
	if ipc == nil {
		return ""
	}
	return ipc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanContact) GetModifierExtension() []*fhir.Extension {
	if ipc == nil {
		return nil
	}
	return ipc.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanContact) GetName() *fhir.HumanName {
	if ipc == nil {
		return nil
	}
	return ipc.Name
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanContact) GetPurpose() *fhir.CodeableConcept {
	if ipc == nil {
		return nil
	}
	return ipc.Purpose
}

// GetTelecom returns the value of the field Telecom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanContact) GetTelecom() []*fhir.ContactPoint {
	if ipc == nil {
		return nil
	}
	return ipc.Telecom
}

// Coverage details// Details about the coverage offered by the insurance product.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-InsurancePlan.json
type InsurancePlanCoverage struct {

	// Specific benefits under this type of coverage.
	Benefit []*InsurancePlanCoverageBenefit `fhirpath:"benefit"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Reference to the network that providing the type of coverage.
	Network []*fhir.Reference `fhirpath:"network"`

	// Type of coverage (Medical; Dental; Mental Health; Substance Abuse; Vision;
	// Drug; Short Term; Long Term Care; Hospice; Home Health).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBenefit returns the value of the field Benefit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanCoverage) GetBenefit() []*InsurancePlanCoverageBenefit {
	if ipc == nil {
		return nil
	}
	return ipc.Benefit
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanCoverage) GetExtension() []*fhir.Extension {
	if ipc == nil {
		return nil
	}
	return ipc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanCoverage) GetID() string {
	if ipc == nil {
		return ""
	}
	return ipc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanCoverage) GetModifierExtension() []*fhir.Extension {
	if ipc == nil {
		return nil
	}
	return ipc.ModifierExtension
}

// GetNetwork returns the value of the field Network.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanCoverage) GetNetwork() []*fhir.Reference {
	if ipc == nil {
		return nil
	}
	return ipc.Network
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipc *InsurancePlanCoverage) GetType() *fhir.CodeableConcept {
	if ipc == nil {
		return nil
	}
	return ipc.Type
}

// List of benefits// Specific benefits under this type of coverage.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-InsurancePlan.json
type InsurancePlanCoverageBenefit struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The specific limits on the benefit.
	Limit []*InsurancePlanCoverageBenefitLimit `fhirpath:"limit"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The referral requirements to have access/coverage for this benefit.
	Requirement *fhir.String `fhirpath:"requirement"`

	// Type of benefit (primary care; speciality care; inpatient; outpatient).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcb *InsurancePlanCoverageBenefit) GetExtension() []*fhir.Extension {
	if ipcb == nil {
		return nil
	}
	return ipcb.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcb *InsurancePlanCoverageBenefit) GetID() string {
	if ipcb == nil {
		return ""
	}
	return ipcb.ID
}

// GetLimit returns the value of the field Limit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcb *InsurancePlanCoverageBenefit) GetLimit() []*InsurancePlanCoverageBenefitLimit {
	if ipcb == nil {
		return nil
	}
	return ipcb.Limit
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcb *InsurancePlanCoverageBenefit) GetModifierExtension() []*fhir.Extension {
	if ipcb == nil {
		return nil
	}
	return ipcb.ModifierExtension
}

// GetRequirement returns the value of the field Requirement.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcb *InsurancePlanCoverageBenefit) GetRequirement() *fhir.String {
	if ipcb == nil {
		return nil
	}
	return ipcb.Requirement
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcb *InsurancePlanCoverageBenefit) GetType() *fhir.CodeableConcept {
	if ipcb == nil {
		return nil
	}
	return ipcb.Type
}

// Benefit limits// The specific limits on the benefit.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-InsurancePlan.json
type InsurancePlanCoverageBenefitLimit struct {

	// The specific limit on the benefit.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The maximum amount of a service item a plan will pay for a covered benefit.
	// For examples. wellness visits, or eyeglasses.
	Value *fhir.Quantity `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcbl *InsurancePlanCoverageBenefitLimit) GetCode() *fhir.CodeableConcept {
	if ipcbl == nil {
		return nil
	}
	return ipcbl.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcbl *InsurancePlanCoverageBenefitLimit) GetExtension() []*fhir.Extension {
	if ipcbl == nil {
		return nil
	}
	return ipcbl.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcbl *InsurancePlanCoverageBenefitLimit) GetID() string {
	if ipcbl == nil {
		return ""
	}
	return ipcbl.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcbl *InsurancePlanCoverageBenefitLimit) GetModifierExtension() []*fhir.Extension {
	if ipcbl == nil {
		return nil
	}
	return ipcbl.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipcbl *InsurancePlanCoverageBenefitLimit) GetValue() *fhir.Quantity {
	if ipcbl == nil {
		return nil
	}
	return ipcbl.Value
}

// Plan details// Details about an insurance plan.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-InsurancePlan.json
type InsurancePlanPlan struct {

	// The geographic region in which a health insurance plan's benefits apply.
	CoverageArea []*fhir.Reference `fhirpath:"coverageArea"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Overall costs associated with the plan.
	GeneralCost []*InsurancePlanPlanGeneralCost `fhirpath:"generalCost"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Business identifiers assigned to this health insurance plan which remain
	// constant as the resource is updated and propagates from server to server.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Reference to the network that providing the type of coverage.
	Network []*fhir.Reference `fhirpath:"network"`

	// Costs associated with the coverage provided by the product.
	SpecificCost []*InsurancePlanPlanSpecificCost `fhirpath:"specificCost"`

	// Type of plan. For example, "Platinum" or "High Deductable".
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCoverageArea returns the value of the field CoverageArea.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipp *InsurancePlanPlan) GetCoverageArea() []*fhir.Reference {
	if ipp == nil {
		return nil
	}
	return ipp.CoverageArea
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipp *InsurancePlanPlan) GetExtension() []*fhir.Extension {
	if ipp == nil {
		return nil
	}
	return ipp.Extension
}

// GetGeneralCost returns the value of the field GeneralCost.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipp *InsurancePlanPlan) GetGeneralCost() []*InsurancePlanPlanGeneralCost {
	if ipp == nil {
		return nil
	}
	return ipp.GeneralCost
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipp *InsurancePlanPlan) GetID() string {
	if ipp == nil {
		return ""
	}
	return ipp.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipp *InsurancePlanPlan) GetIdentifier() []*fhir.Identifier {
	if ipp == nil {
		return nil
	}
	return ipp.Identifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipp *InsurancePlanPlan) GetModifierExtension() []*fhir.Extension {
	if ipp == nil {
		return nil
	}
	return ipp.ModifierExtension
}

// GetNetwork returns the value of the field Network.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipp *InsurancePlanPlan) GetNetwork() []*fhir.Reference {
	if ipp == nil {
		return nil
	}
	return ipp.Network
}

// GetSpecificCost returns the value of the field SpecificCost.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipp *InsurancePlanPlan) GetSpecificCost() []*InsurancePlanPlanSpecificCost {
	if ipp == nil {
		return nil
	}
	return ipp.SpecificCost
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ipp *InsurancePlanPlan) GetType() *fhir.CodeableConcept {
	if ipp == nil {
		return nil
	}
	return ipp.Type
}

// Overall costs// Overall costs associated with the plan.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-InsurancePlan.json
type InsurancePlanPlanGeneralCost struct {

	// Additional information about the general costs associated with this plan.
	Comment *fhir.String `fhirpath:"comment"`

	// Value of the cost.
	Cost *fhir.Money `fhirpath:"cost"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Number of participants enrolled in the plan.
	GroupSize *fhir.PositiveInt `fhirpath:"groupSize"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Type of cost.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetComment returns the value of the field Comment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippgc *InsurancePlanPlanGeneralCost) GetComment() *fhir.String {
	if ippgc == nil {
		return nil
	}
	return ippgc.Comment
}

// GetCost returns the value of the field Cost.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippgc *InsurancePlanPlanGeneralCost) GetCost() *fhir.Money {
	if ippgc == nil {
		return nil
	}
	return ippgc.Cost
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippgc *InsurancePlanPlanGeneralCost) GetExtension() []*fhir.Extension {
	if ippgc == nil {
		return nil
	}
	return ippgc.Extension
}

// GetGroupSize returns the value of the field GroupSize.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippgc *InsurancePlanPlanGeneralCost) GetGroupSize() *fhir.PositiveInt {
	if ippgc == nil {
		return nil
	}
	return ippgc.GroupSize
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippgc *InsurancePlanPlanGeneralCost) GetID() string {
	if ippgc == nil {
		return ""
	}
	return ippgc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippgc *InsurancePlanPlanGeneralCost) GetModifierExtension() []*fhir.Extension {
	if ippgc == nil {
		return nil
	}
	return ippgc.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippgc *InsurancePlanPlanGeneralCost) GetType() *fhir.CodeableConcept {
	if ippgc == nil {
		return nil
	}
	return ippgc.Type
}

// Specific costs// Costs associated with the coverage provided by the product.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-InsurancePlan.json
type InsurancePlanPlanSpecificCost struct {

	// List of the specific benefits under this category of benefit.
	Benefit []*InsurancePlanPlanSpecificCostBenefit `fhirpath:"benefit"`

	// General category of benefit (Medical; Dental; Vision; Drug; Mental Health;
	// Substance Abuse; Hospice, Home Health).
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBenefit returns the value of the field Benefit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippsc *InsurancePlanPlanSpecificCost) GetBenefit() []*InsurancePlanPlanSpecificCostBenefit {
	if ippsc == nil {
		return nil
	}
	return ippsc.Benefit
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippsc *InsurancePlanPlanSpecificCost) GetCategory() *fhir.CodeableConcept {
	if ippsc == nil {
		return nil
	}
	return ippsc.Category
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippsc *InsurancePlanPlanSpecificCost) GetExtension() []*fhir.Extension {
	if ippsc == nil {
		return nil
	}
	return ippsc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippsc *InsurancePlanPlanSpecificCost) GetID() string {
	if ippsc == nil {
		return ""
	}
	return ippsc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippsc *InsurancePlanPlanSpecificCost) GetModifierExtension() []*fhir.Extension {
	if ippsc == nil {
		return nil
	}
	return ippsc.ModifierExtension
}

// Benefits list// List of the specific benefits under this category of benefit.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-InsurancePlan.json
type InsurancePlanPlanSpecificCostBenefit struct {

	// List of the costs associated with a specific benefit.
	Cost []*InsurancePlanPlanSpecificCostBenefitCost `fhirpath:"cost"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Type of specific benefit (preventative; primary care office visit;
	// speciality office visit; hospitalization; emergency room; urgent care).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCost returns the value of the field Cost.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscb *InsurancePlanPlanSpecificCostBenefit) GetCost() []*InsurancePlanPlanSpecificCostBenefitCost {
	if ippscb == nil {
		return nil
	}
	return ippscb.Cost
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscb *InsurancePlanPlanSpecificCostBenefit) GetExtension() []*fhir.Extension {
	if ippscb == nil {
		return nil
	}
	return ippscb.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscb *InsurancePlanPlanSpecificCostBenefit) GetID() string {
	if ippscb == nil {
		return ""
	}
	return ippscb.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscb *InsurancePlanPlanSpecificCostBenefit) GetModifierExtension() []*fhir.Extension {
	if ippscb == nil {
		return nil
	}
	return ippscb.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscb *InsurancePlanPlanSpecificCostBenefit) GetType() *fhir.CodeableConcept {
	if ippscb == nil {
		return nil
	}
	return ippscb.Type
}

// List of the costs// List of the costs associated with a specific benefit.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-InsurancePlan.json
type InsurancePlanPlanSpecificCostBenefitCost struct {

	// Whether the cost applies to in-network or out-of-network providers
	// (in-network; out-of-network; other).
	Applicability *fhir.CodeableConcept `fhirpath:"applicability"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Additional information about the cost, such as information about funding
	// sources (e.g. HSA, HRA, FSA, RRA).
	Qualifiers []*fhir.CodeableConcept `fhirpath:"qualifiers"`

	// Type of cost (copay; individual cap; family cap; coinsurance; deductible).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// The actual cost value. (some of the costs may be represented as percentages
	// rather than currency, e.g. 10% coinsurance).
	Value *fhir.Quantity `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetApplicability returns the value of the field Applicability.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscbc *InsurancePlanPlanSpecificCostBenefitCost) GetApplicability() *fhir.CodeableConcept {
	if ippscbc == nil {
		return nil
	}
	return ippscbc.Applicability
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscbc *InsurancePlanPlanSpecificCostBenefitCost) GetExtension() []*fhir.Extension {
	if ippscbc == nil {
		return nil
	}
	return ippscbc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscbc *InsurancePlanPlanSpecificCostBenefitCost) GetID() string {
	if ippscbc == nil {
		return ""
	}
	return ippscbc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscbc *InsurancePlanPlanSpecificCostBenefitCost) GetModifierExtension() []*fhir.Extension {
	if ippscbc == nil {
		return nil
	}
	return ippscbc.ModifierExtension
}

// GetQualifiers returns the value of the field Qualifiers.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscbc *InsurancePlanPlanSpecificCostBenefitCost) GetQualifiers() []*fhir.CodeableConcept {
	if ippscbc == nil {
		return nil
	}
	return ippscbc.Qualifiers
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscbc *InsurancePlanPlanSpecificCostBenefitCost) GetType() *fhir.CodeableConcept {
	if ippscbc == nil {
		return nil
	}
	return ippscbc.Type
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ippscbc *InsurancePlanPlanSpecificCostBenefitCost) GetValue() *fhir.Quantity {
	if ippscbc == nil {
		return nil
	}
	return ippscbc.Value
}
