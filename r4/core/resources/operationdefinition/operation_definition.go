// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package operationdefinition

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A formal computable definition of an operation (on the RESTful interface) or
// a named query (using the search interaction).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/OperationDefinition
//   - Source File: StructureDefinition-OperationDefinition.json
type OperationDefinition struct {

	// Whether the operation affects state. Side effects such as producing audit
	// trail entries do not count as 'affecting state'.
	AffectsState *fhir.Boolean `fhirpath:"affectsState"`

	// Indicates that this operation definition is a constraining profile on the
	// base.
	Base *fhir.Canonical `fhirpath:"base"`

	// The name used to invoke the operation.
	Code *fhir.Code `fhirpath:"code"`

	// Additional information about how to use this operation or named query.
	Comment *fhir.Markdown `fhirpath:"comment"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date (and optionally time) when the operation definition was published.
	// The date must change when the business version changes and it must change if
	// the status code changes. In addition, it should change when the substantive
	// content of the operation definition changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the operation definition from a
	// consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// A Boolean value to indicate that this operation definition is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to
	// be used for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Additional validation information for the in parameters - a single profile
	// that covers all the parameters. The profile is a constraint on the
	// parameters resource as a whole.
	InputProfile *fhir.Canonical `fhirpath:"inputProfile"`

	// Indicates whether this operation can be invoked on a particular instance of
	// one of the given types.
	Instance *fhir.Boolean `fhirpath:"instance"`

	// A legal or geographic region in which the operation definition is intended
	// to be used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// Whether this is an operation or a named query.
	Kind *fhir.Code `fhirpath:"kind"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the operation definition. This name
	// should be usable as an identifier for the module by machine processing
	// applications such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// Additional validation information for the out parameters - a single profile
	// that covers all the parameters. The profile is a constraint on the
	// parameters resource.
	OutputProfile *fhir.Canonical `fhirpath:"outputProfile"`

	// Defines an appropriate combination of parameters to use when invoking this
	// operation, to help code generators when generating overloaded parameter sets
	// for this operation.
	Overload []*OperationDefinitionOverload `fhirpath:"overload"`

	// The parameters for the operation/query.
	Parameter []*OperationDefinitionParameter `fhirpath:"parameter"`

	// The name of the organization or individual that published the operation
	// definition.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this operation definition is needed and why it has been
	// designed as it has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// The types on which this operation can be executed.
	Resource []*fhir.Code `fhirpath:"resource"`

	// The status of this operation definition. Enables tracking the life-cycle of
	// the content.
	Status *fhir.Code `fhirpath:"status"`

	// Indicates whether this operation or named query can be invoked at the system
	// level (e.g. without needing to choose a resource type for the context).
	System *fhir.Boolean `fhirpath:"system"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the operation definition.
	Title *fhir.String `fhirpath:"title"`

	// Indicates whether this operation or named query can be invoked at the
	// resource type level for any given resource type level (e.g. without needing
	// to choose a specific resource id for the context).
	Type *fhir.Boolean `fhirpath:"type"`

	// An absolute URI that is used to identify this operation definition when it
	// is referenced in a specification, model, design or an instance; also called
	// its canonical identifier. This SHOULD be globally unique and SHOULD be a
	// literal address at which at which an authoritative instance of this
	// operation definition is (or will be) published. This URL can be the target
	// of a canonical reference. It SHALL remain the same when the operation
	// definition is stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// operation definition instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the operation
	// definition when it is referenced in a specification, model, design or
	// instance. This is an arbitrary value managed by the operation definition
	// author and is not expected to be globally unique. For example, it might be a
	// timestamp (e.g. yyyymmdd) if a managed version is not available. There is
	// also no expectation that versions can be placed in a lexicographical
	// sequence.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAffectsState returns the value of the field AffectsState.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetAffectsState() *fhir.Boolean {
	if od == nil {
		return nil
	}
	return od.AffectsState
}

// GetBase returns the value of the field Base.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetBase() *fhir.Canonical {
	if od == nil {
		return nil
	}
	return od.Base
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetCode() *fhir.Code {
	if od == nil {
		return nil
	}
	return od.Code
}

// GetComment returns the value of the field Comment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetComment() *fhir.Markdown {
	if od == nil {
		return nil
	}
	return od.Comment
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetContact() []*fhir.ContactDetail {
	if od == nil {
		return nil
	}
	return od.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetContained() []fhir.Resource {
	if od == nil {
		return nil
	}
	return od.Contained
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetDate() *fhir.DateTime {
	if od == nil {
		return nil
	}
	return od.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetDescription() *fhir.Markdown {
	if od == nil {
		return nil
	}
	return od.Description
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetExperimental() *fhir.Boolean {
	if od == nil {
		return nil
	}
	return od.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetExtension() []*fhir.Extension {
	if od == nil {
		return nil
	}
	return od.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetID() string {
	if od == nil {
		return ""
	}
	return od.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetImplicitRules() *fhir.URI {
	if od == nil {
		return nil
	}
	return od.ImplicitRules
}

// GetInputProfile returns the value of the field InputProfile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetInputProfile() *fhir.Canonical {
	if od == nil {
		return nil
	}
	return od.InputProfile
}

// GetInstance returns the value of the field Instance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetInstance() *fhir.Boolean {
	if od == nil {
		return nil
	}
	return od.Instance
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetJurisdiction() []*fhir.CodeableConcept {
	if od == nil {
		return nil
	}
	return od.Jurisdiction
}

// GetKind returns the value of the field Kind.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetKind() *fhir.Code {
	if od == nil {
		return nil
	}
	return od.Kind
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetLanguage() *fhir.Code {
	if od == nil {
		return nil
	}
	return od.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetMeta() *fhir.Meta {
	if od == nil {
		return nil
	}
	return od.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetModifierExtension() []*fhir.Extension {
	if od == nil {
		return nil
	}
	return od.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetName() *fhir.String {
	if od == nil {
		return nil
	}
	return od.Name
}

// GetOutputProfile returns the value of the field OutputProfile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetOutputProfile() *fhir.Canonical {
	if od == nil {
		return nil
	}
	return od.OutputProfile
}

// GetOverload returns the value of the field Overload.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetOverload() []*OperationDefinitionOverload {
	if od == nil {
		return nil
	}
	return od.Overload
}

// GetParameter returns the value of the field Parameter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetParameter() []*OperationDefinitionParameter {
	if od == nil {
		return nil
	}
	return od.Parameter
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetPublisher() *fhir.String {
	if od == nil {
		return nil
	}
	return od.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetPurpose() *fhir.Markdown {
	if od == nil {
		return nil
	}
	return od.Purpose
}

// GetResource returns the value of the field Resource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetResource() []*fhir.Code {
	if od == nil {
		return nil
	}
	return od.Resource
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetStatus() *fhir.Code {
	if od == nil {
		return nil
	}
	return od.Status
}

// GetSystem returns the value of the field System.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetSystem() *fhir.Boolean {
	if od == nil {
		return nil
	}
	return od.System
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetText() *fhir.Narrative {
	if od == nil {
		return nil
	}
	return od.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetTitle() *fhir.String {
	if od == nil {
		return nil
	}
	return od.Title
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetType() *fhir.Boolean {
	if od == nil {
		return nil
	}
	return od.Type
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetURL() *fhir.URI {
	if od == nil {
		return nil
	}
	return od.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetUseContext() []*fhir.UsageContext {
	if od == nil {
		return nil
	}
	return od.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (od *OperationDefinition) GetVersion() *fhir.String {
	if od == nil {
		return nil
	}
	return od.Version
}

// Define overloaded variants for when generating code// Defines an appropriate combination of parameters to use when invoking this
// operation, to help code generators when generating overloaded parameter sets
// for this operation.// The combinations are suggestions as to which sets of parameters to use
// together, but the combinations are not intended to be authoritative.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-OperationDefinition.json
type OperationDefinitionOverload struct {

	// Comments to go on overload.
	Comment *fhir.String `fhirpath:"comment"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Name of parameter to include in overload.
	ParameterName []*fhir.String `fhirpath:"parameterName"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetComment returns the value of the field Comment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odo *OperationDefinitionOverload) GetComment() *fhir.String {
	if odo == nil {
		return nil
	}
	return odo.Comment
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odo *OperationDefinitionOverload) GetExtension() []*fhir.Extension {
	if odo == nil {
		return nil
	}
	return odo.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odo *OperationDefinitionOverload) GetID() string {
	if odo == nil {
		return ""
	}
	return odo.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odo *OperationDefinitionOverload) GetModifierExtension() []*fhir.Extension {
	if odo == nil {
		return nil
	}
	return odo.ModifierExtension
}

// GetParameterName returns the value of the field ParameterName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odo *OperationDefinitionOverload) GetParameterName() []*fhir.String {
	if odo == nil {
		return nil
	}
	return odo.ParameterName
}

// Parameters for the operation/query// The parameters for the operation/query.// Query Definitions only have one output parameter, named "result". This might
// not be described, but can be to allow a profile to be defined.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-OperationDefinition.json
type OperationDefinitionParameter struct {

	// Binds to a value set if this parameter is coded (code, Coding,
	// CodeableConcept).
	Binding *OperationDefinitionParameterBinding `fhirpath:"binding"`

	// Describes the meaning or use of this parameter.
	Documentation *fhir.String `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The maximum number of times this element is permitted to appear in the
	// request or response.
	Max *fhir.String `fhirpath:"max"`

	// The minimum number of times this parameter SHALL appear in the request or
	// response.
	Min *fhir.Integer `fhirpath:"min"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of used to identify the parameter.
	Name *fhir.Code `fhirpath:"name"`

	// Identifies other resource parameters within the operation invocation that
	// are expected to resolve to this resource.
	ReferencedFrom []*OperationDefinitionParameterReferencedFrom `fhirpath:"referencedFrom"`

	// How the parameter is understood as a search parameter. This is only used if
	// the parameter type is 'string'.
	SearchType *fhir.Code `fhirpath:"searchType"`

	// Used when the type is "Reference" or "canonical", and identifies a profile
	// structure or implementation Guide that applies to the target of the
	// reference this parameter refers to. If any profiles are specified, then the
	// content must conform to at least one of them. The URL can be a local
	// reference - to a contained StructureDefinition, or a reference to another
	// StructureDefinition or Implementation Guide by a canonical URL. When an
	// implementation guide is specified, the target resource SHALL conform to at
	// least one profile defined in the implementation guide.
	TargetProfile []*fhir.Canonical `fhirpath:"targetProfile"`

	// The type for this parameter.
	Type *fhir.Code `fhirpath:"type"`

	// Whether this is an input or an output parameter.
	Use *fhir.Code `fhirpath:"use"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBinding returns the value of the field Binding.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetBinding() *OperationDefinitionParameterBinding {
	if odp == nil {
		return nil
	}
	return odp.Binding
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetDocumentation() *fhir.String {
	if odp == nil {
		return nil
	}
	return odp.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetExtension() []*fhir.Extension {
	if odp == nil {
		return nil
	}
	return odp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetID() string {
	if odp == nil {
		return ""
	}
	return odp.ID
}

// GetMax returns the value of the field Max.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetMax() *fhir.String {
	if odp == nil {
		return nil
	}
	return odp.Max
}

// GetMin returns the value of the field Min.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetMin() *fhir.Integer {
	if odp == nil {
		return nil
	}
	return odp.Min
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetModifierExtension() []*fhir.Extension {
	if odp == nil {
		return nil
	}
	return odp.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetName() *fhir.Code {
	if odp == nil {
		return nil
	}
	return odp.Name
}

// GetReferencedFrom returns the value of the field ReferencedFrom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetReferencedFrom() []*OperationDefinitionParameterReferencedFrom {
	if odp == nil {
		return nil
	}
	return odp.ReferencedFrom
}

// GetSearchType returns the value of the field SearchType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetSearchType() *fhir.Code {
	if odp == nil {
		return nil
	}
	return odp.SearchType
}

// GetTargetProfile returns the value of the field TargetProfile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetTargetProfile() []*fhir.Canonical {
	if odp == nil {
		return nil
	}
	return odp.TargetProfile
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetType() *fhir.Code {
	if odp == nil {
		return nil
	}
	return odp.Type
}

// GetUse returns the value of the field Use.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odp *OperationDefinitionParameter) GetUse() *fhir.Code {
	if odp == nil {
		return nil
	}
	return odp.Use
}

// ValueSet details if this is coded// Binds to a value set if this parameter is coded (code, Coding,
// CodeableConcept).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-OperationDefinition.json
type OperationDefinitionParameterBinding struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Indicates the degree of conformance expectations associated with this
	// binding - that is, the degree to which the provided value set must be
	// adhered to in the instances.
	Strength *fhir.Code `fhirpath:"strength"`

	// Points to the value set or external definition (e.g. implicit value set)
	// that identifies the set of codes to be used.
	ValueSet *fhir.Canonical `fhirpath:"valueSet"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odpb *OperationDefinitionParameterBinding) GetExtension() []*fhir.Extension {
	if odpb == nil {
		return nil
	}
	return odpb.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odpb *OperationDefinitionParameterBinding) GetID() string {
	if odpb == nil {
		return ""
	}
	return odpb.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odpb *OperationDefinitionParameterBinding) GetModifierExtension() []*fhir.Extension {
	if odpb == nil {
		return nil
	}
	return odpb.ModifierExtension
}

// GetStrength returns the value of the field Strength.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odpb *OperationDefinitionParameterBinding) GetStrength() *fhir.Code {
	if odpb == nil {
		return nil
	}
	return odpb.Strength
}

// GetValueSet returns the value of the field ValueSet.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odpb *OperationDefinitionParameterBinding) GetValueSet() *fhir.Canonical {
	if odpb == nil {
		return nil
	}
	return odpb.ValueSet
}

// References to this parameter// Identifies other resource parameters within the operation invocation that
// are expected to resolve to this resource.// Resolution applies if the referenced parameter exists.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-OperationDefinition.json
type OperationDefinitionParameterReferencedFrom struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of the parameter or dot-separated path of parameter names pointing
	// to the resource parameter that is expected to contain a reference to this
	// resource.
	Source *fhir.String `fhirpath:"source"`

	// The id of the element in the referencing resource that is expected to
	// resolve to this resource.
	SourceID *fhir.String `fhirpath:"sourceId"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odprf *OperationDefinitionParameterReferencedFrom) GetExtension() []*fhir.Extension {
	if odprf == nil {
		return nil
	}
	return odprf.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odprf *OperationDefinitionParameterReferencedFrom) GetID() string {
	if odprf == nil {
		return ""
	}
	return odprf.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odprf *OperationDefinitionParameterReferencedFrom) GetModifierExtension() []*fhir.Extension {
	if odprf == nil {
		return nil
	}
	return odprf.ModifierExtension
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odprf *OperationDefinitionParameterReferencedFrom) GetSource() *fhir.String {
	if odprf == nil {
		return nil
	}
	return odprf.Source
}

// GetSourceID returns the value of the field SourceID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (odprf *OperationDefinitionParameterReferencedFrom) GetSourceID() *fhir.String {
	if odprf == nil {
		return nil
	}
	return odprf.SourceID
}
