// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package capabilitystatement

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A Capability Statement documents a set of capabilities (behaviors) of a FHIR
// Server for a particular version of FHIR that may be used as a statement of
// actual server functionality or a statement of required or desired server
// implementation.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/CapabilityStatement
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatement struct {

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the capability statement and/or its
	// contents. Copyright statements are generally legal restrictions on the use
	// and publishing of the capability statement.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the capability statement was published.
	// The date must change when the business version changes and it must change if
	// the status code changes. In addition, it should change when the substantive
	// content of the capability statement changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the capability statement from a
	// consumer's perspective. Typically, this is used when the capability
	// statement describes a desired rather than an actual solution, for example as
	// a formal expression of requirements as part of an RFP.
	Description *fhir.Markdown `fhirpath:"description"`

	// A document definition.
	Document []*CapabilityStatementDocument `fhirpath:"document"`

	// A Boolean value to indicate that this capability statement is authored for
	// testing purposes (or education/evaluation/marketing) and is not intended to
	// be used for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The version of the FHIR specification that this CapabilityStatement
	// describes (which SHALL be the same as the FHIR version of the
	// CapabilityStatement itself). There is no default value.
	FhirVersion *fhir.Code `fhirpath:"fhirVersion"`

	// A list of the formats supported by this implementation using their content
	// types.
	Format []*fhir.Code `fhirpath:"format"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifies a specific implementation instance that is described by the
	// capability statement - i.e. a particular installation, rather than the
	// capabilities of a software program.
	Implementation *CapabilityStatementImplementation `fhirpath:"implementation"`

	// A list of implementation guides that the server does (or should) support in
	// their entirety.
	ImplementationGuide []*fhir.Canonical `fhirpath:"implementationGuide"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Reference to a canonical URL of another CapabilityStatement that this
	// software adds to. The capability statement automatically includes everything
	// in the other statement, and it is not duplicated, though the server may
	// repeat the same resources, interactions and operations to add additional
	// details to them.
	Imports []*fhir.Canonical `fhirpath:"imports"`

	// Reference to a canonical URL of another CapabilityStatement that this
	// software implements. This capability statement is a published API
	// description that corresponds to a business service. The server may actually
	// implement a subset of the capability statement it claims to implement, so
	// the capability statement must specify the full capability details.
	Instantiates []*fhir.Canonical `fhirpath:"instantiates"`

	// A legal or geographic region in which the capability statement is intended
	// to be used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The way that this statement is intended to be used, to describe an actual
	// running instance of software, a particular product (kind, not instance of
	// software) or a class of implementation (e.g. a desired purchase).
	Kind *fhir.Code `fhirpath:"kind"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// A description of the messaging capabilities of the solution.
	Messaging []*CapabilityStatementMessaging `fhirpath:"messaging"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the capability statement. This name
	// should be usable as an identifier for the module by machine processing
	// applications such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// A list of the patch formats supported by this implementation using their
	// content types.
	PatchFormat []*fhir.Code `fhirpath:"patchFormat"`

	// The name of the organization or individual that published the capability
	// statement.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this capability statement is needed and why it has been
	// designed as it has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// A definition of the restful capabilities of the solution, if any.
	Rest []*CapabilityStatementRest `fhirpath:"rest"`

	// Software that is covered by this capability statement. It is used when the
	// capability statement describes the capabilities of a particular software
	// version, independent of an installation.
	Software *CapabilityStatementSoftware `fhirpath:"software"`

	// The status of this capability statement. Enables tracking the life-cycle of
	// the content.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the capability statement.
	Title *fhir.String `fhirpath:"title"`

	// An absolute URI that is used to identify this capability statement when it
	// is referenced in a specification, model, design or an instance; also called
	// its canonical identifier. This SHOULD be globally unique and SHOULD be a
	// literal address at which at which an authoritative instance of this
	// capability statement is (or will be) published. This URL can be the target
	// of a canonical reference. It SHALL remain the same when the capability
	// statement is stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// capability statement instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the capability
	// statement when it is referenced in a specification, model, design or
	// instance. This is an arbitrary value managed by the capability statement
	// author and is not expected to be globally unique. For example, it might be a
	// timestamp (e.g. yyyymmdd) if a managed version is not available. There is
	// also no expectation that versions can be placed in a lexicographical
	// sequence.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetContact() []*fhir.ContactDetail {
	if cs == nil {
		return nil
	}
	return cs.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetContained() []fhir.Resource {
	if cs == nil {
		return nil
	}
	return cs.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetCopyright() *fhir.Markdown {
	if cs == nil {
		return nil
	}
	return cs.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetDate() *fhir.DateTime {
	if cs == nil {
		return nil
	}
	return cs.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetDescription() *fhir.Markdown {
	if cs == nil {
		return nil
	}
	return cs.Description
}

// GetDocument returns the value of the field Document.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetDocument() []*CapabilityStatementDocument {
	if cs == nil {
		return nil
	}
	return cs.Document
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetExperimental() *fhir.Boolean {
	if cs == nil {
		return nil
	}
	return cs.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetExtension() []*fhir.Extension {
	if cs == nil {
		return nil
	}
	return cs.Extension
}

// GetFhirVersion returns the value of the field FhirVersion.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetFhirVersion() *fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.FhirVersion
}

// GetFormat returns the value of the field Format.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetFormat() []*fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.Format
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetID() string {
	if cs == nil {
		return ""
	}
	return cs.ID
}

// GetImplementation returns the value of the field Implementation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetImplementation() *CapabilityStatementImplementation {
	if cs == nil {
		return nil
	}
	return cs.Implementation
}

// GetImplementationGuide returns the value of the field ImplementationGuide.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetImplementationGuide() []*fhir.Canonical {
	if cs == nil {
		return nil
	}
	return cs.ImplementationGuide
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetImplicitRules() *fhir.URI {
	if cs == nil {
		return nil
	}
	return cs.ImplicitRules
}

// GetImports returns the value of the field Imports.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetImports() []*fhir.Canonical {
	if cs == nil {
		return nil
	}
	return cs.Imports
}

// GetInstantiates returns the value of the field Instantiates.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetInstantiates() []*fhir.Canonical {
	if cs == nil {
		return nil
	}
	return cs.Instantiates
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetJurisdiction() []*fhir.CodeableConcept {
	if cs == nil {
		return nil
	}
	return cs.Jurisdiction
}

// GetKind returns the value of the field Kind.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetKind() *fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.Kind
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetLanguage() *fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.Language
}

// GetMessaging returns the value of the field Messaging.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetMessaging() []*CapabilityStatementMessaging {
	if cs == nil {
		return nil
	}
	return cs.Messaging
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetMeta() *fhir.Meta {
	if cs == nil {
		return nil
	}
	return cs.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetModifierExtension() []*fhir.Extension {
	if cs == nil {
		return nil
	}
	return cs.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetName() *fhir.String {
	if cs == nil {
		return nil
	}
	return cs.Name
}

// GetPatchFormat returns the value of the field PatchFormat.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetPatchFormat() []*fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.PatchFormat
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetPublisher() *fhir.String {
	if cs == nil {
		return nil
	}
	return cs.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetPurpose() *fhir.Markdown {
	if cs == nil {
		return nil
	}
	return cs.Purpose
}

// GetRest returns the value of the field Rest.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetRest() []*CapabilityStatementRest {
	if cs == nil {
		return nil
	}
	return cs.Rest
}

// GetSoftware returns the value of the field Software.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetSoftware() *CapabilityStatementSoftware {
	if cs == nil {
		return nil
	}
	return cs.Software
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetStatus() *fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetText() *fhir.Narrative {
	if cs == nil {
		return nil
	}
	return cs.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetTitle() *fhir.String {
	if cs == nil {
		return nil
	}
	return cs.Title
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetURL() *fhir.URI {
	if cs == nil {
		return nil
	}
	return cs.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetUseContext() []*fhir.UsageContext {
	if cs == nil {
		return nil
	}
	return cs.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CapabilityStatement) GetVersion() *fhir.String {
	if cs == nil {
		return nil
	}
	return cs.Version
}

// Document definition// A document definition.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementDocument struct {

	// A description of how the application supports or uses the specified document
	// profile. For example, when documents are created, what action is taken with
	// consumed documents, etc.
	Documentation *fhir.Markdown `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Mode of this document declaration - whether an application is a producer or
	// consumer.
	Mode *fhir.Code `fhirpath:"mode"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A profile on the document Bundle that constrains which resources are
	// present, and their contents.
	Profile *fhir.Canonical `fhirpath:"profile"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csd *CapabilityStatementDocument) GetDocumentation() *fhir.Markdown {
	if csd == nil {
		return nil
	}
	return csd.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csd *CapabilityStatementDocument) GetExtension() []*fhir.Extension {
	if csd == nil {
		return nil
	}
	return csd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csd *CapabilityStatementDocument) GetID() string {
	if csd == nil {
		return ""
	}
	return csd.ID
}

// GetMode returns the value of the field Mode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csd *CapabilityStatementDocument) GetMode() *fhir.Code {
	if csd == nil {
		return nil
	}
	return csd.Mode
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csd *CapabilityStatementDocument) GetModifierExtension() []*fhir.Extension {
	if csd == nil {
		return nil
	}
	return csd.ModifierExtension
}

// GetProfile returns the value of the field Profile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csd *CapabilityStatementDocument) GetProfile() *fhir.Canonical {
	if csd == nil {
		return nil
	}
	return csd.Profile
}

// If this describes a specific instance// Identifies a specific implementation instance that is described by the
// capability statement - i.e. a particular installation, rather than the
// capabilities of a software program.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementImplementation struct {

	// The organization responsible for the management of the instance and
	// oversight of the data on the server at the specified URL.
	Custodian *fhir.Reference `fhirpath:"custodian"`

	// Information about the specific installation that this capability statement
	// relates to.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// An absolute base URL for the implementation. This forms the base for REST
	// interfaces as well as the mailbox and document interfaces.
	URL *fhir.URL `fhirpath:"url"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCustodian returns the value of the field Custodian.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *CapabilityStatementImplementation) GetCustodian() *fhir.Reference {
	if csi == nil {
		return nil
	}
	return csi.Custodian
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *CapabilityStatementImplementation) GetDescription() *fhir.String {
	if csi == nil {
		return nil
	}
	return csi.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *CapabilityStatementImplementation) GetExtension() []*fhir.Extension {
	if csi == nil {
		return nil
	}
	return csi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *CapabilityStatementImplementation) GetID() string {
	if csi == nil {
		return ""
	}
	return csi.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *CapabilityStatementImplementation) GetModifierExtension() []*fhir.Extension {
	if csi == nil {
		return nil
	}
	return csi.ModifierExtension
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *CapabilityStatementImplementation) GetURL() *fhir.URL {
	if csi == nil {
		return nil
	}
	return csi.URL
}

// If messaging is supported// A description of the messaging capabilities of the solution.// Multiple repetitions allow the documentation of multiple endpoints per
// solution.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementMessaging struct {

	// Documentation about the system's messaging capabilities for this endpoint
	// not otherwise documented by the capability statement. For example, the
	// process for becoming an authorized messaging exchange partner.
	Documentation *fhir.Markdown `fhirpath:"documentation"`

	// An endpoint (network accessible address) to which messages and/or replies
	// are to be sent.
	Endpoint []*CapabilityStatementMessagingEndpoint `fhirpath:"endpoint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Length if the receiver's reliable messaging cache in minutes (if a receiver)
	// or how long the cache length on the receiver should be (if a sender).
	ReliableCache *fhir.UnsignedInt `fhirpath:"reliableCache"`

	// References to message definitions for messages this system can send or
	// receive.
	SupportedMessage []*CapabilityStatementMessagingSupportedMessage `fhirpath:"supportedMessage"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csm *CapabilityStatementMessaging) GetDocumentation() *fhir.Markdown {
	if csm == nil {
		return nil
	}
	return csm.Documentation
}

// GetEndpoint returns the value of the field Endpoint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csm *CapabilityStatementMessaging) GetEndpoint() []*CapabilityStatementMessagingEndpoint {
	if csm == nil {
		return nil
	}
	return csm.Endpoint
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csm *CapabilityStatementMessaging) GetExtension() []*fhir.Extension {
	if csm == nil {
		return nil
	}
	return csm.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csm *CapabilityStatementMessaging) GetID() string {
	if csm == nil {
		return ""
	}
	return csm.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csm *CapabilityStatementMessaging) GetModifierExtension() []*fhir.Extension {
	if csm == nil {
		return nil
	}
	return csm.ModifierExtension
}

// GetReliableCache returns the value of the field ReliableCache.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csm *CapabilityStatementMessaging) GetReliableCache() *fhir.UnsignedInt {
	if csm == nil {
		return nil
	}
	return csm.ReliableCache
}

// GetSupportedMessage returns the value of the field SupportedMessage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csm *CapabilityStatementMessaging) GetSupportedMessage() []*CapabilityStatementMessagingSupportedMessage {
	if csm == nil {
		return nil
	}
	return csm.SupportedMessage
}

// Where messages should be sent// An endpoint (network accessible address) to which messages and/or replies
// are to be sent.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementMessagingEndpoint struct {

	// The network address of the endpoint. For solutions that do not use network
	// addresses for routing, it can be just an identifier.
	Address *fhir.URL `fhirpath:"address"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A list of the messaging transport protocol(s) identifiers, supported by this
	// endpoint.
	Protocol *fhir.Coding `fhirpath:"protocol"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAddress returns the value of the field Address.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csme *CapabilityStatementMessagingEndpoint) GetAddress() *fhir.URL {
	if csme == nil {
		return nil
	}
	return csme.Address
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csme *CapabilityStatementMessagingEndpoint) GetExtension() []*fhir.Extension {
	if csme == nil {
		return nil
	}
	return csme.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csme *CapabilityStatementMessagingEndpoint) GetID() string {
	if csme == nil {
		return ""
	}
	return csme.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csme *CapabilityStatementMessagingEndpoint) GetModifierExtension() []*fhir.Extension {
	if csme == nil {
		return nil
	}
	return csme.ModifierExtension
}

// GetProtocol returns the value of the field Protocol.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csme *CapabilityStatementMessagingEndpoint) GetProtocol() *fhir.Coding {
	if csme == nil {
		return nil
	}
	return csme.Protocol
}

// Messages supported by this system// References to message definitions for messages this system can send or
// receive.// This is a proposed alternative to the messaging.event structure.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementMessagingSupportedMessage struct {

	// Points to a message definition that identifies the messaging event, message
	// structure, allowed responses, etc.
	Definition *fhir.Canonical `fhirpath:"definition"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The mode of this event declaration - whether application is sender or
	// receiver.
	Mode *fhir.Code `fhirpath:"mode"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDefinition returns the value of the field Definition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csmsm *CapabilityStatementMessagingSupportedMessage) GetDefinition() *fhir.Canonical {
	if csmsm == nil {
		return nil
	}
	return csmsm.Definition
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csmsm *CapabilityStatementMessagingSupportedMessage) GetExtension() []*fhir.Extension {
	if csmsm == nil {
		return nil
	}
	return csmsm.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csmsm *CapabilityStatementMessagingSupportedMessage) GetID() string {
	if csmsm == nil {
		return ""
	}
	return csmsm.ID
}

// GetMode returns the value of the field Mode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csmsm *CapabilityStatementMessagingSupportedMessage) GetMode() *fhir.Code {
	if csmsm == nil {
		return nil
	}
	return csmsm.Mode
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csmsm *CapabilityStatementMessagingSupportedMessage) GetModifierExtension() []*fhir.Extension {
	if csmsm == nil {
		return nil
	}
	return csmsm.ModifierExtension
}

// If the endpoint is a RESTful one// A definition of the restful capabilities of the solution, if any.// Multiple repetitions allow definition of both client and/or server behaviors
// or possibly behaviors under different configuration settings (for software
// or requirements statements).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementRest struct {

	// An absolute URI which is a reference to the definition of a compartment that
	// the system supports. The reference is to a CompartmentDefinition resource by
	// its canonical URL .
	Compartment []*fhir.Canonical `fhirpath:"compartment"`

	// Information about the system's restful capabilities that apply across all
	// applications, such as security.
	Documentation *fhir.Markdown `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A specification of restful operations supported by the system.
	Interaction []*CapabilityStatementRestInteraction `fhirpath:"interaction"`

	// Identifies whether this portion of the statement is describing the ability
	// to initiate or receive restful operations.
	Mode *fhir.Code `fhirpath:"mode"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A specification of the restful capabilities of the solution for a specific
	// resource type.
	Resource []*CapabilityStatementRestResource `fhirpath:"resource"`

	// Information about security implementation from an interface perspective -
	// what a client needs to know.
	Security *CapabilityStatementRestSecurity `fhirpath:"security"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCompartment returns the value of the field Compartment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csr *CapabilityStatementRest) GetCompartment() []*fhir.Canonical {
	if csr == nil {
		return nil
	}
	return csr.Compartment
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csr *CapabilityStatementRest) GetDocumentation() *fhir.Markdown {
	if csr == nil {
		return nil
	}
	return csr.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csr *CapabilityStatementRest) GetExtension() []*fhir.Extension {
	if csr == nil {
		return nil
	}
	return csr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csr *CapabilityStatementRest) GetID() string {
	if csr == nil {
		return ""
	}
	return csr.ID
}

// GetInteraction returns the value of the field Interaction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csr *CapabilityStatementRest) GetInteraction() []*CapabilityStatementRestInteraction {
	if csr == nil {
		return nil
	}
	return csr.Interaction
}

// GetMode returns the value of the field Mode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csr *CapabilityStatementRest) GetMode() *fhir.Code {
	if csr == nil {
		return nil
	}
	return csr.Mode
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csr *CapabilityStatementRest) GetModifierExtension() []*fhir.Extension {
	if csr == nil {
		return nil
	}
	return csr.ModifierExtension
}

// GetResource returns the value of the field Resource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csr *CapabilityStatementRest) GetResource() []*CapabilityStatementRestResource {
	if csr == nil {
		return nil
	}
	return csr.Resource
}

// GetSecurity returns the value of the field Security.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csr *CapabilityStatementRest) GetSecurity() *CapabilityStatementRestSecurity {
	if csr == nil {
		return nil
	}
	return csr.Security
}

// What operations are supported?// A specification of restful operations supported by the system.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementRestInteraction struct {

	// A coded identifier of the operation, supported by the system.
	Code *fhir.Code `fhirpath:"code"`

	// Guidance specific to the implementation of this operation, such as
	// limitations on the kind of transactions allowed, or information about system
	// wide search is implemented.
	Documentation *fhir.Markdown `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csri *CapabilityStatementRestInteraction) GetCode() *fhir.Code {
	if csri == nil {
		return nil
	}
	return csri.Code
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csri *CapabilityStatementRestInteraction) GetDocumentation() *fhir.Markdown {
	if csri == nil {
		return nil
	}
	return csri.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csri *CapabilityStatementRestInteraction) GetExtension() []*fhir.Extension {
	if csri == nil {
		return nil
	}
	return csri.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csri *CapabilityStatementRestInteraction) GetID() string {
	if csri == nil {
		return ""
	}
	return csri.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csri *CapabilityStatementRestInteraction) GetModifierExtension() []*fhir.Extension {
	if csri == nil {
		return nil
	}
	return csri.ModifierExtension
}

// Resource served on the REST interface// A specification of the restful capabilities of the solution for a specific
// resource type.// Max of one repetition per resource type.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementRestResource struct {

	// A flag that indicates that the server supports conditional create.
	ConditionalCreate *fhir.Boolean `fhirpath:"conditionalCreate"`

	// A code that indicates how the server supports conditional delete.
	ConditionalDelete *fhir.Code `fhirpath:"conditionalDelete"`

	// A code that indicates how the server supports conditional read.
	ConditionalRead *fhir.Code `fhirpath:"conditionalRead"`

	// A flag that indicates that the server supports conditional update.
	ConditionalUpdate *fhir.Boolean `fhirpath:"conditionalUpdate"`

	// Additional information about the resource type used by the system.
	Documentation *fhir.Markdown `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Identifies a restful operation supported by the solution.
	Interaction []*CapabilityStatementRestResourceInteraction `fhirpath:"interaction"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Definition of an operation or a named query together with its parameters and
	// their meaning and type. Consult the definition of the operation for details
	// about how to invoke the operation, and the parameters.
	Operation []*CapabilityStatementRestResourceOperation `fhirpath:"operation"`

	// A specification of the profile that describes the solution's overall support
	// for the resource, including any constraints on cardinality, bindings,
	// lengths or other limitations. See further discussion in [Using
	// Profiles](profiling.html#profile-uses).
	Profile *fhir.Canonical `fhirpath:"profile"`

	// A flag for whether the server is able to return past versions as part of the
	// vRead operation.
	ReadHistory *fhir.Boolean `fhirpath:"readHistory"`

	// A set of flags that defines how references are supported.
	ReferencePolicy []*fhir.Code `fhirpath:"referencePolicy"`

	// A list of _include values supported by the server.
	SearchInclude []*fhir.String `fhirpath:"searchInclude"`

	// Search parameters for implementations to support and/or make use of - either
	// references to ones defined in the specification, or additional ones defined
	// for/by the implementation.
	SearchParam []*CapabilityStatementRestResourceSearchParam `fhirpath:"searchParam"`

	// A list of _revinclude (reverse include) values supported by the server.
	SearchRevInclude []*fhir.String `fhirpath:"searchRevInclude"`

	// A list of profiles that represent different use cases supported by the
	// system. For a server, "supported by the system" means the system
	// hosts/produces a set of resources that are conformant to a particular
	// profile, and allows clients that use its services to search using this
	// profile and to find appropriate data. For a client, it means the system will
	// search by this profile and process data according to the guidance implicit
	// in the profile. See further discussion in [Using
	// Profiles](profiling.html#profile-uses).
	SupportedProfile []*fhir.Canonical `fhirpath:"supportedProfile"`

	// A type of resource exposed via the restful interface.
	Type *fhir.Code `fhirpath:"type"`

	// A flag to indicate that the server allows or needs to allow the client to
	// create new identities on the server (that is, the client PUTs to a location
	// where there is no existing resource). Allowing this operation means that the
	// server allows the client to create new identities on the server.
	UpdateCreate *fhir.Boolean `fhirpath:"updateCreate"`

	// This field is set to no-version to specify that the system does not support
	// (server) or use (client) versioning for this resource type. If this has some
	// other value, the server must at least correctly track and populate the
	// versionId meta-property on resources. If the value is 'versioned-update',
	// then the server supports all the versioning features, including using e-tags
	// for version integrity in the API.
	Versioning *fhir.Code `fhirpath:"versioning"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetConditionalCreate returns the value of the field ConditionalCreate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetConditionalCreate() *fhir.Boolean {
	if csrr == nil {
		return nil
	}
	return csrr.ConditionalCreate
}

// GetConditionalDelete returns the value of the field ConditionalDelete.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetConditionalDelete() *fhir.Code {
	if csrr == nil {
		return nil
	}
	return csrr.ConditionalDelete
}

// GetConditionalRead returns the value of the field ConditionalRead.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetConditionalRead() *fhir.Code {
	if csrr == nil {
		return nil
	}
	return csrr.ConditionalRead
}

// GetConditionalUpdate returns the value of the field ConditionalUpdate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetConditionalUpdate() *fhir.Boolean {
	if csrr == nil {
		return nil
	}
	return csrr.ConditionalUpdate
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetDocumentation() *fhir.Markdown {
	if csrr == nil {
		return nil
	}
	return csrr.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetExtension() []*fhir.Extension {
	if csrr == nil {
		return nil
	}
	return csrr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetID() string {
	if csrr == nil {
		return ""
	}
	return csrr.ID
}

// GetInteraction returns the value of the field Interaction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetInteraction() []*CapabilityStatementRestResourceInteraction {
	if csrr == nil {
		return nil
	}
	return csrr.Interaction
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetModifierExtension() []*fhir.Extension {
	if csrr == nil {
		return nil
	}
	return csrr.ModifierExtension
}

// GetOperation returns the value of the field Operation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetOperation() []*CapabilityStatementRestResourceOperation {
	if csrr == nil {
		return nil
	}
	return csrr.Operation
}

// GetProfile returns the value of the field Profile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetProfile() *fhir.Canonical {
	if csrr == nil {
		return nil
	}
	return csrr.Profile
}

// GetReadHistory returns the value of the field ReadHistory.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetReadHistory() *fhir.Boolean {
	if csrr == nil {
		return nil
	}
	return csrr.ReadHistory
}

// GetReferencePolicy returns the value of the field ReferencePolicy.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetReferencePolicy() []*fhir.Code {
	if csrr == nil {
		return nil
	}
	return csrr.ReferencePolicy
}

// GetSearchInclude returns the value of the field SearchInclude.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetSearchInclude() []*fhir.String {
	if csrr == nil {
		return nil
	}
	return csrr.SearchInclude
}

// GetSearchParam returns the value of the field SearchParam.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetSearchParam() []*CapabilityStatementRestResourceSearchParam {
	if csrr == nil {
		return nil
	}
	return csrr.SearchParam
}

// GetSearchRevInclude returns the value of the field SearchRevInclude.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetSearchRevInclude() []*fhir.String {
	if csrr == nil {
		return nil
	}
	return csrr.SearchRevInclude
}

// GetSupportedProfile returns the value of the field SupportedProfile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetSupportedProfile() []*fhir.Canonical {
	if csrr == nil {
		return nil
	}
	return csrr.SupportedProfile
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetType() *fhir.Code {
	if csrr == nil {
		return nil
	}
	return csrr.Type
}

// GetUpdateCreate returns the value of the field UpdateCreate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetUpdateCreate() *fhir.Boolean {
	if csrr == nil {
		return nil
	}
	return csrr.UpdateCreate
}

// GetVersioning returns the value of the field Versioning.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrr *CapabilityStatementRestResource) GetVersioning() *fhir.Code {
	if csrr == nil {
		return nil
	}
	return csrr.Versioning
}

// What operations are supported?// Identifies a restful operation supported by the solution.// In general, a Resource will only appear in a CapabilityStatement if the
// server actually has some capabilities - e.g. there is at least one
// interaction supported. However interactions can be omitted to support
// summarization (_summary = true).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementRestResourceInteraction struct {

	// Coded identifier of the operation, supported by the system resource.
	Code *fhir.Code `fhirpath:"code"`

	// Guidance specific to the implementation of this operation, such as 'delete
	// is a logical delete' or 'updates are only allowed with version id' or
	// 'creates permitted from pre-authorized certificates only'.
	Documentation *fhir.Markdown `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrri *CapabilityStatementRestResourceInteraction) GetCode() *fhir.Code {
	if csrri == nil {
		return nil
	}
	return csrri.Code
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrri *CapabilityStatementRestResourceInteraction) GetDocumentation() *fhir.Markdown {
	if csrri == nil {
		return nil
	}
	return csrri.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrri *CapabilityStatementRestResourceInteraction) GetExtension() []*fhir.Extension {
	if csrri == nil {
		return nil
	}
	return csrri.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrri *CapabilityStatementRestResourceInteraction) GetID() string {
	if csrri == nil {
		return ""
	}
	return csrri.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrri *CapabilityStatementRestResourceInteraction) GetModifierExtension() []*fhir.Extension {
	if csrri == nil {
		return nil
	}
	return csrri.ModifierExtension
}

// Definition of a resource operation// Definition of an operation or a named query together with its parameters and
// their meaning and type. Consult the definition of the operation for details
// about how to invoke the operation, and the parameters.// Operations linked from CapabilityStatement.rest.resource.operation must have
// OperationDefinition.type = true or OperationDefinition.instance = true.
// If an operation that is listed in multiple
// CapabilityStatement.rest.resource.operation (e.g. for different resource
// types), then clients should understand that the operation is only supported
// on the specified resource types, and that may be a subset of those listed in
// OperationDefinition.resource.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementRestResourceOperation struct {

	// Where the formal definition can be found. If a server references the base
	// definition of an Operation (i.e. from the specification itself such as
	// ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means
	// it supports the full capabilities of the operation - e.g. both GET and POST
	// invocation. If it only supports a subset, it must define its own custom
	// [OperationDefinition](operationdefinition.html#) with a 'base' of the
	// original OperationDefinition. The custom definition would describe the
	// specific subset of functionality supported.
	Definition *fhir.Canonical `fhirpath:"definition"`

	// Documentation that describes anything special about the operation behavior,
	// possibly detailing different behavior for system, type and instance-level
	// invocation of the operation.
	Documentation *fhir.Markdown `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of the operation or query. For an operation, this is the name
	// prefixed with $ and used in the URL. For a query, this is the name used in
	// the _query parameter when the query is called.
	Name *fhir.String `fhirpath:"name"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDefinition returns the value of the field Definition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrro *CapabilityStatementRestResourceOperation) GetDefinition() *fhir.Canonical {
	if csrro == nil {
		return nil
	}
	return csrro.Definition
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrro *CapabilityStatementRestResourceOperation) GetDocumentation() *fhir.Markdown {
	if csrro == nil {
		return nil
	}
	return csrro.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrro *CapabilityStatementRestResourceOperation) GetExtension() []*fhir.Extension {
	if csrro == nil {
		return nil
	}
	return csrro.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrro *CapabilityStatementRestResourceOperation) GetID() string {
	if csrro == nil {
		return ""
	}
	return csrro.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrro *CapabilityStatementRestResourceOperation) GetModifierExtension() []*fhir.Extension {
	if csrro == nil {
		return nil
	}
	return csrro.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrro *CapabilityStatementRestResourceOperation) GetName() *fhir.String {
	if csrro == nil {
		return nil
	}
	return csrro.Name
}

// Search parameters supported by implementation// Search parameters for implementations to support and/or make use of - either
// references to ones defined in the specification, or additional ones defined
// for/by the implementation.// The search parameters should include the control search parameters such as
// _sort, _count, etc. that also apply to this resource (though many will be
// listed at
// [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)).
// The behavior of some search parameters may be further described by other
// code or extension elements, or narrative within the capability statement or
// linked [SearchParameter](searchparameter.html#) definitions.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementRestResourceSearchParam struct {

	// An absolute URI that is a formal reference to where this parameter was first
	// defined, so that a client can be confident of the meaning of the search
	// parameter (a reference to
	// [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)).
	// This element SHALL be populated if the search parameter refers to a
	// SearchParameter defined by the FHIR core specification or externally defined
	// IGs.
	Definition *fhir.Canonical `fhirpath:"definition"`

	// This allows documentation of any distinct behaviors about how the search
	// parameter is used. For example, text matching algorithms.
	Documentation *fhir.Markdown `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of the search parameter used in the interface.
	Name *fhir.String `fhirpath:"name"`

	// The type of value a search parameter refers to, and how the content is
	// interpreted.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDefinition returns the value of the field Definition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrrsp *CapabilityStatementRestResourceSearchParam) GetDefinition() *fhir.Canonical {
	if csrrsp == nil {
		return nil
	}
	return csrrsp.Definition
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrrsp *CapabilityStatementRestResourceSearchParam) GetDocumentation() *fhir.Markdown {
	if csrrsp == nil {
		return nil
	}
	return csrrsp.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrrsp *CapabilityStatementRestResourceSearchParam) GetExtension() []*fhir.Extension {
	if csrrsp == nil {
		return nil
	}
	return csrrsp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrrsp *CapabilityStatementRestResourceSearchParam) GetID() string {
	if csrrsp == nil {
		return ""
	}
	return csrrsp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrrsp *CapabilityStatementRestResourceSearchParam) GetModifierExtension() []*fhir.Extension {
	if csrrsp == nil {
		return nil
	}
	return csrrsp.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrrsp *CapabilityStatementRestResourceSearchParam) GetName() *fhir.String {
	if csrrsp == nil {
		return nil
	}
	return csrrsp.Name
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrrsp *CapabilityStatementRestResourceSearchParam) GetType() *fhir.Code {
	if csrrsp == nil {
		return nil
	}
	return csrrsp.Type
}

// Information about security of implementation// Information about security implementation from an interface perspective -
// what a client needs to know.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementRestSecurity struct {

	// Server adds CORS headers when responding to requests - this enables
	// Javascript applications to use the server.
	Cors *fhir.Boolean `fhirpath:"cors"`

	// General description of how security works.
	Description *fhir.Markdown `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Types of security services that are supported/required by the system.
	Service []*fhir.CodeableConcept `fhirpath:"service"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCors returns the value of the field Cors.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrs *CapabilityStatementRestSecurity) GetCors() *fhir.Boolean {
	if csrs == nil {
		return nil
	}
	return csrs.Cors
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrs *CapabilityStatementRestSecurity) GetDescription() *fhir.Markdown {
	if csrs == nil {
		return nil
	}
	return csrs.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrs *CapabilityStatementRestSecurity) GetExtension() []*fhir.Extension {
	if csrs == nil {
		return nil
	}
	return csrs.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrs *CapabilityStatementRestSecurity) GetID() string {
	if csrs == nil {
		return ""
	}
	return csrs.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrs *CapabilityStatementRestSecurity) GetModifierExtension() []*fhir.Extension {
	if csrs == nil {
		return nil
	}
	return csrs.ModifierExtension
}

// GetService returns the value of the field Service.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csrs *CapabilityStatementRestSecurity) GetService() []*fhir.CodeableConcept {
	if csrs == nil {
		return nil
	}
	return csrs.Service
}

// Software that is covered by this capability statement// Software that is covered by this capability statement. It is used when the
// capability statement describes the capabilities of a particular software
// version, independent of an installation.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CapabilityStatement.json
type CapabilityStatementSoftware struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Name the software is known by.
	Name *fhir.String `fhirpath:"name"`

	// Date this version of the software was released.
	ReleaseDate *fhir.DateTime `fhirpath:"releaseDate"`

	// The version identifier for the software covered by this statement.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (css *CapabilityStatementSoftware) GetExtension() []*fhir.Extension {
	if css == nil {
		return nil
	}
	return css.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (css *CapabilityStatementSoftware) GetID() string {
	if css == nil {
		return ""
	}
	return css.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (css *CapabilityStatementSoftware) GetModifierExtension() []*fhir.Extension {
	if css == nil {
		return nil
	}
	return css.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (css *CapabilityStatementSoftware) GetName() *fhir.String {
	if css == nil {
		return nil
	}
	return css.Name
}

// GetReleaseDate returns the value of the field ReleaseDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (css *CapabilityStatementSoftware) GetReleaseDate() *fhir.DateTime {
	if css == nil {
		return nil
	}
	return css.ReleaseDate
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (css *CapabilityStatementSoftware) GetVersion() *fhir.String {
	if css == nil {
		return nil
	}
	return css.Version
}
