// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package substancesourcematerial

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Source material shall capture information on the taxonomic and anatomical
// origins as well as the fraction of a material that can result in or can be
// modified to form a substance. This set of data elements shall be used to
// define polymer substances isolated from biological matrices. Taxonomic and
// anatomical origins shall be described using a controlled vocabulary as
// required. This information is captured for naturally derived polymers ( .
// starch) and structurally diverse substances. For Organisms belonging to the
// Kingdom Plantae the Substance level defines the fresh material of a single
// species or infraspecies, the Herbal Drug and the Herbal preparation. For
// Herbal preparations, the fraction information will be captured at the
// Substance information level and additional information for herbal extracts
// will be captured at the Specified Substance Group 1 information level. See
// for further explanation the Substance Class: Structurally Diverse and the
// herbal annex.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial
//   - Source File: StructureDefinition-SubstanceSourceMaterial.json
type SubstanceSourceMaterial struct {

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The country where the plant material is harvested or the countries where the
	// plasma is sourced from as laid down in accordance with the Plasma Master
	// File. For “Plasma-derived substances” the attribute country of origin
	// provides information about the countries used for the manufacturing of the
	// Cryopoor plama or Crioprecipitate.
	CountryOfOrigin []*fhir.CodeableConcept `fhirpath:"countryOfOrigin"`

	// Stage of life for animals, plants, insects and microorganisms. This
	// information shall be provided only when the substance is significantly
	// different in these stages (e.g. foetal bovine serum).
	DevelopmentStage *fhir.CodeableConcept `fhirpath:"developmentStage"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Many complex materials are fractions of parts of plants, animals, or
	// minerals. Fraction elements are often necessary to define both Substances
	// and Specified Group 1 Substances. For substances derived from Plants,
	// fraction information will be captured at the Substance information level ( .
	// Oils, Juices and Exudates). Additional information for Extracts, such as
	// extraction solvent composition, will be captured at the Specified Substance
	// Group 1 information level. For plasma-derived products fraction information
	// will be captured at the Substance and the Specified Substance Group 1
	// levels.
	FractionDescription []*SubstanceSourceMaterialFractionDescription `fhirpath:"fractionDescription"`

	// The place/region where the plant is harvested or the places/regions where
	// the animal source material has its habitat.
	GeographicalLocation []*fhir.String `fhirpath:"geographicalLocation"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// This subclause describes the organism which the substance is derived from.
	// For vaccines, the parent organism shall be specified based on these
	// subclause elements. As an example, full taxonomy will be described for the
	// Substance Name: ., Leaf.
	Organism *SubstanceSourceMaterialOrganism `fhirpath:"organism"`

	// The unique identifier associated with the source material parent organism
	// shall be specified.
	OrganismID *fhir.Identifier `fhirpath:"organismId"`

	// The organism accepted Scientific name shall be provided based on the
	// organism taxonomy.
	OrganismName *fhir.String `fhirpath:"organismName"`

	// The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the
	// substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
	ParentSubstanceID []*fhir.Identifier `fhirpath:"parentSubstanceId"`

	// The parent substance of the Herbal Drug, or Herbal preparation.
	ParentSubstanceName []*fhir.String `fhirpath:"parentSubstanceName"`

	// To do.
	PartDescription []*SubstanceSourceMaterialPartDescription `fhirpath:"partDescription"`

	// General high level classification of the source material specific to the
	// origin of the material.
	SourceMaterialClass *fhir.CodeableConcept `fhirpath:"sourceMaterialClass"`

	// The state of the source material when extracted.
	SourceMaterialState *fhir.CodeableConcept `fhirpath:"sourceMaterialState"`

	// The type of the source material shall be specified based on a controlled
	// vocabulary. For vaccines, this subclause refers to the class of infectious
	// agent.
	SourceMaterialType *fhir.CodeableConcept `fhirpath:"sourceMaterialType"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetContained() []fhir.Resource {
	if ssm == nil {
		return nil
	}
	return ssm.Contained
}

// GetCountryOfOrigin returns the value of the field CountryOfOrigin.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetCountryOfOrigin() []*fhir.CodeableConcept {
	if ssm == nil {
		return nil
	}
	return ssm.CountryOfOrigin
}

// GetDevelopmentStage returns the value of the field DevelopmentStage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetDevelopmentStage() *fhir.CodeableConcept {
	if ssm == nil {
		return nil
	}
	return ssm.DevelopmentStage
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetExtension() []*fhir.Extension {
	if ssm == nil {
		return nil
	}
	return ssm.Extension
}

// GetFractionDescription returns the value of the field FractionDescription.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetFractionDescription() []*SubstanceSourceMaterialFractionDescription {
	if ssm == nil {
		return nil
	}
	return ssm.FractionDescription
}

// GetGeographicalLocation returns the value of the field GeographicalLocation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetGeographicalLocation() []*fhir.String {
	if ssm == nil {
		return nil
	}
	return ssm.GeographicalLocation
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetID() string {
	if ssm == nil {
		return ""
	}
	return ssm.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetImplicitRules() *fhir.URI {
	if ssm == nil {
		return nil
	}
	return ssm.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetLanguage() *fhir.Code {
	if ssm == nil {
		return nil
	}
	return ssm.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetMeta() *fhir.Meta {
	if ssm == nil {
		return nil
	}
	return ssm.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetModifierExtension() []*fhir.Extension {
	if ssm == nil {
		return nil
	}
	return ssm.ModifierExtension
}

// GetOrganism returns the value of the field Organism.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetOrganism() *SubstanceSourceMaterialOrganism {
	if ssm == nil {
		return nil
	}
	return ssm.Organism
}

// GetOrganismID returns the value of the field OrganismID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetOrganismID() *fhir.Identifier {
	if ssm == nil {
		return nil
	}
	return ssm.OrganismID
}

// GetOrganismName returns the value of the field OrganismName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetOrganismName() *fhir.String {
	if ssm == nil {
		return nil
	}
	return ssm.OrganismName
}

// GetParentSubstanceID returns the value of the field ParentSubstanceID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetParentSubstanceID() []*fhir.Identifier {
	if ssm == nil {
		return nil
	}
	return ssm.ParentSubstanceID
}

// GetParentSubstanceName returns the value of the field ParentSubstanceName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetParentSubstanceName() []*fhir.String {
	if ssm == nil {
		return nil
	}
	return ssm.ParentSubstanceName
}

// GetPartDescription returns the value of the field PartDescription.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetPartDescription() []*SubstanceSourceMaterialPartDescription {
	if ssm == nil {
		return nil
	}
	return ssm.PartDescription
}

// GetSourceMaterialClass returns the value of the field SourceMaterialClass.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetSourceMaterialClass() *fhir.CodeableConcept {
	if ssm == nil {
		return nil
	}
	return ssm.SourceMaterialClass
}

// GetSourceMaterialState returns the value of the field SourceMaterialState.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetSourceMaterialState() *fhir.CodeableConcept {
	if ssm == nil {
		return nil
	}
	return ssm.SourceMaterialState
}

// GetSourceMaterialType returns the value of the field SourceMaterialType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetSourceMaterialType() *fhir.CodeableConcept {
	if ssm == nil {
		return nil
	}
	return ssm.SourceMaterialType
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssm *SubstanceSourceMaterial) GetText() *fhir.Narrative {
	if ssm == nil {
		return nil
	}
	return ssm.Text
}

// Many complex materials are fractions of parts of plants, animals, or
// minerals. Fraction elements are often necessary to define both Substances
// and Specified Group 1 Substances. For substances derived from Plants,
// fraction information will be captured at the Substance information level ( .
// Oils, Juices and Exudates). Additional information for Extracts, such as
// extraction solvent composition, will be captured at the Specified Substance
// Group 1 information level. For plasma-derived products fraction information
// will be captured at the Substance and the Specified Substance Group 1 levels// Many complex materials are fractions of parts of plants, animals, or
// minerals. Fraction elements are often necessary to define both Substances
// and Specified Group 1 Substances. For substances derived from Plants,
// fraction information will be captured at the Substance information level ( .
// Oils, Juices and Exudates). Additional information for Extracts, such as
// extraction solvent composition, will be captured at the Specified Substance
// Group 1 information level. For plasma-derived products fraction information
// will be captured at the Substance and the Specified Substance Group 1
// levels.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstanceSourceMaterial.json
type SubstanceSourceMaterialFractionDescription struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// This element is capturing information about the fraction of a plant part, or
	// human plasma for fractionation.
	Fraction *fhir.String `fhirpath:"fraction"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The specific type of the material constituting the component. For Herbal
	// preparations the particulars of the extracts (liquid/dry) is described in
	// Specified Substance Group 1.
	MaterialType *fhir.CodeableConcept `fhirpath:"materialType"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmfd *SubstanceSourceMaterialFractionDescription) GetExtension() []*fhir.Extension {
	if ssmfd == nil {
		return nil
	}
	return ssmfd.Extension
}

// GetFraction returns the value of the field Fraction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmfd *SubstanceSourceMaterialFractionDescription) GetFraction() *fhir.String {
	if ssmfd == nil {
		return nil
	}
	return ssmfd.Fraction
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmfd *SubstanceSourceMaterialFractionDescription) GetID() string {
	if ssmfd == nil {
		return ""
	}
	return ssmfd.ID
}

// GetMaterialType returns the value of the field MaterialType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmfd *SubstanceSourceMaterialFractionDescription) GetMaterialType() *fhir.CodeableConcept {
	if ssmfd == nil {
		return nil
	}
	return ssmfd.MaterialType
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmfd *SubstanceSourceMaterialFractionDescription) GetModifierExtension() []*fhir.Extension {
	if ssmfd == nil {
		return nil
	}
	return ssmfd.ModifierExtension
}

// This subclause describes the organism which the substance is derived from.
// For vaccines, the parent organism shall be specified based on these
// subclause elements. As an example, full taxonomy will be described for the
// Substance Name: ., Leaf// This subclause describes the organism which the substance is derived from.
// For vaccines, the parent organism shall be specified based on these
// subclause elements. As an example, full taxonomy will be described for the
// Substance Name: ., Leaf.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstanceSourceMaterial.json
type SubstanceSourceMaterialOrganism struct {

	// 4.9.13.6.1 Author type (Conditional).
	Author []*SubstanceSourceMaterialOrganismAuthor `fhirpath:"author"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The family of an organism shall be specified.
	Family *fhir.CodeableConcept `fhirpath:"family"`

	// The genus of an organism shall be specified; refers to the Latin epithet of
	// the genus element of the plant/animal scientific name; it is present in
	// names for genera, species and infraspecies.
	Genus *fhir.CodeableConcept `fhirpath:"genus"`

	// 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
	Hybrid *SubstanceSourceMaterialOrganismHybrid `fhirpath:"hybrid"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The intraspecific description of an organism shall be specified based on a
	// controlled vocabulary. For Influenza Vaccine, the intraspecific description
	// shall contain the syntax of the antigen in line with the WHO convention.
	IntraspecificDescription *fhir.String `fhirpath:"intraspecificDescription"`

	// The Intraspecific type of an organism shall be specified.
	IntraspecificType *fhir.CodeableConcept `fhirpath:"intraspecificType"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// 4.9.13.7.1 Kingdom (Conditional).
	OrganismGeneral *SubstanceSourceMaterialOrganismOrganismGeneral `fhirpath:"organismGeneral"`

	// The species of an organism shall be specified; refers to the Latin epithet
	// of the species of the plant/animal; it is present in names for species and
	// infraspecies.
	Species *fhir.CodeableConcept `fhirpath:"species"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetAuthor() []*SubstanceSourceMaterialOrganismAuthor {
	if ssmo == nil {
		return nil
	}
	return ssmo.Author
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetExtension() []*fhir.Extension {
	if ssmo == nil {
		return nil
	}
	return ssmo.Extension
}

// GetFamily returns the value of the field Family.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetFamily() *fhir.CodeableConcept {
	if ssmo == nil {
		return nil
	}
	return ssmo.Family
}

// GetGenus returns the value of the field Genus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetGenus() *fhir.CodeableConcept {
	if ssmo == nil {
		return nil
	}
	return ssmo.Genus
}

// GetHybrid returns the value of the field Hybrid.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetHybrid() *SubstanceSourceMaterialOrganismHybrid {
	if ssmo == nil {
		return nil
	}
	return ssmo.Hybrid
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetID() string {
	if ssmo == nil {
		return ""
	}
	return ssmo.ID
}

// GetIntraspecificDescription returns the value of the field IntraspecificDescription.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetIntraspecificDescription() *fhir.String {
	if ssmo == nil {
		return nil
	}
	return ssmo.IntraspecificDescription
}

// GetIntraspecificType returns the value of the field IntraspecificType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetIntraspecificType() *fhir.CodeableConcept {
	if ssmo == nil {
		return nil
	}
	return ssmo.IntraspecificType
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetModifierExtension() []*fhir.Extension {
	if ssmo == nil {
		return nil
	}
	return ssmo.ModifierExtension
}

// GetOrganismGeneral returns the value of the field OrganismGeneral.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetOrganismGeneral() *SubstanceSourceMaterialOrganismOrganismGeneral {
	if ssmo == nil {
		return nil
	}
	return ssmo.OrganismGeneral
}

// GetSpecies returns the value of the field Species.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmo *SubstanceSourceMaterialOrganism) GetSpecies() *fhir.CodeableConcept {
	if ssmo == nil {
		return nil
	}
	return ssmo.Species
}

// 4.9.13.6.1 Author type (Conditional)// 4.9.13.6.1 Author type (Conditional).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstanceSourceMaterial.json
type SubstanceSourceMaterialOrganismAuthor struct {

	// The author of an organism species shall be specified. The author year of an
	// organism shall also be specified when applicable; refers to the year in
	// which the first author(s) published the infraspecific plant/animal name (of
	// any rank).
	AuthorDescription *fhir.String `fhirpath:"authorDescription"`

	// The type of author of an organism species shall be specified. The
	// parenthetical author of an organism species refers to the first author who
	// published the plant/animal name (of any rank). The primary author of an
	// organism species refers to the first author(s), who validly published the
	// plant/animal name.
	AuthorType *fhir.CodeableConcept `fhirpath:"authorType"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAuthorDescription returns the value of the field AuthorDescription.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoa *SubstanceSourceMaterialOrganismAuthor) GetAuthorDescription() *fhir.String {
	if ssmoa == nil {
		return nil
	}
	return ssmoa.AuthorDescription
}

// GetAuthorType returns the value of the field AuthorType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoa *SubstanceSourceMaterialOrganismAuthor) GetAuthorType() *fhir.CodeableConcept {
	if ssmoa == nil {
		return nil
	}
	return ssmoa.AuthorType
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoa *SubstanceSourceMaterialOrganismAuthor) GetExtension() []*fhir.Extension {
	if ssmoa == nil {
		return nil
	}
	return ssmoa.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoa *SubstanceSourceMaterialOrganismAuthor) GetID() string {
	if ssmoa == nil {
		return ""
	}
	return ssmoa.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoa *SubstanceSourceMaterialOrganismAuthor) GetModifierExtension() []*fhir.Extension {
	if ssmoa == nil {
		return nil
	}
	return ssmoa.ModifierExtension
}

// 4.9.13.8.1 Hybrid species maternal organism ID (Optional)// 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstanceSourceMaterial.json
type SubstanceSourceMaterialOrganismHybrid struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The hybrid type of an organism shall be specified.
	HybridType *fhir.CodeableConcept `fhirpath:"hybridType"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The identifier of the maternal species constituting the hybrid organism
	// shall be specified based on a controlled vocabulary. For plants, the parents
	// aren’t always known, and it is unlikely that it will be known which is
	// maternal and which is paternal.
	MaternalOrganismID *fhir.String `fhirpath:"maternalOrganismId"`

	// The name of the maternal species constituting the hybrid organism shall be
	// specified. For plants, the parents aren’t always known, and it is unlikely
	// that it will be known which is maternal and which is paternal.
	MaternalOrganismName *fhir.String `fhirpath:"maternalOrganismName"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The identifier of the paternal species constituting the hybrid organism
	// shall be specified based on a controlled vocabulary.
	PaternalOrganismID *fhir.String `fhirpath:"paternalOrganismId"`

	// The name of the paternal species constituting the hybrid organism shall be
	// specified.
	PaternalOrganismName *fhir.String `fhirpath:"paternalOrganismName"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoh *SubstanceSourceMaterialOrganismHybrid) GetExtension() []*fhir.Extension {
	if ssmoh == nil {
		return nil
	}
	return ssmoh.Extension
}

// GetHybridType returns the value of the field HybridType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoh *SubstanceSourceMaterialOrganismHybrid) GetHybridType() *fhir.CodeableConcept {
	if ssmoh == nil {
		return nil
	}
	return ssmoh.HybridType
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoh *SubstanceSourceMaterialOrganismHybrid) GetID() string {
	if ssmoh == nil {
		return ""
	}
	return ssmoh.ID
}

// GetMaternalOrganismID returns the value of the field MaternalOrganismID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoh *SubstanceSourceMaterialOrganismHybrid) GetMaternalOrganismID() *fhir.String {
	if ssmoh == nil {
		return nil
	}
	return ssmoh.MaternalOrganismID
}

// GetMaternalOrganismName returns the value of the field MaternalOrganismName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoh *SubstanceSourceMaterialOrganismHybrid) GetMaternalOrganismName() *fhir.String {
	if ssmoh == nil {
		return nil
	}
	return ssmoh.MaternalOrganismName
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoh *SubstanceSourceMaterialOrganismHybrid) GetModifierExtension() []*fhir.Extension {
	if ssmoh == nil {
		return nil
	}
	return ssmoh.ModifierExtension
}

// GetPaternalOrganismID returns the value of the field PaternalOrganismID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoh *SubstanceSourceMaterialOrganismHybrid) GetPaternalOrganismID() *fhir.String {
	if ssmoh == nil {
		return nil
	}
	return ssmoh.PaternalOrganismID
}

// GetPaternalOrganismName returns the value of the field PaternalOrganismName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoh *SubstanceSourceMaterialOrganismHybrid) GetPaternalOrganismName() *fhir.String {
	if ssmoh == nil {
		return nil
	}
	return ssmoh.PaternalOrganismName
}

// 4.9.13.7.1 Kingdom (Conditional)// 4.9.13.7.1 Kingdom (Conditional).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstanceSourceMaterial.json
type SubstanceSourceMaterialOrganismOrganismGeneral struct {

	// The class of an organism shall be specified.
	Class *fhir.CodeableConcept `fhirpath:"class"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The kingdom of an organism shall be specified.
	Kingdom *fhir.CodeableConcept `fhirpath:"kingdom"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The order of an organism shall be specified,.
	Order *fhir.CodeableConcept `fhirpath:"order"`

	// The phylum of an organism shall be specified.
	Phylum *fhir.CodeableConcept `fhirpath:"phylum"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetClass returns the value of the field Class.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoog *SubstanceSourceMaterialOrganismOrganismGeneral) GetClass() *fhir.CodeableConcept {
	if ssmoog == nil {
		return nil
	}
	return ssmoog.Class
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoog *SubstanceSourceMaterialOrganismOrganismGeneral) GetExtension() []*fhir.Extension {
	if ssmoog == nil {
		return nil
	}
	return ssmoog.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoog *SubstanceSourceMaterialOrganismOrganismGeneral) GetID() string {
	if ssmoog == nil {
		return ""
	}
	return ssmoog.ID
}

// GetKingdom returns the value of the field Kingdom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoog *SubstanceSourceMaterialOrganismOrganismGeneral) GetKingdom() *fhir.CodeableConcept {
	if ssmoog == nil {
		return nil
	}
	return ssmoog.Kingdom
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoog *SubstanceSourceMaterialOrganismOrganismGeneral) GetModifierExtension() []*fhir.Extension {
	if ssmoog == nil {
		return nil
	}
	return ssmoog.ModifierExtension
}

// GetOrder returns the value of the field Order.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoog *SubstanceSourceMaterialOrganismOrganismGeneral) GetOrder() *fhir.CodeableConcept {
	if ssmoog == nil {
		return nil
	}
	return ssmoog.Order
}

// GetPhylum returns the value of the field Phylum.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmoog *SubstanceSourceMaterialOrganismOrganismGeneral) GetPhylum() *fhir.CodeableConcept {
	if ssmoog == nil {
		return nil
	}
	return ssmoog.Phylum
}

// To do// To do.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstanceSourceMaterial.json
type SubstanceSourceMaterialPartDescription struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Entity of anatomical origin of source material within an organism.
	Part *fhir.CodeableConcept `fhirpath:"part"`

	// The detailed anatomic location when the part can be extracted from different
	// anatomical locations of the organism. Multiple alternative locations may
	// apply.
	PartLocation *fhir.CodeableConcept `fhirpath:"partLocation"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmpd *SubstanceSourceMaterialPartDescription) GetExtension() []*fhir.Extension {
	if ssmpd == nil {
		return nil
	}
	return ssmpd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmpd *SubstanceSourceMaterialPartDescription) GetID() string {
	if ssmpd == nil {
		return ""
	}
	return ssmpd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmpd *SubstanceSourceMaterialPartDescription) GetModifierExtension() []*fhir.Extension {
	if ssmpd == nil {
		return nil
	}
	return ssmpd.ModifierExtension
}

// GetPart returns the value of the field Part.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmpd *SubstanceSourceMaterialPartDescription) GetPart() *fhir.CodeableConcept {
	if ssmpd == nil {
		return nil
	}
	return ssmpd.Part
}

// GetPartLocation returns the value of the field PartLocation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ssmpd *SubstanceSourceMaterialPartDescription) GetPartLocation() *fhir.CodeableConcept {
	if ssmpd == nil {
		return nil
	}
	return ssmpd.PartLocation
}

func (ssm *SubstanceSourceMaterial) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ssm *SubstanceSourceMaterial) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contained            []fhir.Resource                               `json:"contained"`
		CountryOfOrigin      []*fhir.CodeableConcept                       `json:"countryOfOrigin"`
		DevelopmentStage     *fhir.CodeableConcept                         `json:"developmentStage"`
		Extension            []*fhir.Extension                             `json:"extension"`
		FractionDescription  []*SubstanceSourceMaterialFractionDescription `json:"fractionDescription"`
		GeographicalLocation []*fhir.String                                `json:"geographicalLocation"`

		ID                  string                                    `json:"id"`
		ImplicitRules       *fhir.URI                                 `json:"implicitRules"`
		Language            *fhir.Code                                `json:"language"`
		Meta                *fhir.Meta                                `json:"meta"`
		ModifierExtension   []*fhir.Extension                         `json:"modifierExtension"`
		Organism            *SubstanceSourceMaterialOrganism          `json:"organism"`
		OrganismID          *fhir.Identifier                          `json:"organismId"`
		OrganismName        *fhir.String                              `json:"organismName"`
		ParentSubstanceID   []*fhir.Identifier                        `json:"parentSubstanceId"`
		ParentSubstanceName []*fhir.String                            `json:"parentSubstanceName"`
		PartDescription     []*SubstanceSourceMaterialPartDescription `json:"partDescription"`
		SourceMaterialClass *fhir.CodeableConcept                     `json:"sourceMaterialClass"`
		SourceMaterialState *fhir.CodeableConcept                     `json:"sourceMaterialState"`
		SourceMaterialType  *fhir.CodeableConcept                     `json:"sourceMaterialType"`
		Text                *fhir.Narrative                           `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ssm.Contained = raw.Contained
	ssm.CountryOfOrigin = raw.CountryOfOrigin
	ssm.DevelopmentStage = raw.DevelopmentStage
	ssm.Extension = raw.Extension
	ssm.FractionDescription = raw.FractionDescription
	ssm.GeographicalLocation = raw.GeographicalLocation
	ssm.ID = raw.ID
	ssm.ImplicitRules = raw.ImplicitRules
	ssm.Language = raw.Language
	ssm.Meta = raw.Meta
	ssm.ModifierExtension = raw.ModifierExtension
	ssm.Organism = raw.Organism
	ssm.OrganismID = raw.OrganismID
	ssm.OrganismName = raw.OrganismName
	ssm.ParentSubstanceID = raw.ParentSubstanceID
	ssm.ParentSubstanceName = raw.ParentSubstanceName
	ssm.PartDescription = raw.PartDescription
	ssm.SourceMaterialClass = raw.SourceMaterialClass
	ssm.SourceMaterialState = raw.SourceMaterialState
	ssm.SourceMaterialType = raw.SourceMaterialType
	ssm.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*SubstanceSourceMaterial)(nil)
var _ json.Unmarshaler = (*SubstanceSourceMaterial)(nil)

func (ssmfd *SubstanceSourceMaterialFractionDescription) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ssmfd *SubstanceSourceMaterialFractionDescription) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`
		Fraction  *fhir.String      `json:"fraction"`

		ID                string                `json:"id"`
		MaterialType      *fhir.CodeableConcept `json:"materialType"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ssmfd.Extension = raw.Extension
	ssmfd.Fraction = raw.Fraction
	ssmfd.ID = raw.ID
	ssmfd.MaterialType = raw.MaterialType
	ssmfd.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*SubstanceSourceMaterialFractionDescription)(nil)
var _ json.Unmarshaler = (*SubstanceSourceMaterialFractionDescription)(nil)

func (ssmo *SubstanceSourceMaterialOrganism) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ssmo *SubstanceSourceMaterialOrganism) UnmarshalJSON(data []byte) error {
	var raw struct {
		Author    []*SubstanceSourceMaterialOrganismAuthor `json:"author"`
		Extension []*fhir.Extension                        `json:"extension"`
		Family    *fhir.CodeableConcept                    `json:"family"`
		Genus     *fhir.CodeableConcept                    `json:"genus"`
		Hybrid    *SubstanceSourceMaterialOrganismHybrid   `json:"hybrid"`

		ID                       string                                          `json:"id"`
		IntraspecificDescription *fhir.String                                    `json:"intraspecificDescription"`
		IntraspecificType        *fhir.CodeableConcept                           `json:"intraspecificType"`
		ModifierExtension        []*fhir.Extension                               `json:"modifierExtension"`
		OrganismGeneral          *SubstanceSourceMaterialOrganismOrganismGeneral `json:"organismGeneral"`
		Species                  *fhir.CodeableConcept                           `json:"species"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ssmo.Author = raw.Author
	ssmo.Extension = raw.Extension
	ssmo.Family = raw.Family
	ssmo.Genus = raw.Genus
	ssmo.Hybrid = raw.Hybrid
	ssmo.ID = raw.ID
	ssmo.IntraspecificDescription = raw.IntraspecificDescription
	ssmo.IntraspecificType = raw.IntraspecificType
	ssmo.ModifierExtension = raw.ModifierExtension
	ssmo.OrganismGeneral = raw.OrganismGeneral
	ssmo.Species = raw.Species
	return nil
}

var _ json.Marshaler = (*SubstanceSourceMaterialOrganism)(nil)
var _ json.Unmarshaler = (*SubstanceSourceMaterialOrganism)(nil)

func (ssmoa *SubstanceSourceMaterialOrganismAuthor) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ssmoa *SubstanceSourceMaterialOrganismAuthor) UnmarshalJSON(data []byte) error {
	var raw struct {
		AuthorDescription *fhir.String          `json:"authorDescription"`
		AuthorType        *fhir.CodeableConcept `json:"authorType"`
		Extension         []*fhir.Extension     `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ssmoa.AuthorDescription = raw.AuthorDescription
	ssmoa.AuthorType = raw.AuthorType
	ssmoa.Extension = raw.Extension
	ssmoa.ID = raw.ID
	ssmoa.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*SubstanceSourceMaterialOrganismAuthor)(nil)
var _ json.Unmarshaler = (*SubstanceSourceMaterialOrganismAuthor)(nil)

func (ssmoh *SubstanceSourceMaterialOrganismHybrid) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ssmoh *SubstanceSourceMaterialOrganismHybrid) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension  []*fhir.Extension     `json:"extension"`
		HybridType *fhir.CodeableConcept `json:"hybridType"`

		ID                   string            `json:"id"`
		MaternalOrganismID   *fhir.String      `json:"maternalOrganismId"`
		MaternalOrganismName *fhir.String      `json:"maternalOrganismName"`
		ModifierExtension    []*fhir.Extension `json:"modifierExtension"`
		PaternalOrganismID   *fhir.String      `json:"paternalOrganismId"`
		PaternalOrganismName *fhir.String      `json:"paternalOrganismName"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ssmoh.Extension = raw.Extension
	ssmoh.HybridType = raw.HybridType
	ssmoh.ID = raw.ID
	ssmoh.MaternalOrganismID = raw.MaternalOrganismID
	ssmoh.MaternalOrganismName = raw.MaternalOrganismName
	ssmoh.ModifierExtension = raw.ModifierExtension
	ssmoh.PaternalOrganismID = raw.PaternalOrganismID
	ssmoh.PaternalOrganismName = raw.PaternalOrganismName
	return nil
}

var _ json.Marshaler = (*SubstanceSourceMaterialOrganismHybrid)(nil)
var _ json.Unmarshaler = (*SubstanceSourceMaterialOrganismHybrid)(nil)

func (ssmoog *SubstanceSourceMaterialOrganismOrganismGeneral) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ssmoog *SubstanceSourceMaterialOrganismOrganismGeneral) UnmarshalJSON(data []byte) error {
	var raw struct {
		Class     *fhir.CodeableConcept `json:"class"`
		Extension []*fhir.Extension     `json:"extension"`

		ID                string                `json:"id"`
		Kingdom           *fhir.CodeableConcept `json:"kingdom"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Order             *fhir.CodeableConcept `json:"order"`
		Phylum            *fhir.CodeableConcept `json:"phylum"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ssmoog.Class = raw.Class
	ssmoog.Extension = raw.Extension
	ssmoog.ID = raw.ID
	ssmoog.Kingdom = raw.Kingdom
	ssmoog.ModifierExtension = raw.ModifierExtension
	ssmoog.Order = raw.Order
	ssmoog.Phylum = raw.Phylum
	return nil
}

var _ json.Marshaler = (*SubstanceSourceMaterialOrganismOrganismGeneral)(nil)
var _ json.Unmarshaler = (*SubstanceSourceMaterialOrganismOrganismGeneral)(nil)

func (ssmpd *SubstanceSourceMaterialPartDescription) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ssmpd *SubstanceSourceMaterialPartDescription) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Part              *fhir.CodeableConcept `json:"part"`
		PartLocation      *fhir.CodeableConcept `json:"partLocation"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ssmpd.Extension = raw.Extension
	ssmpd.ID = raw.ID
	ssmpd.ModifierExtension = raw.ModifierExtension
	ssmpd.Part = raw.Part
	ssmpd.PartLocation = raw.PartLocation
	return nil
}

var _ json.Marshaler = (*SubstanceSourceMaterialPartDescription)(nil)
var _ json.Unmarshaler = (*SubstanceSourceMaterialPartDescription)(nil)
