// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package slot

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A slot of time on a schedule that may be available for booking appointments.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Slot
//   - Source File: StructureDefinition-Slot.json
type Slot struct {

	// The style of appointment or patient that may be booked in the slot (not
	// service type).
	AppointmentType *fhir.CodeableConcept `fhirpath:"appointmentType"`

	// Comments on the slot to describe any extended information. Such as custom
	// constraints on the slot.
	Comment *fhir.String `fhirpath:"comment"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Date/Time that the slot is to conclude.
	End *fhir.Instant `fhirpath:"end"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// External Ids for this item.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// This slot has already been overbooked, appointments are unlikely to be
	// accepted for this time.
	Overbooked *fhir.Boolean `fhirpath:"overbooked"`

	// The schedule resource that this slot defines an interval of status
	// information.
	Schedule *fhir.Reference `fhirpath:"schedule"`

	// A broad categorization of the service that is to be performed during this
	// appointment.
	ServiceCategory []*fhir.CodeableConcept `fhirpath:"serviceCategory"`

	// The type of appointments that can be booked into this slot (ideally this
	// would be an identifiable service - which is at a location, rather than the
	// location itself). If provided then this overrides the value provided on the
	// availability resource.
	ServiceType []*fhir.CodeableConcept `fhirpath:"serviceType"`

	// The specialty of a practitioner that would be required to perform the
	// service requested in this appointment.
	Specialty []*fhir.CodeableConcept `fhirpath:"specialty"`

	// Date/Time that the slot is to begin.
	Start *fhir.Instant `fhirpath:"start"`

	// busy | free | busy-unavailable | busy-tentative | entered-in-error.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAppointmentType returns the value of the field AppointmentType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetAppointmentType() *fhir.CodeableConcept {
	if s == nil {
		return nil
	}
	return s.AppointmentType
}

// GetComment returns the value of the field Comment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetComment() *fhir.String {
	if s == nil {
		return nil
	}
	return s.Comment
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetContained() []fhir.Resource {
	if s == nil {
		return nil
	}
	return s.Contained
}

// GetEnd returns the value of the field End.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetEnd() *fhir.Instant {
	if s == nil {
		return nil
	}
	return s.End
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetIdentifier() []*fhir.Identifier {
	if s == nil {
		return nil
	}
	return s.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetImplicitRules() *fhir.URI {
	if s == nil {
		return nil
	}
	return s.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetLanguage() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetMeta() *fhir.Meta {
	if s == nil {
		return nil
	}
	return s.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetModifierExtension() []*fhir.Extension {
	if s == nil {
		return nil
	}
	return s.ModifierExtension
}

// GetOverbooked returns the value of the field Overbooked.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetOverbooked() *fhir.Boolean {
	if s == nil {
		return nil
	}
	return s.Overbooked
}

// GetSchedule returns the value of the field Schedule.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetSchedule() *fhir.Reference {
	if s == nil {
		return nil
	}
	return s.Schedule
}

// GetServiceCategory returns the value of the field ServiceCategory.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetServiceCategory() []*fhir.CodeableConcept {
	if s == nil {
		return nil
	}
	return s.ServiceCategory
}

// GetServiceType returns the value of the field ServiceType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetServiceType() []*fhir.CodeableConcept {
	if s == nil {
		return nil
	}
	return s.ServiceType
}

// GetSpecialty returns the value of the field Specialty.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetSpecialty() []*fhir.CodeableConcept {
	if s == nil {
		return nil
	}
	return s.Specialty
}

// GetStart returns the value of the field Start.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetStart() *fhir.Instant {
	if s == nil {
		return nil
	}
	return s.Start
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetStatus() *fhir.Code {
	if s == nil {
		return nil
	}
	return s.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Slot) GetText() *fhir.Narrative {
	if s == nil {
		return nil
	}
	return s.Text
}
