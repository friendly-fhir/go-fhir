// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package flag

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Prospective warnings of potential issues when providing care to the patient.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Flag
//   - Source File: StructureDefinition-Flag.json
type Flag struct {

	// The person, organization or device that created the flag.
	Author *fhir.Reference `fhirpath:"author"`

	// Allows a flag to be divided into different categories like clinical,
	// administrative etc. Intended to be used as a means of filtering which flags
	// are displayed to particular user or in a given context.
	Category []*fhir.CodeableConcept `fhirpath:"category"`

	// The coded value or textual component of the flag to display to the user.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// This alert is only relevant during the encounter.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifiers assigned to this flag by the performer or other systems
	// which remain constant as the resource is updated and propagates from server
	// to server.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The period of time from the activation of the flag to inactivation of the
	// flag. If the flag is active, the end of the period should be unspecified.
	Period *fhir.Period `fhirpath:"period"`

	// Supports basic workflow.
	Status *fhir.Code `fhirpath:"status"`

	// The patient, location, group, organization, or practitioner etc. this is
	// about record this flag is associated with.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetAuthor() *fhir.Reference {
	if f == nil {
		return nil
	}
	return f.Author
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetCategory() []*fhir.CodeableConcept {
	if f == nil {
		return nil
	}
	return f.Category
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetCode() *fhir.CodeableConcept {
	if f == nil {
		return nil
	}
	return f.Code
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetContained() []fhir.Resource {
	if f == nil {
		return nil
	}
	return f.Contained
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetEncounter() *fhir.Reference {
	if f == nil {
		return nil
	}
	return f.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetExtension() []*fhir.Extension {
	if f == nil {
		return nil
	}
	return f.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetIdentifier() []*fhir.Identifier {
	if f == nil {
		return nil
	}
	return f.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetImplicitRules() *fhir.URI {
	if f == nil {
		return nil
	}
	return f.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetLanguage() *fhir.Code {
	if f == nil {
		return nil
	}
	return f.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetMeta() *fhir.Meta {
	if f == nil {
		return nil
	}
	return f.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetModifierExtension() []*fhir.Extension {
	if f == nil {
		return nil
	}
	return f.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetPeriod() *fhir.Period {
	if f == nil {
		return nil
	}
	return f.Period
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetStatus() *fhir.Code {
	if f == nil {
		return nil
	}
	return f.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetSubject() *fhir.Reference {
	if f == nil {
		return nil
	}
	return f.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (f *Flag) GetText() *fhir.Narrative {
	if f == nil {
		return nil
	}
	return f.Text
}
