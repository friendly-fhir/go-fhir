// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package biologicallyderivedproduct

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A material substance originating from a biological entity intended to be
// transplanted or infused into another (possibly the same) biological entity.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProduct
//   - Source File: StructureDefinition-BiologicallyDerivedProduct.json
type BiologicallyDerivedProduct struct {

	// How this product was collected.
	Collection *BiologicallyDerivedProductCollection `fhirpath:"collection"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// This records identifiers associated with this biologically derived product
	// instance that are defined by business processes and/or used to refer to it
	// when a direct URL reference to the resource itself is not appropriate (e.g.
	// in CDA documents, or in written / printed documentation).
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Any manipulation of product post-collection that is intended to alter the
	// product. For example a buffy-coat enrichment or CD8 reduction of Peripheral
	// Blood Stem Cells to make it more suitable for infusion.
	Manipulation *BiologicallyDerivedProductManipulation `fhirpath:"manipulation"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Parent product (if any).
	Parent []*fhir.Reference `fhirpath:"parent"`

	// Any processing of the product during collection that does not change the
	// fundamental nature of the product. For example adding anti-coagulants during
	// the collection of Peripheral Blood Stem Cells.
	Processing []*BiologicallyDerivedProductProcessing `fhirpath:"processing"`

	// Broad category of this product.
	ProductCategory *fhir.Code `fhirpath:"productCategory"`

	// A code that identifies the kind of this biologically derived product (SNOMED
	// Ctcode).
	ProductCode *fhir.CodeableConcept `fhirpath:"productCode"`

	// Number of discrete units within this product.
	Quantity *fhir.Integer `fhirpath:"quantity"`

	// Procedure request to obtain this biologically derived product.
	Request []*fhir.Reference `fhirpath:"request"`

	// Whether the product is currently available.
	Status *fhir.Code `fhirpath:"status"`

	// Product storage.
	Storage []*BiologicallyDerivedProductStorage `fhirpath:"storage"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetCollection returns the value of the field Collection.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetCollection() *BiologicallyDerivedProductCollection {
	if bdp == nil {
		return nil
	}
	return bdp.Collection
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetContained() []fhir.Resource {
	if bdp == nil {
		return nil
	}
	return bdp.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetExtension() []*fhir.Extension {
	if bdp == nil {
		return nil
	}
	return bdp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetID() string {
	if bdp == nil {
		return ""
	}
	return bdp.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetIdentifier() []*fhir.Identifier {
	if bdp == nil {
		return nil
	}
	return bdp.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetImplicitRules() *fhir.URI {
	if bdp == nil {
		return nil
	}
	return bdp.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetLanguage() *fhir.Code {
	if bdp == nil {
		return nil
	}
	return bdp.Language
}

// GetManipulation returns the value of the field Manipulation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetManipulation() *BiologicallyDerivedProductManipulation {
	if bdp == nil {
		return nil
	}
	return bdp.Manipulation
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetMeta() *fhir.Meta {
	if bdp == nil {
		return nil
	}
	return bdp.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetModifierExtension() []*fhir.Extension {
	if bdp == nil {
		return nil
	}
	return bdp.ModifierExtension
}

// GetParent returns the value of the field Parent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetParent() []*fhir.Reference {
	if bdp == nil {
		return nil
	}
	return bdp.Parent
}

// GetProcessing returns the value of the field Processing.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetProcessing() []*BiologicallyDerivedProductProcessing {
	if bdp == nil {
		return nil
	}
	return bdp.Processing
}

// GetProductCategory returns the value of the field ProductCategory.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetProductCategory() *fhir.Code {
	if bdp == nil {
		return nil
	}
	return bdp.ProductCategory
}

// GetProductCode returns the value of the field ProductCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetProductCode() *fhir.CodeableConcept {
	if bdp == nil {
		return nil
	}
	return bdp.ProductCode
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetQuantity() *fhir.Integer {
	if bdp == nil {
		return nil
	}
	return bdp.Quantity
}

// GetRequest returns the value of the field Request.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetRequest() []*fhir.Reference {
	if bdp == nil {
		return nil
	}
	return bdp.Request
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetStatus() *fhir.Code {
	if bdp == nil {
		return nil
	}
	return bdp.Status
}

// GetStorage returns the value of the field Storage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetStorage() []*BiologicallyDerivedProductStorage {
	if bdp == nil {
		return nil
	}
	return bdp.Storage
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdp *BiologicallyDerivedProduct) GetText() *fhir.Narrative {
	if bdp == nil {
		return nil
	}
	return bdp.Text
}

// How this product was collected// How this product was collected.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-BiologicallyDerivedProduct.json
type BiologicallyDerivedProductCollection struct {

	// Time of product collection.
	Collected fhir.Element `fhirpath:"collected"`

	// Healthcare professional who is performing the collection.
	Collector *fhir.Reference `fhirpath:"collector"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The patient or entity, such as a hospital or vendor in the case of a
	// processed/manipulated/manufactured product, providing the product.
	Source *fhir.Reference `fhirpath:"source"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCollected returns the value of the field Collected.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpc *BiologicallyDerivedProductCollection) GetCollected() fhir.Element {
	if bdpc == nil {
		return nil
	}
	return bdpc.Collected
}

// GetCollectedDateTime returns the value of the field Collected.
func (bdpc *BiologicallyDerivedProductCollection) GetCollectedDateTime() *fhir.DateTime {
	if bdpc == nil {
		return nil
	}
	val, ok := bdpc.Collected.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetCollectedPeriod returns the value of the field Collected.
func (bdpc *BiologicallyDerivedProductCollection) GetCollectedPeriod() *fhir.Period {
	if bdpc == nil {
		return nil
	}
	val, ok := bdpc.Collected.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetCollector returns the value of the field Collector.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpc *BiologicallyDerivedProductCollection) GetCollector() *fhir.Reference {
	if bdpc == nil {
		return nil
	}
	return bdpc.Collector
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpc *BiologicallyDerivedProductCollection) GetExtension() []*fhir.Extension {
	if bdpc == nil {
		return nil
	}
	return bdpc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpc *BiologicallyDerivedProductCollection) GetID() string {
	if bdpc == nil {
		return ""
	}
	return bdpc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpc *BiologicallyDerivedProductCollection) GetModifierExtension() []*fhir.Extension {
	if bdpc == nil {
		return nil
	}
	return bdpc.ModifierExtension
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpc *BiologicallyDerivedProductCollection) GetSource() *fhir.Reference {
	if bdpc == nil {
		return nil
	}
	return bdpc.Source
}

// Any manipulation of product post-collection// Any manipulation of product post-collection that is intended to alter the
// product. For example a buffy-coat enrichment or CD8 reduction of Peripheral
// Blood Stem Cells to make it more suitable for infusion.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-BiologicallyDerivedProduct.json
type BiologicallyDerivedProductManipulation struct {

	// Description of manipulation.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Time of manipulation.
	Time fhir.Element `fhirpath:"time"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpm *BiologicallyDerivedProductManipulation) GetDescription() *fhir.String {
	if bdpm == nil {
		return nil
	}
	return bdpm.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpm *BiologicallyDerivedProductManipulation) GetExtension() []*fhir.Extension {
	if bdpm == nil {
		return nil
	}
	return bdpm.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpm *BiologicallyDerivedProductManipulation) GetID() string {
	if bdpm == nil {
		return ""
	}
	return bdpm.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpm *BiologicallyDerivedProductManipulation) GetModifierExtension() []*fhir.Extension {
	if bdpm == nil {
		return nil
	}
	return bdpm.ModifierExtension
}

// GetTime returns the value of the field Time.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpm *BiologicallyDerivedProductManipulation) GetTime() fhir.Element {
	if bdpm == nil {
		return nil
	}
	return bdpm.Time
}

// GetTimeDateTime returns the value of the field Time.
func (bdpm *BiologicallyDerivedProductManipulation) GetTimeDateTime() *fhir.DateTime {
	if bdpm == nil {
		return nil
	}
	val, ok := bdpm.Time.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetTimePeriod returns the value of the field Time.
func (bdpm *BiologicallyDerivedProductManipulation) GetTimePeriod() *fhir.Period {
	if bdpm == nil {
		return nil
	}
	val, ok := bdpm.Time.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// Any processing of the product during collection// Any processing of the product during collection that does not change the
// fundamental nature of the product. For example adding anti-coagulants during
// the collection of Peripheral Blood Stem Cells.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-BiologicallyDerivedProduct.json
type BiologicallyDerivedProductProcessing struct {

	// Substance added during processing.
	Additive *fhir.Reference `fhirpath:"additive"`

	// Description of of processing.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Procesing code.
	Procedure *fhir.CodeableConcept `fhirpath:"procedure"`

	// Time of processing.
	Time fhir.Element `fhirpath:"time"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAdditive returns the value of the field Additive.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpp *BiologicallyDerivedProductProcessing) GetAdditive() *fhir.Reference {
	if bdpp == nil {
		return nil
	}
	return bdpp.Additive
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpp *BiologicallyDerivedProductProcessing) GetDescription() *fhir.String {
	if bdpp == nil {
		return nil
	}
	return bdpp.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpp *BiologicallyDerivedProductProcessing) GetExtension() []*fhir.Extension {
	if bdpp == nil {
		return nil
	}
	return bdpp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpp *BiologicallyDerivedProductProcessing) GetID() string {
	if bdpp == nil {
		return ""
	}
	return bdpp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpp *BiologicallyDerivedProductProcessing) GetModifierExtension() []*fhir.Extension {
	if bdpp == nil {
		return nil
	}
	return bdpp.ModifierExtension
}

// GetProcedure returns the value of the field Procedure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpp *BiologicallyDerivedProductProcessing) GetProcedure() *fhir.CodeableConcept {
	if bdpp == nil {
		return nil
	}
	return bdpp.Procedure
}

// GetTime returns the value of the field Time.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdpp *BiologicallyDerivedProductProcessing) GetTime() fhir.Element {
	if bdpp == nil {
		return nil
	}
	return bdpp.Time
}

// GetTimeDateTime returns the value of the field Time.
func (bdpp *BiologicallyDerivedProductProcessing) GetTimeDateTime() *fhir.DateTime {
	if bdpp == nil {
		return nil
	}
	val, ok := bdpp.Time.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetTimePeriod returns the value of the field Time.
func (bdpp *BiologicallyDerivedProductProcessing) GetTimePeriod() *fhir.Period {
	if bdpp == nil {
		return nil
	}
	val, ok := bdpp.Time.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// Product storage// Product storage.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-BiologicallyDerivedProduct.json
type BiologicallyDerivedProductStorage struct {

	// Description of storage.
	Description *fhir.String `fhirpath:"description"`

	// Storage timeperiod.
	Duration *fhir.Period `fhirpath:"duration"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Temperature scale used.
	Scale *fhir.Code `fhirpath:"scale"`

	// Storage temperature.
	Temperature *fhir.Decimal `fhirpath:"temperature"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdps *BiologicallyDerivedProductStorage) GetDescription() *fhir.String {
	if bdps == nil {
		return nil
	}
	return bdps.Description
}

// GetDuration returns the value of the field Duration.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdps *BiologicallyDerivedProductStorage) GetDuration() *fhir.Period {
	if bdps == nil {
		return nil
	}
	return bdps.Duration
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdps *BiologicallyDerivedProductStorage) GetExtension() []*fhir.Extension {
	if bdps == nil {
		return nil
	}
	return bdps.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdps *BiologicallyDerivedProductStorage) GetID() string {
	if bdps == nil {
		return ""
	}
	return bdps.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdps *BiologicallyDerivedProductStorage) GetModifierExtension() []*fhir.Extension {
	if bdps == nil {
		return nil
	}
	return bdps.ModifierExtension
}

// GetScale returns the value of the field Scale.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdps *BiologicallyDerivedProductStorage) GetScale() *fhir.Code {
	if bdps == nil {
		return nil
	}
	return bdps.Scale
}

// GetTemperature returns the value of the field Temperature.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (bdps *BiologicallyDerivedProductStorage) GetTemperature() *fhir.Decimal {
	if bdps == nil {
		return nil
	}
	return bdps.Temperature
}

func (bdp *BiologicallyDerivedProduct) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (bdp *BiologicallyDerivedProduct) UnmarshalJSON(data []byte) error {
	var raw struct {
		Collection *BiologicallyDerivedProductCollection `json:"collection"`
		Contained  []fhir.Resource                       `json:"contained"`
		Extension  []*fhir.Extension                     `json:"extension"`

		ID                string                                  `json:"id"`
		Identifier        []*fhir.Identifier                      `json:"identifier"`
		ImplicitRules     *fhir.URI                               `json:"implicitRules"`
		Language          *fhir.Code                              `json:"language"`
		Manipulation      *BiologicallyDerivedProductManipulation `json:"manipulation"`
		Meta              *fhir.Meta                              `json:"meta"`
		ModifierExtension []*fhir.Extension                       `json:"modifierExtension"`
		Parent            []*fhir.Reference                       `json:"parent"`
		Processing        []*BiologicallyDerivedProductProcessing `json:"processing"`
		ProductCategory   *fhir.Code                              `json:"productCategory"`
		ProductCode       *fhir.CodeableConcept                   `json:"productCode"`
		Quantity          *fhir.Integer                           `json:"quantity"`
		Request           []*fhir.Reference                       `json:"request"`
		Status            *fhir.Code                              `json:"status"`
		Storage           []*BiologicallyDerivedProductStorage    `json:"storage"`
		Text              *fhir.Narrative                         `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	bdp.Collection = raw.Collection
	bdp.Contained = raw.Contained
	bdp.Extension = raw.Extension
	bdp.ID = raw.ID
	bdp.Identifier = raw.Identifier
	bdp.ImplicitRules = raw.ImplicitRules
	bdp.Language = raw.Language
	bdp.Manipulation = raw.Manipulation
	bdp.Meta = raw.Meta
	bdp.ModifierExtension = raw.ModifierExtension
	bdp.Parent = raw.Parent
	bdp.Processing = raw.Processing
	bdp.ProductCategory = raw.ProductCategory
	bdp.ProductCode = raw.ProductCode
	bdp.Quantity = raw.Quantity
	bdp.Request = raw.Request
	bdp.Status = raw.Status
	bdp.Storage = raw.Storage
	bdp.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*BiologicallyDerivedProduct)(nil)
var _ json.Unmarshaler = (*BiologicallyDerivedProduct)(nil)

func (bdpc *BiologicallyDerivedProductCollection) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (bdpc *BiologicallyDerivedProductCollection) UnmarshalJSON(data []byte) error {
	var raw struct {
		CollectedDateTime *fhir.DateTime    `json:"collectedDateTime"`
		CollectedPeriod   *fhir.Period      `json:"collectedPeriod"`
		Collector         *fhir.Reference   `json:"collector"`
		Extension         []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Source            *fhir.Reference   `json:"source"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	bdpc.Collected, err = validate.SelectOneOf[fhir.Element]("BiologicallyDerivedProduct.collection.collected",
		raw.CollectedDateTime,
		raw.CollectedPeriod)
	if err != nil {
		return err
	}
	bdpc.Collector = raw.Collector
	bdpc.Extension = raw.Extension
	bdpc.ID = raw.ID
	bdpc.ModifierExtension = raw.ModifierExtension
	bdpc.Source = raw.Source
	return nil
}

var _ json.Marshaler = (*BiologicallyDerivedProductCollection)(nil)
var _ json.Unmarshaler = (*BiologicallyDerivedProductCollection)(nil)

func (bdpm *BiologicallyDerivedProductManipulation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (bdpm *BiologicallyDerivedProductManipulation) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description *fhir.String      `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		TimeDateTime      *fhir.DateTime    `json:"timeDateTime"`
		TimePeriod        *fhir.Period      `json:"timePeriod"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	bdpm.Description = raw.Description
	bdpm.Extension = raw.Extension
	bdpm.ID = raw.ID
	bdpm.ModifierExtension = raw.ModifierExtension
	bdpm.Time, err = validate.SelectOneOf[fhir.Element]("BiologicallyDerivedProduct.manipulation.time",
		raw.TimeDateTime,
		raw.TimePeriod)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*BiologicallyDerivedProductManipulation)(nil)
var _ json.Unmarshaler = (*BiologicallyDerivedProductManipulation)(nil)

func (bdpp *BiologicallyDerivedProductProcessing) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (bdpp *BiologicallyDerivedProductProcessing) UnmarshalJSON(data []byte) error {
	var raw struct {
		Additive    *fhir.Reference   `json:"additive"`
		Description *fhir.String      `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Procedure         *fhir.CodeableConcept `json:"procedure"`
		TimeDateTime      *fhir.DateTime        `json:"timeDateTime"`
		TimePeriod        *fhir.Period          `json:"timePeriod"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	bdpp.Additive = raw.Additive
	bdpp.Description = raw.Description
	bdpp.Extension = raw.Extension
	bdpp.ID = raw.ID
	bdpp.ModifierExtension = raw.ModifierExtension
	bdpp.Procedure = raw.Procedure
	bdpp.Time, err = validate.SelectOneOf[fhir.Element]("BiologicallyDerivedProduct.processing.time",
		raw.TimeDateTime,
		raw.TimePeriod)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*BiologicallyDerivedProductProcessing)(nil)
var _ json.Unmarshaler = (*BiologicallyDerivedProductProcessing)(nil)

func (bdps *BiologicallyDerivedProductStorage) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (bdps *BiologicallyDerivedProductStorage) UnmarshalJSON(data []byte) error {
	var raw struct {
		Description *fhir.String      `json:"description"`
		Duration    *fhir.Period      `json:"duration"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Scale             *fhir.Code        `json:"scale"`
		Temperature       *fhir.Decimal     `json:"temperature"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	bdps.Description = raw.Description
	bdps.Duration = raw.Duration
	bdps.Extension = raw.Extension
	bdps.ID = raw.ID
	bdps.ModifierExtension = raw.ModifierExtension
	bdps.Scale = raw.Scale
	bdps.Temperature = raw.Temperature
	return nil
}

var _ json.Marshaler = (*BiologicallyDerivedProductStorage)(nil)
var _ json.Unmarshaler = (*BiologicallyDerivedProductStorage)(nil)
