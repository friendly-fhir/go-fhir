// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package measure

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// The Measure resource provides the definition of a quality measure.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Measure
//   - Source File: StructureDefinition-Measure.json
type Measure struct {

	// The date on which the resource content was approved by the publisher.
	// Approval happens once when the content is officially approved for usage.
	ApprovalDate *fhir.Date `fhirpath:"approvalDate"`

	// An individiual or organization primarily involved in the creation and
	// maintenance of the content.
	Author []*fhir.ContactDetail `fhirpath:"author"`

	// Provides a summary of relevant clinical guidelines or other clinical
	// recommendations supporting the measure.
	ClinicalRecommendationStatement *fhir.Markdown `fhirpath:"clinicalRecommendationStatement"`

	// If this is a composite measure, the scoring method used to combine the
	// component measures to determine the composite score.
	CompositeScoring *fhir.CodeableConcept `fhirpath:"compositeScoring"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the measure and/or its contents. Copyright
	// statements are generally legal restrictions on the use and publishing of the
	// measure.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the measure was published. The date must
	// change when the business version changes and it must change if the status
	// code changes. In addition, it should change when the substantive content of
	// the measure changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// Provides a description of an individual term used within the measure.
	Definition []*fhir.Markdown `fhirpath:"definition"`

	// A free text natural language description of the measure from a consumer's
	// perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// Notices and disclaimers regarding the use of the measure or related to
	// intellectual property (such as code systems) referenced by the measure.
	Disclaimer *fhir.Markdown `fhirpath:"disclaimer"`

	// An individual or organization primarily responsible for internal coherence
	// of the content.
	Editor []*fhir.ContactDetail `fhirpath:"editor"`

	// The period during which the measure content was or is planned to be in
	// active use.
	EffectivePeriod *fhir.Period `fhirpath:"effectivePeriod"`

	// An individual or organization responsible for officially endorsing the
	// content for use in some setting.
	Endorser []*fhir.ContactDetail `fhirpath:"endorser"`

	// A Boolean value to indicate that this measure is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used
	// for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A group of population criteria for the measure.
	Group []*MeasureGroup `fhirpath:"group"`

	// Additional guidance for the measure including how it can be used in a
	// clinical context, and the intent of the measure.
	Guidance *fhir.Markdown `fhirpath:"guidance"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this measure when it is
	// represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Information on whether an increase or decrease in score is the preferred
	// result (e.g., a higher score indicates better quality OR a lower score
	// indicates better quality OR quality is within a range).
	ImprovementNotation *fhir.CodeableConcept `fhirpath:"improvementNotation"`

	// A legal or geographic region in which the measure is intended to be used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The date on which the resource content was last reviewed. Review happens
	// periodically after approval but does not change the original approval date.
	LastReviewDate *fhir.Date `fhirpath:"lastReviewDate"`

	// A reference to a Library resource containing the formal logic used by the
	// measure.
	Library []*fhir.Canonical `fhirpath:"library"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the measure. This name should be usable
	// as an identifier for the module by machine processing applications such as
	// code generation.
	Name *fhir.String `fhirpath:"name"`

	// The name of the organization or individual that published the measure.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this measure is needed and why it has been designed as it
	// has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// Describes how to combine the information calculated, based on logic in each
	// of several populations, into one summarized result.
	RateAggregation *fhir.String `fhirpath:"rateAggregation"`

	// Provides a succinct statement of the need for the measure. Usually includes
	// statements pertaining to importance criterion: impact, gap in care, and
	// evidence.
	Rationale *fhir.Markdown `fhirpath:"rationale"`

	// Related artifacts such as additional documentation, justification, or
	// bibliographic references.
	RelatedArtifact []*fhir.RelatedArtifact `fhirpath:"relatedArtifact"`

	// An individual or organization primarily responsible for review of some
	// aspect of the content.
	Reviewer []*fhir.ContactDetail `fhirpath:"reviewer"`

	// A description of the risk adjustment factors that may impact the resulting
	// score for the measure and how they may be accounted for when computing and
	// reporting measure results.
	RiskAdjustment *fhir.String `fhirpath:"riskAdjustment"`

	// Indicates how the calculation is performed for the measure, including
	// proportion, ratio, continuous-variable, and cohort. The value set is
	// extensible, allowing additional measure scoring types to be represented.
	Scoring *fhir.CodeableConcept `fhirpath:"scoring"`

	// The status of this measure. Enables tracking the life-cycle of the content.
	Status *fhir.Code `fhirpath:"status"`

	// The intended subjects for the measure. If this element is not provided, a
	// Patient subject is assumed, but the subject of the measure can be anything.
	Subject fhir.Element `fhirpath:"subject"`

	// An explanatory or alternate title for the measure giving additional
	// information about its content.
	Subtitle *fhir.String `fhirpath:"subtitle"`

	// The supplemental data criteria for the measure report, specified as either
	// the name of a valid CQL expression within a referenced library, or a valid
	// FHIR Resource Path.
	SupplementalData []*MeasureSupplementalData `fhirpath:"supplementalData"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the measure.
	Title *fhir.String `fhirpath:"title"`

	// Descriptive topics related to the content of the measure. Topics provide a
	// high-level categorization grouping types of measures that can be useful for
	// filtering and searching.
	Topic []*fhir.CodeableConcept `fhirpath:"topic"`

	// Indicates whether the measure is used to examine a process, an outcome over
	// time, a patient-reported outcome, or a structure measure such as
	// utilization.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	// An absolute URI that is used to identify this measure when it is referenced
	// in a specification, model, design or an instance; also called its canonical
	// identifier. This SHOULD be globally unique and SHOULD be a literal address
	// at which at which an authoritative instance of this measure is (or will be)
	// published. This URL can be the target of a canonical reference. It SHALL
	// remain the same when the measure is stored on different servers.
	URL *fhir.URI `fhirpath:"url"`

	// A detailed description, from a clinical perspective, of how the measure is
	// used.
	Usage *fhir.String `fhirpath:"usage"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// measure instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the measure when it
	// is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the measure author and is not expected to be
	// globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
	// managed version is not available. There is also no expectation that versions
	// can be placed in a lexicographical sequence. To provide a version consistent
	// with the Decision Support Service specification, use the format
	// Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
	// knowledge assets, refer to the Decision Support Service specification. Note
	// that a version is required for non-experimental active artifacts.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseMeasure
	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetApprovalDate returns the value of the field ApprovalDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetApprovalDate() *fhir.Date {
	if m == nil {
		return nil
	}
	return m.ApprovalDate
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetAuthor() []*fhir.ContactDetail {
	if m == nil {
		return nil
	}
	return m.Author
}

// GetClinicalRecommendationStatement returns the value of the field ClinicalRecommendationStatement.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetClinicalRecommendationStatement() *fhir.Markdown {
	if m == nil {
		return nil
	}
	return m.ClinicalRecommendationStatement
}

// GetCompositeScoring returns the value of the field CompositeScoring.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetCompositeScoring() *fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.CompositeScoring
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetContact() []*fhir.ContactDetail {
	if m == nil {
		return nil
	}
	return m.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetContained() []fhir.Resource {
	if m == nil {
		return nil
	}
	return m.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetCopyright() *fhir.Markdown {
	if m == nil {
		return nil
	}
	return m.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetDate() *fhir.DateTime {
	if m == nil {
		return nil
	}
	return m.Date
}

// GetDefinition returns the value of the field Definition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetDefinition() []*fhir.Markdown {
	if m == nil {
		return nil
	}
	return m.Definition
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetDescription() *fhir.Markdown {
	if m == nil {
		return nil
	}
	return m.Description
}

// GetDisclaimer returns the value of the field Disclaimer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetDisclaimer() *fhir.Markdown {
	if m == nil {
		return nil
	}
	return m.Disclaimer
}

// GetEditor returns the value of the field Editor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetEditor() []*fhir.ContactDetail {
	if m == nil {
		return nil
	}
	return m.Editor
}

// GetEffectivePeriod returns the value of the field EffectivePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetEffectivePeriod() *fhir.Period {
	if m == nil {
		return nil
	}
	return m.EffectivePeriod
}

// GetEndorser returns the value of the field Endorser.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetEndorser() []*fhir.ContactDetail {
	if m == nil {
		return nil
	}
	return m.Endorser
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetExperimental() *fhir.Boolean {
	if m == nil {
		return nil
	}
	return m.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetExtension() []*fhir.Extension {
	if m == nil {
		return nil
	}
	return m.Extension
}

// GetGroup returns the value of the field Group.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetGroup() []*MeasureGroup {
	if m == nil {
		return nil
	}
	return m.Group
}

// GetGuidance returns the value of the field Guidance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetGuidance() *fhir.Markdown {
	if m == nil {
		return nil
	}
	return m.Guidance
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetIdentifier() []*fhir.Identifier {
	if m == nil {
		return nil
	}
	return m.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetImplicitRules() *fhir.URI {
	if m == nil {
		return nil
	}
	return m.ImplicitRules
}

// GetImprovementNotation returns the value of the field ImprovementNotation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetImprovementNotation() *fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.ImprovementNotation
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetJurisdiction() []*fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetLanguage() *fhir.Code {
	if m == nil {
		return nil
	}
	return m.Language
}

// GetLastReviewDate returns the value of the field LastReviewDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetLastReviewDate() *fhir.Date {
	if m == nil {
		return nil
	}
	return m.LastReviewDate
}

// GetLibrary returns the value of the field Library.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetLibrary() []*fhir.Canonical {
	if m == nil {
		return nil
	}
	return m.Library
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetMeta() *fhir.Meta {
	if m == nil {
		return nil
	}
	return m.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetModifierExtension() []*fhir.Extension {
	if m == nil {
		return nil
	}
	return m.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetName() *fhir.String {
	if m == nil {
		return nil
	}
	return m.Name
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetPublisher() *fhir.String {
	if m == nil {
		return nil
	}
	return m.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetPurpose() *fhir.Markdown {
	if m == nil {
		return nil
	}
	return m.Purpose
}

// GetRateAggregation returns the value of the field RateAggregation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetRateAggregation() *fhir.String {
	if m == nil {
		return nil
	}
	return m.RateAggregation
}

// GetRationale returns the value of the field Rationale.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetRationale() *fhir.Markdown {
	if m == nil {
		return nil
	}
	return m.Rationale
}

// GetRelatedArtifact returns the value of the field RelatedArtifact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetRelatedArtifact() []*fhir.RelatedArtifact {
	if m == nil {
		return nil
	}
	return m.RelatedArtifact
}

// GetReviewer returns the value of the field Reviewer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetReviewer() []*fhir.ContactDetail {
	if m == nil {
		return nil
	}
	return m.Reviewer
}

// GetRiskAdjustment returns the value of the field RiskAdjustment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetRiskAdjustment() *fhir.String {
	if m == nil {
		return nil
	}
	return m.RiskAdjustment
}

// GetScoring returns the value of the field Scoring.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetScoring() *fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.Scoring
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetStatus() *fhir.Code {
	if m == nil {
		return nil
	}
	return m.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetSubject() fhir.Element {
	if m == nil {
		return nil
	}
	return m.Subject
}

// GetSubjectCodeableConcept returns the value of the field Subject.
func (m *Measure) GetSubjectCodeableConcept() *fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	val, ok := m.Subject.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetSubjectReference returns the value of the field Subject.
func (m *Measure) GetSubjectReference() *fhir.Reference {
	if m == nil {
		return nil
	}
	val, ok := m.Subject.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetSubtitle returns the value of the field Subtitle.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetSubtitle() *fhir.String {
	if m == nil {
		return nil
	}
	return m.Subtitle
}

// GetSupplementalData returns the value of the field SupplementalData.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetSupplementalData() []*MeasureSupplementalData {
	if m == nil {
		return nil
	}
	return m.SupplementalData
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetText() *fhir.Narrative {
	if m == nil {
		return nil
	}
	return m.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetTitle() *fhir.String {
	if m == nil {
		return nil
	}
	return m.Title
}

// GetTopic returns the value of the field Topic.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetTopic() []*fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.Topic
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetType() []*fhir.CodeableConcept {
	if m == nil {
		return nil
	}
	return m.Type
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetURL() *fhir.URI {
	if m == nil {
		return nil
	}
	return m.URL
}

// GetUsage returns the value of the field Usage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetUsage() *fhir.String {
	if m == nil {
		return nil
	}
	return m.Usage
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetUseContext() []*fhir.UsageContext {
	if m == nil {
		return nil
	}
	return m.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Measure) GetVersion() *fhir.String {
	if m == nil {
		return nil
	}
	return m.Version
}

// Population criteria group// A group of population criteria for the measure.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Measure.json
type MeasureGroup struct {

	// Indicates a meaning for the group. This can be as simple as a unique
	// identifier, or it can establish meaning in a broader context by drawing from
	// a terminology, allowing groups to be correlated across measures.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// The human readable description of this population group.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A population criteria for the measure.
	Population []*MeasureGroupPopulation `fhirpath:"population"`

	// The stratifier criteria for the measure report, specified as either the name
	// of a valid CQL expression defined within a referenced library or a valid
	// FHIR Resource Path.
	Stratifier []*MeasureGroupStratifier `fhirpath:"stratifier"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mg *MeasureGroup) GetCode() *fhir.CodeableConcept {
	if mg == nil {
		return nil
	}
	return mg.Code
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mg *MeasureGroup) GetDescription() *fhir.String {
	if mg == nil {
		return nil
	}
	return mg.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mg *MeasureGroup) GetExtension() []*fhir.Extension {
	if mg == nil {
		return nil
	}
	return mg.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mg *MeasureGroup) GetID() string {
	if mg == nil {
		return ""
	}
	return mg.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mg *MeasureGroup) GetModifierExtension() []*fhir.Extension {
	if mg == nil {
		return nil
	}
	return mg.ModifierExtension
}

// GetPopulation returns the value of the field Population.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mg *MeasureGroup) GetPopulation() []*MeasureGroupPopulation {
	if mg == nil {
		return nil
	}
	return mg.Population
}

// GetStratifier returns the value of the field Stratifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mg *MeasureGroup) GetStratifier() []*MeasureGroupStratifier {
	if mg == nil {
		return nil
	}
	return mg.Stratifier
}

// Population criteria// A population criteria for the measure.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Measure.json
type MeasureGroupPopulation struct {

	// The type of population criteria.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// An expression that specifies the criteria for the population, typically the
	// name of an expression in a library.
	Criteria *fhir.Expression `fhirpath:"criteria"`

	// The human readable description of this population criteria.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgp *MeasureGroupPopulation) GetCode() *fhir.CodeableConcept {
	if mgp == nil {
		return nil
	}
	return mgp.Code
}

// GetCriteria returns the value of the field Criteria.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgp *MeasureGroupPopulation) GetCriteria() *fhir.Expression {
	if mgp == nil {
		return nil
	}
	return mgp.Criteria
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgp *MeasureGroupPopulation) GetDescription() *fhir.String {
	if mgp == nil {
		return nil
	}
	return mgp.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgp *MeasureGroupPopulation) GetExtension() []*fhir.Extension {
	if mgp == nil {
		return nil
	}
	return mgp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgp *MeasureGroupPopulation) GetID() string {
	if mgp == nil {
		return ""
	}
	return mgp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgp *MeasureGroupPopulation) GetModifierExtension() []*fhir.Extension {
	if mgp == nil {
		return nil
	}
	return mgp.ModifierExtension
}

// Stratifier criteria for the measure// The stratifier criteria for the measure report, specified as either the name
// of a valid CQL expression defined within a referenced library or a valid
// FHIR Resource Path.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Measure.json
type MeasureGroupStratifier struct {

	// Indicates a meaning for the stratifier. This can be as simple as a unique
	// identifier, or it can establish meaning in a broader context by drawing from
	// a terminology, allowing stratifiers to be correlated across measures.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// A component of the stratifier criteria for the measure report, specified as
	// either the name of a valid CQL expression defined within a referenced
	// library or a valid FHIR Resource Path.
	Component []*MeasureGroupStratifierComponent `fhirpath:"component"`

	// An expression that specifies the criteria for the stratifier. This is
	// typically the name of an expression defined within a referenced library, but
	// it may also be a path to a stratifier element.
	Criteria *fhir.Expression `fhirpath:"criteria"`

	// The human readable description of this stratifier criteria.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgs *MeasureGroupStratifier) GetCode() *fhir.CodeableConcept {
	if mgs == nil {
		return nil
	}
	return mgs.Code
}

// GetComponent returns the value of the field Component.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgs *MeasureGroupStratifier) GetComponent() []*MeasureGroupStratifierComponent {
	if mgs == nil {
		return nil
	}
	return mgs.Component
}

// GetCriteria returns the value of the field Criteria.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgs *MeasureGroupStratifier) GetCriteria() *fhir.Expression {
	if mgs == nil {
		return nil
	}
	return mgs.Criteria
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgs *MeasureGroupStratifier) GetDescription() *fhir.String {
	if mgs == nil {
		return nil
	}
	return mgs.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgs *MeasureGroupStratifier) GetExtension() []*fhir.Extension {
	if mgs == nil {
		return nil
	}
	return mgs.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgs *MeasureGroupStratifier) GetID() string {
	if mgs == nil {
		return ""
	}
	return mgs.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgs *MeasureGroupStratifier) GetModifierExtension() []*fhir.Extension {
	if mgs == nil {
		return nil
	}
	return mgs.ModifierExtension
}

// Stratifier criteria component for the measure// A component of the stratifier criteria for the measure report, specified as
// either the name of a valid CQL expression defined within a referenced
// library or a valid FHIR Resource Path.// Stratifiers are defined either as a single criteria, or as a set of
// component criteria.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Measure.json
type MeasureGroupStratifierComponent struct {

	// Indicates a meaning for the stratifier component. This can be as simple as a
	// unique identifier, or it can establish meaning in a broader context by
	// drawing from a terminology, allowing stratifiers to be correlated across
	// measures.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// An expression that specifies the criteria for this component of the
	// stratifier. This is typically the name of an expression defined within a
	// referenced library, but it may also be a path to a stratifier element.
	Criteria *fhir.Expression `fhirpath:"criteria"`

	// The human readable description of this stratifier criteria component.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgsc *MeasureGroupStratifierComponent) GetCode() *fhir.CodeableConcept {
	if mgsc == nil {
		return nil
	}
	return mgsc.Code
}

// GetCriteria returns the value of the field Criteria.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgsc *MeasureGroupStratifierComponent) GetCriteria() *fhir.Expression {
	if mgsc == nil {
		return nil
	}
	return mgsc.Criteria
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgsc *MeasureGroupStratifierComponent) GetDescription() *fhir.String {
	if mgsc == nil {
		return nil
	}
	return mgsc.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgsc *MeasureGroupStratifierComponent) GetExtension() []*fhir.Extension {
	if mgsc == nil {
		return nil
	}
	return mgsc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgsc *MeasureGroupStratifierComponent) GetID() string {
	if mgsc == nil {
		return ""
	}
	return mgsc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mgsc *MeasureGroupStratifierComponent) GetModifierExtension() []*fhir.Extension {
	if mgsc == nil {
		return nil
	}
	return mgsc.ModifierExtension
}

// What other data should be reported with the measure// The supplemental data criteria for the measure report, specified as either
// the name of a valid CQL expression within a referenced library, or a valid
// FHIR Resource Path.// Note that supplemental data are reported as observations for each patient
// and included in the evaluatedResources bundle. See the MeasureReport
// resource or the Quality Reporting topic for more information.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Measure.json
type MeasureSupplementalData struct {

	// Indicates a meaning for the supplemental data. This can be as simple as a
	// unique identifier, or it can establish meaning in a broader context by
	// drawing from a terminology, allowing supplemental data to be correlated
	// across measures.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// The criteria for the supplemental data. This is typically the name of a
	// valid expression defined within a referenced library, but it may also be a
	// path to a specific data element. The criteria defines the data to be
	// returned for this element.
	Criteria *fhir.Expression `fhirpath:"criteria"`

	// The human readable description of this supplemental data.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// An indicator of the intended usage for the supplemental data element.
	// Supplemental data indicates the data is additional information requested to
	// augment the measure information. Risk adjustment factor indicates the data
	// is additional information used to calculate risk adjustment factors when
	// applying a risk model to the measure calculation.
	Usage []*fhir.CodeableConcept `fhirpath:"usage"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msd *MeasureSupplementalData) GetCode() *fhir.CodeableConcept {
	if msd == nil {
		return nil
	}
	return msd.Code
}

// GetCriteria returns the value of the field Criteria.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msd *MeasureSupplementalData) GetCriteria() *fhir.Expression {
	if msd == nil {
		return nil
	}
	return msd.Criteria
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msd *MeasureSupplementalData) GetDescription() *fhir.String {
	if msd == nil {
		return nil
	}
	return msd.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msd *MeasureSupplementalData) GetExtension() []*fhir.Extension {
	if msd == nil {
		return nil
	}
	return msd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msd *MeasureSupplementalData) GetID() string {
	if msd == nil {
		return ""
	}
	return msd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msd *MeasureSupplementalData) GetModifierExtension() []*fhir.Extension {
	if msd == nil {
		return nil
	}
	return msd.ModifierExtension
}

// GetUsage returns the value of the field Usage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msd *MeasureSupplementalData) GetUsage() []*fhir.CodeableConcept {
	if msd == nil {
		return nil
	}
	return msd.Usage
}

func (m *Measure) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (m *Measure) UnmarshalJSON(data []byte) error {
	var raw struct {
		ApprovalDate                    *fhir.Date            `json:"approvalDate"`
		Author                          []*fhir.ContactDetail `json:"author"`
		ClinicalRecommendationStatement *fhir.Markdown        `json:"clinicalRecommendationStatement"`
		CompositeScoring                *fhir.CodeableConcept `json:"compositeScoring"`
		Contact                         []*fhir.ContactDetail `json:"contact"`
		Contained                       []fhir.Resource       `json:"contained"`
		Copyright                       *fhir.Markdown        `json:"copyright"`
		Date                            *fhir.DateTime        `json:"date"`
		Definition                      []*fhir.Markdown      `json:"definition"`
		Description                     *fhir.Markdown        `json:"description"`
		Disclaimer                      *fhir.Markdown        `json:"disclaimer"`
		Editor                          []*fhir.ContactDetail `json:"editor"`
		EffectivePeriod                 *fhir.Period          `json:"effectivePeriod"`
		Endorser                        []*fhir.ContactDetail `json:"endorser"`
		Experimental                    *fhir.Boolean         `json:"experimental"`
		Extension                       []*fhir.Extension     `json:"extension"`
		Group                           []*MeasureGroup       `json:"group"`
		Guidance                        *fhir.Markdown        `json:"guidance"`

		ID                     string                     `json:"id"`
		Identifier             []*fhir.Identifier         `json:"identifier"`
		ImplicitRules          *fhir.URI                  `json:"implicitRules"`
		ImprovementNotation    *fhir.CodeableConcept      `json:"improvementNotation"`
		Jurisdiction           []*fhir.CodeableConcept    `json:"jurisdiction"`
		Language               *fhir.Code                 `json:"language"`
		LastReviewDate         *fhir.Date                 `json:"lastReviewDate"`
		Library                []*fhir.Canonical          `json:"library"`
		Meta                   *fhir.Meta                 `json:"meta"`
		ModifierExtension      []*fhir.Extension          `json:"modifierExtension"`
		Name                   *fhir.String               `json:"name"`
		Publisher              *fhir.String               `json:"publisher"`
		Purpose                *fhir.Markdown             `json:"purpose"`
		RateAggregation        *fhir.String               `json:"rateAggregation"`
		Rationale              *fhir.Markdown             `json:"rationale"`
		RelatedArtifact        []*fhir.RelatedArtifact    `json:"relatedArtifact"`
		Reviewer               []*fhir.ContactDetail      `json:"reviewer"`
		RiskAdjustment         *fhir.String               `json:"riskAdjustment"`
		Scoring                *fhir.CodeableConcept      `json:"scoring"`
		Status                 *fhir.Code                 `json:"status"`
		SubjectCodeableConcept *fhir.CodeableConcept      `json:"subjectCodeableConcept"`
		SubjectReference       *fhir.Reference            `json:"subjectReference"`
		Subtitle               *fhir.String               `json:"subtitle"`
		SupplementalData       []*MeasureSupplementalData `json:"supplementalData"`
		Text                   *fhir.Narrative            `json:"text"`
		Title                  *fhir.String               `json:"title"`
		Topic                  []*fhir.CodeableConcept    `json:"topic"`
		Type                   []*fhir.CodeableConcept    `json:"type"`
		URL                    *fhir.URI                  `json:"url"`
		Usage                  *fhir.String               `json:"usage"`
		UseContext             []*fhir.UsageContext       `json:"useContext"`
		Version                *fhir.String               `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	m.ApprovalDate = raw.ApprovalDate
	m.Author = raw.Author
	m.ClinicalRecommendationStatement = raw.ClinicalRecommendationStatement
	m.CompositeScoring = raw.CompositeScoring
	m.Contact = raw.Contact
	m.Contained = raw.Contained
	m.Copyright = raw.Copyright
	m.Date = raw.Date
	m.Definition = raw.Definition
	m.Description = raw.Description
	m.Disclaimer = raw.Disclaimer
	m.Editor = raw.Editor
	m.EffectivePeriod = raw.EffectivePeriod
	m.Endorser = raw.Endorser
	m.Experimental = raw.Experimental
	m.Extension = raw.Extension
	m.Group = raw.Group
	m.Guidance = raw.Guidance
	m.ID = raw.ID
	m.Identifier = raw.Identifier
	m.ImplicitRules = raw.ImplicitRules
	m.ImprovementNotation = raw.ImprovementNotation
	m.Jurisdiction = raw.Jurisdiction
	m.Language = raw.Language
	m.LastReviewDate = raw.LastReviewDate
	m.Library = raw.Library
	m.Meta = raw.Meta
	m.ModifierExtension = raw.ModifierExtension
	m.Name = raw.Name
	m.Publisher = raw.Publisher
	m.Purpose = raw.Purpose
	m.RateAggregation = raw.RateAggregation
	m.Rationale = raw.Rationale
	m.RelatedArtifact = raw.RelatedArtifact
	m.Reviewer = raw.Reviewer
	m.RiskAdjustment = raw.RiskAdjustment
	m.Scoring = raw.Scoring
	m.Status = raw.Status
	m.Subject, err = validate.SelectOneOf[fhir.Element]("Measure.subject",
		raw.SubjectCodeableConcept,
		raw.SubjectReference)
	if err != nil {
		return err
	}
	m.Subtitle = raw.Subtitle
	m.SupplementalData = raw.SupplementalData
	m.Text = raw.Text
	m.Title = raw.Title
	m.Topic = raw.Topic
	m.Type = raw.Type
	m.URL = raw.URL
	m.Usage = raw.Usage
	m.UseContext = raw.UseContext
	m.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*Measure)(nil)
var _ json.Unmarshaler = (*Measure)(nil)

func (mg *MeasureGroup) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mg *MeasureGroup) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code        *fhir.CodeableConcept `json:"code"`
		Description *fhir.String          `json:"description"`
		Extension   []*fhir.Extension     `json:"extension"`

		ID                string                    `json:"id"`
		ModifierExtension []*fhir.Extension         `json:"modifierExtension"`
		Population        []*MeasureGroupPopulation `json:"population"`
		Stratifier        []*MeasureGroupStratifier `json:"stratifier"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mg.Code = raw.Code
	mg.Description = raw.Description
	mg.Extension = raw.Extension
	mg.ID = raw.ID
	mg.ModifierExtension = raw.ModifierExtension
	mg.Population = raw.Population
	mg.Stratifier = raw.Stratifier
	return nil
}

var _ json.Marshaler = (*MeasureGroup)(nil)
var _ json.Unmarshaler = (*MeasureGroup)(nil)

func (mgp *MeasureGroupPopulation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mgp *MeasureGroupPopulation) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code        *fhir.CodeableConcept `json:"code"`
		Criteria    *fhir.Expression      `json:"criteria"`
		Description *fhir.String          `json:"description"`
		Extension   []*fhir.Extension     `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mgp.Code = raw.Code
	mgp.Criteria = raw.Criteria
	mgp.Description = raw.Description
	mgp.Extension = raw.Extension
	mgp.ID = raw.ID
	mgp.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*MeasureGroupPopulation)(nil)
var _ json.Unmarshaler = (*MeasureGroupPopulation)(nil)

func (mgs *MeasureGroupStratifier) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mgs *MeasureGroupStratifier) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code        *fhir.CodeableConcept              `json:"code"`
		Component   []*MeasureGroupStratifierComponent `json:"component"`
		Criteria    *fhir.Expression                   `json:"criteria"`
		Description *fhir.String                       `json:"description"`
		Extension   []*fhir.Extension                  `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mgs.Code = raw.Code
	mgs.Component = raw.Component
	mgs.Criteria = raw.Criteria
	mgs.Description = raw.Description
	mgs.Extension = raw.Extension
	mgs.ID = raw.ID
	mgs.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*MeasureGroupStratifier)(nil)
var _ json.Unmarshaler = (*MeasureGroupStratifier)(nil)

func (mgsc *MeasureGroupStratifierComponent) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mgsc *MeasureGroupStratifierComponent) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code        *fhir.CodeableConcept `json:"code"`
		Criteria    *fhir.Expression      `json:"criteria"`
		Description *fhir.String          `json:"description"`
		Extension   []*fhir.Extension     `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mgsc.Code = raw.Code
	mgsc.Criteria = raw.Criteria
	mgsc.Description = raw.Description
	mgsc.Extension = raw.Extension
	mgsc.ID = raw.ID
	mgsc.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*MeasureGroupStratifierComponent)(nil)
var _ json.Unmarshaler = (*MeasureGroupStratifierComponent)(nil)

func (msd *MeasureSupplementalData) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (msd *MeasureSupplementalData) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code        *fhir.CodeableConcept `json:"code"`
		Criteria    *fhir.Expression      `json:"criteria"`
		Description *fhir.String          `json:"description"`
		Extension   []*fhir.Extension     `json:"extension"`

		ID                string                  `json:"id"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Usage             []*fhir.CodeableConcept `json:"usage"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	msd.Code = raw.Code
	msd.Criteria = raw.Criteria
	msd.Description = raw.Description
	msd.Extension = raw.Extension
	msd.ID = raw.ID
	msd.ModifierExtension = raw.ModifierExtension
	msd.Usage = raw.Usage
	return nil
}

var _ json.Marshaler = (*MeasureSupplementalData)(nil)
var _ json.Unmarshaler = (*MeasureSupplementalData)(nil)
