// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package medicinalproductpackaged

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A medicinal product in a container or package.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MedicinalProductPackaged
//   - Source File: StructureDefinition-MedicinalProductPackaged.json
type MedicinalProductPackaged struct {

	// Batch numbering.
	BatchIdentifier []*MedicinalProductPackagedBatchIdentifier `fhirpath:"batchIdentifier"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Textual description.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Unique identifier.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The legal status of supply of the medicinal product as classified by the
	// regulator.
	LegalStatusOfSupply *fhir.CodeableConcept `fhirpath:"legalStatusOfSupply"`

	// Manufacturer of this Package Item.
	Manufacturer []*fhir.Reference `fhirpath:"manufacturer"`

	// Manufacturer of this Package Item.
	MarketingAuthorization *fhir.Reference `fhirpath:"marketingAuthorization"`

	// Marketing information.
	MarketingStatus []*fhir.MarketingStatus `fhirpath:"marketingStatus"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A packaging item, as a contained for medicine, possibly with other packaging
	// items within.
	PackageItem []*MedicinalProductPackagedPackageItem `fhirpath:"packageItem"`

	// The product with this is a pack for.
	Subject []*fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetBatchIdentifier returns the value of the field BatchIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetBatchIdentifier() []*MedicinalProductPackagedBatchIdentifier {
	if mpp == nil {
		return nil
	}
	return mpp.BatchIdentifier
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetContained() []fhir.Resource {
	if mpp == nil {
		return nil
	}
	return mpp.Contained
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetDescription() *fhir.String {
	if mpp == nil {
		return nil
	}
	return mpp.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetExtension() []*fhir.Extension {
	if mpp == nil {
		return nil
	}
	return mpp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetID() string {
	if mpp == nil {
		return ""
	}
	return mpp.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetIdentifier() []*fhir.Identifier {
	if mpp == nil {
		return nil
	}
	return mpp.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetImplicitRules() *fhir.URI {
	if mpp == nil {
		return nil
	}
	return mpp.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetLanguage() *fhir.Code {
	if mpp == nil {
		return nil
	}
	return mpp.Language
}

// GetLegalStatusOfSupply returns the value of the field LegalStatusOfSupply.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetLegalStatusOfSupply() *fhir.CodeableConcept {
	if mpp == nil {
		return nil
	}
	return mpp.LegalStatusOfSupply
}

// GetManufacturer returns the value of the field Manufacturer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetManufacturer() []*fhir.Reference {
	if mpp == nil {
		return nil
	}
	return mpp.Manufacturer
}

// GetMarketingAuthorization returns the value of the field MarketingAuthorization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetMarketingAuthorization() *fhir.Reference {
	if mpp == nil {
		return nil
	}
	return mpp.MarketingAuthorization
}

// GetMarketingStatus returns the value of the field MarketingStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetMarketingStatus() []*fhir.MarketingStatus {
	if mpp == nil {
		return nil
	}
	return mpp.MarketingStatus
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetMeta() *fhir.Meta {
	if mpp == nil {
		return nil
	}
	return mpp.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetModifierExtension() []*fhir.Extension {
	if mpp == nil {
		return nil
	}
	return mpp.ModifierExtension
}

// GetPackageItem returns the value of the field PackageItem.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetPackageItem() []*MedicinalProductPackagedPackageItem {
	if mpp == nil {
		return nil
	}
	return mpp.PackageItem
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetSubject() []*fhir.Reference {
	if mpp == nil {
		return nil
	}
	return mpp.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpp *MedicinalProductPackaged) GetText() *fhir.Narrative {
	if mpp == nil {
		return nil
	}
	return mpp.Text
}

// Batch numbering// Batch numbering.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductPackaged.json
type MedicinalProductPackagedBatchIdentifier struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A number appearing on the immediate packaging (and not the outer packaging).
	ImmediatePackaging *fhir.Identifier `fhirpath:"immediatePackaging"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A number appearing on the outer packaging of a specific batch.
	OuterPackaging *fhir.Identifier `fhirpath:"outerPackaging"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mppbi *MedicinalProductPackagedBatchIdentifier) GetExtension() []*fhir.Extension {
	if mppbi == nil {
		return nil
	}
	return mppbi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mppbi *MedicinalProductPackagedBatchIdentifier) GetID() string {
	if mppbi == nil {
		return ""
	}
	return mppbi.ID
}

// GetImmediatePackaging returns the value of the field ImmediatePackaging.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mppbi *MedicinalProductPackagedBatchIdentifier) GetImmediatePackaging() *fhir.Identifier {
	if mppbi == nil {
		return nil
	}
	return mppbi.ImmediatePackaging
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mppbi *MedicinalProductPackagedBatchIdentifier) GetModifierExtension() []*fhir.Extension {
	if mppbi == nil {
		return nil
	}
	return mppbi.ModifierExtension
}

// GetOuterPackaging returns the value of the field OuterPackaging.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mppbi *MedicinalProductPackagedBatchIdentifier) GetOuterPackaging() *fhir.Identifier {
	if mppbi == nil {
		return nil
	}
	return mppbi.OuterPackaging
}

// A packaging item, as a contained for medicine, possibly with other packaging
// items within// A packaging item, as a contained for medicine, possibly with other packaging
// items within.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProductPackaged.json
type MedicinalProductPackagedPackageItem struct {

	// A possible alternate material for the packaging.
	AlternateMaterial []*fhir.CodeableConcept `fhirpath:"alternateMaterial"`

	// A device accompanying a medicinal product.
	Device []*fhir.Reference `fhirpath:"device"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Including possibly Data Carrier Identifier.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// The manufactured item as contained in the packaged medicinal product.
	ManufacturedItem []*fhir.Reference `fhirpath:"manufacturedItem"`

	// Manufacturer of this Package Item.
	Manufacturer []*fhir.Reference `fhirpath:"manufacturer"`

	// Material type of the package item.
	Material []*fhir.CodeableConcept `fhirpath:"material"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Other codeable characteristics.
	OtherCharacteristics []*fhir.CodeableConcept `fhirpath:"otherCharacteristics"`

	// Dimensions, color etc.
	PhysicalCharacteristics *fhir.ProdCharacteristic `fhirpath:"physicalCharacteristics"`

	// The quantity of this package in the medicinal product, at the current level
	// of packaging. The outermost is always 1.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// Shelf Life and storage information.
	ShelfLifeStorage []*fhir.ProductShelfLife `fhirpath:"shelfLifeStorage"`

	// The physical type of the container of the medicine.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAlternateMaterial returns the value of the field AlternateMaterial.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetAlternateMaterial() []*fhir.CodeableConcept {
	if mpppi == nil {
		return nil
	}
	return mpppi.AlternateMaterial
}

// GetDevice returns the value of the field Device.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetDevice() []*fhir.Reference {
	if mpppi == nil {
		return nil
	}
	return mpppi.Device
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetExtension() []*fhir.Extension {
	if mpppi == nil {
		return nil
	}
	return mpppi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetID() string {
	if mpppi == nil {
		return ""
	}
	return mpppi.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetIdentifier() []*fhir.Identifier {
	if mpppi == nil {
		return nil
	}
	return mpppi.Identifier
}

// GetManufacturedItem returns the value of the field ManufacturedItem.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetManufacturedItem() []*fhir.Reference {
	if mpppi == nil {
		return nil
	}
	return mpppi.ManufacturedItem
}

// GetManufacturer returns the value of the field Manufacturer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetManufacturer() []*fhir.Reference {
	if mpppi == nil {
		return nil
	}
	return mpppi.Manufacturer
}

// GetMaterial returns the value of the field Material.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetMaterial() []*fhir.CodeableConcept {
	if mpppi == nil {
		return nil
	}
	return mpppi.Material
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetModifierExtension() []*fhir.Extension {
	if mpppi == nil {
		return nil
	}
	return mpppi.ModifierExtension
}

// GetOtherCharacteristics returns the value of the field OtherCharacteristics.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetOtherCharacteristics() []*fhir.CodeableConcept {
	if mpppi == nil {
		return nil
	}
	return mpppi.OtherCharacteristics
}

// GetPhysicalCharacteristics returns the value of the field PhysicalCharacteristics.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetPhysicalCharacteristics() *fhir.ProdCharacteristic {
	if mpppi == nil {
		return nil
	}
	return mpppi.PhysicalCharacteristics
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetQuantity() *fhir.Quantity {
	if mpppi == nil {
		return nil
	}
	return mpppi.Quantity
}

// GetShelfLifeStorage returns the value of the field ShelfLifeStorage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetShelfLifeStorage() []*fhir.ProductShelfLife {
	if mpppi == nil {
		return nil
	}
	return mpppi.ShelfLifeStorage
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpppi *MedicinalProductPackagedPackageItem) GetType() *fhir.CodeableConcept {
	if mpppi == nil {
		return nil
	}
	return mpppi.Type
}

func (mpp *MedicinalProductPackaged) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mpp *MedicinalProductPackaged) UnmarshalJSON(data []byte) error {
	var raw struct {
		BatchIdentifier []*MedicinalProductPackagedBatchIdentifier `json:"batchIdentifier"`
		Contained       []fhir.Resource                            `json:"contained"`
		Description     *fhir.String                               `json:"description"`
		Extension       []*fhir.Extension                          `json:"extension"`

		ID                     string                                 `json:"id"`
		Identifier             []*fhir.Identifier                     `json:"identifier"`
		ImplicitRules          *fhir.URI                              `json:"implicitRules"`
		Language               *fhir.Code                             `json:"language"`
		LegalStatusOfSupply    *fhir.CodeableConcept                  `json:"legalStatusOfSupply"`
		Manufacturer           []*fhir.Reference                      `json:"manufacturer"`
		MarketingAuthorization *fhir.Reference                        `json:"marketingAuthorization"`
		MarketingStatus        []*fhir.MarketingStatus                `json:"marketingStatus"`
		Meta                   *fhir.Meta                             `json:"meta"`
		ModifierExtension      []*fhir.Extension                      `json:"modifierExtension"`
		PackageItem            []*MedicinalProductPackagedPackageItem `json:"packageItem"`
		Subject                []*fhir.Reference                      `json:"subject"`
		Text                   *fhir.Narrative                        `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mpp.BatchIdentifier = raw.BatchIdentifier
	mpp.Contained = raw.Contained
	mpp.Description = raw.Description
	mpp.Extension = raw.Extension
	mpp.ID = raw.ID
	mpp.Identifier = raw.Identifier
	mpp.ImplicitRules = raw.ImplicitRules
	mpp.Language = raw.Language
	mpp.LegalStatusOfSupply = raw.LegalStatusOfSupply
	mpp.Manufacturer = raw.Manufacturer
	mpp.MarketingAuthorization = raw.MarketingAuthorization
	mpp.MarketingStatus = raw.MarketingStatus
	mpp.Meta = raw.Meta
	mpp.ModifierExtension = raw.ModifierExtension
	mpp.PackageItem = raw.PackageItem
	mpp.Subject = raw.Subject
	mpp.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*MedicinalProductPackaged)(nil)
var _ json.Unmarshaler = (*MedicinalProductPackaged)(nil)

func (mppbi *MedicinalProductPackagedBatchIdentifier) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mppbi *MedicinalProductPackagedBatchIdentifier) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                 string            `json:"id"`
		ImmediatePackaging *fhir.Identifier  `json:"immediatePackaging"`
		ModifierExtension  []*fhir.Extension `json:"modifierExtension"`
		OuterPackaging     *fhir.Identifier  `json:"outerPackaging"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mppbi.Extension = raw.Extension
	mppbi.ID = raw.ID
	mppbi.ImmediatePackaging = raw.ImmediatePackaging
	mppbi.ModifierExtension = raw.ModifierExtension
	mppbi.OuterPackaging = raw.OuterPackaging
	return nil
}

var _ json.Marshaler = (*MedicinalProductPackagedBatchIdentifier)(nil)
var _ json.Unmarshaler = (*MedicinalProductPackagedBatchIdentifier)(nil)

func (mpppi *MedicinalProductPackagedPackageItem) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mpppi *MedicinalProductPackagedPackageItem) UnmarshalJSON(data []byte) error {
	var raw struct {
		AlternateMaterial []*fhir.CodeableConcept `json:"alternateMaterial"`
		Device            []*fhir.Reference       `json:"device"`
		Extension         []*fhir.Extension       `json:"extension"`

		ID                      string                   `json:"id"`
		Identifier              []*fhir.Identifier       `json:"identifier"`
		ManufacturedItem        []*fhir.Reference        `json:"manufacturedItem"`
		Manufacturer            []*fhir.Reference        `json:"manufacturer"`
		Material                []*fhir.CodeableConcept  `json:"material"`
		ModifierExtension       []*fhir.Extension        `json:"modifierExtension"`
		OtherCharacteristics    []*fhir.CodeableConcept  `json:"otherCharacteristics"`
		PhysicalCharacteristics *fhir.ProdCharacteristic `json:"physicalCharacteristics"`
		Quantity                *fhir.Quantity           `json:"quantity"`
		ShelfLifeStorage        []*fhir.ProductShelfLife `json:"shelfLifeStorage"`
		Type                    *fhir.CodeableConcept    `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mpppi.AlternateMaterial = raw.AlternateMaterial
	mpppi.Device = raw.Device
	mpppi.Extension = raw.Extension
	mpppi.ID = raw.ID
	mpppi.Identifier = raw.Identifier
	mpppi.ManufacturedItem = raw.ManufacturedItem
	mpppi.Manufacturer = raw.Manufacturer
	mpppi.Material = raw.Material
	mpppi.ModifierExtension = raw.ModifierExtension
	mpppi.OtherCharacteristics = raw.OtherCharacteristics
	mpppi.PhysicalCharacteristics = raw.PhysicalCharacteristics
	mpppi.Quantity = raw.Quantity
	mpppi.ShelfLifeStorage = raw.ShelfLifeStorage
	mpppi.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*MedicinalProductPackagedPackageItem)(nil)
var _ json.Unmarshaler = (*MedicinalProductPackagedPackageItem)(nil)
