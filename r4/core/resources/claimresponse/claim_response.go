// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package claimresponse

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// This resource provides the adjudication details from the processing of a
// Claim resource.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ClaimResponse
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponse struct {

	// The first-tier service adjudications for payor added product or service
	// lines.
	AddItem []*ClaimResponseAddItem `fhirpath:"addItem"`

	// Request for additional supporting or authorizing information.
	CommunicationRequest []*fhir.Reference `fhirpath:"communicationRequest"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date this resource was created.
	Created *fhir.DateTime `fhirpath:"created"`

	// A human readable description of the status of the adjudication.
	Disposition *fhir.String `fhirpath:"disposition"`

	// Errors encountered during the processing of the adjudication.
	Error []*ClaimResponseError `fhirpath:"error"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The actual form, by reference or inclusion, for printing the content or an
	// EOB.
	Form *fhir.Attachment `fhirpath:"form"`

	// A code for the form to be used for printing the content.
	FormCode *fhir.CodeableConcept `fhirpath:"formCode"`

	// A code, used only on a response to a preauthorization, to indicate whether
	// the benefits payable have been reserved and for whom.
	FundsReserve *fhir.CodeableConcept `fhirpath:"fundsReserve"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier assigned to this claim response.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Financial instruments for reimbursement for the health care products and
	// services specified on the claim.
	Insurance []*ClaimResponseInsurance `fhirpath:"insurance"`

	// The party responsible for authorization, adjudication and reimbursement.
	Insurer *fhir.Reference `fhirpath:"insurer"`

	// A claim line. Either a simple (a product or service) or a 'group' of details
	// which can also be a simple items or groups of sub-details.
	Item []*ClaimResponseItem `fhirpath:"item"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The outcome of the claim, predetermination, or preauthorization processing.
	Outcome *fhir.Code `fhirpath:"outcome"`

	// The party to whom the professional services and/or products have been
	// supplied or are being considered and for whom actual for facast
	// reimbursement is sought.
	Patient *fhir.Reference `fhirpath:"patient"`

	// Type of Party to be reimbursed: subscriber, provider, other.
	PayeeType *fhir.CodeableConcept `fhirpath:"payeeType"`

	// Payment details for the adjudication of the claim.
	Payment *ClaimResponsePayment `fhirpath:"payment"`

	// The time frame during which this authorization is effective.
	PreAuthPeriod *fhir.Period `fhirpath:"preAuthPeriod"`

	// Reference from the Insurer which is used in later communications which
	// refers to this adjudication.
	PreAuthRef *fhir.String `fhirpath:"preAuthRef"`

	// A note that describes or explains adjudication results in a human readable
	// form.
	ProcessNote []*ClaimResponseProcessNote `fhirpath:"processNote"`

	// Original request resource reference.
	Request *fhir.Reference `fhirpath:"request"`

	// The provider which is responsible for the claim, predetermination or
	// preauthorization.
	Requestor *fhir.Reference `fhirpath:"requestor"`

	// The status of the resource instance.
	Status *fhir.Code `fhirpath:"status"`

	// A finer grained suite of claim type codes which may convey additional
	// information such as Inpatient vs Outpatient and/or a specialty service.
	SubType *fhir.CodeableConcept `fhirpath:"subType"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Categorized monetary totals for the adjudication.
	Total []*ClaimResponseTotal `fhirpath:"total"`

	// A finer grained suite of claim type codes which may convey additional
	// information such as Inpatient vs Outpatient and/or a specialty service.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// A code to indicate whether the nature of the request is: to request
	// adjudication of products and services previously rendered; or requesting
	// authorization and adjudication for provision in the future; or requesting
	// the non-binding adjudication of the listed products and services which could
	// be provided in the future.
	Use *fhir.Code `fhirpath:"use"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAddItem returns the value of the field AddItem.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetAddItem() []*ClaimResponseAddItem {
	if cr == nil {
		return nil
	}
	return cr.AddItem
}

// GetCommunicationRequest returns the value of the field CommunicationRequest.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetCommunicationRequest() []*fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.CommunicationRequest
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetContained() []fhir.Resource {
	if cr == nil {
		return nil
	}
	return cr.Contained
}

// GetCreated returns the value of the field Created.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetCreated() *fhir.DateTime {
	if cr == nil {
		return nil
	}
	return cr.Created
}

// GetDisposition returns the value of the field Disposition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetDisposition() *fhir.String {
	if cr == nil {
		return nil
	}
	return cr.Disposition
}

// GetError returns the value of the field Error.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetError() []*ClaimResponseError {
	if cr == nil {
		return nil
	}
	return cr.Error
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetExtension() []*fhir.Extension {
	if cr == nil {
		return nil
	}
	return cr.Extension
}

// GetForm returns the value of the field Form.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetForm() *fhir.Attachment {
	if cr == nil {
		return nil
	}
	return cr.Form
}

// GetFormCode returns the value of the field FormCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetFormCode() *fhir.CodeableConcept {
	if cr == nil {
		return nil
	}
	return cr.FormCode
}

// GetFundsReserve returns the value of the field FundsReserve.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetFundsReserve() *fhir.CodeableConcept {
	if cr == nil {
		return nil
	}
	return cr.FundsReserve
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetID() string {
	if cr == nil {
		return ""
	}
	return cr.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetIdentifier() []*fhir.Identifier {
	if cr == nil {
		return nil
	}
	return cr.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetImplicitRules() *fhir.URI {
	if cr == nil {
		return nil
	}
	return cr.ImplicitRules
}

// GetInsurance returns the value of the field Insurance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetInsurance() []*ClaimResponseInsurance {
	if cr == nil {
		return nil
	}
	return cr.Insurance
}

// GetInsurer returns the value of the field Insurer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetInsurer() *fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Insurer
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetItem() []*ClaimResponseItem {
	if cr == nil {
		return nil
	}
	return cr.Item
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetLanguage() *fhir.Code {
	if cr == nil {
		return nil
	}
	return cr.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetMeta() *fhir.Meta {
	if cr == nil {
		return nil
	}
	return cr.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetModifierExtension() []*fhir.Extension {
	if cr == nil {
		return nil
	}
	return cr.ModifierExtension
}

// GetOutcome returns the value of the field Outcome.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetOutcome() *fhir.Code {
	if cr == nil {
		return nil
	}
	return cr.Outcome
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetPatient() *fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Patient
}

// GetPayeeType returns the value of the field PayeeType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetPayeeType() *fhir.CodeableConcept {
	if cr == nil {
		return nil
	}
	return cr.PayeeType
}

// GetPayment returns the value of the field Payment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetPayment() *ClaimResponsePayment {
	if cr == nil {
		return nil
	}
	return cr.Payment
}

// GetPreAuthPeriod returns the value of the field PreAuthPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetPreAuthPeriod() *fhir.Period {
	if cr == nil {
		return nil
	}
	return cr.PreAuthPeriod
}

// GetPreAuthRef returns the value of the field PreAuthRef.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetPreAuthRef() *fhir.String {
	if cr == nil {
		return nil
	}
	return cr.PreAuthRef
}

// GetProcessNote returns the value of the field ProcessNote.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetProcessNote() []*ClaimResponseProcessNote {
	if cr == nil {
		return nil
	}
	return cr.ProcessNote
}

// GetRequest returns the value of the field Request.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetRequest() *fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Request
}

// GetRequestor returns the value of the field Requestor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetRequestor() *fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Requestor
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetStatus() *fhir.Code {
	if cr == nil {
		return nil
	}
	return cr.Status
}

// GetSubType returns the value of the field SubType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetSubType() *fhir.CodeableConcept {
	if cr == nil {
		return nil
	}
	return cr.SubType
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetText() *fhir.Narrative {
	if cr == nil {
		return nil
	}
	return cr.Text
}

// GetTotal returns the value of the field Total.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetTotal() []*ClaimResponseTotal {
	if cr == nil {
		return nil
	}
	return cr.Total
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetType() *fhir.CodeableConcept {
	if cr == nil {
		return nil
	}
	return cr.Type
}

// GetUse returns the value of the field Use.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimResponse) GetUse() *fhir.Code {
	if cr == nil {
		return nil
	}
	return cr.Use
}

// Insurer added line items// The first-tier service adjudications for payor added product or service
// lines.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseAddItem struct {

	// Physical service site on the patient (limb, tooth, etc.).
	BodySite *fhir.CodeableConcept `fhirpath:"bodySite"`

	// The second-tier service adjudications for payor added services.
	Detail []*ClaimResponseAddItemDetail `fhirpath:"detail"`

	// The sequence number of the details within the claim item which this line is
	// intended to replace.
	DetailSequence []*fhir.PositiveInt `fhirpath:"detailSequence"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Claim items which this service line is intended to replace.
	ItemSequence []*fhir.PositiveInt `fhirpath:"itemSequence"`

	// Where the product or service was provided.
	Location fhir.Element `fhirpath:"location"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// Identifies the program under which this may be recovered.
	ProgramCode []*fhir.CodeableConcept `fhirpath:"programCode"`

	// The providers who are authorized for the services rendered to the patient.
	Provider []*fhir.Reference `fhirpath:"provider"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The date or dates when the service or product was supplied, performed or
	// completed.
	Serviced fhir.Element `fhirpath:"serviced"`

	// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
	SubSite []*fhir.CodeableConcept `fhirpath:"subSite"`

	// The sequence number of the sub-details within the details within the claim
	// item which this line is intended to replace.
	SubdetailSequence []*fhir.PositiveInt `fhirpath:"subdetailSequence"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBodySite returns the value of the field BodySite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetBodySite() *fhir.CodeableConcept {
	if crai == nil {
		return nil
	}
	return crai.BodySite
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetDetail() []*ClaimResponseAddItemDetail {
	if crai == nil {
		return nil
	}
	return crai.Detail
}

// GetDetailSequence returns the value of the field DetailSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetDetailSequence() []*fhir.PositiveInt {
	if crai == nil {
		return nil
	}
	return crai.DetailSequence
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetExtension() []*fhir.Extension {
	if crai == nil {
		return nil
	}
	return crai.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetFactor() *fhir.Decimal {
	if crai == nil {
		return nil
	}
	return crai.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetID() string {
	if crai == nil {
		return ""
	}
	return crai.ID
}

// GetItemSequence returns the value of the field ItemSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetItemSequence() []*fhir.PositiveInt {
	if crai == nil {
		return nil
	}
	return crai.ItemSequence
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetLocation() fhir.Element {
	if crai == nil {
		return nil
	}
	return crai.Location
}

// GetLocationCodeableConcept returns the value of the field Location.
func (crai *ClaimResponseAddItem) GetLocationCodeableConcept() *fhir.CodeableConcept {
	if crai == nil {
		return nil
	}
	val, ok := crai.Location.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetLocationAddress returns the value of the field Location.
func (crai *ClaimResponseAddItem) GetLocationAddress() *fhir.Address {
	if crai == nil {
		return nil
	}
	val, ok := crai.Location.(*fhir.Address)
	if !ok {
		return nil
	}
	return val
}

// GetLocationReference returns the value of the field Location.
func (crai *ClaimResponseAddItem) GetLocationReference() *fhir.Reference {
	if crai == nil {
		return nil
	}
	val, ok := crai.Location.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetModifier() []*fhir.CodeableConcept {
	if crai == nil {
		return nil
	}
	return crai.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetModifierExtension() []*fhir.Extension {
	if crai == nil {
		return nil
	}
	return crai.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetNet() *fhir.Money {
	if crai == nil {
		return nil
	}
	return crai.Net
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetNoteNumber() []*fhir.PositiveInt {
	if crai == nil {
		return nil
	}
	return crai.NoteNumber
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetProductOrService() *fhir.CodeableConcept {
	if crai == nil {
		return nil
	}
	return crai.ProductOrService
}

// GetProgramCode returns the value of the field ProgramCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetProgramCode() []*fhir.CodeableConcept {
	if crai == nil {
		return nil
	}
	return crai.ProgramCode
}

// GetProvider returns the value of the field Provider.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetProvider() []*fhir.Reference {
	if crai == nil {
		return nil
	}
	return crai.Provider
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetQuantity() *fhir.Quantity {
	if crai == nil {
		return nil
	}
	return crai.Quantity
}

// GetServiced returns the value of the field Serviced.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetServiced() fhir.Element {
	if crai == nil {
		return nil
	}
	return crai.Serviced
}

// GetServicedDate returns the value of the field Serviced.
func (crai *ClaimResponseAddItem) GetServicedDate() *fhir.Date {
	if crai == nil {
		return nil
	}
	val, ok := crai.Serviced.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetServicedPeriod returns the value of the field Serviced.
func (crai *ClaimResponseAddItem) GetServicedPeriod() *fhir.Period {
	if crai == nil {
		return nil
	}
	val, ok := crai.Serviced.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetSubSite returns the value of the field SubSite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetSubSite() []*fhir.CodeableConcept {
	if crai == nil {
		return nil
	}
	return crai.SubSite
}

// GetSubdetailSequence returns the value of the field SubdetailSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetSubdetailSequence() []*fhir.PositiveInt {
	if crai == nil {
		return nil
	}
	return crai.SubdetailSequence
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crai *ClaimResponseAddItem) GetUnitPrice() *fhir.Money {
	if crai == nil {
		return nil
	}
	return crai.UnitPrice
}

// Insurer added line details// The second-tier service adjudications for payor added services.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseAddItemDetail struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The third-tier service adjudications for payor added services.
	SubDetail []*ClaimResponseAddItemDetailSubDetail `fhirpath:"subDetail"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetExtension() []*fhir.Extension {
	if craid == nil {
		return nil
	}
	return craid.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetFactor() *fhir.Decimal {
	if craid == nil {
		return nil
	}
	return craid.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetID() string {
	if craid == nil {
		return ""
	}
	return craid.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetModifier() []*fhir.CodeableConcept {
	if craid == nil {
		return nil
	}
	return craid.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetModifierExtension() []*fhir.Extension {
	if craid == nil {
		return nil
	}
	return craid.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetNet() *fhir.Money {
	if craid == nil {
		return nil
	}
	return craid.Net
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetNoteNumber() []*fhir.PositiveInt {
	if craid == nil {
		return nil
	}
	return craid.NoteNumber
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetProductOrService() *fhir.CodeableConcept {
	if craid == nil {
		return nil
	}
	return craid.ProductOrService
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetQuantity() *fhir.Quantity {
	if craid == nil {
		return nil
	}
	return craid.Quantity
}

// GetSubDetail returns the value of the field SubDetail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetSubDetail() []*ClaimResponseAddItemDetailSubDetail {
	if craid == nil {
		return nil
	}
	return craid.SubDetail
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craid *ClaimResponseAddItemDetail) GetUnitPrice() *fhir.Money {
	if craid == nil {
		return nil
	}
	return craid.UnitPrice
}

// Insurer added line items// The third-tier service adjudications for payor added services.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseAddItemDetailSubDetail struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craidsd *ClaimResponseAddItemDetailSubDetail) GetExtension() []*fhir.Extension {
	if craidsd == nil {
		return nil
	}
	return craidsd.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craidsd *ClaimResponseAddItemDetailSubDetail) GetFactor() *fhir.Decimal {
	if craidsd == nil {
		return nil
	}
	return craidsd.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craidsd *ClaimResponseAddItemDetailSubDetail) GetID() string {
	if craidsd == nil {
		return ""
	}
	return craidsd.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craidsd *ClaimResponseAddItemDetailSubDetail) GetModifier() []*fhir.CodeableConcept {
	if craidsd == nil {
		return nil
	}
	return craidsd.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craidsd *ClaimResponseAddItemDetailSubDetail) GetModifierExtension() []*fhir.Extension {
	if craidsd == nil {
		return nil
	}
	return craidsd.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craidsd *ClaimResponseAddItemDetailSubDetail) GetNet() *fhir.Money {
	if craidsd == nil {
		return nil
	}
	return craidsd.Net
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craidsd *ClaimResponseAddItemDetailSubDetail) GetNoteNumber() []*fhir.PositiveInt {
	if craidsd == nil {
		return nil
	}
	return craidsd.NoteNumber
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craidsd *ClaimResponseAddItemDetailSubDetail) GetProductOrService() *fhir.CodeableConcept {
	if craidsd == nil {
		return nil
	}
	return craidsd.ProductOrService
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craidsd *ClaimResponseAddItemDetailSubDetail) GetQuantity() *fhir.Quantity {
	if craidsd == nil {
		return nil
	}
	return craidsd.Quantity
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (craidsd *ClaimResponseAddItemDetailSubDetail) GetUnitPrice() *fhir.Money {
	if craidsd == nil {
		return nil
	}
	return craidsd.UnitPrice
}

// Processing errors// Errors encountered during the processing of the adjudication.// If the request contains errors then an error element should be provided and
// no adjudication related sections (item, addItem, or payment) should be
// present.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseError struct {

	// An error code, from a specified code system, which details why the claim
	// could not be adjudicated.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// The sequence number of the detail within the line item submitted which
	// contains the error. This value is omitted when the error occurs outside of
	// the item structure.
	DetailSequence *fhir.PositiveInt `fhirpath:"detailSequence"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The sequence number of the line item submitted which contains the error.
	// This value is omitted when the error occurs outside of the item structure.
	ItemSequence *fhir.PositiveInt `fhirpath:"itemSequence"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The sequence number of the sub-detail within the detail within the line item
	// submitted which contains the error. This value is omitted when the error
	// occurs outside of the item structure.
	SubDetailSequence *fhir.PositiveInt `fhirpath:"subDetailSequence"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cre *ClaimResponseError) GetCode() *fhir.CodeableConcept {
	if cre == nil {
		return nil
	}
	return cre.Code
}

// GetDetailSequence returns the value of the field DetailSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cre *ClaimResponseError) GetDetailSequence() *fhir.PositiveInt {
	if cre == nil {
		return nil
	}
	return cre.DetailSequence
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cre *ClaimResponseError) GetExtension() []*fhir.Extension {
	if cre == nil {
		return nil
	}
	return cre.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cre *ClaimResponseError) GetID() string {
	if cre == nil {
		return ""
	}
	return cre.ID
}

// GetItemSequence returns the value of the field ItemSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cre *ClaimResponseError) GetItemSequence() *fhir.PositiveInt {
	if cre == nil {
		return nil
	}
	return cre.ItemSequence
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cre *ClaimResponseError) GetModifierExtension() []*fhir.Extension {
	if cre == nil {
		return nil
	}
	return cre.ModifierExtension
}

// GetSubDetailSequence returns the value of the field SubDetailSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cre *ClaimResponseError) GetSubDetailSequence() *fhir.PositiveInt {
	if cre == nil {
		return nil
	}
	return cre.SubDetailSequence
}

// Patient insurance information// Financial instruments for reimbursement for the health care products and
// services specified on the claim.// All insurance coverages for the patient which may be applicable for
// reimbursement, of the products and services listed in the claim, are
// typically provided in the claim to allow insurers to confirm the ordering of
// the insurance coverages relative to local 'coordination of benefit' rules.
// One coverage (and only one) with 'focal=true' is to be used in the
// adjudication of this claim. Coverages appearing before the focal Coverage in
// the list, and where 'subrogation=false', should provide a reference to the
// ClaimResponse containing the adjudication results of the prior claim.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseInsurance struct {

	// A business agreement number established between the provider and the insurer
	// for special business processing purposes.
	BusinessArrangement *fhir.String `fhirpath:"businessArrangement"`

	// The result of the adjudication of the line items for the Coverage specified
	// in this insurance.
	ClaimResponse *fhir.Reference `fhirpath:"claimResponse"`

	// Reference to the insurance card level information contained in the Coverage
	// resource. The coverage issuing insurer will use these details to locate the
	// patient's actual coverage within the insurer's information system.
	Coverage *fhir.Reference `fhirpath:"coverage"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A flag to indicate that this Coverage is to be used for adjudication of this
	// claim when set to true.
	Focal *fhir.Boolean `fhirpath:"focal"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A number to uniquely identify insurance entries and provide a sequence of
	// coverages to convey coordination of benefit order.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBusinessArrangement returns the value of the field BusinessArrangement.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseInsurance) GetBusinessArrangement() *fhir.String {
	if cri == nil {
		return nil
	}
	return cri.BusinessArrangement
}

// GetClaimResponse returns the value of the field ClaimResponse.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseInsurance) GetClaimResponse() *fhir.Reference {
	if cri == nil {
		return nil
	}
	return cri.ClaimResponse
}

// GetCoverage returns the value of the field Coverage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseInsurance) GetCoverage() *fhir.Reference {
	if cri == nil {
		return nil
	}
	return cri.Coverage
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseInsurance) GetExtension() []*fhir.Extension {
	if cri == nil {
		return nil
	}
	return cri.Extension
}

// GetFocal returns the value of the field Focal.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseInsurance) GetFocal() *fhir.Boolean {
	if cri == nil {
		return nil
	}
	return cri.Focal
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseInsurance) GetID() string {
	if cri == nil {
		return ""
	}
	return cri.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseInsurance) GetModifierExtension() []*fhir.Extension {
	if cri == nil {
		return nil
	}
	return cri.ModifierExtension
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseInsurance) GetSequence() *fhir.PositiveInt {
	if cri == nil {
		return nil
	}
	return cri.Sequence
}

// Adjudication for claim line items// A claim line. Either a simple (a product or service) or a 'group' of details
// which can also be a simple items or groups of sub-details.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseItem struct {

	// If this item is a group then the values here are a summary of the
	// adjudication of the detail items. If this item is a simple product or
	// service then this is the result of the adjudication of this item.
	Adjudication []*ClaimResponseItemAdjudication `fhirpath:"adjudication"`

	// A claim detail. Either a simple (a product or service) or a 'group' of
	// sub-details which are simple items.
	Detail []*ClaimResponseItemDetail `fhirpath:"detail"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A number to uniquely reference the claim item entries.
	ItemSequence *fhir.PositiveInt `fhirpath:"itemSequence"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAdjudication returns the value of the field Adjudication.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseItem) GetAdjudication() []*ClaimResponseItemAdjudication {
	if cri == nil {
		return nil
	}
	return cri.Adjudication
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseItem) GetDetail() []*ClaimResponseItemDetail {
	if cri == nil {
		return nil
	}
	return cri.Detail
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseItem) GetExtension() []*fhir.Extension {
	if cri == nil {
		return nil
	}
	return cri.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseItem) GetID() string {
	if cri == nil {
		return ""
	}
	return cri.ID
}

// GetItemSequence returns the value of the field ItemSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseItem) GetItemSequence() *fhir.PositiveInt {
	if cri == nil {
		return nil
	}
	return cri.ItemSequence
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseItem) GetModifierExtension() []*fhir.Extension {
	if cri == nil {
		return nil
	}
	return cri.ModifierExtension
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cri *ClaimResponseItem) GetNoteNumber() []*fhir.PositiveInt {
	if cri == nil {
		return nil
	}
	return cri.NoteNumber
}

// Adjudication details// If this item is a group then the values here are a summary of the
// adjudication of the detail items. If this item is a simple product or
// service then this is the result of the adjudication of this item.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseItemAdjudication struct {

	// Monetary amount associated with the category.
	Amount *fhir.Money `fhirpath:"amount"`

	// A code to indicate the information type of this adjudication record.
	// Information types may include the value submitted, maximum values or
	// percentages allowed or payable under the plan, amounts that: the patient is
	// responsible for in aggregate or pertaining to this item; amounts paid by
	// other coverages; and, the benefit payable for this item.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A code supporting the understanding of the adjudication result and
	// explaining variance from expected amount.
	Reason *fhir.CodeableConcept `fhirpath:"reason"`

	// A non-monetary value associated with the category. Mutually exclusive to the
	// amount element above.
	Value *fhir.Decimal `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cria *ClaimResponseItemAdjudication) GetAmount() *fhir.Money {
	if cria == nil {
		return nil
	}
	return cria.Amount
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cria *ClaimResponseItemAdjudication) GetCategory() *fhir.CodeableConcept {
	if cria == nil {
		return nil
	}
	return cria.Category
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cria *ClaimResponseItemAdjudication) GetExtension() []*fhir.Extension {
	if cria == nil {
		return nil
	}
	return cria.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cria *ClaimResponseItemAdjudication) GetID() string {
	if cria == nil {
		return ""
	}
	return cria.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cria *ClaimResponseItemAdjudication) GetModifierExtension() []*fhir.Extension {
	if cria == nil {
		return nil
	}
	return cria.ModifierExtension
}

// GetReason returns the value of the field Reason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cria *ClaimResponseItemAdjudication) GetReason() *fhir.CodeableConcept {
	if cria == nil {
		return nil
	}
	return cria.Reason
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cria *ClaimResponseItemAdjudication) GetValue() *fhir.Decimal {
	if cria == nil {
		return nil
	}
	return cria.Value
}

// Adjudication for claim details// A claim detail. Either a simple (a product or service) or a 'group' of
// sub-details which are simple items.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseItemDetail struct {

	// A number to uniquely reference the claim detail entry.
	DetailSequence *fhir.PositiveInt `fhirpath:"detailSequence"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// A sub-detail adjudication of a simple product or service.
	SubDetail []*ClaimResponseItemDetailSubDetail `fhirpath:"subDetail"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDetailSequence returns the value of the field DetailSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crid *ClaimResponseItemDetail) GetDetailSequence() *fhir.PositiveInt {
	if crid == nil {
		return nil
	}
	return crid.DetailSequence
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crid *ClaimResponseItemDetail) GetExtension() []*fhir.Extension {
	if crid == nil {
		return nil
	}
	return crid.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crid *ClaimResponseItemDetail) GetID() string {
	if crid == nil {
		return ""
	}
	return crid.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crid *ClaimResponseItemDetail) GetModifierExtension() []*fhir.Extension {
	if crid == nil {
		return nil
	}
	return crid.ModifierExtension
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crid *ClaimResponseItemDetail) GetNoteNumber() []*fhir.PositiveInt {
	if crid == nil {
		return nil
	}
	return crid.NoteNumber
}

// GetSubDetail returns the value of the field SubDetail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crid *ClaimResponseItemDetail) GetSubDetail() []*ClaimResponseItemDetailSubDetail {
	if crid == nil {
		return nil
	}
	return crid.SubDetail
}

// Adjudication for claim sub-details// A sub-detail adjudication of a simple product or service.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseItemDetailSubDetail struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// A number to uniquely reference the claim sub-detail entry.
	SubDetailSequence *fhir.PositiveInt `fhirpath:"subDetailSequence"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cridsd *ClaimResponseItemDetailSubDetail) GetExtension() []*fhir.Extension {
	if cridsd == nil {
		return nil
	}
	return cridsd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cridsd *ClaimResponseItemDetailSubDetail) GetID() string {
	if cridsd == nil {
		return ""
	}
	return cridsd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cridsd *ClaimResponseItemDetailSubDetail) GetModifierExtension() []*fhir.Extension {
	if cridsd == nil {
		return nil
	}
	return cridsd.ModifierExtension
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cridsd *ClaimResponseItemDetailSubDetail) GetNoteNumber() []*fhir.PositiveInt {
	if cridsd == nil {
		return nil
	}
	return cridsd.NoteNumber
}

// GetSubDetailSequence returns the value of the field SubDetailSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cridsd *ClaimResponseItemDetailSubDetail) GetSubDetailSequence() *fhir.PositiveInt {
	if cridsd == nil {
		return nil
	}
	return cridsd.SubDetailSequence
}

// Payment Details// Payment details for the adjudication of the claim.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponsePayment struct {

	// Total amount of all adjustments to this payment included in this transaction
	// which are not related to this claim's adjudication.
	Adjustment *fhir.Money `fhirpath:"adjustment"`

	// Reason for the payment adjustment.
	AdjustmentReason *fhir.CodeableConcept `fhirpath:"adjustmentReason"`

	// Benefits payable less any payment adjustment.
	Amount *fhir.Money `fhirpath:"amount"`

	// Estimated date the payment will be issued or the actual issue date of
	// payment.
	Date *fhir.Date `fhirpath:"date"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Issuer's unique identifier for the payment instrument.
	Identifier *fhir.Identifier `fhirpath:"identifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Whether this represents partial or complete payment of the benefits payable.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAdjustment returns the value of the field Adjustment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *ClaimResponsePayment) GetAdjustment() *fhir.Money {
	if crp == nil {
		return nil
	}
	return crp.Adjustment
}

// GetAdjustmentReason returns the value of the field AdjustmentReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *ClaimResponsePayment) GetAdjustmentReason() *fhir.CodeableConcept {
	if crp == nil {
		return nil
	}
	return crp.AdjustmentReason
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *ClaimResponsePayment) GetAmount() *fhir.Money {
	if crp == nil {
		return nil
	}
	return crp.Amount
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *ClaimResponsePayment) GetDate() *fhir.Date {
	if crp == nil {
		return nil
	}
	return crp.Date
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *ClaimResponsePayment) GetExtension() []*fhir.Extension {
	if crp == nil {
		return nil
	}
	return crp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *ClaimResponsePayment) GetID() string {
	if crp == nil {
		return ""
	}
	return crp.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *ClaimResponsePayment) GetIdentifier() *fhir.Identifier {
	if crp == nil {
		return nil
	}
	return crp.Identifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *ClaimResponsePayment) GetModifierExtension() []*fhir.Extension {
	if crp == nil {
		return nil
	}
	return crp.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *ClaimResponsePayment) GetType() *fhir.CodeableConcept {
	if crp == nil {
		return nil
	}
	return crp.Type
}

// Note concerning adjudication// A note that describes or explains adjudication results in a human readable
// form.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseProcessNote struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A code to define the language used in the text of the note.
	Language *fhir.CodeableConcept `fhirpath:"language"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A number to uniquely identify a note entry.
	Number *fhir.PositiveInt `fhirpath:"number"`

	// The explanation or description associated with the processing.
	Text *fhir.String `fhirpath:"text"`

	// The business purpose of the note text.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crpn *ClaimResponseProcessNote) GetExtension() []*fhir.Extension {
	if crpn == nil {
		return nil
	}
	return crpn.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crpn *ClaimResponseProcessNote) GetID() string {
	if crpn == nil {
		return ""
	}
	return crpn.ID
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crpn *ClaimResponseProcessNote) GetLanguage() *fhir.CodeableConcept {
	if crpn == nil {
		return nil
	}
	return crpn.Language
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crpn *ClaimResponseProcessNote) GetModifierExtension() []*fhir.Extension {
	if crpn == nil {
		return nil
	}
	return crpn.ModifierExtension
}

// GetNumber returns the value of the field Number.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crpn *ClaimResponseProcessNote) GetNumber() *fhir.PositiveInt {
	if crpn == nil {
		return nil
	}
	return crpn.Number
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crpn *ClaimResponseProcessNote) GetText() *fhir.String {
	if crpn == nil {
		return nil
	}
	return crpn.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crpn *ClaimResponseProcessNote) GetType() *fhir.Code {
	if crpn == nil {
		return nil
	}
	return crpn.Type
}

// Adjudication totals// Categorized monetary totals for the adjudication.// Totals for amounts submitted, co-pays, benefits payable etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ClaimResponse.json
type ClaimResponseTotal struct {

	// Monetary total amount associated with the category.
	Amount *fhir.Money `fhirpath:"amount"`

	// A code to indicate the information type of this adjudication record.
	// Information types may include: the value submitted, maximum values or
	// percentages allowed or payable under the plan, amounts that the patient is
	// responsible for in aggregate or pertaining to this item, amounts paid by
	// other coverages, and the benefit payable for this item.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crt *ClaimResponseTotal) GetAmount() *fhir.Money {
	if crt == nil {
		return nil
	}
	return crt.Amount
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crt *ClaimResponseTotal) GetCategory() *fhir.CodeableConcept {
	if crt == nil {
		return nil
	}
	return crt.Category
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crt *ClaimResponseTotal) GetExtension() []*fhir.Extension {
	if crt == nil {
		return nil
	}
	return crt.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crt *ClaimResponseTotal) GetID() string {
	if crt == nil {
		return ""
	}
	return crt.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crt *ClaimResponseTotal) GetModifierExtension() []*fhir.Extension {
	if crt == nil {
		return nil
	}
	return crt.ModifierExtension
}
