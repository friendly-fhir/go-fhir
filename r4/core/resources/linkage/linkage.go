// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package linkage

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Identifies two or more records (resource instances) that refer to the same
// real-world "occurrence".
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Linkage
//   - Source File: StructureDefinition-Linkage.json
type Linkage struct {

	// Indicates whether the asserted set of linkages are considered to be "in
	// effect".
	Active *fhir.Boolean `fhirpath:"active"`

	// Identifies the user or organization responsible for asserting the linkages
	// as well as the user or organization who establishes the context in which the
	// nature of each linkage is evaluated.
	Author *fhir.Reference `fhirpath:"author"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Identifies which record considered as the reference to the same real-world
	// occurrence as well as how the items should be evaluated within the
	// collection of linked items.
	Item []*LinkageItem `fhirpath:"item"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetActive returns the value of the field Active.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetActive() *fhir.Boolean {
	if l == nil {
		return nil
	}
	return l.Active
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetAuthor() *fhir.Reference {
	if l == nil {
		return nil
	}
	return l.Author
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetContained() []fhir.Resource {
	if l == nil {
		return nil
	}
	return l.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetExtension() []*fhir.Extension {
	if l == nil {
		return nil
	}
	return l.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetID() string {
	if l == nil {
		return ""
	}
	return l.ID
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetImplicitRules() *fhir.URI {
	if l == nil {
		return nil
	}
	return l.ImplicitRules
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetItem() []*LinkageItem {
	if l == nil {
		return nil
	}
	return l.Item
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetLanguage() *fhir.Code {
	if l == nil {
		return nil
	}
	return l.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetMeta() *fhir.Meta {
	if l == nil {
		return nil
	}
	return l.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetModifierExtension() []*fhir.Extension {
	if l == nil {
		return nil
	}
	return l.ModifierExtension
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (l *Linkage) GetText() *fhir.Narrative {
	if l == nil {
		return nil
	}
	return l.Text
}

// Item to be linked// Identifies which record considered as the reference to the same real-world
// occurrence as well as how the items should be evaluated within the
// collection of linked items.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Linkage.json
type LinkageItem struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The resource instance being linked as part of the group.
	Resource *fhir.Reference `fhirpath:"resource"`

	// Distinguishes which item is "source of truth" (if any) and which items are
	// no longer considered to be current representations.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (li *LinkageItem) GetExtension() []*fhir.Extension {
	if li == nil {
		return nil
	}
	return li.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (li *LinkageItem) GetID() string {
	if li == nil {
		return ""
	}
	return li.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (li *LinkageItem) GetModifierExtension() []*fhir.Extension {
	if li == nil {
		return nil
	}
	return li.ModifierExtension
}

// GetResource returns the value of the field Resource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (li *LinkageItem) GetResource() *fhir.Reference {
	if li == nil {
		return nil
	}
	return li.Resource
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (li *LinkageItem) GetType() *fhir.Code {
	if li == nil {
		return nil
	}
	return li.Type
}

func (l *Linkage) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (l *Linkage) UnmarshalJSON(data []byte) error {
	var raw struct {
		Active    *fhir.Boolean     `json:"active"`
		Author    *fhir.Reference   `json:"author"`
		Contained []fhir.Resource   `json:"contained"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ImplicitRules     *fhir.URI         `json:"implicitRules"`
		Item              []*LinkageItem    `json:"item"`
		Language          *fhir.Code        `json:"language"`
		Meta              *fhir.Meta        `json:"meta"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Text              *fhir.Narrative   `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	l.Active = raw.Active
	l.Author = raw.Author
	l.Contained = raw.Contained
	l.Extension = raw.Extension
	l.ID = raw.ID
	l.ImplicitRules = raw.ImplicitRules
	l.Item = raw.Item
	l.Language = raw.Language
	l.Meta = raw.Meta
	l.ModifierExtension = raw.ModifierExtension
	l.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*Linkage)(nil)
var _ json.Unmarshaler = (*Linkage)(nil)

func (li *LinkageItem) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (li *LinkageItem) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Resource          *fhir.Reference   `json:"resource"`
		Type              *fhir.Code        `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	li.Extension = raw.Extension
	li.ID = raw.ID
	li.ModifierExtension = raw.ModifierExtension
	li.Resource = raw.Resource
	li.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*LinkageItem)(nil)
var _ json.Unmarshaler = (*LinkageItem)(nil)
