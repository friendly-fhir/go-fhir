// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package requestgroup

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A group of related requests that can be used to capture intended activities
// that have inter-dependencies such as "give this medication after that one".
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/RequestGroup
//   - Source File: StructureDefinition-RequestGroup.json
type RequestGroup struct {

	// The actions, if any, produced by the evaluation of the artifact.
	Action []*RequestGroupAction `fhirpath:"action"`

	// Provides a reference to the author of the request group.
	Author *fhir.Reference `fhirpath:"author"`

	// Indicates when the request group was created.
	AuthoredOn *fhir.DateTime `fhirpath:"authoredOn"`

	// A plan, proposal or order that is fulfilled in whole or in part by this
	// request.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// A code that identifies what the overall request group is.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Describes the context of the request group, if any.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A shared identifier common to all requests that were authorized more or less
	// simultaneously by a single author, representing the identifier of the
	// requisition, prescription or similar form.
	GroupIdentifier *fhir.Identifier `fhirpath:"groupIdentifier"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Allows a service to provide a unique, business identifier for the request.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A canonical URL referencing a FHIR-defined protocol, guideline, orderset or
	// other definition that is adhered to in whole or in part by this request.
	InstantiatesCanonical []*fhir.Canonical `fhirpath:"instantiatesCanonical"`

	// A URL referencing an externally defined protocol, guideline, orderset or
	// other definition that is adhered to in whole or in part by this request.
	InstantiatesURI []*fhir.URI `fhirpath:"instantiatesUri"`

	// Indicates the level of authority/intentionality associated with the request
	// and where the request fits into the workflow chain.
	Intent *fhir.Code `fhirpath:"intent"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Provides a mechanism to communicate additional information about the
	// response.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Indicates how quickly the request should be addressed with respect to other
	// requests.
	Priority *fhir.Code `fhirpath:"priority"`

	// Describes the reason for the request group in coded or textual form.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Indicates another resource whose existence justifies this request group.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// Completed or terminated request(s) whose function is taken by this new
	// request.
	Replaces []*fhir.Reference `fhirpath:"replaces"`

	// The current state of the request. For request groups, the status reflects
	// the status of all the requests in the group.
	Status *fhir.Code `fhirpath:"status"`

	// The subject for which the request group was created.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseRequestGroup
	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAction returns the value of the field Action.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetAction() []*RequestGroupAction {
	if rg == nil {
		return nil
	}
	return rg.Action
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetAuthor() *fhir.Reference {
	if rg == nil {
		return nil
	}
	return rg.Author
}

// GetAuthoredOn returns the value of the field AuthoredOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetAuthoredOn() *fhir.DateTime {
	if rg == nil {
		return nil
	}
	return rg.AuthoredOn
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetBasedOn() []*fhir.Reference {
	if rg == nil {
		return nil
	}
	return rg.BasedOn
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetCode() *fhir.CodeableConcept {
	if rg == nil {
		return nil
	}
	return rg.Code
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetContained() []fhir.Resource {
	if rg == nil {
		return nil
	}
	return rg.Contained
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetEncounter() *fhir.Reference {
	if rg == nil {
		return nil
	}
	return rg.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetExtension() []*fhir.Extension {
	if rg == nil {
		return nil
	}
	return rg.Extension
}

// GetGroupIdentifier returns the value of the field GroupIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetGroupIdentifier() *fhir.Identifier {
	if rg == nil {
		return nil
	}
	return rg.GroupIdentifier
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetID() string {
	if rg == nil {
		return ""
	}
	return rg.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetIdentifier() []*fhir.Identifier {
	if rg == nil {
		return nil
	}
	return rg.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetImplicitRules() *fhir.URI {
	if rg == nil {
		return nil
	}
	return rg.ImplicitRules
}

// GetInstantiatesCanonical returns the value of the field InstantiatesCanonical.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetInstantiatesCanonical() []*fhir.Canonical {
	if rg == nil {
		return nil
	}
	return rg.InstantiatesCanonical
}

// GetInstantiatesURI returns the value of the field InstantiatesURI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetInstantiatesURI() []*fhir.URI {
	if rg == nil {
		return nil
	}
	return rg.InstantiatesURI
}

// GetIntent returns the value of the field Intent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetIntent() *fhir.Code {
	if rg == nil {
		return nil
	}
	return rg.Intent
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetLanguage() *fhir.Code {
	if rg == nil {
		return nil
	}
	return rg.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetMeta() *fhir.Meta {
	if rg == nil {
		return nil
	}
	return rg.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetModifierExtension() []*fhir.Extension {
	if rg == nil {
		return nil
	}
	return rg.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetNote() []*fhir.Annotation {
	if rg == nil {
		return nil
	}
	return rg.Note
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetPriority() *fhir.Code {
	if rg == nil {
		return nil
	}
	return rg.Priority
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetReasonCode() []*fhir.CodeableConcept {
	if rg == nil {
		return nil
	}
	return rg.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetReasonReference() []*fhir.Reference {
	if rg == nil {
		return nil
	}
	return rg.ReasonReference
}

// GetReplaces returns the value of the field Replaces.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetReplaces() []*fhir.Reference {
	if rg == nil {
		return nil
	}
	return rg.Replaces
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetStatus() *fhir.Code {
	if rg == nil {
		return nil
	}
	return rg.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetSubject() *fhir.Reference {
	if rg == nil {
		return nil
	}
	return rg.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rg *RequestGroup) GetText() *fhir.Narrative {
	if rg == nil {
		return nil
	}
	return rg.Text
}

// Proposed actions, if any// The actions, if any, produced by the evaluation of the artifact.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-RequestGroup.json
type RequestGroupAction struct {

	// Defines whether the action can be selected multiple times.
	CardinalityBehavior *fhir.Code `fhirpath:"cardinalityBehavior"`

	// A code that provides meaning for the action or action group. For example, a
	// section may have a LOINC code for a section of a documentation template.
	Code []*fhir.CodeableConcept `fhirpath:"code"`

	// An expression that describes applicability criteria, or start/stop
	// conditions for the action.
	Condition []*RequestGroupActionCondition `fhirpath:"condition"`

	// A short description of the action used to provide a summary to display to
	// the user.
	Description *fhir.String `fhirpath:"description"`

	// Didactic or other informational resources associated with the action that
	// can be provided to the CDS recipient. Information resources can include
	// inline text commentary and links to web resources.
	Documentation []*fhir.RelatedArtifact `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Defines the grouping behavior for the action and its children.
	GroupingBehavior *fhir.Code `fhirpath:"groupingBehavior"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The participant that should perform or be responsible for this action.
	Participant []*fhir.Reference `fhirpath:"participant"`

	// Defines whether the action should usually be preselected.
	PrecheckBehavior *fhir.Code `fhirpath:"precheckBehavior"`

	// A user-visible prefix for the action.
	Prefix *fhir.String `fhirpath:"prefix"`

	// Indicates how quickly the action should be addressed with respect to other
	// actions.
	Priority *fhir.Code `fhirpath:"priority"`

	// A relationship to another action such as "before" or "30-60 minutes after
	// start of".
	RelatedAction []*RequestGroupActionRelatedAction `fhirpath:"relatedAction"`

	// Defines expectations around whether an action is required.
	RequiredBehavior *fhir.Code `fhirpath:"requiredBehavior"`

	// The resource that is the target of the action (e.g. CommunicationRequest).
	Resource *fhir.Reference `fhirpath:"resource"`

	// Defines the selection behavior for the action and its children.
	SelectionBehavior *fhir.Code `fhirpath:"selectionBehavior"`

	// A text equivalent of the action to be performed. This provides a
	// human-interpretable description of the action when the definition is
	// consumed by a system that might not be capable of interpreting it
	// dynamically.
	TextEquivalent *fhir.String `fhirpath:"textEquivalent"`

	// An optional value describing when the action should be performed.
	Timing fhir.Element `fhirpath:"timing"`

	// The title of the action displayed to a user.
	Title *fhir.String `fhirpath:"title"`

	// The type of action to perform (create, update, remove).
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCardinalityBehavior returns the value of the field CardinalityBehavior.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetCardinalityBehavior() *fhir.Code {
	if rga == nil {
		return nil
	}
	return rga.CardinalityBehavior
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetCode() []*fhir.CodeableConcept {
	if rga == nil {
		return nil
	}
	return rga.Code
}

// GetCondition returns the value of the field Condition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetCondition() []*RequestGroupActionCondition {
	if rga == nil {
		return nil
	}
	return rga.Condition
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetDescription() *fhir.String {
	if rga == nil {
		return nil
	}
	return rga.Description
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetDocumentation() []*fhir.RelatedArtifact {
	if rga == nil {
		return nil
	}
	return rga.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetExtension() []*fhir.Extension {
	if rga == nil {
		return nil
	}
	return rga.Extension
}

// GetGroupingBehavior returns the value of the field GroupingBehavior.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetGroupingBehavior() *fhir.Code {
	if rga == nil {
		return nil
	}
	return rga.GroupingBehavior
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetID() string {
	if rga == nil {
		return ""
	}
	return rga.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetModifierExtension() []*fhir.Extension {
	if rga == nil {
		return nil
	}
	return rga.ModifierExtension
}

// GetParticipant returns the value of the field Participant.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetParticipant() []*fhir.Reference {
	if rga == nil {
		return nil
	}
	return rga.Participant
}

// GetPrecheckBehavior returns the value of the field PrecheckBehavior.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetPrecheckBehavior() *fhir.Code {
	if rga == nil {
		return nil
	}
	return rga.PrecheckBehavior
}

// GetPrefix returns the value of the field Prefix.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetPrefix() *fhir.String {
	if rga == nil {
		return nil
	}
	return rga.Prefix
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetPriority() *fhir.Code {
	if rga == nil {
		return nil
	}
	return rga.Priority
}

// GetRelatedAction returns the value of the field RelatedAction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetRelatedAction() []*RequestGroupActionRelatedAction {
	if rga == nil {
		return nil
	}
	return rga.RelatedAction
}

// GetRequiredBehavior returns the value of the field RequiredBehavior.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetRequiredBehavior() *fhir.Code {
	if rga == nil {
		return nil
	}
	return rga.RequiredBehavior
}

// GetResource returns the value of the field Resource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetResource() *fhir.Reference {
	if rga == nil {
		return nil
	}
	return rga.Resource
}

// GetSelectionBehavior returns the value of the field SelectionBehavior.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetSelectionBehavior() *fhir.Code {
	if rga == nil {
		return nil
	}
	return rga.SelectionBehavior
}

// GetTextEquivalent returns the value of the field TextEquivalent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetTextEquivalent() *fhir.String {
	if rga == nil {
		return nil
	}
	return rga.TextEquivalent
}

// GetTiming returns the value of the field Timing.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetTiming() fhir.Element {
	if rga == nil {
		return nil
	}
	return rga.Timing
}

// GetTimingDateTime returns the value of the field Timing.
func (rga *RequestGroupAction) GetTimingDateTime() *fhir.DateTime {
	if rga == nil {
		return nil
	}
	val, ok := rga.Timing.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetTimingAge returns the value of the field Timing.
func (rga *RequestGroupAction) GetTimingAge() *fhir.Age {
	if rga == nil {
		return nil
	}
	val, ok := rga.Timing.(*fhir.Age)
	if !ok {
		return nil
	}
	return val
}

// GetTimingPeriod returns the value of the field Timing.
func (rga *RequestGroupAction) GetTimingPeriod() *fhir.Period {
	if rga == nil {
		return nil
	}
	val, ok := rga.Timing.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
}

// GetTimingDuration returns the value of the field Timing.
func (rga *RequestGroupAction) GetTimingDuration() *fhir.Duration {
	if rga == nil {
		return nil
	}
	val, ok := rga.Timing.(*fhir.Duration)
	if !ok {
		return nil
	}
	return val
}

// GetTimingRange returns the value of the field Timing.
func (rga *RequestGroupAction) GetTimingRange() *fhir.Range {
	if rga == nil {
		return nil
	}
	val, ok := rga.Timing.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
}

// GetTimingTiming returns the value of the field Timing.
func (rga *RequestGroupAction) GetTimingTiming() *fhir.Timing {
	if rga == nil {
		return nil
	}
	val, ok := rga.Timing.(*fhir.Timing)
	if !ok {
		return nil
	}
	return val
} // GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetTitle() *fhir.String {
	if rga == nil {
		return nil
	}
	return rga.Title
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rga *RequestGroupAction) GetType() *fhir.CodeableConcept {
	if rga == nil {
		return nil
	}
	return rga.Type
}

// Whether or not the action is applicable// An expression that describes applicability criteria, or start/stop
// conditions for the action.// When multiple conditions of the same kind are present, the effects are
// combined using AND semantics, so the overall condition is true only if all
// of the conditions are true.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-RequestGroup.json
type RequestGroupActionCondition struct {

	// An expression that returns true or false, indicating whether or not the
	// condition is satisfied.
	Expression *fhir.Expression `fhirpath:"expression"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The kind of condition.
	Kind *fhir.Code `fhirpath:"kind"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExpression returns the value of the field Expression.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgac *RequestGroupActionCondition) GetExpression() *fhir.Expression {
	if rgac == nil {
		return nil
	}
	return rgac.Expression
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgac *RequestGroupActionCondition) GetExtension() []*fhir.Extension {
	if rgac == nil {
		return nil
	}
	return rgac.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgac *RequestGroupActionCondition) GetID() string {
	if rgac == nil {
		return ""
	}
	return rgac.ID
}

// GetKind returns the value of the field Kind.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgac *RequestGroupActionCondition) GetKind() *fhir.Code {
	if rgac == nil {
		return nil
	}
	return rgac.Kind
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgac *RequestGroupActionCondition) GetModifierExtension() []*fhir.Extension {
	if rgac == nil {
		return nil
	}
	return rgac.ModifierExtension
}

// Relationship to another action// A relationship to another action such as "before" or "30-60 minutes after
// start of".
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-RequestGroup.json
type RequestGroupActionRelatedAction struct {

	// The element id of the action this is related to.
	ActionID *fhir.ID `fhirpath:"actionId"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A duration or range of durations to apply to the relationship. For example,
	// 30-60 minutes before.
	Offset fhir.Element `fhirpath:"offset"`

	// The relationship of this action to the related action.
	Relationship *fhir.Code `fhirpath:"relationship"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetActionID returns the value of the field ActionID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgara *RequestGroupActionRelatedAction) GetActionID() *fhir.ID {
	if rgara == nil {
		return nil
	}
	return rgara.ActionID
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgara *RequestGroupActionRelatedAction) GetExtension() []*fhir.Extension {
	if rgara == nil {
		return nil
	}
	return rgara.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgara *RequestGroupActionRelatedAction) GetID() string {
	if rgara == nil {
		return ""
	}
	return rgara.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgara *RequestGroupActionRelatedAction) GetModifierExtension() []*fhir.Extension {
	if rgara == nil {
		return nil
	}
	return rgara.ModifierExtension
}

// GetOffset returns the value of the field Offset.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgara *RequestGroupActionRelatedAction) GetOffset() fhir.Element {
	if rgara == nil {
		return nil
	}
	return rgara.Offset
}

// GetOffsetDuration returns the value of the field Offset.
func (rgara *RequestGroupActionRelatedAction) GetOffsetDuration() *fhir.Duration {
	if rgara == nil {
		return nil
	}
	val, ok := rgara.Offset.(*fhir.Duration)
	if !ok {
		return nil
	}
	return val
}

// GetOffsetRange returns the value of the field Offset.
func (rgara *RequestGroupActionRelatedAction) GetOffsetRange() *fhir.Range {
	if rgara == nil {
		return nil
	}
	val, ok := rgara.Offset.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
} // GetRelationship returns the value of the field Relationship.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rgara *RequestGroupActionRelatedAction) GetRelationship() *fhir.Code {
	if rgara == nil {
		return nil
	}
	return rgara.Relationship
}

func (rg *RequestGroup) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (rg *RequestGroup) UnmarshalJSON(data []byte) error {
	var raw struct {
		Action          []*RequestGroupAction `json:"action"`
		Author          *fhir.Reference       `json:"author"`
		AuthoredOn      *fhir.DateTime        `json:"authoredOn"`
		BasedOn         []*fhir.Reference     `json:"basedOn"`
		Code            *fhir.CodeableConcept `json:"code"`
		Contained       []fhir.Resource       `json:"contained"`
		Encounter       *fhir.Reference       `json:"encounter"`
		Extension       []*fhir.Extension     `json:"extension"`
		GroupIdentifier *fhir.Identifier      `json:"groupIdentifier"`

		ID                    string                  `json:"id"`
		Identifier            []*fhir.Identifier      `json:"identifier"`
		ImplicitRules         *fhir.URI               `json:"implicitRules"`
		InstantiatesCanonical []*fhir.Canonical       `json:"instantiatesCanonical"`
		InstantiatesURI       []*fhir.URI             `json:"instantiatesUri"`
		Intent                *fhir.Code              `json:"intent"`
		Language              *fhir.Code              `json:"language"`
		Meta                  *fhir.Meta              `json:"meta"`
		ModifierExtension     []*fhir.Extension       `json:"modifierExtension"`
		Note                  []*fhir.Annotation      `json:"note"`
		Priority              *fhir.Code              `json:"priority"`
		ReasonCode            []*fhir.CodeableConcept `json:"reasonCode"`
		ReasonReference       []*fhir.Reference       `json:"reasonReference"`
		Replaces              []*fhir.Reference       `json:"replaces"`
		Status                *fhir.Code              `json:"status"`
		Subject               *fhir.Reference         `json:"subject"`
		Text                  *fhir.Narrative         `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	rg.Action = raw.Action
	rg.Author = raw.Author
	rg.AuthoredOn = raw.AuthoredOn
	rg.BasedOn = raw.BasedOn
	rg.Code = raw.Code
	rg.Contained = raw.Contained
	rg.Encounter = raw.Encounter
	rg.Extension = raw.Extension
	rg.GroupIdentifier = raw.GroupIdentifier
	rg.ID = raw.ID
	rg.Identifier = raw.Identifier
	rg.ImplicitRules = raw.ImplicitRules
	rg.InstantiatesCanonical = raw.InstantiatesCanonical
	rg.InstantiatesURI = raw.InstantiatesURI
	rg.Intent = raw.Intent
	rg.Language = raw.Language
	rg.Meta = raw.Meta
	rg.ModifierExtension = raw.ModifierExtension
	rg.Note = raw.Note
	rg.Priority = raw.Priority
	rg.ReasonCode = raw.ReasonCode
	rg.ReasonReference = raw.ReasonReference
	rg.Replaces = raw.Replaces
	rg.Status = raw.Status
	rg.Subject = raw.Subject
	rg.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*RequestGroup)(nil)
var _ json.Unmarshaler = (*RequestGroup)(nil)

func (rga *RequestGroupAction) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (rga *RequestGroupAction) UnmarshalJSON(data []byte) error {
	var raw struct {
		CardinalityBehavior *fhir.Code                     `json:"cardinalityBehavior"`
		Code                []*fhir.CodeableConcept        `json:"code"`
		Condition           []*RequestGroupActionCondition `json:"condition"`
		Description         *fhir.String                   `json:"description"`
		Documentation       []*fhir.RelatedArtifact        `json:"documentation"`
		Extension           []*fhir.Extension              `json:"extension"`
		GroupingBehavior    *fhir.Code                     `json:"groupingBehavior"`

		ID                string                             `json:"id"`
		ModifierExtension []*fhir.Extension                  `json:"modifierExtension"`
		Participant       []*fhir.Reference                  `json:"participant"`
		PrecheckBehavior  *fhir.Code                         `json:"precheckBehavior"`
		Prefix            *fhir.String                       `json:"prefix"`
		Priority          *fhir.Code                         `json:"priority"`
		RelatedAction     []*RequestGroupActionRelatedAction `json:"relatedAction"`
		RequiredBehavior  *fhir.Code                         `json:"requiredBehavior"`
		Resource          *fhir.Reference                    `json:"resource"`
		SelectionBehavior *fhir.Code                         `json:"selectionBehavior"`
		TextEquivalent    *fhir.String                       `json:"textEquivalent"`
		TimingDateTime    *fhir.DateTime                     `json:"timingDateTime"`
		TimingAge         *fhir.Age                          `json:"timingAge"`
		TimingPeriod      *fhir.Period                       `json:"timingPeriod"`
		TimingDuration    *fhir.Duration                     `json:"timingDuration"`
		TimingRange       *fhir.Range                        `json:"timingRange"`
		TimingTiming      *fhir.Timing                       `json:"timingTiming"`
		Title             *fhir.String                       `json:"title"`
		Type              *fhir.CodeableConcept              `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	rga.CardinalityBehavior = raw.CardinalityBehavior
	rga.Code = raw.Code
	rga.Condition = raw.Condition
	rga.Description = raw.Description
	rga.Documentation = raw.Documentation
	rga.Extension = raw.Extension
	rga.GroupingBehavior = raw.GroupingBehavior
	rga.ID = raw.ID
	rga.ModifierExtension = raw.ModifierExtension
	rga.Participant = raw.Participant
	rga.PrecheckBehavior = raw.PrecheckBehavior
	rga.Prefix = raw.Prefix
	rga.Priority = raw.Priority
	rga.RelatedAction = raw.RelatedAction
	rga.RequiredBehavior = raw.RequiredBehavior
	rga.Resource = raw.Resource
	rga.SelectionBehavior = raw.SelectionBehavior
	rga.TextEquivalent = raw.TextEquivalent
	rga.Timing, err = validate.SelectOneOf[fhir.Element]("RequestGroup.action.timing",
		raw.TimingDateTime,
		raw.TimingAge,
		raw.TimingPeriod,
		raw.TimingDuration,
		raw.TimingRange,
		raw.TimingTiming)
	if err != nil {
		return err
	}
	rga.Title = raw.Title
	rga.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*RequestGroupAction)(nil)
var _ json.Unmarshaler = (*RequestGroupAction)(nil)

func (rgac *RequestGroupActionCondition) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (rgac *RequestGroupActionCondition) UnmarshalJSON(data []byte) error {
	var raw struct {
		Expression *fhir.Expression  `json:"expression"`
		Extension  []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Kind              *fhir.Code        `json:"kind"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	rgac.Expression = raw.Expression
	rgac.Extension = raw.Extension
	rgac.ID = raw.ID
	rgac.Kind = raw.Kind
	rgac.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*RequestGroupActionCondition)(nil)
var _ json.Unmarshaler = (*RequestGroupActionCondition)(nil)

func (rgara *RequestGroupActionRelatedAction) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (rgara *RequestGroupActionRelatedAction) UnmarshalJSON(data []byte) error {
	var raw struct {
		ActionID  *fhir.ID          `json:"actionId"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		OffsetDuration    *fhir.Duration    `json:"offsetDuration"`
		OffsetRange       *fhir.Range       `json:"offsetRange"`
		Relationship      *fhir.Code        `json:"relationship"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	rgara.ActionID = raw.ActionID
	rgara.Extension = raw.Extension
	rgara.ID = raw.ID
	rgara.ModifierExtension = raw.ModifierExtension
	rgara.Offset, err = validate.SelectOneOf[fhir.Element]("RequestGroup.action.relatedAction.offset",
		raw.OffsetDuration,
		raw.OffsetRange)
	if err != nil {
		return err
	}
	rgara.Relationship = raw.Relationship
	return nil
}

var _ json.Marshaler = (*RequestGroupActionRelatedAction)(nil)
var _ json.Unmarshaler = (*RequestGroupActionRelatedAction)(nil)
