// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package practitioner

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A person who is directly or indirectly involved in the provisioning of
// healthcare.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Practitioner
//   - Source File: StructureDefinition-Practitioner.json
type Practitioner struct {

	// Whether this practitioner's record is in active use.
	Active *fhir.Boolean `fhirpath:"active"`

	// Address(es) of the practitioner that are not role specific (typically home
	// address). Work addresses are not typically entered in this property as they
	// are usually role dependent.
	Address []*fhir.Address `fhirpath:"address"`

	// The date of birth for the practitioner.
	BirthDate *fhir.Date `fhirpath:"birthDate"`

	// A language the practitioner can use in patient communication.
	Communication []*fhir.CodeableConcept `fhirpath:"communication"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Administrative Gender - the gender that the person is considered to have for
	// administration and record keeping purposes.
	Gender *fhir.Code `fhirpath:"gender"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// An identifier that applies to this person in this role.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name(s) associated with the practitioner.
	Name []*fhir.HumanName `fhirpath:"name"`

	// Image of the person.
	Photo []*fhir.Attachment `fhirpath:"photo"`

	// The official certifications, training, and licenses that authorize or
	// otherwise pertain to the provision of care by the practitioner. For example,
	// a medical license issued by a medical board authorizing the practitioner to
	// practice medicine within a certian locality.
	Qualification []*PractitionerQualification `fhirpath:"qualification"`

	// A contact detail for the practitioner, e.g. a telephone number or an email
	// address.
	Telecom []*fhir.ContactPoint `fhirpath:"telecom"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetActive returns the value of the field Active.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetActive() *fhir.Boolean {
	if p == nil {
		return nil
	}
	return p.Active
}

// GetAddress returns the value of the field Address.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetAddress() []*fhir.Address {
	if p == nil {
		return nil
	}
	return p.Address
}

// GetBirthDate returns the value of the field BirthDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetBirthDate() *fhir.Date {
	if p == nil {
		return nil
	}
	return p.BirthDate
}

// GetCommunication returns the value of the field Communication.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetCommunication() []*fhir.CodeableConcept {
	if p == nil {
		return nil
	}
	return p.Communication
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetContained() []fhir.Resource {
	if p == nil {
		return nil
	}
	return p.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetExtension() []*fhir.Extension {
	if p == nil {
		return nil
	}
	return p.Extension
}

// GetGender returns the value of the field Gender.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetGender() *fhir.Code {
	if p == nil {
		return nil
	}
	return p.Gender
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetIdentifier() []*fhir.Identifier {
	if p == nil {
		return nil
	}
	return p.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetImplicitRules() *fhir.URI {
	if p == nil {
		return nil
	}
	return p.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetLanguage() *fhir.Code {
	if p == nil {
		return nil
	}
	return p.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetMeta() *fhir.Meta {
	if p == nil {
		return nil
	}
	return p.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetModifierExtension() []*fhir.Extension {
	if p == nil {
		return nil
	}
	return p.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetName() []*fhir.HumanName {
	if p == nil {
		return nil
	}
	return p.Name
}

// GetPhoto returns the value of the field Photo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetPhoto() []*fhir.Attachment {
	if p == nil {
		return nil
	}
	return p.Photo
}

// GetQualification returns the value of the field Qualification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetQualification() []*PractitionerQualification {
	if p == nil {
		return nil
	}
	return p.Qualification
}

// GetTelecom returns the value of the field Telecom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetTelecom() []*fhir.ContactPoint {
	if p == nil {
		return nil
	}
	return p.Telecom
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (p *Practitioner) GetText() *fhir.Narrative {
	if p == nil {
		return nil
	}
	return p.Text
}

// Certification, licenses, or training pertaining to the provision of care// The official certifications, training, and licenses that authorize or
// otherwise pertain to the provision of care by the practitioner. For example,
// a medical license issued by a medical board authorizing the practitioner to
// practice medicine within a certian locality.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Practitioner.json
type PractitionerQualification struct {

	// Coded representation of the qualification.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// An identifier that applies to this person's qualification in this role.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// Organization that regulates and issues the qualification.
	Issuer *fhir.Reference `fhirpath:"issuer"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Period during which the qualification is valid.
	Period *fhir.Period `fhirpath:"period"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pq *PractitionerQualification) GetCode() *fhir.CodeableConcept {
	if pq == nil {
		return nil
	}
	return pq.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pq *PractitionerQualification) GetExtension() []*fhir.Extension {
	if pq == nil {
		return nil
	}
	return pq.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pq *PractitionerQualification) GetID() string {
	if pq == nil {
		return ""
	}
	return pq.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pq *PractitionerQualification) GetIdentifier() []*fhir.Identifier {
	if pq == nil {
		return nil
	}
	return pq.Identifier
}

// GetIssuer returns the value of the field Issuer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pq *PractitionerQualification) GetIssuer() *fhir.Reference {
	if pq == nil {
		return nil
	}
	return pq.Issuer
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pq *PractitionerQualification) GetModifierExtension() []*fhir.Extension {
	if pq == nil {
		return nil
	}
	return pq.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pq *PractitionerQualification) GetPeriod() *fhir.Period {
	if pq == nil {
		return nil
	}
	return pq.Period
}
