// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package explanationofbenefit

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// This resource provides: the claim details; adjudication details from the
// processing of a Claim; and optionally account balance information, for
// informing the subscriber of the benefits provided.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefit struct {

	// Details of a accident which resulted in injuries which required the products
	// and services listed in the claim.
	Accident *ExplanationOfBenefitAccident `fhirpath:"accident"`

	// The first-tier service adjudications for payor added product or service
	// lines.
	AddItem []*ExplanationOfBenefitAddItem `fhirpath:"addItem"`

	// Balance by Benefit Category.
	BenefitBalance []*ExplanationOfBenefitBenefitBalance `fhirpath:"benefitBalance"`

	// The term of the benefits documented in this response.
	BenefitPeriod *fhir.Period `fhirpath:"benefitPeriod"`

	// The period for which charges are being submitted.
	BillablePeriod *fhir.Period `fhirpath:"billablePeriod"`

	// The members of the team who provided the products and services.
	CareTeam []*ExplanationOfBenefitCareTeam `fhirpath:"careTeam"`

	// The business identifier for the instance of the adjudication request: claim
	// predetermination or preauthorization.
	Claim *fhir.Reference `fhirpath:"claim"`

	// The business identifier for the instance of the adjudication response:
	// claim, predetermination or preauthorization response.
	ClaimResponse *fhir.Reference `fhirpath:"claimResponse"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date this resource was created.
	Created *fhir.DateTime `fhirpath:"created"`

	// Information about diagnoses relevant to the claim items.
	Diagnosis []*ExplanationOfBenefitDiagnosis `fhirpath:"diagnosis"`

	// A human readable description of the status of the adjudication.
	Disposition *fhir.String `fhirpath:"disposition"`

	// Individual who created the claim, predetermination or preauthorization.
	Enterer *fhir.Reference `fhirpath:"enterer"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Facility where the services were provided.
	Facility *fhir.Reference `fhirpath:"facility"`

	// The actual form, by reference or inclusion, for printing the content or an
	// EOB.
	Form *fhir.Attachment `fhirpath:"form"`

	// A code for the form to be used for printing the content.
	FormCode *fhir.CodeableConcept `fhirpath:"formCode"`

	// A code, used only on a response to a preauthorization, to indicate whether
	// the benefits payable have been reserved and for whom.
	FundsReserve *fhir.CodeableConcept `fhirpath:"fundsReserve"`

	// A code to indicate whether and for whom funds are to be reserved for future
	// claims.
	FundsReserveRequested *fhir.CodeableConcept `fhirpath:"fundsReserveRequested"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier assigned to this explanation of benefit.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Financial instruments for reimbursement for the health care products and
	// services specified on the claim.
	Insurance []*ExplanationOfBenefitInsurance `fhirpath:"insurance"`

	// The party responsible for authorization, adjudication and reimbursement.
	Insurer *fhir.Reference `fhirpath:"insurer"`

	// A claim line. Either a simple (a product or service) or a 'group' of details
	// which can also be a simple items or groups of sub-details.
	Item []*ExplanationOfBenefitItem `fhirpath:"item"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Original prescription which has been superseded by this prescription to
	// support the dispensing of pharmacy services, medications or products.
	OriginalPrescription *fhir.Reference `fhirpath:"originalPrescription"`

	// The outcome of the claim, predetermination, or preauthorization processing.
	Outcome *fhir.Code `fhirpath:"outcome"`

	// The party to whom the professional services and/or products have been
	// supplied or are being considered and for whom actual for forecast
	// reimbursement is sought.
	Patient *fhir.Reference `fhirpath:"patient"`

	// The party to be reimbursed for cost of the products and services according
	// to the terms of the policy.
	Payee *ExplanationOfBenefitPayee `fhirpath:"payee"`

	// Payment details for the adjudication of the claim.
	Payment *ExplanationOfBenefitPayment `fhirpath:"payment"`

	// Reference from the Insurer which is used in later communications which
	// refers to this adjudication.
	PreAuthRef []*fhir.String `fhirpath:"preAuthRef"`

	// The timeframe during which the supplied preauthorization reference may be
	// quoted on claims to obtain the adjudication as provided.
	PreAuthRefPeriod []*fhir.Period `fhirpath:"preAuthRefPeriod"`

	// This indicates the relative order of a series of EOBs related to different
	// coverages for the same suite of services.
	Precedence *fhir.PositiveInt `fhirpath:"precedence"`

	// Prescription to support the dispensing of pharmacy, device or vision
	// products.
	Prescription *fhir.Reference `fhirpath:"prescription"`

	// The provider-required urgency of processing the request. Typical values
	// include: stat, routine deferred.
	Priority *fhir.CodeableConcept `fhirpath:"priority"`

	// Procedures performed on the patient relevant to the billing items with the
	// claim.
	Procedure []*ExplanationOfBenefitProcedure `fhirpath:"procedure"`

	// A note that describes or explains adjudication results in a human readable
	// form.
	ProcessNote []*ExplanationOfBenefitProcessNote `fhirpath:"processNote"`

	// The provider which is responsible for the claim, predetermination or
	// preauthorization.
	Provider *fhir.Reference `fhirpath:"provider"`

	// A reference to a referral resource.
	Referral *fhir.Reference `fhirpath:"referral"`

	// Other claims which are related to this claim such as prior submissions or
	// claims for related services or for the same event.
	Related []*ExplanationOfBenefitRelated `fhirpath:"related"`

	// The status of the resource instance.
	Status *fhir.Code `fhirpath:"status"`

	// A finer grained suite of claim type codes which may convey additional
	// information such as Inpatient vs Outpatient and/or a specialty service.
	SubType *fhir.CodeableConcept `fhirpath:"subType"`

	// Additional information codes regarding exceptions, special considerations,
	// the condition, situation, prior or concurrent issues.
	SupportingInfo []*ExplanationOfBenefitSupportingInfo `fhirpath:"supportingInfo"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Categorized monetary totals for the adjudication.
	Total []*ExplanationOfBenefitTotal `fhirpath:"total"`

	// The category of claim, e.g. oral, pharmacy, vision, institutional,
	// professional.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// A code to indicate whether the nature of the request is: to request
	// adjudication of products and services previously rendered; or requesting
	// authorization and adjudication for provision in the future; or requesting
	// the non-binding adjudication of the listed products and services which could
	// be provided in the future.
	Use *fhir.Code `fhirpath:"use"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAccident returns the value of the field Accident.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetAccident() *ExplanationOfBenefitAccident {
	if eob == nil {
		return nil
	}
	return eob.Accident
}

// GetAddItem returns the value of the field AddItem.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetAddItem() []*ExplanationOfBenefitAddItem {
	if eob == nil {
		return nil
	}
	return eob.AddItem
}

// GetBenefitBalance returns the value of the field BenefitBalance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetBenefitBalance() []*ExplanationOfBenefitBenefitBalance {
	if eob == nil {
		return nil
	}
	return eob.BenefitBalance
}

// GetBenefitPeriod returns the value of the field BenefitPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetBenefitPeriod() *fhir.Period {
	if eob == nil {
		return nil
	}
	return eob.BenefitPeriod
}

// GetBillablePeriod returns the value of the field BillablePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetBillablePeriod() *fhir.Period {
	if eob == nil {
		return nil
	}
	return eob.BillablePeriod
}

// GetCareTeam returns the value of the field CareTeam.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetCareTeam() []*ExplanationOfBenefitCareTeam {
	if eob == nil {
		return nil
	}
	return eob.CareTeam
}

// GetClaim returns the value of the field Claim.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetClaim() *fhir.Reference {
	if eob == nil {
		return nil
	}
	return eob.Claim
}

// GetClaimResponse returns the value of the field ClaimResponse.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetClaimResponse() *fhir.Reference {
	if eob == nil {
		return nil
	}
	return eob.ClaimResponse
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetContained() []fhir.Resource {
	if eob == nil {
		return nil
	}
	return eob.Contained
}

// GetCreated returns the value of the field Created.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetCreated() *fhir.DateTime {
	if eob == nil {
		return nil
	}
	return eob.Created
}

// GetDiagnosis returns the value of the field Diagnosis.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetDiagnosis() []*ExplanationOfBenefitDiagnosis {
	if eob == nil {
		return nil
	}
	return eob.Diagnosis
}

// GetDisposition returns the value of the field Disposition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetDisposition() *fhir.String {
	if eob == nil {
		return nil
	}
	return eob.Disposition
}

// GetEnterer returns the value of the field Enterer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetEnterer() *fhir.Reference {
	if eob == nil {
		return nil
	}
	return eob.Enterer
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetExtension() []*fhir.Extension {
	if eob == nil {
		return nil
	}
	return eob.Extension
}

// GetFacility returns the value of the field Facility.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetFacility() *fhir.Reference {
	if eob == nil {
		return nil
	}
	return eob.Facility
}

// GetForm returns the value of the field Form.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetForm() *fhir.Attachment {
	if eob == nil {
		return nil
	}
	return eob.Form
}

// GetFormCode returns the value of the field FormCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetFormCode() *fhir.CodeableConcept {
	if eob == nil {
		return nil
	}
	return eob.FormCode
}

// GetFundsReserve returns the value of the field FundsReserve.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetFundsReserve() *fhir.CodeableConcept {
	if eob == nil {
		return nil
	}
	return eob.FundsReserve
}

// GetFundsReserveRequested returns the value of the field FundsReserveRequested.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetFundsReserveRequested() *fhir.CodeableConcept {
	if eob == nil {
		return nil
	}
	return eob.FundsReserveRequested
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetID() string {
	if eob == nil {
		return ""
	}
	return eob.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetIdentifier() []*fhir.Identifier {
	if eob == nil {
		return nil
	}
	return eob.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetImplicitRules() *fhir.URI {
	if eob == nil {
		return nil
	}
	return eob.ImplicitRules
}

// GetInsurance returns the value of the field Insurance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetInsurance() []*ExplanationOfBenefitInsurance {
	if eob == nil {
		return nil
	}
	return eob.Insurance
}

// GetInsurer returns the value of the field Insurer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetInsurer() *fhir.Reference {
	if eob == nil {
		return nil
	}
	return eob.Insurer
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetItem() []*ExplanationOfBenefitItem {
	if eob == nil {
		return nil
	}
	return eob.Item
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetLanguage() *fhir.Code {
	if eob == nil {
		return nil
	}
	return eob.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetMeta() *fhir.Meta {
	if eob == nil {
		return nil
	}
	return eob.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetModifierExtension() []*fhir.Extension {
	if eob == nil {
		return nil
	}
	return eob.ModifierExtension
}

// GetOriginalPrescription returns the value of the field OriginalPrescription.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetOriginalPrescription() *fhir.Reference {
	if eob == nil {
		return nil
	}
	return eob.OriginalPrescription
}

// GetOutcome returns the value of the field Outcome.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetOutcome() *fhir.Code {
	if eob == nil {
		return nil
	}
	return eob.Outcome
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetPatient() *fhir.Reference {
	if eob == nil {
		return nil
	}
	return eob.Patient
}

// GetPayee returns the value of the field Payee.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetPayee() *ExplanationOfBenefitPayee {
	if eob == nil {
		return nil
	}
	return eob.Payee
}

// GetPayment returns the value of the field Payment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetPayment() *ExplanationOfBenefitPayment {
	if eob == nil {
		return nil
	}
	return eob.Payment
}

// GetPreAuthRef returns the value of the field PreAuthRef.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetPreAuthRef() []*fhir.String {
	if eob == nil {
		return nil
	}
	return eob.PreAuthRef
}

// GetPreAuthRefPeriod returns the value of the field PreAuthRefPeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetPreAuthRefPeriod() []*fhir.Period {
	if eob == nil {
		return nil
	}
	return eob.PreAuthRefPeriod
}

// GetPrecedence returns the value of the field Precedence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetPrecedence() *fhir.PositiveInt {
	if eob == nil {
		return nil
	}
	return eob.Precedence
}

// GetPrescription returns the value of the field Prescription.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetPrescription() *fhir.Reference {
	if eob == nil {
		return nil
	}
	return eob.Prescription
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetPriority() *fhir.CodeableConcept {
	if eob == nil {
		return nil
	}
	return eob.Priority
}

// GetProcedure returns the value of the field Procedure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetProcedure() []*ExplanationOfBenefitProcedure {
	if eob == nil {
		return nil
	}
	return eob.Procedure
}

// GetProcessNote returns the value of the field ProcessNote.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetProcessNote() []*ExplanationOfBenefitProcessNote {
	if eob == nil {
		return nil
	}
	return eob.ProcessNote
}

// GetProvider returns the value of the field Provider.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetProvider() *fhir.Reference {
	if eob == nil {
		return nil
	}
	return eob.Provider
}

// GetReferral returns the value of the field Referral.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetReferral() *fhir.Reference {
	if eob == nil {
		return nil
	}
	return eob.Referral
}

// GetRelated returns the value of the field Related.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetRelated() []*ExplanationOfBenefitRelated {
	if eob == nil {
		return nil
	}
	return eob.Related
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetStatus() *fhir.Code {
	if eob == nil {
		return nil
	}
	return eob.Status
}

// GetSubType returns the value of the field SubType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetSubType() *fhir.CodeableConcept {
	if eob == nil {
		return nil
	}
	return eob.SubType
}

// GetSupportingInfo returns the value of the field SupportingInfo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetSupportingInfo() []*ExplanationOfBenefitSupportingInfo {
	if eob == nil {
		return nil
	}
	return eob.SupportingInfo
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetText() *fhir.Narrative {
	if eob == nil {
		return nil
	}
	return eob.Text
}

// GetTotal returns the value of the field Total.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetTotal() []*ExplanationOfBenefitTotal {
	if eob == nil {
		return nil
	}
	return eob.Total
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetType() *fhir.CodeableConcept {
	if eob == nil {
		return nil
	}
	return eob.Type
}

// GetUse returns the value of the field Use.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eob *ExplanationOfBenefit) GetUse() *fhir.Code {
	if eob == nil {
		return nil
	}
	return eob.Use
}

// Details of the event// Details of a accident which resulted in injuries which required the products
// and services listed in the claim.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitAccident struct {

	// Date of an accident event related to the products and services contained in
	// the claim.
	Date *fhir.Date `fhirpath:"date"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The physical location of the accident event.
	Location fhir.Element `fhirpath:"location"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type or context of the accident event for the purposes of selection of
	// potential insurance coverages and determination of coordination between
	// insurers.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eoba *ExplanationOfBenefitAccident) GetDate() *fhir.Date {
	if eoba == nil {
		return nil
	}
	return eoba.Date
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eoba *ExplanationOfBenefitAccident) GetExtension() []*fhir.Extension {
	if eoba == nil {
		return nil
	}
	return eoba.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eoba *ExplanationOfBenefitAccident) GetID() string {
	if eoba == nil {
		return ""
	}
	return eoba.ID
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eoba *ExplanationOfBenefitAccident) GetLocation() fhir.Element {
	if eoba == nil {
		return nil
	}
	return eoba.Location
}

// GetLocationAddress returns the value of the field Location.
func (eoba *ExplanationOfBenefitAccident) GetLocationAddress() *fhir.Address {
	if eoba == nil {
		return nil
	}
	val, ok := eoba.Location.(*fhir.Address)
	if !ok {
		return nil
	}
	return val
}

// GetLocationReference returns the value of the field Location.
func (eoba *ExplanationOfBenefitAccident) GetLocationReference() *fhir.Reference {
	if eoba == nil {
		return nil
	}
	val, ok := eoba.Location.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eoba *ExplanationOfBenefitAccident) GetModifierExtension() []*fhir.Extension {
	if eoba == nil {
		return nil
	}
	return eoba.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eoba *ExplanationOfBenefitAccident) GetType() *fhir.CodeableConcept {
	if eoba == nil {
		return nil
	}
	return eoba.Type
}

// Insurer added line items// The first-tier service adjudications for payor added product or service
// lines.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitAddItem struct {

	// Physical service site on the patient (limb, tooth, etc.).
	BodySite *fhir.CodeableConcept `fhirpath:"bodySite"`

	// The second-tier service adjudications for payor added services.
	Detail []*ExplanationOfBenefitAddItemDetail `fhirpath:"detail"`

	// The sequence number of the details within the claim item which this line is
	// intended to replace.
	DetailSequence []*fhir.PositiveInt `fhirpath:"detailSequence"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Claim items which this service line is intended to replace.
	ItemSequence []*fhir.PositiveInt `fhirpath:"itemSequence"`

	// Where the product or service was provided.
	Location fhir.Element `fhirpath:"location"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// Identifies the program under which this may be recovered.
	ProgramCode []*fhir.CodeableConcept `fhirpath:"programCode"`

	// The providers who are authorized for the services rendered to the patient.
	Provider []*fhir.Reference `fhirpath:"provider"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The date or dates when the service or product was supplied, performed or
	// completed.
	Serviced fhir.Element `fhirpath:"serviced"`

	// The sequence number of the sub-details woithin the details within the claim
	// item which this line is intended to replace.
	SubDetailSequence []*fhir.PositiveInt `fhirpath:"subDetailSequence"`

	// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
	SubSite []*fhir.CodeableConcept `fhirpath:"subSite"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBodySite returns the value of the field BodySite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetBodySite() *fhir.CodeableConcept {
	if eobai == nil {
		return nil
	}
	return eobai.BodySite
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetDetail() []*ExplanationOfBenefitAddItemDetail {
	if eobai == nil {
		return nil
	}
	return eobai.Detail
}

// GetDetailSequence returns the value of the field DetailSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetDetailSequence() []*fhir.PositiveInt {
	if eobai == nil {
		return nil
	}
	return eobai.DetailSequence
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetExtension() []*fhir.Extension {
	if eobai == nil {
		return nil
	}
	return eobai.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetFactor() *fhir.Decimal {
	if eobai == nil {
		return nil
	}
	return eobai.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetID() string {
	if eobai == nil {
		return ""
	}
	return eobai.ID
}

// GetItemSequence returns the value of the field ItemSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetItemSequence() []*fhir.PositiveInt {
	if eobai == nil {
		return nil
	}
	return eobai.ItemSequence
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetLocation() fhir.Element {
	if eobai == nil {
		return nil
	}
	return eobai.Location
}

// GetLocationCodeableConcept returns the value of the field Location.
func (eobai *ExplanationOfBenefitAddItem) GetLocationCodeableConcept() *fhir.CodeableConcept {
	if eobai == nil {
		return nil
	}
	val, ok := eobai.Location.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetLocationAddress returns the value of the field Location.
func (eobai *ExplanationOfBenefitAddItem) GetLocationAddress() *fhir.Address {
	if eobai == nil {
		return nil
	}
	val, ok := eobai.Location.(*fhir.Address)
	if !ok {
		return nil
	}
	return val
}

// GetLocationReference returns the value of the field Location.
func (eobai *ExplanationOfBenefitAddItem) GetLocationReference() *fhir.Reference {
	if eobai == nil {
		return nil
	}
	val, ok := eobai.Location.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetModifier() []*fhir.CodeableConcept {
	if eobai == nil {
		return nil
	}
	return eobai.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetModifierExtension() []*fhir.Extension {
	if eobai == nil {
		return nil
	}
	return eobai.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetNet() *fhir.Money {
	if eobai == nil {
		return nil
	}
	return eobai.Net
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetNoteNumber() []*fhir.PositiveInt {
	if eobai == nil {
		return nil
	}
	return eobai.NoteNumber
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetProductOrService() *fhir.CodeableConcept {
	if eobai == nil {
		return nil
	}
	return eobai.ProductOrService
}

// GetProgramCode returns the value of the field ProgramCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetProgramCode() []*fhir.CodeableConcept {
	if eobai == nil {
		return nil
	}
	return eobai.ProgramCode
}

// GetProvider returns the value of the field Provider.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetProvider() []*fhir.Reference {
	if eobai == nil {
		return nil
	}
	return eobai.Provider
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetQuantity() *fhir.Quantity {
	if eobai == nil {
		return nil
	}
	return eobai.Quantity
}

// GetServiced returns the value of the field Serviced.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetServiced() fhir.Element {
	if eobai == nil {
		return nil
	}
	return eobai.Serviced
}

// GetServicedDate returns the value of the field Serviced.
func (eobai *ExplanationOfBenefitAddItem) GetServicedDate() *fhir.Date {
	if eobai == nil {
		return nil
	}
	val, ok := eobai.Serviced.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetServicedPeriod returns the value of the field Serviced.
func (eobai *ExplanationOfBenefitAddItem) GetServicedPeriod() *fhir.Period {
	if eobai == nil {
		return nil
	}
	val, ok := eobai.Serviced.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetSubDetailSequence returns the value of the field SubDetailSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetSubDetailSequence() []*fhir.PositiveInt {
	if eobai == nil {
		return nil
	}
	return eobai.SubDetailSequence
}

// GetSubSite returns the value of the field SubSite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetSubSite() []*fhir.CodeableConcept {
	if eobai == nil {
		return nil
	}
	return eobai.SubSite
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobai *ExplanationOfBenefitAddItem) GetUnitPrice() *fhir.Money {
	if eobai == nil {
		return nil
	}
	return eobai.UnitPrice
}

// Insurer added line items// The second-tier service adjudications for payor added services.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitAddItemDetail struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The third-tier service adjudications for payor added services.
	SubDetail []*ExplanationOfBenefitAddItemDetailSubDetail `fhirpath:"subDetail"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetExtension() []*fhir.Extension {
	if eobaid == nil {
		return nil
	}
	return eobaid.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetFactor() *fhir.Decimal {
	if eobaid == nil {
		return nil
	}
	return eobaid.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetID() string {
	if eobaid == nil {
		return ""
	}
	return eobaid.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetModifier() []*fhir.CodeableConcept {
	if eobaid == nil {
		return nil
	}
	return eobaid.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetModifierExtension() []*fhir.Extension {
	if eobaid == nil {
		return nil
	}
	return eobaid.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetNet() *fhir.Money {
	if eobaid == nil {
		return nil
	}
	return eobaid.Net
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetNoteNumber() []*fhir.PositiveInt {
	if eobaid == nil {
		return nil
	}
	return eobaid.NoteNumber
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetProductOrService() *fhir.CodeableConcept {
	if eobaid == nil {
		return nil
	}
	return eobaid.ProductOrService
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetQuantity() *fhir.Quantity {
	if eobaid == nil {
		return nil
	}
	return eobaid.Quantity
}

// GetSubDetail returns the value of the field SubDetail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetSubDetail() []*ExplanationOfBenefitAddItemDetailSubDetail {
	if eobaid == nil {
		return nil
	}
	return eobaid.SubDetail
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaid *ExplanationOfBenefitAddItemDetail) GetUnitPrice() *fhir.Money {
	if eobaid == nil {
		return nil
	}
	return eobaid.UnitPrice
}

// Insurer added line items// The third-tier service adjudications for payor added services.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitAddItemDetailSubDetail struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaidsd *ExplanationOfBenefitAddItemDetailSubDetail) GetExtension() []*fhir.Extension {
	if eobaidsd == nil {
		return nil
	}
	return eobaidsd.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaidsd *ExplanationOfBenefitAddItemDetailSubDetail) GetFactor() *fhir.Decimal {
	if eobaidsd == nil {
		return nil
	}
	return eobaidsd.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaidsd *ExplanationOfBenefitAddItemDetailSubDetail) GetID() string {
	if eobaidsd == nil {
		return ""
	}
	return eobaidsd.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaidsd *ExplanationOfBenefitAddItemDetailSubDetail) GetModifier() []*fhir.CodeableConcept {
	if eobaidsd == nil {
		return nil
	}
	return eobaidsd.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaidsd *ExplanationOfBenefitAddItemDetailSubDetail) GetModifierExtension() []*fhir.Extension {
	if eobaidsd == nil {
		return nil
	}
	return eobaidsd.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaidsd *ExplanationOfBenefitAddItemDetailSubDetail) GetNet() *fhir.Money {
	if eobaidsd == nil {
		return nil
	}
	return eobaidsd.Net
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaidsd *ExplanationOfBenefitAddItemDetailSubDetail) GetNoteNumber() []*fhir.PositiveInt {
	if eobaidsd == nil {
		return nil
	}
	return eobaidsd.NoteNumber
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaidsd *ExplanationOfBenefitAddItemDetailSubDetail) GetProductOrService() *fhir.CodeableConcept {
	if eobaidsd == nil {
		return nil
	}
	return eobaidsd.ProductOrService
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaidsd *ExplanationOfBenefitAddItemDetailSubDetail) GetQuantity() *fhir.Quantity {
	if eobaidsd == nil {
		return nil
	}
	return eobaidsd.Quantity
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobaidsd *ExplanationOfBenefitAddItemDetailSubDetail) GetUnitPrice() *fhir.Money {
	if eobaidsd == nil {
		return nil
	}
	return eobaidsd.UnitPrice
}

// Balance by Benefit Category// Balance by Benefit Category.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitBenefitBalance struct {

	// Code to identify the general type of benefits under which products and
	// services are provided.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// A richer description of the benefit or services covered.
	Description *fhir.String `fhirpath:"description"`

	// True if the indicated class of service is excluded from the plan, missing or
	// False indicates the product or service is included in the coverage.
	Excluded *fhir.Boolean `fhirpath:"excluded"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Benefits Used to date.
	Financial []*ExplanationOfBenefitBenefitBalanceFinancial `fhirpath:"financial"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A short name or tag for the benefit.
	Name *fhir.String `fhirpath:"name"`

	// Is a flag to indicate whether the benefits refer to in-network providers or
	// out-of-network providers.
	Network *fhir.CodeableConcept `fhirpath:"network"`

	// The term or period of the values such as 'maximum lifetime benefit' or
	// 'maximum annual visits'.
	Term *fhir.CodeableConcept `fhirpath:"term"`

	// Indicates if the benefits apply to an individual or to the family.
	Unit *fhir.CodeableConcept `fhirpath:"unit"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetCategory() *fhir.CodeableConcept {
	if eobbb == nil {
		return nil
	}
	return eobbb.Category
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetDescription() *fhir.String {
	if eobbb == nil {
		return nil
	}
	return eobbb.Description
}

// GetExcluded returns the value of the field Excluded.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetExcluded() *fhir.Boolean {
	if eobbb == nil {
		return nil
	}
	return eobbb.Excluded
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetExtension() []*fhir.Extension {
	if eobbb == nil {
		return nil
	}
	return eobbb.Extension
}

// GetFinancial returns the value of the field Financial.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetFinancial() []*ExplanationOfBenefitBenefitBalanceFinancial {
	if eobbb == nil {
		return nil
	}
	return eobbb.Financial
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetID() string {
	if eobbb == nil {
		return ""
	}
	return eobbb.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetModifierExtension() []*fhir.Extension {
	if eobbb == nil {
		return nil
	}
	return eobbb.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetName() *fhir.String {
	if eobbb == nil {
		return nil
	}
	return eobbb.Name
}

// GetNetwork returns the value of the field Network.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetNetwork() *fhir.CodeableConcept {
	if eobbb == nil {
		return nil
	}
	return eobbb.Network
}

// GetTerm returns the value of the field Term.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetTerm() *fhir.CodeableConcept {
	if eobbb == nil {
		return nil
	}
	return eobbb.Term
}

// GetUnit returns the value of the field Unit.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbb *ExplanationOfBenefitBenefitBalance) GetUnit() *fhir.CodeableConcept {
	if eobbb == nil {
		return nil
	}
	return eobbb.Unit
}

// Benefit Summary// Benefits Used to date.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitBenefitBalanceFinancial struct {

	// The quantity of the benefit which is permitted under the coverage.
	Allowed fhir.Element `fhirpath:"allowed"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Classification of benefit being provided.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// The quantity of the benefit which have been consumed to date.
	Used fhir.Element `fhirpath:"used"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAllowed returns the value of the field Allowed.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetAllowed() fhir.Element {
	if eobbbf == nil {
		return nil
	}
	return eobbbf.Allowed
}

// GetAllowedUnsignedInt returns the value of the field Allowed.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetAllowedUnsignedInt() *fhir.UnsignedInt {
	if eobbbf == nil {
		return nil
	}
	val, ok := eobbbf.Allowed.(*fhir.UnsignedInt)
	if !ok {
		return nil
	}
	return val
}

// GetAllowedString returns the value of the field Allowed.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetAllowedString() *fhir.String {
	if eobbbf == nil {
		return nil
	}
	val, ok := eobbbf.Allowed.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetAllowedMoney returns the value of the field Allowed.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetAllowedMoney() *fhir.Money {
	if eobbbf == nil {
		return nil
	}
	val, ok := eobbbf.Allowed.(*fhir.Money)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetExtension() []*fhir.Extension {
	if eobbbf == nil {
		return nil
	}
	return eobbbf.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetID() string {
	if eobbbf == nil {
		return ""
	}
	return eobbbf.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetModifierExtension() []*fhir.Extension {
	if eobbbf == nil {
		return nil
	}
	return eobbbf.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetType() *fhir.CodeableConcept {
	if eobbbf == nil {
		return nil
	}
	return eobbbf.Type
}

// GetUsed returns the value of the field Used.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetUsed() fhir.Element {
	if eobbbf == nil {
		return nil
	}
	return eobbbf.Used
}

// GetUsedUnsignedInt returns the value of the field Used.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetUsedUnsignedInt() *fhir.UnsignedInt {
	if eobbbf == nil {
		return nil
	}
	val, ok := eobbbf.Used.(*fhir.UnsignedInt)
	if !ok {
		return nil
	}
	return val
}

// GetUsedMoney returns the value of the field Used.
func (eobbbf *ExplanationOfBenefitBenefitBalanceFinancial) GetUsedMoney() *fhir.Money {
	if eobbbf == nil {
		return nil
	}
	val, ok := eobbbf.Used.(*fhir.Money)
	if !ok {
		return nil
	}
	return val
}

// Care Team members// The members of the team who provided the products and services.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitCareTeam struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Member of the team who provided the product or service.
	Provider *fhir.Reference `fhirpath:"provider"`

	// The qualification of the practitioner which is applicable for this service.
	Qualification *fhir.CodeableConcept `fhirpath:"qualification"`

	// The party who is billing and/or responsible for the claimed products or
	// services.
	Responsible *fhir.Boolean `fhirpath:"responsible"`

	// The lead, assisting or supervising practitioner and their discipline if a
	// multidisciplinary team.
	Role *fhir.CodeableConcept `fhirpath:"role"`

	// A number to uniquely identify care team entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobct *ExplanationOfBenefitCareTeam) GetExtension() []*fhir.Extension {
	if eobct == nil {
		return nil
	}
	return eobct.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobct *ExplanationOfBenefitCareTeam) GetID() string {
	if eobct == nil {
		return ""
	}
	return eobct.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobct *ExplanationOfBenefitCareTeam) GetModifierExtension() []*fhir.Extension {
	if eobct == nil {
		return nil
	}
	return eobct.ModifierExtension
}

// GetProvider returns the value of the field Provider.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobct *ExplanationOfBenefitCareTeam) GetProvider() *fhir.Reference {
	if eobct == nil {
		return nil
	}
	return eobct.Provider
}

// GetQualification returns the value of the field Qualification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobct *ExplanationOfBenefitCareTeam) GetQualification() *fhir.CodeableConcept {
	if eobct == nil {
		return nil
	}
	return eobct.Qualification
}

// GetResponsible returns the value of the field Responsible.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobct *ExplanationOfBenefitCareTeam) GetResponsible() *fhir.Boolean {
	if eobct == nil {
		return nil
	}
	return eobct.Responsible
}

// GetRole returns the value of the field Role.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobct *ExplanationOfBenefitCareTeam) GetRole() *fhir.CodeableConcept {
	if eobct == nil {
		return nil
	}
	return eobct.Role
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobct *ExplanationOfBenefitCareTeam) GetSequence() *fhir.PositiveInt {
	if eobct == nil {
		return nil
	}
	return eobct.Sequence
}

// Pertinent diagnosis information// Information about diagnoses relevant to the claim items.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitDiagnosis struct {

	// The nature of illness or problem in a coded form or as a reference to an
	// external defined Condition.
	Diagnosis fhir.Element `fhirpath:"diagnosis"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Indication of whether the diagnosis was present on admission to a facility.
	OnAdmission *fhir.CodeableConcept `fhirpath:"onAdmission"`

	// A package billing code or bundle code used to group products and services to
	// a particular health condition (such as heart attack) which is based on a
	// predetermined grouping code system.
	PackageCode *fhir.CodeableConcept `fhirpath:"packageCode"`

	// A number to uniquely identify diagnosis entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// When the condition was observed or the relative ranking.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDiagnosis returns the value of the field Diagnosis.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobd *ExplanationOfBenefitDiagnosis) GetDiagnosis() fhir.Element {
	if eobd == nil {
		return nil
	}
	return eobd.Diagnosis
}

// GetDiagnosisCodeableConcept returns the value of the field Diagnosis.
func (eobd *ExplanationOfBenefitDiagnosis) GetDiagnosisCodeableConcept() *fhir.CodeableConcept {
	if eobd == nil {
		return nil
	}
	val, ok := eobd.Diagnosis.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetDiagnosisReference returns the value of the field Diagnosis.
func (eobd *ExplanationOfBenefitDiagnosis) GetDiagnosisReference() *fhir.Reference {
	if eobd == nil {
		return nil
	}
	val, ok := eobd.Diagnosis.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobd *ExplanationOfBenefitDiagnosis) GetExtension() []*fhir.Extension {
	if eobd == nil {
		return nil
	}
	return eobd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobd *ExplanationOfBenefitDiagnosis) GetID() string {
	if eobd == nil {
		return ""
	}
	return eobd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobd *ExplanationOfBenefitDiagnosis) GetModifierExtension() []*fhir.Extension {
	if eobd == nil {
		return nil
	}
	return eobd.ModifierExtension
}

// GetOnAdmission returns the value of the field OnAdmission.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobd *ExplanationOfBenefitDiagnosis) GetOnAdmission() *fhir.CodeableConcept {
	if eobd == nil {
		return nil
	}
	return eobd.OnAdmission
}

// GetPackageCode returns the value of the field PackageCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobd *ExplanationOfBenefitDiagnosis) GetPackageCode() *fhir.CodeableConcept {
	if eobd == nil {
		return nil
	}
	return eobd.PackageCode
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobd *ExplanationOfBenefitDiagnosis) GetSequence() *fhir.PositiveInt {
	if eobd == nil {
		return nil
	}
	return eobd.Sequence
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobd *ExplanationOfBenefitDiagnosis) GetType() []*fhir.CodeableConcept {
	if eobd == nil {
		return nil
	}
	return eobd.Type
}

// Patient insurance information// Financial instruments for reimbursement for the health care products and
// services specified on the claim.// All insurance coverages for the patient which may be applicable for
// reimbursement, of the products and services listed in the claim, are
// typically provided in the claim to allow insurers to confirm the ordering of
// the insurance coverages relative to local 'coordination of benefit' rules.
// One coverage (and only one) with 'focal=true' is to be used in the
// adjudication of this claim. Coverages appearing before the focal Coverage in
// the list, and where 'Coverage.subrogation=false', should provide a reference
// to the ClaimResponse containing the adjudication results of the prior claim.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitInsurance struct {

	// Reference to the insurance card level information contained in the Coverage
	// resource. The coverage issuing insurer will use these details to locate the
	// patient's actual coverage within the insurer's information system.
	Coverage *fhir.Reference `fhirpath:"coverage"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A flag to indicate that this Coverage is to be used for adjudication of this
	// claim when set to true.
	Focal *fhir.Boolean `fhirpath:"focal"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Reference numbers previously provided by the insurer to the provider to be
	// quoted on subsequent claims containing services or products related to the
	// prior authorization.
	PreAuthRef []*fhir.String `fhirpath:"preAuthRef"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCoverage returns the value of the field Coverage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitInsurance) GetCoverage() *fhir.Reference {
	if eobi == nil {
		return nil
	}
	return eobi.Coverage
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitInsurance) GetExtension() []*fhir.Extension {
	if eobi == nil {
		return nil
	}
	return eobi.Extension
}

// GetFocal returns the value of the field Focal.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitInsurance) GetFocal() *fhir.Boolean {
	if eobi == nil {
		return nil
	}
	return eobi.Focal
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitInsurance) GetID() string {
	if eobi == nil {
		return ""
	}
	return eobi.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitInsurance) GetModifierExtension() []*fhir.Extension {
	if eobi == nil {
		return nil
	}
	return eobi.ModifierExtension
}

// GetPreAuthRef returns the value of the field PreAuthRef.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitInsurance) GetPreAuthRef() []*fhir.String {
	if eobi == nil {
		return nil
	}
	return eobi.PreAuthRef
}

// Product or service provided// A claim line. Either a simple (a product or service) or a 'group' of details
// which can also be a simple items or groups of sub-details.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitItem struct {

	// If this item is a group then the values here are a summary of the
	// adjudication of the detail items. If this item is a simple product or
	// service then this is the result of the adjudication of this item.
	Adjudication []*ExplanationOfBenefitItemAdjudication `fhirpath:"adjudication"`

	// Physical service site on the patient (limb, tooth, etc.).
	BodySite *fhir.CodeableConcept `fhirpath:"bodySite"`

	// Care team members related to this service or product.
	CareTeamSequence []*fhir.PositiveInt `fhirpath:"careTeamSequence"`

	// Code to identify the general type of benefits under which products and
	// services are provided.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// Second-tier of goods and services.
	Detail []*ExplanationOfBenefitItemDetail `fhirpath:"detail"`

	// Diagnoses applicable for this service or product.
	DiagnosisSequence []*fhir.PositiveInt `fhirpath:"diagnosisSequence"`

	// A billed item may include goods or services provided in multiple encounters.
	Encounter []*fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Exceptions, special conditions and supporting information applicable for
	// this service or product.
	InformationSequence []*fhir.PositiveInt `fhirpath:"informationSequence"`

	// Where the product or service was provided.
	Location fhir.Element `fhirpath:"location"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// Procedures applicable for this service or product.
	ProcedureSequence []*fhir.PositiveInt `fhirpath:"procedureSequence"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// Identifies the program under which this may be recovered.
	ProgramCode []*fhir.CodeableConcept `fhirpath:"programCode"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The type of revenue or cost center providing the product and/or service.
	Revenue *fhir.CodeableConcept `fhirpath:"revenue"`

	// A number to uniquely identify item entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// The date or dates when the service or product was supplied, performed or
	// completed.
	Serviced fhir.Element `fhirpath:"serviced"`

	// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
	SubSite []*fhir.CodeableConcept `fhirpath:"subSite"`

	// Unique Device Identifiers associated with this line item.
	Udi []*fhir.Reference `fhirpath:"udi"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAdjudication returns the value of the field Adjudication.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetAdjudication() []*ExplanationOfBenefitItemAdjudication {
	if eobi == nil {
		return nil
	}
	return eobi.Adjudication
}

// GetBodySite returns the value of the field BodySite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetBodySite() *fhir.CodeableConcept {
	if eobi == nil {
		return nil
	}
	return eobi.BodySite
}

// GetCareTeamSequence returns the value of the field CareTeamSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetCareTeamSequence() []*fhir.PositiveInt {
	if eobi == nil {
		return nil
	}
	return eobi.CareTeamSequence
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetCategory() *fhir.CodeableConcept {
	if eobi == nil {
		return nil
	}
	return eobi.Category
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetDetail() []*ExplanationOfBenefitItemDetail {
	if eobi == nil {
		return nil
	}
	return eobi.Detail
}

// GetDiagnosisSequence returns the value of the field DiagnosisSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetDiagnosisSequence() []*fhir.PositiveInt {
	if eobi == nil {
		return nil
	}
	return eobi.DiagnosisSequence
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetEncounter() []*fhir.Reference {
	if eobi == nil {
		return nil
	}
	return eobi.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetExtension() []*fhir.Extension {
	if eobi == nil {
		return nil
	}
	return eobi.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetFactor() *fhir.Decimal {
	if eobi == nil {
		return nil
	}
	return eobi.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetID() string {
	if eobi == nil {
		return ""
	}
	return eobi.ID
}

// GetInformationSequence returns the value of the field InformationSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetInformationSequence() []*fhir.PositiveInt {
	if eobi == nil {
		return nil
	}
	return eobi.InformationSequence
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetLocation() fhir.Element {
	if eobi == nil {
		return nil
	}
	return eobi.Location
}

// GetLocationCodeableConcept returns the value of the field Location.
func (eobi *ExplanationOfBenefitItem) GetLocationCodeableConcept() *fhir.CodeableConcept {
	if eobi == nil {
		return nil
	}
	val, ok := eobi.Location.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetLocationAddress returns the value of the field Location.
func (eobi *ExplanationOfBenefitItem) GetLocationAddress() *fhir.Address {
	if eobi == nil {
		return nil
	}
	val, ok := eobi.Location.(*fhir.Address)
	if !ok {
		return nil
	}
	return val
}

// GetLocationReference returns the value of the field Location.
func (eobi *ExplanationOfBenefitItem) GetLocationReference() *fhir.Reference {
	if eobi == nil {
		return nil
	}
	val, ok := eobi.Location.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetModifier() []*fhir.CodeableConcept {
	if eobi == nil {
		return nil
	}
	return eobi.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetModifierExtension() []*fhir.Extension {
	if eobi == nil {
		return nil
	}
	return eobi.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetNet() *fhir.Money {
	if eobi == nil {
		return nil
	}
	return eobi.Net
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetNoteNumber() []*fhir.PositiveInt {
	if eobi == nil {
		return nil
	}
	return eobi.NoteNumber
}

// GetProcedureSequence returns the value of the field ProcedureSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetProcedureSequence() []*fhir.PositiveInt {
	if eobi == nil {
		return nil
	}
	return eobi.ProcedureSequence
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetProductOrService() *fhir.CodeableConcept {
	if eobi == nil {
		return nil
	}
	return eobi.ProductOrService
}

// GetProgramCode returns the value of the field ProgramCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetProgramCode() []*fhir.CodeableConcept {
	if eobi == nil {
		return nil
	}
	return eobi.ProgramCode
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetQuantity() *fhir.Quantity {
	if eobi == nil {
		return nil
	}
	return eobi.Quantity
}

// GetRevenue returns the value of the field Revenue.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetRevenue() *fhir.CodeableConcept {
	if eobi == nil {
		return nil
	}
	return eobi.Revenue
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetSequence() *fhir.PositiveInt {
	if eobi == nil {
		return nil
	}
	return eobi.Sequence
}

// GetServiced returns the value of the field Serviced.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetServiced() fhir.Element {
	if eobi == nil {
		return nil
	}
	return eobi.Serviced
}

// GetServicedDate returns the value of the field Serviced.
func (eobi *ExplanationOfBenefitItem) GetServicedDate() *fhir.Date {
	if eobi == nil {
		return nil
	}
	val, ok := eobi.Serviced.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetServicedPeriod returns the value of the field Serviced.
func (eobi *ExplanationOfBenefitItem) GetServicedPeriod() *fhir.Period {
	if eobi == nil {
		return nil
	}
	val, ok := eobi.Serviced.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetSubSite returns the value of the field SubSite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetSubSite() []*fhir.CodeableConcept {
	if eobi == nil {
		return nil
	}
	return eobi.SubSite
}

// GetUdi returns the value of the field Udi.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetUdi() []*fhir.Reference {
	if eobi == nil {
		return nil
	}
	return eobi.Udi
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobi *ExplanationOfBenefitItem) GetUnitPrice() *fhir.Money {
	if eobi == nil {
		return nil
	}
	return eobi.UnitPrice
}

// Adjudication details// If this item is a group then the values here are a summary of the
// adjudication of the detail items. If this item is a simple product or
// service then this is the result of the adjudication of this item.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitItemAdjudication struct {

	// Monetary amount associated with the category.
	Amount *fhir.Money `fhirpath:"amount"`

	// A code to indicate the information type of this adjudication record.
	// Information types may include: the value submitted, maximum values or
	// percentages allowed or payable under the plan, amounts that the patient is
	// responsible for in-aggregate or pertaining to this item, amounts paid by
	// other coverages, and the benefit payable for this item.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A code supporting the understanding of the adjudication result and
	// explaining variance from expected amount.
	Reason *fhir.CodeableConcept `fhirpath:"reason"`

	// A non-monetary value associated with the category. Mutually exclusive to the
	// amount element above.
	Value *fhir.Decimal `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobia *ExplanationOfBenefitItemAdjudication) GetAmount() *fhir.Money {
	if eobia == nil {
		return nil
	}
	return eobia.Amount
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobia *ExplanationOfBenefitItemAdjudication) GetCategory() *fhir.CodeableConcept {
	if eobia == nil {
		return nil
	}
	return eobia.Category
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobia *ExplanationOfBenefitItemAdjudication) GetExtension() []*fhir.Extension {
	if eobia == nil {
		return nil
	}
	return eobia.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobia *ExplanationOfBenefitItemAdjudication) GetID() string {
	if eobia == nil {
		return ""
	}
	return eobia.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobia *ExplanationOfBenefitItemAdjudication) GetModifierExtension() []*fhir.Extension {
	if eobia == nil {
		return nil
	}
	return eobia.ModifierExtension
}

// GetReason returns the value of the field Reason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobia *ExplanationOfBenefitItemAdjudication) GetReason() *fhir.CodeableConcept {
	if eobia == nil {
		return nil
	}
	return eobia.Reason
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobia *ExplanationOfBenefitItemAdjudication) GetValue() *fhir.Decimal {
	if eobia == nil {
		return nil
	}
	return eobia.Value
}

// Additional items// Second-tier of goods and services.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitItemDetail struct {

	// Code to identify the general type of benefits under which products and
	// services are provided.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// Identifies the program under which this may be recovered.
	ProgramCode []*fhir.CodeableConcept `fhirpath:"programCode"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The type of revenue or cost center providing the product and/or service.
	Revenue *fhir.CodeableConcept `fhirpath:"revenue"`

	// A claim detail line. Either a simple (a product or service) or a 'group' of
	// sub-details which are simple items.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// Third-tier of goods and services.
	SubDetail []*ExplanationOfBenefitItemDetailSubDetail `fhirpath:"subDetail"`

	// Unique Device Identifiers associated with this line item.
	Udi []*fhir.Reference `fhirpath:"udi"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetCategory() *fhir.CodeableConcept {
	if eobid == nil {
		return nil
	}
	return eobid.Category
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetExtension() []*fhir.Extension {
	if eobid == nil {
		return nil
	}
	return eobid.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetFactor() *fhir.Decimal {
	if eobid == nil {
		return nil
	}
	return eobid.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetID() string {
	if eobid == nil {
		return ""
	}
	return eobid.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetModifier() []*fhir.CodeableConcept {
	if eobid == nil {
		return nil
	}
	return eobid.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetModifierExtension() []*fhir.Extension {
	if eobid == nil {
		return nil
	}
	return eobid.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetNet() *fhir.Money {
	if eobid == nil {
		return nil
	}
	return eobid.Net
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetNoteNumber() []*fhir.PositiveInt {
	if eobid == nil {
		return nil
	}
	return eobid.NoteNumber
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetProductOrService() *fhir.CodeableConcept {
	if eobid == nil {
		return nil
	}
	return eobid.ProductOrService
}

// GetProgramCode returns the value of the field ProgramCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetProgramCode() []*fhir.CodeableConcept {
	if eobid == nil {
		return nil
	}
	return eobid.ProgramCode
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetQuantity() *fhir.Quantity {
	if eobid == nil {
		return nil
	}
	return eobid.Quantity
}

// GetRevenue returns the value of the field Revenue.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetRevenue() *fhir.CodeableConcept {
	if eobid == nil {
		return nil
	}
	return eobid.Revenue
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetSequence() *fhir.PositiveInt {
	if eobid == nil {
		return nil
	}
	return eobid.Sequence
}

// GetSubDetail returns the value of the field SubDetail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetSubDetail() []*ExplanationOfBenefitItemDetailSubDetail {
	if eobid == nil {
		return nil
	}
	return eobid.SubDetail
}

// GetUdi returns the value of the field Udi.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetUdi() []*fhir.Reference {
	if eobid == nil {
		return nil
	}
	return eobid.Udi
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobid *ExplanationOfBenefitItemDetail) GetUnitPrice() *fhir.Money {
	if eobid == nil {
		return nil
	}
	return eobid.UnitPrice
}

// Additional items// Third-tier of goods and services.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitItemDetailSubDetail struct {

	// Code to identify the general type of benefits under which products and
	// services are provided.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// The numbers associated with notes below which apply to the adjudication of
	// this item.
	NoteNumber []*fhir.PositiveInt `fhirpath:"noteNumber"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// Identifies the program under which this may be recovered.
	ProgramCode []*fhir.CodeableConcept `fhirpath:"programCode"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The type of revenue or cost center providing the product and/or service.
	Revenue *fhir.CodeableConcept `fhirpath:"revenue"`

	// A claim detail line. Either a simple (a product or service) or a 'group' of
	// sub-details which are simple items.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// Unique Device Identifiers associated with this line item.
	Udi []*fhir.Reference `fhirpath:"udi"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetCategory() *fhir.CodeableConcept {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.Category
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetExtension() []*fhir.Extension {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetFactor() *fhir.Decimal {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetID() string {
	if eobidsd == nil {
		return ""
	}
	return eobidsd.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetModifier() []*fhir.CodeableConcept {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetModifierExtension() []*fhir.Extension {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetNet() *fhir.Money {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.Net
}

// GetNoteNumber returns the value of the field NoteNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetNoteNumber() []*fhir.PositiveInt {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.NoteNumber
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetProductOrService() *fhir.CodeableConcept {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.ProductOrService
}

// GetProgramCode returns the value of the field ProgramCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetProgramCode() []*fhir.CodeableConcept {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.ProgramCode
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetQuantity() *fhir.Quantity {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.Quantity
}

// GetRevenue returns the value of the field Revenue.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetRevenue() *fhir.CodeableConcept {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.Revenue
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetSequence() *fhir.PositiveInt {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.Sequence
}

// GetUdi returns the value of the field Udi.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetUdi() []*fhir.Reference {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.Udi
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobidsd *ExplanationOfBenefitItemDetailSubDetail) GetUnitPrice() *fhir.Money {
	if eobidsd == nil {
		return nil
	}
	return eobidsd.UnitPrice
}

// Recipient of benefits payable// The party to be reimbursed for cost of the products and services according
// to the terms of the policy.// Often providers agree to receive the benefits payable to reduce the
// near-term costs to the patient. The insurer may decline to pay the provider
// and may choose to pay the subscriber instead.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitPayee struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Reference to the individual or organization to whom any payment will be
	// made.
	Party *fhir.Reference `fhirpath:"party"`

	// Type of Party to be reimbursed: Subscriber, provider, other.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayee) GetExtension() []*fhir.Extension {
	if eobp == nil {
		return nil
	}
	return eobp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayee) GetID() string {
	if eobp == nil {
		return ""
	}
	return eobp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayee) GetModifierExtension() []*fhir.Extension {
	if eobp == nil {
		return nil
	}
	return eobp.ModifierExtension
}

// GetParty returns the value of the field Party.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayee) GetParty() *fhir.Reference {
	if eobp == nil {
		return nil
	}
	return eobp.Party
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayee) GetType() *fhir.CodeableConcept {
	if eobp == nil {
		return nil
	}
	return eobp.Type
}

// Payment Details// Payment details for the adjudication of the claim.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitPayment struct {

	// Total amount of all adjustments to this payment included in this transaction
	// which are not related to this claim's adjudication.
	Adjustment *fhir.Money `fhirpath:"adjustment"`

	// Reason for the payment adjustment.
	AdjustmentReason *fhir.CodeableConcept `fhirpath:"adjustmentReason"`

	// Benefits payable less any payment adjustment.
	Amount *fhir.Money `fhirpath:"amount"`

	// Estimated date the payment will be issued or the actual issue date of
	// payment.
	Date *fhir.Date `fhirpath:"date"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Issuer's unique identifier for the payment instrument.
	Identifier *fhir.Identifier `fhirpath:"identifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Whether this represents partial or complete payment of the benefits payable.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAdjustment returns the value of the field Adjustment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayment) GetAdjustment() *fhir.Money {
	if eobp == nil {
		return nil
	}
	return eobp.Adjustment
}

// GetAdjustmentReason returns the value of the field AdjustmentReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayment) GetAdjustmentReason() *fhir.CodeableConcept {
	if eobp == nil {
		return nil
	}
	return eobp.AdjustmentReason
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayment) GetAmount() *fhir.Money {
	if eobp == nil {
		return nil
	}
	return eobp.Amount
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayment) GetDate() *fhir.Date {
	if eobp == nil {
		return nil
	}
	return eobp.Date
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayment) GetExtension() []*fhir.Extension {
	if eobp == nil {
		return nil
	}
	return eobp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayment) GetID() string {
	if eobp == nil {
		return ""
	}
	return eobp.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayment) GetIdentifier() *fhir.Identifier {
	if eobp == nil {
		return nil
	}
	return eobp.Identifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayment) GetModifierExtension() []*fhir.Extension {
	if eobp == nil {
		return nil
	}
	return eobp.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitPayment) GetType() *fhir.CodeableConcept {
	if eobp == nil {
		return nil
	}
	return eobp.Type
}

// Clinical procedures performed// Procedures performed on the patient relevant to the billing items with the
// claim.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitProcedure struct {

	// Date and optionally time the procedure was performed.
	Date *fhir.DateTime `fhirpath:"date"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The code or reference to a Procedure resource which identifies the clinical
	// intervention performed.
	Procedure fhir.Element `fhirpath:"procedure"`

	// A number to uniquely identify procedure entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// When the condition was observed or the relative ranking.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	// Unique Device Identifiers associated with this line item.
	Udi []*fhir.Reference `fhirpath:"udi"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitProcedure) GetDate() *fhir.DateTime {
	if eobp == nil {
		return nil
	}
	return eobp.Date
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitProcedure) GetExtension() []*fhir.Extension {
	if eobp == nil {
		return nil
	}
	return eobp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitProcedure) GetID() string {
	if eobp == nil {
		return ""
	}
	return eobp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitProcedure) GetModifierExtension() []*fhir.Extension {
	if eobp == nil {
		return nil
	}
	return eobp.ModifierExtension
}

// GetProcedure returns the value of the field Procedure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitProcedure) GetProcedure() fhir.Element {
	if eobp == nil {
		return nil
	}
	return eobp.Procedure
}

// GetProcedureCodeableConcept returns the value of the field Procedure.
func (eobp *ExplanationOfBenefitProcedure) GetProcedureCodeableConcept() *fhir.CodeableConcept {
	if eobp == nil {
		return nil
	}
	val, ok := eobp.Procedure.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetProcedureReference returns the value of the field Procedure.
func (eobp *ExplanationOfBenefitProcedure) GetProcedureReference() *fhir.Reference {
	if eobp == nil {
		return nil
	}
	val, ok := eobp.Procedure.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitProcedure) GetSequence() *fhir.PositiveInt {
	if eobp == nil {
		return nil
	}
	return eobp.Sequence
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitProcedure) GetType() []*fhir.CodeableConcept {
	if eobp == nil {
		return nil
	}
	return eobp.Type
}

// GetUdi returns the value of the field Udi.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobp *ExplanationOfBenefitProcedure) GetUdi() []*fhir.Reference {
	if eobp == nil {
		return nil
	}
	return eobp.Udi
}

// Note concerning adjudication// A note that describes or explains adjudication results in a human readable
// form.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitProcessNote struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A code to define the language used in the text of the note.
	Language *fhir.CodeableConcept `fhirpath:"language"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A number to uniquely identify a note entry.
	Number *fhir.PositiveInt `fhirpath:"number"`

	// The explanation or description associated with the processing.
	Text *fhir.String `fhirpath:"text"`

	// The business purpose of the note text.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobpn *ExplanationOfBenefitProcessNote) GetExtension() []*fhir.Extension {
	if eobpn == nil {
		return nil
	}
	return eobpn.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobpn *ExplanationOfBenefitProcessNote) GetID() string {
	if eobpn == nil {
		return ""
	}
	return eobpn.ID
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobpn *ExplanationOfBenefitProcessNote) GetLanguage() *fhir.CodeableConcept {
	if eobpn == nil {
		return nil
	}
	return eobpn.Language
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobpn *ExplanationOfBenefitProcessNote) GetModifierExtension() []*fhir.Extension {
	if eobpn == nil {
		return nil
	}
	return eobpn.ModifierExtension
}

// GetNumber returns the value of the field Number.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobpn *ExplanationOfBenefitProcessNote) GetNumber() *fhir.PositiveInt {
	if eobpn == nil {
		return nil
	}
	return eobpn.Number
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobpn *ExplanationOfBenefitProcessNote) GetText() *fhir.String {
	if eobpn == nil {
		return nil
	}
	return eobpn.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobpn *ExplanationOfBenefitProcessNote) GetType() *fhir.Code {
	if eobpn == nil {
		return nil
	}
	return eobpn.Type
}

// Prior or corollary claims// Other claims which are related to this claim such as prior submissions or
// claims for related services or for the same event.// For example, for the original treatment and follow-up exams.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitRelated struct {

	// Reference to a related claim.
	Claim *fhir.Reference `fhirpath:"claim"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// An alternate organizational reference to the case or file to which this
	// particular claim pertains.
	Reference *fhir.Identifier `fhirpath:"reference"`

	// A code to convey how the claims are related.
	Relationship *fhir.CodeableConcept `fhirpath:"relationship"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetClaim returns the value of the field Claim.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobr *ExplanationOfBenefitRelated) GetClaim() *fhir.Reference {
	if eobr == nil {
		return nil
	}
	return eobr.Claim
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobr *ExplanationOfBenefitRelated) GetExtension() []*fhir.Extension {
	if eobr == nil {
		return nil
	}
	return eobr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobr *ExplanationOfBenefitRelated) GetID() string {
	if eobr == nil {
		return ""
	}
	return eobr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobr *ExplanationOfBenefitRelated) GetModifierExtension() []*fhir.Extension {
	if eobr == nil {
		return nil
	}
	return eobr.ModifierExtension
}

// GetReference returns the value of the field Reference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobr *ExplanationOfBenefitRelated) GetReference() *fhir.Identifier {
	if eobr == nil {
		return nil
	}
	return eobr.Reference
}

// GetRelationship returns the value of the field Relationship.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobr *ExplanationOfBenefitRelated) GetRelationship() *fhir.CodeableConcept {
	if eobr == nil {
		return nil
	}
	return eobr.Relationship
}

// Supporting information// Additional information codes regarding exceptions, special considerations,
// the condition, situation, prior or concurrent issues.// Often there are multiple jurisdiction specific valuesets which are required.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitSupportingInfo struct {

	// The general class of the information supplied: information; exception;
	// accident, employment; onset, etc.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// System and code pertaining to the specific information regarding special
	// conditions relating to the setting, treatment or patient for which care is
	// sought.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Provides the reason in the situation where a reason code is required in
	// addition to the content.
	Reason *fhir.Coding `fhirpath:"reason"`

	// A number to uniquely identify supporting information entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// The date when or period to which this information refers.
	Timing fhir.Element `fhirpath:"timing"`

	// Additional data or information such as resources, documents, images etc.
	// including references to the data or the actual inclusion of the data.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetCategory() *fhir.CodeableConcept {
	if eobsi == nil {
		return nil
	}
	return eobsi.Category
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetCode() *fhir.CodeableConcept {
	if eobsi == nil {
		return nil
	}
	return eobsi.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetExtension() []*fhir.Extension {
	if eobsi == nil {
		return nil
	}
	return eobsi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetID() string {
	if eobsi == nil {
		return ""
	}
	return eobsi.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetModifierExtension() []*fhir.Extension {
	if eobsi == nil {
		return nil
	}
	return eobsi.ModifierExtension
}

// GetReason returns the value of the field Reason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetReason() *fhir.Coding {
	if eobsi == nil {
		return nil
	}
	return eobsi.Reason
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetSequence() *fhir.PositiveInt {
	if eobsi == nil {
		return nil
	}
	return eobsi.Sequence
}

// GetTiming returns the value of the field Timing.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetTiming() fhir.Element {
	if eobsi == nil {
		return nil
	}
	return eobsi.Timing
}

// GetTimingDate returns the value of the field Timing.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetTimingDate() *fhir.Date {
	if eobsi == nil {
		return nil
	}
	val, ok := eobsi.Timing.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetTimingPeriod returns the value of the field Timing.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetTimingPeriod() *fhir.Period {
	if eobsi == nil {
		return nil
	}
	val, ok := eobsi.Timing.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetValue() fhir.Element {
	if eobsi == nil {
		return nil
	}
	return eobsi.Value
}

// GetValueBoolean returns the value of the field Value.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetValueBoolean() *fhir.Boolean {
	if eobsi == nil {
		return nil
	}
	val, ok := eobsi.Value.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetValueString returns the value of the field Value.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetValueString() *fhir.String {
	if eobsi == nil {
		return nil
	}
	val, ok := eobsi.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueQuantity returns the value of the field Value.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetValueQuantity() *fhir.Quantity {
	if eobsi == nil {
		return nil
	}
	val, ok := eobsi.Value.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetValueAttachment returns the value of the field Value.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetValueAttachment() *fhir.Attachment {
	if eobsi == nil {
		return nil
	}
	val, ok := eobsi.Value.(*fhir.Attachment)
	if !ok {
		return nil
	}
	return val
}

// GetValueReference returns the value of the field Value.
func (eobsi *ExplanationOfBenefitSupportingInfo) GetValueReference() *fhir.Reference {
	if eobsi == nil {
		return nil
	}
	val, ok := eobsi.Value.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}

// Adjudication totals// Categorized monetary totals for the adjudication.// Totals for amounts submitted, co-pays, benefits payable etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ExplanationOfBenefit.json
type ExplanationOfBenefitTotal struct {

	// Monetary total amount associated with the category.
	Amount *fhir.Money `fhirpath:"amount"`

	// A code to indicate the information type of this adjudication record.
	// Information types may include: the value submitted, maximum values or
	// percentages allowed or payable under the plan, amounts that the patient is
	// responsible for in aggregate or pertaining to this item, amounts paid by
	// other coverages, and the benefit payable for this item.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobt *ExplanationOfBenefitTotal) GetAmount() *fhir.Money {
	if eobt == nil {
		return nil
	}
	return eobt.Amount
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobt *ExplanationOfBenefitTotal) GetCategory() *fhir.CodeableConcept {
	if eobt == nil {
		return nil
	}
	return eobt.Category
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobt *ExplanationOfBenefitTotal) GetExtension() []*fhir.Extension {
	if eobt == nil {
		return nil
	}
	return eobt.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobt *ExplanationOfBenefitTotal) GetID() string {
	if eobt == nil {
		return ""
	}
	return eobt.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (eobt *ExplanationOfBenefitTotal) GetModifierExtension() []*fhir.Extension {
	if eobt == nil {
		return nil
	}
	return eobt.ModifierExtension
}
