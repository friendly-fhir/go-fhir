// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package medicationstatement

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A record of a medication that is being consumed by a patient. A
// MedicationStatement may indicate that the patient may be taking the
// medication now or has taken the medication in the past or will be taking the
// medication in the future. The source of this information can be the patient,
// significant other (such as a family member or spouse), or a clinician. A
// common scenario where this information is captured is during the history
// taking process during a patient visit or stay. The medication information
// may come from sources such as the patient's memory, from a prescription
// bottle, or from a list of medications the patient, clinician or other party
// maintains.
// The primary difference between a medication statement and a medication
// administration is that the medication administration has complete
// administration information and is based on actual administration information
// from the person who administered the medication. A medication statement is
// often, if not always, less specific. There is no required date/time when the
// medication was administered, in fact we only know that a source has reported
// the patient is taking this medication, where details such as time, quantity,
// or rate or even medication product may be incomplete or missing or less
// precise. As stated earlier, the medication statement information may come
// from the patient's memory, from a prescription bottle or from a list of
// medications the patient, clinician or other party maintains. Medication
// administration is more formal and is not missing detailed information.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MedicationStatement
//   - Source File: StructureDefinition-MedicationStatement.json
type MedicationStatement struct {

	// A plan, proposal or order that is fulfilled in whole or in part by this
	// event.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// Indicates where the medication is expected to be consumed or administered.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The encounter or episode of care that establishes the context for this
	// MedicationStatement.
	Context *fhir.Reference `fhirpath:"context"`

	// The date when the medication statement was asserted by the information
	// source.
	DateAsserted *fhir.DateTime `fhirpath:"dateAsserted"`

	// Allows linking the MedicationStatement to the underlying MedicationRequest,
	// or to other information that supports or is used to derive the
	// MedicationStatement.
	DerivedFrom []*fhir.Reference `fhirpath:"derivedFrom"`

	// Indicates how the medication is/was or should be taken by the patient.
	Dosage []*fhir.Dosage `fhirpath:"dosage"`

	// The interval of time during which it is being asserted that the patient
	// is/was/will be taking the medication (or was not taking, when the
	// MedicationStatement.taken element is No).
	Effective fhir.Element `fhirpath:"effective"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifiers associated with this Medication Statement that are defined by
	// business processes and/or used to refer to it when a direct URL reference to
	// the resource itself is not appropriate. They are business identifiers
	// assigned to this resource by the performer or other systems and remain
	// constant as the resource is updated and propagates from server to server.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The person or organization that provided the information about the taking of
	// this medication. Note: Use derivedFrom when a MedicationStatement is derived
	// from other resources, e.g. Claim or MedicationRequest.
	InformationSource *fhir.Reference `fhirpath:"informationSource"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// Identifies the medication being administered. This is either a link to a
	// resource representing the details of the medication or a simple attribute
	// carrying a code that identifies the medication from a known list of
	// medications.
	Medication fhir.Element `fhirpath:"medication"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Provides extra information about the medication statement that is not
	// conveyed by the other attributes.
	Note []*fhir.Annotation `fhirpath:"note"`

	// A larger event of which this particular event is a component or step.
	PartOf []*fhir.Reference `fhirpath:"partOf"`

	// A reason for why the medication is being/was taken.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Condition or observation that supports why the medication is being/was
	// taken.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// A code representing the patient or other source's judgment about the state
	// of the medication used that this statement is about. Generally, this will be
	// active or completed.
	Status *fhir.Code `fhirpath:"status"`

	// Captures the reason for the current state of the MedicationStatement.
	StatusReason []*fhir.CodeableConcept `fhirpath:"statusReason"`

	// The person, animal or group who is/was taking the medication.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetBasedOn() []*fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.BasedOn
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetCategory() *fhir.CodeableConcept {
	if ms == nil {
		return nil
	}
	return ms.Category
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetContained() []fhir.Resource {
	if ms == nil {
		return nil
	}
	return ms.Contained
}

// GetContext returns the value of the field Context.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetContext() *fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.Context
}

// GetDateAsserted returns the value of the field DateAsserted.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetDateAsserted() *fhir.DateTime {
	if ms == nil {
		return nil
	}
	return ms.DateAsserted
}

// GetDerivedFrom returns the value of the field DerivedFrom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetDerivedFrom() []*fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.DerivedFrom
}

// GetDosage returns the value of the field Dosage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetDosage() []*fhir.Dosage {
	if ms == nil {
		return nil
	}
	return ms.Dosage
}

// GetEffective returns the value of the field Effective.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetEffective() fhir.Element {
	if ms == nil {
		return nil
	}
	return ms.Effective
}

// GetEffectiveDateTime returns the value of the field Effective.
func (ms *MedicationStatement) GetEffectiveDateTime() *fhir.DateTime {
	if ms == nil {
		return nil
	}
	val, ok := ms.Effective.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetEffectivePeriod returns the value of the field Effective.
func (ms *MedicationStatement) GetEffectivePeriod() *fhir.Period {
	if ms == nil {
		return nil
	}
	val, ok := ms.Effective.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetExtension() []*fhir.Extension {
	if ms == nil {
		return nil
	}
	return ms.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetID() string {
	if ms == nil {
		return ""
	}
	return ms.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetIdentifier() []*fhir.Identifier {
	if ms == nil {
		return nil
	}
	return ms.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetImplicitRules() *fhir.URI {
	if ms == nil {
		return nil
	}
	return ms.ImplicitRules
}

// GetInformationSource returns the value of the field InformationSource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetInformationSource() *fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.InformationSource
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetLanguage() *fhir.Code {
	if ms == nil {
		return nil
	}
	return ms.Language
}

// GetMedication returns the value of the field Medication.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetMedication() fhir.Element {
	if ms == nil {
		return nil
	}
	return ms.Medication
}

// GetMedicationCodeableConcept returns the value of the field Medication.
func (ms *MedicationStatement) GetMedicationCodeableConcept() *fhir.CodeableConcept {
	if ms == nil {
		return nil
	}
	val, ok := ms.Medication.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetMedicationReference returns the value of the field Medication.
func (ms *MedicationStatement) GetMedicationReference() *fhir.Reference {
	if ms == nil {
		return nil
	}
	val, ok := ms.Medication.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetMeta() *fhir.Meta {
	if ms == nil {
		return nil
	}
	return ms.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetModifierExtension() []*fhir.Extension {
	if ms == nil {
		return nil
	}
	return ms.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetNote() []*fhir.Annotation {
	if ms == nil {
		return nil
	}
	return ms.Note
}

// GetPartOf returns the value of the field PartOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetPartOf() []*fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.PartOf
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetReasonCode() []*fhir.CodeableConcept {
	if ms == nil {
		return nil
	}
	return ms.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetReasonReference() []*fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.ReasonReference
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetStatus() *fhir.Code {
	if ms == nil {
		return nil
	}
	return ms.Status
}

// GetStatusReason returns the value of the field StatusReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetStatusReason() []*fhir.CodeableConcept {
	if ms == nil {
		return nil
	}
	return ms.StatusReason
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetSubject() *fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MedicationStatement) GetText() *fhir.Narrative {
	if ms == nil {
		return nil
	}
	return ms.Text
}

func (ms *MedicationStatement) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ms *MedicationStatement) UnmarshalJSON(data []byte) error {
	var raw struct {
		BasedOn           []*fhir.Reference     `json:"basedOn"`
		Category          *fhir.CodeableConcept `json:"category"`
		Contained         []fhir.Resource       `json:"contained"`
		Context           *fhir.Reference       `json:"context"`
		DateAsserted      *fhir.DateTime        `json:"dateAsserted"`
		DerivedFrom       []*fhir.Reference     `json:"derivedFrom"`
		Dosage            []*fhir.Dosage        `json:"dosage"`
		EffectiveDateTime *fhir.DateTime        `json:"effectiveDateTime"`
		EffectivePeriod   *fhir.Period          `json:"effectivePeriod"`
		Extension         []*fhir.Extension     `json:"extension"`

		ID                        string                  `json:"id"`
		Identifier                []*fhir.Identifier      `json:"identifier"`
		ImplicitRules             *fhir.URI               `json:"implicitRules"`
		InformationSource         *fhir.Reference         `json:"informationSource"`
		Language                  *fhir.Code              `json:"language"`
		MedicationCodeableConcept *fhir.CodeableConcept   `json:"medicationCodeableConcept"`
		MedicationReference       *fhir.Reference         `json:"medicationReference"`
		Meta                      *fhir.Meta              `json:"meta"`
		ModifierExtension         []*fhir.Extension       `json:"modifierExtension"`
		Note                      []*fhir.Annotation      `json:"note"`
		PartOf                    []*fhir.Reference       `json:"partOf"`
		ReasonCode                []*fhir.CodeableConcept `json:"reasonCode"`
		ReasonReference           []*fhir.Reference       `json:"reasonReference"`
		Status                    *fhir.Code              `json:"status"`
		StatusReason              []*fhir.CodeableConcept `json:"statusReason"`
		Subject                   *fhir.Reference         `json:"subject"`
		Text                      *fhir.Narrative         `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ms.BasedOn = raw.BasedOn
	ms.Category = raw.Category
	ms.Contained = raw.Contained
	ms.Context = raw.Context
	ms.DateAsserted = raw.DateAsserted
	ms.DerivedFrom = raw.DerivedFrom
	ms.Dosage = raw.Dosage
	ms.Effective, err = validate.SelectOneOf[fhir.Element]("MedicationStatement.effective",
		raw.EffectiveDateTime,
		raw.EffectivePeriod)
	if err != nil {
		return err
	}
	ms.Extension = raw.Extension
	ms.ID = raw.ID
	ms.Identifier = raw.Identifier
	ms.ImplicitRules = raw.ImplicitRules
	ms.InformationSource = raw.InformationSource
	ms.Language = raw.Language
	ms.Medication, err = validate.SelectOneOf[fhir.Element]("MedicationStatement.medication",
		raw.MedicationCodeableConcept,
		raw.MedicationReference)
	if err != nil {
		return err
	}
	ms.Meta = raw.Meta
	ms.ModifierExtension = raw.ModifierExtension
	ms.Note = raw.Note
	ms.PartOf = raw.PartOf
	ms.ReasonCode = raw.ReasonCode
	ms.ReasonReference = raw.ReasonReference
	ms.Status = raw.Status
	ms.StatusReason = raw.StatusReason
	ms.Subject = raw.Subject
	ms.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*MedicationStatement)(nil)
var _ json.Unmarshaler = (*MedicationStatement)(nil)
