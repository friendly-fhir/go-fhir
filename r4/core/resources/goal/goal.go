// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package goal

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Describes the intended objective(s) for a patient, group or organization
// care, for example, weight loss, restoring an activity of daily living,
// obtaining herd immunity via immunization, meeting a process improvement
// objective, etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Goal
//   - Source File: StructureDefinition-Goal.json
type Goal struct {

	// Describes the progression, or lack thereof, towards the goal against the
	// target.
	AchievementStatus *fhir.CodeableConcept `fhirpath:"achievementStatus"`

	// The identified conditions and other health record elements that are intended
	// to be addressed by the goal.
	Addresses []*fhir.Reference `fhirpath:"addresses"`

	// Indicates a category the goal falls within.
	Category []*fhir.CodeableConcept `fhirpath:"category"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Human-readable and/or coded description of a specific desired objective of
	// care, such as "control blood pressure" or "negotiate an obstacle course" or
	// "dance with child at wedding".
	Description *fhir.CodeableConcept `fhirpath:"description"`

	// Indicates whose goal this is - patient goal, practitioner goal, etc.
	ExpressedBy *fhir.Reference `fhirpath:"expressedBy"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifiers assigned to this goal by the performer or other systems
	// which remain constant as the resource is updated and propagates from server
	// to server.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The state of the goal throughout its lifecycle.
	LifecycleStatus *fhir.Code `fhirpath:"lifecycleStatus"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Any comments related to the goal.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Identifies the change (or lack of change) at the point when the status of
	// the goal is assessed.
	OutcomeCode []*fhir.CodeableConcept `fhirpath:"outcomeCode"`

	// Details of what's changed (or not changed).
	OutcomeReference []*fhir.Reference `fhirpath:"outcomeReference"`

	// Identifies the mutually agreed level of importance associated with
	// reaching/sustaining the goal.
	Priority *fhir.CodeableConcept `fhirpath:"priority"`

	// The date or event after which the goal should begin being pursued.
	Start fhir.Element `fhirpath:"start"`

	// Identifies when the current status. I.e. When initially created, when
	// achieved, when cancelled, etc.
	StatusDate *fhir.Date `fhirpath:"statusDate"`

	// Captures the reason for the current status.
	StatusReason *fhir.String `fhirpath:"statusReason"`

	// Identifies the patient, group or organization for whom the goal is being
	// established.
	Subject *fhir.Reference `fhirpath:"subject"`

	// Indicates what should be done by when.
	Target []*GoalTarget `fhirpath:"target"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAchievementStatus returns the value of the field AchievementStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetAchievementStatus() *fhir.CodeableConcept {
	if g == nil {
		return nil
	}
	return g.AchievementStatus
}

// GetAddresses returns the value of the field Addresses.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetAddresses() []*fhir.Reference {
	if g == nil {
		return nil
	}
	return g.Addresses
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetCategory() []*fhir.CodeableConcept {
	if g == nil {
		return nil
	}
	return g.Category
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetContained() []fhir.Resource {
	if g == nil {
		return nil
	}
	return g.Contained
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetDescription() *fhir.CodeableConcept {
	if g == nil {
		return nil
	}
	return g.Description
}

// GetExpressedBy returns the value of the field ExpressedBy.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetExpressedBy() *fhir.Reference {
	if g == nil {
		return nil
	}
	return g.ExpressedBy
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetExtension() []*fhir.Extension {
	if g == nil {
		return nil
	}
	return g.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetIdentifier() []*fhir.Identifier {
	if g == nil {
		return nil
	}
	return g.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetImplicitRules() *fhir.URI {
	if g == nil {
		return nil
	}
	return g.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetLanguage() *fhir.Code {
	if g == nil {
		return nil
	}
	return g.Language
}

// GetLifecycleStatus returns the value of the field LifecycleStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetLifecycleStatus() *fhir.Code {
	if g == nil {
		return nil
	}
	return g.LifecycleStatus
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetMeta() *fhir.Meta {
	if g == nil {
		return nil
	}
	return g.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetModifierExtension() []*fhir.Extension {
	if g == nil {
		return nil
	}
	return g.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetNote() []*fhir.Annotation {
	if g == nil {
		return nil
	}
	return g.Note
}

// GetOutcomeCode returns the value of the field OutcomeCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetOutcomeCode() []*fhir.CodeableConcept {
	if g == nil {
		return nil
	}
	return g.OutcomeCode
}

// GetOutcomeReference returns the value of the field OutcomeReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetOutcomeReference() []*fhir.Reference {
	if g == nil {
		return nil
	}
	return g.OutcomeReference
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetPriority() *fhir.CodeableConcept {
	if g == nil {
		return nil
	}
	return g.Priority
}

// GetStart returns the value of the field Start.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetStart() fhir.Element {
	if g == nil {
		return nil
	}
	return g.Start
}

// GetStartDate returns the value of the field Start.
func (g *Goal) GetStartDate() *fhir.Date {
	if g == nil {
		return nil
	}
	val, ok := g.Start.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetStartCodeableConcept returns the value of the field Start.
func (g *Goal) GetStartCodeableConcept() *fhir.CodeableConcept {
	if g == nil {
		return nil
	}
	val, ok := g.Start.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
} // GetStatusDate returns the value of the field StatusDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetStatusDate() *fhir.Date {
	if g == nil {
		return nil
	}
	return g.StatusDate
}

// GetStatusReason returns the value of the field StatusReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetStatusReason() *fhir.String {
	if g == nil {
		return nil
	}
	return g.StatusReason
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetSubject() *fhir.Reference {
	if g == nil {
		return nil
	}
	return g.Subject
}

// GetTarget returns the value of the field Target.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetTarget() []*GoalTarget {
	if g == nil {
		return nil
	}
	return g.Target
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (g *Goal) GetText() *fhir.Narrative {
	if g == nil {
		return nil
	}
	return g.Text
}

// Target outcome for the goal// Indicates what should be done by when.// When multiple targets are present for a single goal instance, all targets
// must be met for the overall goal to be met.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Goal.json
type GoalTarget struct {

	// The target value of the focus to be achieved to signify the fulfillment of
	// the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of
	// the range can be specified. When a low value is missing, it indicates that
	// the goal is achieved at any focus value at or below the high value.
	// Similarly, if the high value is missing, it indicates that the goal is
	// achieved at any focus value at or above the low value.
	Detail fhir.Element `fhirpath:"detail"`

	// Indicates either the date or the duration after start by which the goal
	// should be met.
	Due fhir.Element `fhirpath:"due"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The parameter whose value is being tracked, e.g. body weight, blood
	// pressure, or hemoglobin A1c level.
	Measure *fhir.CodeableConcept `fhirpath:"measure"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (gt *GoalTarget) GetDetail() fhir.Element {
	if gt == nil {
		return nil
	}
	return gt.Detail
}

// GetDetailQuantity returns the value of the field Detail.
func (gt *GoalTarget) GetDetailQuantity() *fhir.Quantity {
	if gt == nil {
		return nil
	}
	val, ok := gt.Detail.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetDetailRange returns the value of the field Detail.
func (gt *GoalTarget) GetDetailRange() *fhir.Range {
	if gt == nil {
		return nil
	}
	val, ok := gt.Detail.(*fhir.Range)
	if !ok {
		return nil
	}
	return val
}

// GetDetailCodeableConcept returns the value of the field Detail.
func (gt *GoalTarget) GetDetailCodeableConcept() *fhir.CodeableConcept {
	if gt == nil {
		return nil
	}
	val, ok := gt.Detail.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetDetailString returns the value of the field Detail.
func (gt *GoalTarget) GetDetailString() *fhir.String {
	if gt == nil {
		return nil
	}
	val, ok := gt.Detail.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetDetailBoolean returns the value of the field Detail.
func (gt *GoalTarget) GetDetailBoolean() *fhir.Boolean {
	if gt == nil {
		return nil
	}
	val, ok := gt.Detail.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetDetailInteger returns the value of the field Detail.
func (gt *GoalTarget) GetDetailInteger() *fhir.Integer {
	if gt == nil {
		return nil
	}
	val, ok := gt.Detail.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
}

// GetDetailRatio returns the value of the field Detail.
func (gt *GoalTarget) GetDetailRatio() *fhir.Ratio {
	if gt == nil {
		return nil
	}
	val, ok := gt.Detail.(*fhir.Ratio)
	if !ok {
		return nil
	}
	return val
} // GetDue returns the value of the field Due.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (gt *GoalTarget) GetDue() fhir.Element {
	if gt == nil {
		return nil
	}
	return gt.Due
}

// GetDueDate returns the value of the field Due.
func (gt *GoalTarget) GetDueDate() *fhir.Date {
	if gt == nil {
		return nil
	}
	val, ok := gt.Due.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetDueDuration returns the value of the field Due.
func (gt *GoalTarget) GetDueDuration() *fhir.Duration {
	if gt == nil {
		return nil
	}
	val, ok := gt.Due.(*fhir.Duration)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (gt *GoalTarget) GetExtension() []*fhir.Extension {
	if gt == nil {
		return nil
	}
	return gt.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (gt *GoalTarget) GetID() string {
	if gt == nil {
		return ""
	}
	return gt.ID
}

// GetMeasure returns the value of the field Measure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (gt *GoalTarget) GetMeasure() *fhir.CodeableConcept {
	if gt == nil {
		return nil
	}
	return gt.Measure
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (gt *GoalTarget) GetModifierExtension() []*fhir.Extension {
	if gt == nil {
		return nil
	}
	return gt.ModifierExtension
}

func (g *Goal) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (g *Goal) UnmarshalJSON(data []byte) error {
	var raw struct {
		AchievementStatus *fhir.CodeableConcept   `json:"achievementStatus"`
		Addresses         []*fhir.Reference       `json:"addresses"`
		Category          []*fhir.CodeableConcept `json:"category"`
		Contained         []fhir.Resource         `json:"contained"`
		Description       *fhir.CodeableConcept   `json:"description"`
		ExpressedBy       *fhir.Reference         `json:"expressedBy"`
		Extension         []*fhir.Extension       `json:"extension"`

		ID                   string                  `json:"id"`
		Identifier           []*fhir.Identifier      `json:"identifier"`
		ImplicitRules        *fhir.URI               `json:"implicitRules"`
		Language             *fhir.Code              `json:"language"`
		LifecycleStatus      *fhir.Code              `json:"lifecycleStatus"`
		Meta                 *fhir.Meta              `json:"meta"`
		ModifierExtension    []*fhir.Extension       `json:"modifierExtension"`
		Note                 []*fhir.Annotation      `json:"note"`
		OutcomeCode          []*fhir.CodeableConcept `json:"outcomeCode"`
		OutcomeReference     []*fhir.Reference       `json:"outcomeReference"`
		Priority             *fhir.CodeableConcept   `json:"priority"`
		StartDate            *fhir.Date              `json:"startDate"`
		StartCodeableConcept *fhir.CodeableConcept   `json:"startCodeableConcept"`
		StatusDate           *fhir.Date              `json:"statusDate"`
		StatusReason         *fhir.String            `json:"statusReason"`
		Subject              *fhir.Reference         `json:"subject"`
		Target               []*GoalTarget           `json:"target"`
		Text                 *fhir.Narrative         `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	g.AchievementStatus = raw.AchievementStatus
	g.Addresses = raw.Addresses
	g.Category = raw.Category
	g.Contained = raw.Contained
	g.Description = raw.Description
	g.ExpressedBy = raw.ExpressedBy
	g.Extension = raw.Extension
	g.ID = raw.ID
	g.Identifier = raw.Identifier
	g.ImplicitRules = raw.ImplicitRules
	g.Language = raw.Language
	g.LifecycleStatus = raw.LifecycleStatus
	g.Meta = raw.Meta
	g.ModifierExtension = raw.ModifierExtension
	g.Note = raw.Note
	g.OutcomeCode = raw.OutcomeCode
	g.OutcomeReference = raw.OutcomeReference
	g.Priority = raw.Priority
	g.Start, err = validate.SelectOneOf[fhir.Element]("Goal.start",
		raw.StartDate,
		raw.StartCodeableConcept)
	if err != nil {
		return err
	}
	g.StatusDate = raw.StatusDate
	g.StatusReason = raw.StatusReason
	g.Subject = raw.Subject
	g.Target = raw.Target
	g.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*Goal)(nil)
var _ json.Unmarshaler = (*Goal)(nil)

func (gt *GoalTarget) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (gt *GoalTarget) UnmarshalJSON(data []byte) error {
	var raw struct {
		DetailQuantity        *fhir.Quantity        `json:"detailQuantity"`
		DetailRange           *fhir.Range           `json:"detailRange"`
		DetailCodeableConcept *fhir.CodeableConcept `json:"detailCodeableConcept"`
		DetailString          *fhir.String          `json:"detailString"`
		DetailBoolean         *fhir.Boolean         `json:"detailBoolean"`
		DetailInteger         *fhir.Integer         `json:"detailInteger"`
		DetailRatio           *fhir.Ratio           `json:"detailRatio"`
		DueDate               *fhir.Date            `json:"dueDate"`
		DueDuration           *fhir.Duration        `json:"dueDuration"`
		Extension             []*fhir.Extension     `json:"extension"`

		ID                string                `json:"id"`
		Measure           *fhir.CodeableConcept `json:"measure"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	gt.Detail, err = validate.SelectOneOf[fhir.Element]("Goal.target.detail",
		raw.DetailQuantity,
		raw.DetailRange,
		raw.DetailCodeableConcept,
		raw.DetailString,
		raw.DetailBoolean,
		raw.DetailInteger,
		raw.DetailRatio)
	if err != nil {
		return err
	}
	gt.Due, err = validate.SelectOneOf[fhir.Element]("Goal.target.due",
		raw.DueDate,
		raw.DueDuration)
	if err != nil {
		return err
	}
	gt.Extension = raw.Extension
	gt.ID = raw.ID
	gt.Measure = raw.Measure
	gt.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*GoalTarget)(nil)
var _ json.Unmarshaler = (*GoalTarget)(nil)
