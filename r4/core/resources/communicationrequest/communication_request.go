// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package communicationrequest

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A request to convey information; e.g. the CDS system proposes that an alert
// be sent to a responsible provider, the CDS system proposes that the public
// health agency be notified about a reportable condition.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/CommunicationRequest
//   - Source File: StructureDefinition-CommunicationRequest.json
type CommunicationRequest struct {

	// Other resources that pertain to this communication request and to which this
	// communication request should be associated.
	About []*fhir.Reference `fhirpath:"about"`

	// For draft requests, indicates the date of initial creation. For requests
	// with other statuses, indicates the date of activation.
	AuthoredOn *fhir.DateTime `fhirpath:"authoredOn"`

	// A plan or proposal that is fulfilled in whole or in part by this request.
	BasedOn []*fhir.Reference `fhirpath:"basedOn"`

	// The type of message to be sent such as alert, notification, reminder,
	// instruction, etc.
	Category []*fhir.CodeableConcept `fhirpath:"category"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// If true indicates that the CommunicationRequest is asking for the specified
	// action to *not* occur.
	DoNotPerform *fhir.Boolean `fhirpath:"doNotPerform"`

	// The Encounter during which this CommunicationRequest was created or to which
	// the creation of this record is tightly associated.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A shared identifier common to all requests that were authorized more or less
	// simultaneously by a single author, representing the identifier of the
	// requisition, prescription or similar form.
	GroupIdentifier *fhir.Identifier `fhirpath:"groupIdentifier"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifiers assigned to this communication request by the performer
	// or other systems which remain constant as the resource is updated and
	// propagates from server to server.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// A channel that was used for this communication (e.g. email, fax).
	Medium []*fhir.CodeableConcept `fhirpath:"medium"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Comments made about the request by the requester, sender, recipient, subject
	// or other participants.
	Note []*fhir.Annotation `fhirpath:"note"`

	// The time when this communication is to occur.
	Occurrence fhir.Element `fhirpath:"occurrence"`

	// Text, attachment(s), or resource(s) to be communicated to the recipient.
	Payload []*CommunicationRequestPayload `fhirpath:"payload"`

	// Characterizes how quickly the proposed act must be initiated. Includes
	// concepts such as stat, urgent, routine.
	Priority *fhir.Code `fhirpath:"priority"`

	// Describes why the request is being made in coded or textual form.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Indicates another resource whose existence justifies this request.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// The entity (e.g. person, organization, clinical information system, device,
	// group, or care team) which is the intended target of the communication.
	Recipient []*fhir.Reference `fhirpath:"recipient"`

	// Completed or terminated request(s) whose function is taken by this new
	// request.
	Replaces []*fhir.Reference `fhirpath:"replaces"`

	// The device, individual, or organization who initiated the request and has
	// responsibility for its activation.
	Requester *fhir.Reference `fhirpath:"requester"`

	// The entity (e.g. person, organization, clinical information system, or
	// device) which is to be the source of the communication.
	Sender *fhir.Reference `fhirpath:"sender"`

	// The status of the proposal or order.
	Status *fhir.Code `fhirpath:"status"`

	// Captures the reason for the current state of the CommunicationRequest.
	StatusReason *fhir.CodeableConcept `fhirpath:"statusReason"`

	// The patient or group that is the focus of this communication request.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAbout returns the value of the field About.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetAbout() []*fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.About
}

// GetAuthoredOn returns the value of the field AuthoredOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetAuthoredOn() *fhir.DateTime {
	if cr == nil {
		return nil
	}
	return cr.AuthoredOn
}

// GetBasedOn returns the value of the field BasedOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetBasedOn() []*fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.BasedOn
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetCategory() []*fhir.CodeableConcept {
	if cr == nil {
		return nil
	}
	return cr.Category
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetContained() []fhir.Resource {
	if cr == nil {
		return nil
	}
	return cr.Contained
}

// GetDoNotPerform returns the value of the field DoNotPerform.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetDoNotPerform() *fhir.Boolean {
	if cr == nil {
		return nil
	}
	return cr.DoNotPerform
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetEncounter() *fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetExtension() []*fhir.Extension {
	if cr == nil {
		return nil
	}
	return cr.Extension
}

// GetGroupIdentifier returns the value of the field GroupIdentifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetGroupIdentifier() *fhir.Identifier {
	if cr == nil {
		return nil
	}
	return cr.GroupIdentifier
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetID() string {
	if cr == nil {
		return ""
	}
	return cr.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetIdentifier() []*fhir.Identifier {
	if cr == nil {
		return nil
	}
	return cr.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetImplicitRules() *fhir.URI {
	if cr == nil {
		return nil
	}
	return cr.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetLanguage() *fhir.Code {
	if cr == nil {
		return nil
	}
	return cr.Language
}

// GetMedium returns the value of the field Medium.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetMedium() []*fhir.CodeableConcept {
	if cr == nil {
		return nil
	}
	return cr.Medium
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetMeta() *fhir.Meta {
	if cr == nil {
		return nil
	}
	return cr.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetModifierExtension() []*fhir.Extension {
	if cr == nil {
		return nil
	}
	return cr.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetNote() []*fhir.Annotation {
	if cr == nil {
		return nil
	}
	return cr.Note
}

// GetOccurrence returns the value of the field Occurrence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetOccurrence() fhir.Element {
	if cr == nil {
		return nil
	}
	return cr.Occurrence
}

// GetOccurrenceDateTime returns the value of the field Occurrence.
func (cr *CommunicationRequest) GetOccurrenceDateTime() *fhir.DateTime {
	if cr == nil {
		return nil
	}
	val, ok := cr.Occurrence.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetOccurrencePeriod returns the value of the field Occurrence.
func (cr *CommunicationRequest) GetOccurrencePeriod() *fhir.Period {
	if cr == nil {
		return nil
	}
	val, ok := cr.Occurrence.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetPayload returns the value of the field Payload.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetPayload() []*CommunicationRequestPayload {
	if cr == nil {
		return nil
	}
	return cr.Payload
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetPriority() *fhir.Code {
	if cr == nil {
		return nil
	}
	return cr.Priority
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetReasonCode() []*fhir.CodeableConcept {
	if cr == nil {
		return nil
	}
	return cr.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetReasonReference() []*fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.ReasonReference
}

// GetRecipient returns the value of the field Recipient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetRecipient() []*fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Recipient
}

// GetReplaces returns the value of the field Replaces.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetReplaces() []*fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Replaces
}

// GetRequester returns the value of the field Requester.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetRequester() *fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Requester
}

// GetSender returns the value of the field Sender.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetSender() *fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Sender
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetStatus() *fhir.Code {
	if cr == nil {
		return nil
	}
	return cr.Status
}

// GetStatusReason returns the value of the field StatusReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetStatusReason() *fhir.CodeableConcept {
	if cr == nil {
		return nil
	}
	return cr.StatusReason
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetSubject() *fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Subject
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *CommunicationRequest) GetText() *fhir.Narrative {
	if cr == nil {
		return nil
	}
	return cr.Text
}

// Message payload// Text, attachment(s), or resource(s) to be communicated to the recipient.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CommunicationRequest.json
type CommunicationRequestPayload struct {

	// The communicated content (or for multi-part communications, one portion of
	// the communication).
	Content fhir.Element `fhirpath:"content"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetContent returns the value of the field Content.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *CommunicationRequestPayload) GetContent() fhir.Element {
	if crp == nil {
		return nil
	}
	return crp.Content
}

// GetContentString returns the value of the field Content.
func (crp *CommunicationRequestPayload) GetContentString() *fhir.String {
	if crp == nil {
		return nil
	}
	val, ok := crp.Content.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetContentAttachment returns the value of the field Content.
func (crp *CommunicationRequestPayload) GetContentAttachment() *fhir.Attachment {
	if crp == nil {
		return nil
	}
	val, ok := crp.Content.(*fhir.Attachment)
	if !ok {
		return nil
	}
	return val
}

// GetContentReference returns the value of the field Content.
func (crp *CommunicationRequestPayload) GetContentReference() *fhir.Reference {
	if crp == nil {
		return nil
	}
	val, ok := crp.Content.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *CommunicationRequestPayload) GetExtension() []*fhir.Extension {
	if crp == nil {
		return nil
	}
	return crp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *CommunicationRequestPayload) GetID() string {
	if crp == nil {
		return ""
	}
	return crp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (crp *CommunicationRequestPayload) GetModifierExtension() []*fhir.Extension {
	if crp == nil {
		return nil
	}
	return crp.ModifierExtension
}
