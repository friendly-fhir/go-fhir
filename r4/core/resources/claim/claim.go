// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package claim

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A provider issued list of professional services and products which have been
// provided, or are to be provided, to a patient which is sent to an insurer
// for reimbursement.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Claim
//   - Source File: StructureDefinition-Claim.json
type Claim struct {

	// Details of an accident which resulted in injuries which required the
	// products and services listed in the claim.
	Accident *ClaimAccident `fhirpath:"accident"`

	// The period for which charges are being submitted.
	BillablePeriod *fhir.Period `fhirpath:"billablePeriod"`

	// The members of the team who provided the products and services.
	CareTeam []*ClaimCareTeam `fhirpath:"careTeam"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date this resource was created.
	Created *fhir.DateTime `fhirpath:"created"`

	// Information about diagnoses relevant to the claim items.
	Diagnosis []*ClaimDiagnosis `fhirpath:"diagnosis"`

	// Individual who created the claim, predetermination or preauthorization.
	Enterer *fhir.Reference `fhirpath:"enterer"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Facility where the services were provided.
	Facility *fhir.Reference `fhirpath:"facility"`

	// A code to indicate whether and for whom funds are to be reserved for future
	// claims.
	FundsReserve *fhir.CodeableConcept `fhirpath:"fundsReserve"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier assigned to this claim.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Financial instruments for reimbursement for the health care products and
	// services specified on the claim.
	Insurance []*ClaimInsurance `fhirpath:"insurance"`

	// The Insurer who is target of the request.
	Insurer *fhir.Reference `fhirpath:"insurer"`

	// A claim line. Either a simple product or service or a 'group' of details
	// which can each be a simple items or groups of sub-details.
	Item []*ClaimItem `fhirpath:"item"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Original prescription which has been superseded by this prescription to
	// support the dispensing of pharmacy services, medications or products.
	OriginalPrescription *fhir.Reference `fhirpath:"originalPrescription"`

	// The party to whom the professional services and/or products have been
	// supplied or are being considered and for whom actual or forecast
	// reimbursement is sought.
	Patient *fhir.Reference `fhirpath:"patient"`

	// The party to be reimbursed for cost of the products and services according
	// to the terms of the policy.
	Payee *ClaimPayee `fhirpath:"payee"`

	// Prescription to support the dispensing of pharmacy, device or vision
	// products.
	Prescription *fhir.Reference `fhirpath:"prescription"`

	// The provider-required urgency of processing the request. Typical values
	// include: stat, routine deferred.
	Priority *fhir.CodeableConcept `fhirpath:"priority"`

	// Procedures performed on the patient relevant to the billing items with the
	// claim.
	Procedure []*ClaimProcedure `fhirpath:"procedure"`

	// The provider which is responsible for the claim, predetermination or
	// preauthorization.
	Provider *fhir.Reference `fhirpath:"provider"`

	// A reference to a referral resource.
	Referral *fhir.Reference `fhirpath:"referral"`

	// Other claims which are related to this claim such as prior submissions or
	// claims for related services or for the same event.
	Related []*ClaimRelated `fhirpath:"related"`

	// The status of the resource instance.
	Status *fhir.Code `fhirpath:"status"`

	// A finer grained suite of claim type codes which may convey additional
	// information such as Inpatient vs Outpatient and/or a specialty service.
	SubType *fhir.CodeableConcept `fhirpath:"subType"`

	// Additional information codes regarding exceptions, special considerations,
	// the condition, situation, prior or concurrent issues.
	SupportingInfo []*ClaimSupportingInfo `fhirpath:"supportingInfo"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// The total value of the all the items in the claim.
	Total *fhir.Money `fhirpath:"total"`

	// The category of claim, e.g. oral, pharmacy, vision, institutional,
	// professional.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// A code to indicate whether the nature of the request is: to request
	// adjudication of products and services previously rendered; or requesting
	// authorization and adjudication for provision in the future; or requesting
	// the non-binding adjudication of the listed products and services which could
	// be provided in the future.
	Use *fhir.Code `fhirpath:"use"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAccident returns the value of the field Accident.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetAccident() *ClaimAccident {
	if c == nil {
		return nil
	}
	return c.Accident
}

// GetBillablePeriod returns the value of the field BillablePeriod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetBillablePeriod() *fhir.Period {
	if c == nil {
		return nil
	}
	return c.BillablePeriod
}

// GetCareTeam returns the value of the field CareTeam.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetCareTeam() []*ClaimCareTeam {
	if c == nil {
		return nil
	}
	return c.CareTeam
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetContained() []fhir.Resource {
	if c == nil {
		return nil
	}
	return c.Contained
}

// GetCreated returns the value of the field Created.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetCreated() *fhir.DateTime {
	if c == nil {
		return nil
	}
	return c.Created
}

// GetDiagnosis returns the value of the field Diagnosis.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetDiagnosis() []*ClaimDiagnosis {
	if c == nil {
		return nil
	}
	return c.Diagnosis
}

// GetEnterer returns the value of the field Enterer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetEnterer() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Enterer
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetExtension() []*fhir.Extension {
	if c == nil {
		return nil
	}
	return c.Extension
}

// GetFacility returns the value of the field Facility.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetFacility() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Facility
}

// GetFundsReserve returns the value of the field FundsReserve.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetFundsReserve() *fhir.CodeableConcept {
	if c == nil {
		return nil
	}
	return c.FundsReserve
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetIdentifier() []*fhir.Identifier {
	if c == nil {
		return nil
	}
	return c.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetImplicitRules() *fhir.URI {
	if c == nil {
		return nil
	}
	return c.ImplicitRules
}

// GetInsurance returns the value of the field Insurance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetInsurance() []*ClaimInsurance {
	if c == nil {
		return nil
	}
	return c.Insurance
}

// GetInsurer returns the value of the field Insurer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetInsurer() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Insurer
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetItem() []*ClaimItem {
	if c == nil {
		return nil
	}
	return c.Item
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetLanguage() *fhir.Code {
	if c == nil {
		return nil
	}
	return c.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetMeta() *fhir.Meta {
	if c == nil {
		return nil
	}
	return c.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetModifierExtension() []*fhir.Extension {
	if c == nil {
		return nil
	}
	return c.ModifierExtension
}

// GetOriginalPrescription returns the value of the field OriginalPrescription.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetOriginalPrescription() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.OriginalPrescription
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetPatient() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Patient
}

// GetPayee returns the value of the field Payee.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetPayee() *ClaimPayee {
	if c == nil {
		return nil
	}
	return c.Payee
}

// GetPrescription returns the value of the field Prescription.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetPrescription() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Prescription
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetPriority() *fhir.CodeableConcept {
	if c == nil {
		return nil
	}
	return c.Priority
}

// GetProcedure returns the value of the field Procedure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetProcedure() []*ClaimProcedure {
	if c == nil {
		return nil
	}
	return c.Procedure
}

// GetProvider returns the value of the field Provider.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetProvider() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Provider
}

// GetReferral returns the value of the field Referral.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetReferral() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Referral
}

// GetRelated returns the value of the field Related.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetRelated() []*ClaimRelated {
	if c == nil {
		return nil
	}
	return c.Related
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetStatus() *fhir.Code {
	if c == nil {
		return nil
	}
	return c.Status
}

// GetSubType returns the value of the field SubType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetSubType() *fhir.CodeableConcept {
	if c == nil {
		return nil
	}
	return c.SubType
}

// GetSupportingInfo returns the value of the field SupportingInfo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetSupportingInfo() []*ClaimSupportingInfo {
	if c == nil {
		return nil
	}
	return c.SupportingInfo
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetText() *fhir.Narrative {
	if c == nil {
		return nil
	}
	return c.Text
}

// GetTotal returns the value of the field Total.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetTotal() *fhir.Money {
	if c == nil {
		return nil
	}
	return c.Total
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetType() *fhir.CodeableConcept {
	if c == nil {
		return nil
	}
	return c.Type
}

// GetUse returns the value of the field Use.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Claim) GetUse() *fhir.Code {
	if c == nil {
		return nil
	}
	return c.Use
}

// Details of the event// Details of an accident which resulted in injuries which required the
// products and services listed in the claim.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimAccident struct {

	// Date of an accident event related to the products and services contained in
	// the claim.
	Date *fhir.Date `fhirpath:"date"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The physical location of the accident event.
	Location fhir.Element `fhirpath:"location"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type or context of the accident event for the purposes of selection of
	// potential insurance coverages and determination of coordination between
	// insurers.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *ClaimAccident) GetDate() *fhir.Date {
	if ca == nil {
		return nil
	}
	return ca.Date
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *ClaimAccident) GetExtension() []*fhir.Extension {
	if ca == nil {
		return nil
	}
	return ca.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *ClaimAccident) GetID() string {
	if ca == nil {
		return ""
	}
	return ca.ID
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *ClaimAccident) GetLocation() fhir.Element {
	if ca == nil {
		return nil
	}
	return ca.Location
}

// GetLocationAddress returns the value of the field Location.
func (ca *ClaimAccident) GetLocationAddress() *fhir.Address {
	if ca == nil {
		return nil
	}
	val, ok := ca.Location.(*fhir.Address)
	if !ok {
		return nil
	}
	return val
}

// GetLocationReference returns the value of the field Location.
func (ca *ClaimAccident) GetLocationReference() *fhir.Reference {
	if ca == nil {
		return nil
	}
	val, ok := ca.Location.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *ClaimAccident) GetModifierExtension() []*fhir.Extension {
	if ca == nil {
		return nil
	}
	return ca.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ca *ClaimAccident) GetType() *fhir.CodeableConcept {
	if ca == nil {
		return nil
	}
	return ca.Type
}

// Members of the care team// The members of the team who provided the products and services.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimCareTeam struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Member of the team who provided the product or service.
	Provider *fhir.Reference `fhirpath:"provider"`

	// The qualification of the practitioner which is applicable for this service.
	Qualification *fhir.CodeableConcept `fhirpath:"qualification"`

	// The party who is billing and/or responsible for the claimed products or
	// services.
	Responsible *fhir.Boolean `fhirpath:"responsible"`

	// The lead, assisting or supervising practitioner and their discipline if a
	// multidisciplinary team.
	Role *fhir.CodeableConcept `fhirpath:"role"`

	// A number to uniquely identify care team entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cct *ClaimCareTeam) GetExtension() []*fhir.Extension {
	if cct == nil {
		return nil
	}
	return cct.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cct *ClaimCareTeam) GetID() string {
	if cct == nil {
		return ""
	}
	return cct.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cct *ClaimCareTeam) GetModifierExtension() []*fhir.Extension {
	if cct == nil {
		return nil
	}
	return cct.ModifierExtension
}

// GetProvider returns the value of the field Provider.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cct *ClaimCareTeam) GetProvider() *fhir.Reference {
	if cct == nil {
		return nil
	}
	return cct.Provider
}

// GetQualification returns the value of the field Qualification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cct *ClaimCareTeam) GetQualification() *fhir.CodeableConcept {
	if cct == nil {
		return nil
	}
	return cct.Qualification
}

// GetResponsible returns the value of the field Responsible.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cct *ClaimCareTeam) GetResponsible() *fhir.Boolean {
	if cct == nil {
		return nil
	}
	return cct.Responsible
}

// GetRole returns the value of the field Role.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cct *ClaimCareTeam) GetRole() *fhir.CodeableConcept {
	if cct == nil {
		return nil
	}
	return cct.Role
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cct *ClaimCareTeam) GetSequence() *fhir.PositiveInt {
	if cct == nil {
		return nil
	}
	return cct.Sequence
}

// Pertinent diagnosis information// Information about diagnoses relevant to the claim items.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimDiagnosis struct {

	// The nature of illness or problem in a coded form or as a reference to an
	// external defined Condition.
	Diagnosis fhir.Element `fhirpath:"diagnosis"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Indication of whether the diagnosis was present on admission to a facility.
	OnAdmission *fhir.CodeableConcept `fhirpath:"onAdmission"`

	// A package billing code or bundle code used to group products and services to
	// a particular health condition (such as heart attack) which is based on a
	// predetermined grouping code system.
	PackageCode *fhir.CodeableConcept `fhirpath:"packageCode"`

	// A number to uniquely identify diagnosis entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// When the condition was observed or the relative ranking.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDiagnosis returns the value of the field Diagnosis.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ClaimDiagnosis) GetDiagnosis() fhir.Element {
	if cd == nil {
		return nil
	}
	return cd.Diagnosis
}

// GetDiagnosisCodeableConcept returns the value of the field Diagnosis.
func (cd *ClaimDiagnosis) GetDiagnosisCodeableConcept() *fhir.CodeableConcept {
	if cd == nil {
		return nil
	}
	val, ok := cd.Diagnosis.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetDiagnosisReference returns the value of the field Diagnosis.
func (cd *ClaimDiagnosis) GetDiagnosisReference() *fhir.Reference {
	if cd == nil {
		return nil
	}
	val, ok := cd.Diagnosis.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ClaimDiagnosis) GetExtension() []*fhir.Extension {
	if cd == nil {
		return nil
	}
	return cd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ClaimDiagnosis) GetID() string {
	if cd == nil {
		return ""
	}
	return cd.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ClaimDiagnosis) GetModifierExtension() []*fhir.Extension {
	if cd == nil {
		return nil
	}
	return cd.ModifierExtension
}

// GetOnAdmission returns the value of the field OnAdmission.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ClaimDiagnosis) GetOnAdmission() *fhir.CodeableConcept {
	if cd == nil {
		return nil
	}
	return cd.OnAdmission
}

// GetPackageCode returns the value of the field PackageCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ClaimDiagnosis) GetPackageCode() *fhir.CodeableConcept {
	if cd == nil {
		return nil
	}
	return cd.PackageCode
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ClaimDiagnosis) GetSequence() *fhir.PositiveInt {
	if cd == nil {
		return nil
	}
	return cd.Sequence
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cd *ClaimDiagnosis) GetType() []*fhir.CodeableConcept {
	if cd == nil {
		return nil
	}
	return cd.Type
}

// Patient insurance information// Financial instruments for reimbursement for the health care products and
// services specified on the claim.// All insurance coverages for the patient which may be applicable for
// reimbursement, of the products and services listed in the claim, are
// typically provided in the claim to allow insurers to confirm the ordering of
// the insurance coverages relative to local 'coordination of benefit' rules.
// One coverage (and only one) with 'focal=true' is to be used in the
// adjudication of this claim. Coverages appearing before the focal Coverage in
// the list, and where 'Coverage.subrogation=false', should provide a reference
// to the ClaimResponse containing the adjudication results of the prior claim.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimInsurance struct {

	// A business agreement number established between the provider and the insurer
	// for special business processing purposes.
	BusinessArrangement *fhir.String `fhirpath:"businessArrangement"`

	// The result of the adjudication of the line items for the Coverage specified
	// in this insurance.
	ClaimResponse *fhir.Reference `fhirpath:"claimResponse"`

	// Reference to the insurance card level information contained in the Coverage
	// resource. The coverage issuing insurer will use these details to locate the
	// patient's actual coverage within the insurer's information system.
	Coverage *fhir.Reference `fhirpath:"coverage"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A flag to indicate that this Coverage is to be used for adjudication of this
	// claim when set to true.
	Focal *fhir.Boolean `fhirpath:"focal"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The business identifier to be used when the claim is sent for adjudication
	// against this insurance policy.
	Identifier *fhir.Identifier `fhirpath:"identifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Reference numbers previously provided by the insurer to the provider to be
	// quoted on subsequent claims containing services or products related to the
	// prior authorization.
	PreAuthRef []*fhir.String `fhirpath:"preAuthRef"`

	// A number to uniquely identify insurance entries and provide a sequence of
	// coverages to convey coordination of benefit order.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBusinessArrangement returns the value of the field BusinessArrangement.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimInsurance) GetBusinessArrangement() *fhir.String {
	if ci == nil {
		return nil
	}
	return ci.BusinessArrangement
}

// GetClaimResponse returns the value of the field ClaimResponse.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimInsurance) GetClaimResponse() *fhir.Reference {
	if ci == nil {
		return nil
	}
	return ci.ClaimResponse
}

// GetCoverage returns the value of the field Coverage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimInsurance) GetCoverage() *fhir.Reference {
	if ci == nil {
		return nil
	}
	return ci.Coverage
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimInsurance) GetExtension() []*fhir.Extension {
	if ci == nil {
		return nil
	}
	return ci.Extension
}

// GetFocal returns the value of the field Focal.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimInsurance) GetFocal() *fhir.Boolean {
	if ci == nil {
		return nil
	}
	return ci.Focal
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimInsurance) GetID() string {
	if ci == nil {
		return ""
	}
	return ci.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimInsurance) GetIdentifier() *fhir.Identifier {
	if ci == nil {
		return nil
	}
	return ci.Identifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimInsurance) GetModifierExtension() []*fhir.Extension {
	if ci == nil {
		return nil
	}
	return ci.ModifierExtension
}

// GetPreAuthRef returns the value of the field PreAuthRef.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimInsurance) GetPreAuthRef() []*fhir.String {
	if ci == nil {
		return nil
	}
	return ci.PreAuthRef
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimInsurance) GetSequence() *fhir.PositiveInt {
	if ci == nil {
		return nil
	}
	return ci.Sequence
}

// Product or service provided// A claim line. Either a simple product or service or a 'group' of details
// which can each be a simple items or groups of sub-details.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimItem struct {

	// Physical service site on the patient (limb, tooth, etc.).
	BodySite *fhir.CodeableConcept `fhirpath:"bodySite"`

	// CareTeam members related to this service or product.
	CareTeamSequence []*fhir.PositiveInt `fhirpath:"careTeamSequence"`

	// Code to identify the general type of benefits under which products and
	// services are provided.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// A claim detail line. Either a simple (a product or service) or a 'group' of
	// sub-details which are simple items.
	Detail []*ClaimItemDetail `fhirpath:"detail"`

	// Diagnosis applicable for this service or product.
	DiagnosisSequence []*fhir.PositiveInt `fhirpath:"diagnosisSequence"`

	// The Encounters during which this Claim was created or to which the creation
	// of this record is tightly associated.
	Encounter []*fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Exceptions, special conditions and supporting information applicable for
	// this service or product.
	InformationSequence []*fhir.PositiveInt `fhirpath:"informationSequence"`

	// Where the product or service was provided.
	Location fhir.Element `fhirpath:"location"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// Procedures applicable for this service or product.
	ProcedureSequence []*fhir.PositiveInt `fhirpath:"procedureSequence"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// Identifies the program under which this may be recovered.
	ProgramCode []*fhir.CodeableConcept `fhirpath:"programCode"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The type of revenue or cost center providing the product and/or service.
	Revenue *fhir.CodeableConcept `fhirpath:"revenue"`

	// A number to uniquely identify item entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// The date or dates when the service or product was supplied, performed or
	// completed.
	Serviced fhir.Element `fhirpath:"serviced"`

	// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
	SubSite []*fhir.CodeableConcept `fhirpath:"subSite"`

	// Unique Device Identifiers associated with this line item.
	Udi []*fhir.Reference `fhirpath:"udi"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBodySite returns the value of the field BodySite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetBodySite() *fhir.CodeableConcept {
	if ci == nil {
		return nil
	}
	return ci.BodySite
}

// GetCareTeamSequence returns the value of the field CareTeamSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetCareTeamSequence() []*fhir.PositiveInt {
	if ci == nil {
		return nil
	}
	return ci.CareTeamSequence
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetCategory() *fhir.CodeableConcept {
	if ci == nil {
		return nil
	}
	return ci.Category
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetDetail() []*ClaimItemDetail {
	if ci == nil {
		return nil
	}
	return ci.Detail
}

// GetDiagnosisSequence returns the value of the field DiagnosisSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetDiagnosisSequence() []*fhir.PositiveInt {
	if ci == nil {
		return nil
	}
	return ci.DiagnosisSequence
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetEncounter() []*fhir.Reference {
	if ci == nil {
		return nil
	}
	return ci.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetExtension() []*fhir.Extension {
	if ci == nil {
		return nil
	}
	return ci.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetFactor() *fhir.Decimal {
	if ci == nil {
		return nil
	}
	return ci.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetID() string {
	if ci == nil {
		return ""
	}
	return ci.ID
}

// GetInformationSequence returns the value of the field InformationSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetInformationSequence() []*fhir.PositiveInt {
	if ci == nil {
		return nil
	}
	return ci.InformationSequence
}

// GetLocation returns the value of the field Location.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetLocation() fhir.Element {
	if ci == nil {
		return nil
	}
	return ci.Location
}

// GetLocationCodeableConcept returns the value of the field Location.
func (ci *ClaimItem) GetLocationCodeableConcept() *fhir.CodeableConcept {
	if ci == nil {
		return nil
	}
	val, ok := ci.Location.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetLocationAddress returns the value of the field Location.
func (ci *ClaimItem) GetLocationAddress() *fhir.Address {
	if ci == nil {
		return nil
	}
	val, ok := ci.Location.(*fhir.Address)
	if !ok {
		return nil
	}
	return val
}

// GetLocationReference returns the value of the field Location.
func (ci *ClaimItem) GetLocationReference() *fhir.Reference {
	if ci == nil {
		return nil
	}
	val, ok := ci.Location.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetModifier() []*fhir.CodeableConcept {
	if ci == nil {
		return nil
	}
	return ci.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetModifierExtension() []*fhir.Extension {
	if ci == nil {
		return nil
	}
	return ci.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetNet() *fhir.Money {
	if ci == nil {
		return nil
	}
	return ci.Net
}

// GetProcedureSequence returns the value of the field ProcedureSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetProcedureSequence() []*fhir.PositiveInt {
	if ci == nil {
		return nil
	}
	return ci.ProcedureSequence
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetProductOrService() *fhir.CodeableConcept {
	if ci == nil {
		return nil
	}
	return ci.ProductOrService
}

// GetProgramCode returns the value of the field ProgramCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetProgramCode() []*fhir.CodeableConcept {
	if ci == nil {
		return nil
	}
	return ci.ProgramCode
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetQuantity() *fhir.Quantity {
	if ci == nil {
		return nil
	}
	return ci.Quantity
}

// GetRevenue returns the value of the field Revenue.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetRevenue() *fhir.CodeableConcept {
	if ci == nil {
		return nil
	}
	return ci.Revenue
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetSequence() *fhir.PositiveInt {
	if ci == nil {
		return nil
	}
	return ci.Sequence
}

// GetServiced returns the value of the field Serviced.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetServiced() fhir.Element {
	if ci == nil {
		return nil
	}
	return ci.Serviced
}

// GetServicedDate returns the value of the field Serviced.
func (ci *ClaimItem) GetServicedDate() *fhir.Date {
	if ci == nil {
		return nil
	}
	val, ok := ci.Serviced.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetServicedPeriod returns the value of the field Serviced.
func (ci *ClaimItem) GetServicedPeriod() *fhir.Period {
	if ci == nil {
		return nil
	}
	val, ok := ci.Serviced.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetSubSite returns the value of the field SubSite.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetSubSite() []*fhir.CodeableConcept {
	if ci == nil {
		return nil
	}
	return ci.SubSite
}

// GetUdi returns the value of the field Udi.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetUdi() []*fhir.Reference {
	if ci == nil {
		return nil
	}
	return ci.Udi
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ci *ClaimItem) GetUnitPrice() *fhir.Money {
	if ci == nil {
		return nil
	}
	return ci.UnitPrice
}

// Product or service provided// A claim detail line. Either a simple (a product or service) or a 'group' of
// sub-details which are simple items.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimItemDetail struct {

	// Code to identify the general type of benefits under which products and
	// services are provided.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// Identifies the program under which this may be recovered.
	ProgramCode []*fhir.CodeableConcept `fhirpath:"programCode"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The type of revenue or cost center providing the product and/or service.
	Revenue *fhir.CodeableConcept `fhirpath:"revenue"`

	// A number to uniquely identify item entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// A claim detail line. Either a simple (a product or service) or a 'group' of
	// sub-details which are simple items.
	SubDetail []*ClaimItemDetailSubDetail `fhirpath:"subDetail"`

	// Unique Device Identifiers associated with this line item.
	Udi []*fhir.Reference `fhirpath:"udi"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetCategory() *fhir.CodeableConcept {
	if cid == nil {
		return nil
	}
	return cid.Category
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetExtension() []*fhir.Extension {
	if cid == nil {
		return nil
	}
	return cid.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetFactor() *fhir.Decimal {
	if cid == nil {
		return nil
	}
	return cid.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetID() string {
	if cid == nil {
		return ""
	}
	return cid.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetModifier() []*fhir.CodeableConcept {
	if cid == nil {
		return nil
	}
	return cid.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetModifierExtension() []*fhir.Extension {
	if cid == nil {
		return nil
	}
	return cid.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetNet() *fhir.Money {
	if cid == nil {
		return nil
	}
	return cid.Net
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetProductOrService() *fhir.CodeableConcept {
	if cid == nil {
		return nil
	}
	return cid.ProductOrService
}

// GetProgramCode returns the value of the field ProgramCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetProgramCode() []*fhir.CodeableConcept {
	if cid == nil {
		return nil
	}
	return cid.ProgramCode
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetQuantity() *fhir.Quantity {
	if cid == nil {
		return nil
	}
	return cid.Quantity
}

// GetRevenue returns the value of the field Revenue.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetRevenue() *fhir.CodeableConcept {
	if cid == nil {
		return nil
	}
	return cid.Revenue
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetSequence() *fhir.PositiveInt {
	if cid == nil {
		return nil
	}
	return cid.Sequence
}

// GetSubDetail returns the value of the field SubDetail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetSubDetail() []*ClaimItemDetailSubDetail {
	if cid == nil {
		return nil
	}
	return cid.SubDetail
}

// GetUdi returns the value of the field Udi.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetUdi() []*fhir.Reference {
	if cid == nil {
		return nil
	}
	return cid.Udi
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cid *ClaimItemDetail) GetUnitPrice() *fhir.Money {
	if cid == nil {
		return nil
	}
	return cid.UnitPrice
}

// Product or service provided// A claim detail line. Either a simple (a product or service) or a 'group' of
// sub-details which are simple items.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimItemDetailSubDetail struct {

	// Code to identify the general type of benefits under which products and
	// services are provided.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A real number that represents a multiplier used in determining the overall
	// value of services delivered and/or goods received. The concept of a Factor
	// allows for a discount or surcharge multiplier to be applied to a monetary
	// amount.
	Factor *fhir.Decimal `fhirpath:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The quantity times the unit price for an additional service or product or
	// charge.
	Net *fhir.Money `fhirpath:"net"`

	// When the value is a group code then this item collects a set of related
	// claim details, otherwise this contains the product, service, drug or other
	// billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// Identifies the program under which this may be recovered.
	ProgramCode []*fhir.CodeableConcept `fhirpath:"programCode"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The type of revenue or cost center providing the product and/or service.
	Revenue *fhir.CodeableConcept `fhirpath:"revenue"`

	// A number to uniquely identify item entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// Unique Device Identifiers associated with this line item.
	Udi []*fhir.Reference `fhirpath:"udi"`

	// If the item is not a group then this is the fee for the product or service,
	// otherwise this is the total of the fees for the details of the group.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetCategory() *fhir.CodeableConcept {
	if cidsd == nil {
		return nil
	}
	return cidsd.Category
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetExtension() []*fhir.Extension {
	if cidsd == nil {
		return nil
	}
	return cidsd.Extension
}

// GetFactor returns the value of the field Factor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetFactor() *fhir.Decimal {
	if cidsd == nil {
		return nil
	}
	return cidsd.Factor
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetID() string {
	if cidsd == nil {
		return ""
	}
	return cidsd.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetModifier() []*fhir.CodeableConcept {
	if cidsd == nil {
		return nil
	}
	return cidsd.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetModifierExtension() []*fhir.Extension {
	if cidsd == nil {
		return nil
	}
	return cidsd.ModifierExtension
}

// GetNet returns the value of the field Net.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetNet() *fhir.Money {
	if cidsd == nil {
		return nil
	}
	return cidsd.Net
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetProductOrService() *fhir.CodeableConcept {
	if cidsd == nil {
		return nil
	}
	return cidsd.ProductOrService
}

// GetProgramCode returns the value of the field ProgramCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetProgramCode() []*fhir.CodeableConcept {
	if cidsd == nil {
		return nil
	}
	return cidsd.ProgramCode
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetQuantity() *fhir.Quantity {
	if cidsd == nil {
		return nil
	}
	return cidsd.Quantity
}

// GetRevenue returns the value of the field Revenue.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetRevenue() *fhir.CodeableConcept {
	if cidsd == nil {
		return nil
	}
	return cidsd.Revenue
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetSequence() *fhir.PositiveInt {
	if cidsd == nil {
		return nil
	}
	return cidsd.Sequence
}

// GetUdi returns the value of the field Udi.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetUdi() []*fhir.Reference {
	if cidsd == nil {
		return nil
	}
	return cidsd.Udi
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cidsd *ClaimItemDetailSubDetail) GetUnitPrice() *fhir.Money {
	if cidsd == nil {
		return nil
	}
	return cidsd.UnitPrice
}

// Recipient of benefits payable// The party to be reimbursed for cost of the products and services according
// to the terms of the policy.// Often providers agree to receive the benefits payable to reduce the
// near-term costs to the patient. The insurer may decline to pay the provider
// and choose to pay the subscriber instead.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimPayee struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Reference to the individual or organization to whom any payment will be
	// made.
	Party *fhir.Reference `fhirpath:"party"`

	// Type of Party to be reimbursed: subscriber, provider, other.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimPayee) GetExtension() []*fhir.Extension {
	if cp == nil {
		return nil
	}
	return cp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimPayee) GetID() string {
	if cp == nil {
		return ""
	}
	return cp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimPayee) GetModifierExtension() []*fhir.Extension {
	if cp == nil {
		return nil
	}
	return cp.ModifierExtension
}

// GetParty returns the value of the field Party.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimPayee) GetParty() *fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.Party
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimPayee) GetType() *fhir.CodeableConcept {
	if cp == nil {
		return nil
	}
	return cp.Type
}

// Clinical procedures performed// Procedures performed on the patient relevant to the billing items with the
// claim.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimProcedure struct {

	// Date and optionally time the procedure was performed.
	Date *fhir.DateTime `fhirpath:"date"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The code or reference to a Procedure resource which identifies the clinical
	// intervention performed.
	Procedure fhir.Element `fhirpath:"procedure"`

	// A number to uniquely identify procedure entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// When the condition was observed or the relative ranking.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	// Unique Device Identifiers associated with this line item.
	Udi []*fhir.Reference `fhirpath:"udi"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimProcedure) GetDate() *fhir.DateTime {
	if cp == nil {
		return nil
	}
	return cp.Date
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimProcedure) GetExtension() []*fhir.Extension {
	if cp == nil {
		return nil
	}
	return cp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimProcedure) GetID() string {
	if cp == nil {
		return ""
	}
	return cp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimProcedure) GetModifierExtension() []*fhir.Extension {
	if cp == nil {
		return nil
	}
	return cp.ModifierExtension
}

// GetProcedure returns the value of the field Procedure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimProcedure) GetProcedure() fhir.Element {
	if cp == nil {
		return nil
	}
	return cp.Procedure
}

// GetProcedureCodeableConcept returns the value of the field Procedure.
func (cp *ClaimProcedure) GetProcedureCodeableConcept() *fhir.CodeableConcept {
	if cp == nil {
		return nil
	}
	val, ok := cp.Procedure.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetProcedureReference returns the value of the field Procedure.
func (cp *ClaimProcedure) GetProcedureReference() *fhir.Reference {
	if cp == nil {
		return nil
	}
	val, ok := cp.Procedure.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimProcedure) GetSequence() *fhir.PositiveInt {
	if cp == nil {
		return nil
	}
	return cp.Sequence
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimProcedure) GetType() []*fhir.CodeableConcept {
	if cp == nil {
		return nil
	}
	return cp.Type
}

// GetUdi returns the value of the field Udi.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ClaimProcedure) GetUdi() []*fhir.Reference {
	if cp == nil {
		return nil
	}
	return cp.Udi
}

// Prior or corollary claims// Other claims which are related to this claim such as prior submissions or
// claims for related services or for the same event.// For example, for the original treatment and follow-up exams.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimRelated struct {

	// Reference to a related claim.
	Claim *fhir.Reference `fhirpath:"claim"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// An alternate organizational reference to the case or file to which this
	// particular claim pertains.
	Reference *fhir.Identifier `fhirpath:"reference"`

	// A code to convey how the claims are related.
	Relationship *fhir.CodeableConcept `fhirpath:"relationship"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetClaim returns the value of the field Claim.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimRelated) GetClaim() *fhir.Reference {
	if cr == nil {
		return nil
	}
	return cr.Claim
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimRelated) GetExtension() []*fhir.Extension {
	if cr == nil {
		return nil
	}
	return cr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimRelated) GetID() string {
	if cr == nil {
		return ""
	}
	return cr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimRelated) GetModifierExtension() []*fhir.Extension {
	if cr == nil {
		return nil
	}
	return cr.ModifierExtension
}

// GetReference returns the value of the field Reference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimRelated) GetReference() *fhir.Identifier {
	if cr == nil {
		return nil
	}
	return cr.Reference
}

// GetRelationship returns the value of the field Relationship.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cr *ClaimRelated) GetRelationship() *fhir.CodeableConcept {
	if cr == nil {
		return nil
	}
	return cr.Relationship
}

// Supporting information// Additional information codes regarding exceptions, special considerations,
// the condition, situation, prior or concurrent issues.// Often there are multiple jurisdiction specific valuesets which are required.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Claim.json
type ClaimSupportingInfo struct {

	// The general class of the information supplied: information; exception;
	// accident, employment; onset, etc.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// System and code pertaining to the specific information regarding special
	// conditions relating to the setting, treatment or patient for which care is
	// sought.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Provides the reason in the situation where a reason code is required in
	// addition to the content.
	Reason *fhir.CodeableConcept `fhirpath:"reason"`

	// A number to uniquely identify supporting information entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	// The date when or period to which this information refers.
	Timing fhir.Element `fhirpath:"timing"`

	// Additional data or information such as resources, documents, images etc.
	// including references to the data or the actual inclusion of the data.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *ClaimSupportingInfo) GetCategory() *fhir.CodeableConcept {
	if csi == nil {
		return nil
	}
	return csi.Category
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *ClaimSupportingInfo) GetCode() *fhir.CodeableConcept {
	if csi == nil {
		return nil
	}
	return csi.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *ClaimSupportingInfo) GetExtension() []*fhir.Extension {
	if csi == nil {
		return nil
	}
	return csi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *ClaimSupportingInfo) GetID() string {
	if csi == nil {
		return ""
	}
	return csi.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *ClaimSupportingInfo) GetModifierExtension() []*fhir.Extension {
	if csi == nil {
		return nil
	}
	return csi.ModifierExtension
}

// GetReason returns the value of the field Reason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *ClaimSupportingInfo) GetReason() *fhir.CodeableConcept {
	if csi == nil {
		return nil
	}
	return csi.Reason
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *ClaimSupportingInfo) GetSequence() *fhir.PositiveInt {
	if csi == nil {
		return nil
	}
	return csi.Sequence
}

// GetTiming returns the value of the field Timing.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *ClaimSupportingInfo) GetTiming() fhir.Element {
	if csi == nil {
		return nil
	}
	return csi.Timing
}

// GetTimingDate returns the value of the field Timing.
func (csi *ClaimSupportingInfo) GetTimingDate() *fhir.Date {
	if csi == nil {
		return nil
	}
	val, ok := csi.Timing.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetTimingPeriod returns the value of the field Timing.
func (csi *ClaimSupportingInfo) GetTimingPeriod() *fhir.Period {
	if csi == nil {
		return nil
	}
	val, ok := csi.Timing.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csi *ClaimSupportingInfo) GetValue() fhir.Element {
	if csi == nil {
		return nil
	}
	return csi.Value
}

// GetValueBoolean returns the value of the field Value.
func (csi *ClaimSupportingInfo) GetValueBoolean() *fhir.Boolean {
	if csi == nil {
		return nil
	}
	val, ok := csi.Value.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetValueString returns the value of the field Value.
func (csi *ClaimSupportingInfo) GetValueString() *fhir.String {
	if csi == nil {
		return nil
	}
	val, ok := csi.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueQuantity returns the value of the field Value.
func (csi *ClaimSupportingInfo) GetValueQuantity() *fhir.Quantity {
	if csi == nil {
		return nil
	}
	val, ok := csi.Value.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetValueAttachment returns the value of the field Value.
func (csi *ClaimSupportingInfo) GetValueAttachment() *fhir.Attachment {
	if csi == nil {
		return nil
	}
	val, ok := csi.Value.(*fhir.Attachment)
	if !ok {
		return nil
	}
	return val
}

// GetValueReference returns the value of the field Value.
func (csi *ClaimSupportingInfo) GetValueReference() *fhir.Reference {
	if csi == nil {
		return nil
	}
	val, ok := csi.Value.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
}

func (c *Claim) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (c *Claim) UnmarshalJSON(data []byte) error {
	var raw struct {
		Accident       *ClaimAccident        `json:"accident"`
		BillablePeriod *fhir.Period          `json:"billablePeriod"`
		CareTeam       []*ClaimCareTeam      `json:"careTeam"`
		Contained      []fhir.Resource       `json:"contained"`
		Created        *fhir.DateTime        `json:"created"`
		Diagnosis      []*ClaimDiagnosis     `json:"diagnosis"`
		Enterer        *fhir.Reference       `json:"enterer"`
		Extension      []*fhir.Extension     `json:"extension"`
		Facility       *fhir.Reference       `json:"facility"`
		FundsReserve   *fhir.CodeableConcept `json:"fundsReserve"`

		ID                   string                 `json:"id"`
		Identifier           []*fhir.Identifier     `json:"identifier"`
		ImplicitRules        *fhir.URI              `json:"implicitRules"`
		Insurance            []*ClaimInsurance      `json:"insurance"`
		Insurer              *fhir.Reference        `json:"insurer"`
		Item                 []*ClaimItem           `json:"item"`
		Language             *fhir.Code             `json:"language"`
		Meta                 *fhir.Meta             `json:"meta"`
		ModifierExtension    []*fhir.Extension      `json:"modifierExtension"`
		OriginalPrescription *fhir.Reference        `json:"originalPrescription"`
		Patient              *fhir.Reference        `json:"patient"`
		Payee                *ClaimPayee            `json:"payee"`
		Prescription         *fhir.Reference        `json:"prescription"`
		Priority             *fhir.CodeableConcept  `json:"priority"`
		Procedure            []*ClaimProcedure      `json:"procedure"`
		Provider             *fhir.Reference        `json:"provider"`
		Referral             *fhir.Reference        `json:"referral"`
		Related              []*ClaimRelated        `json:"related"`
		Status               *fhir.Code             `json:"status"`
		SubType              *fhir.CodeableConcept  `json:"subType"`
		SupportingInfo       []*ClaimSupportingInfo `json:"supportingInfo"`
		Text                 *fhir.Narrative        `json:"text"`
		Total                *fhir.Money            `json:"total"`
		Type                 *fhir.CodeableConcept  `json:"type"`
		Use                  *fhir.Code             `json:"use"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	c.Accident = raw.Accident
	c.BillablePeriod = raw.BillablePeriod
	c.CareTeam = raw.CareTeam
	c.Contained = raw.Contained
	c.Created = raw.Created
	c.Diagnosis = raw.Diagnosis
	c.Enterer = raw.Enterer
	c.Extension = raw.Extension
	c.Facility = raw.Facility
	c.FundsReserve = raw.FundsReserve
	c.ID = raw.ID
	c.Identifier = raw.Identifier
	c.ImplicitRules = raw.ImplicitRules
	c.Insurance = raw.Insurance
	c.Insurer = raw.Insurer
	c.Item = raw.Item
	c.Language = raw.Language
	c.Meta = raw.Meta
	c.ModifierExtension = raw.ModifierExtension
	c.OriginalPrescription = raw.OriginalPrescription
	c.Patient = raw.Patient
	c.Payee = raw.Payee
	c.Prescription = raw.Prescription
	c.Priority = raw.Priority
	c.Procedure = raw.Procedure
	c.Provider = raw.Provider
	c.Referral = raw.Referral
	c.Related = raw.Related
	c.Status = raw.Status
	c.SubType = raw.SubType
	c.SupportingInfo = raw.SupportingInfo
	c.Text = raw.Text
	c.Total = raw.Total
	c.Type = raw.Type
	c.Use = raw.Use
	return nil
}

var _ json.Marshaler = (*Claim)(nil)
var _ json.Unmarshaler = (*Claim)(nil)

func (ca *ClaimAccident) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ca *ClaimAccident) UnmarshalJSON(data []byte) error {
	var raw struct {
		Date      *fhir.Date        `json:"date"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		LocationAddress   *fhir.Address         `json:"locationAddress"`
		LocationReference *fhir.Reference       `json:"locationReference"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ca.Date = raw.Date
	ca.Extension = raw.Extension
	ca.ID = raw.ID
	ca.Location, err = validate.SelectOneOf[fhir.Element]("Claim.accident.location",
		raw.LocationAddress,
		raw.LocationReference)
	if err != nil {
		return err
	}
	ca.ModifierExtension = raw.ModifierExtension
	ca.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*ClaimAccident)(nil)
var _ json.Unmarshaler = (*ClaimAccident)(nil)

func (cct *ClaimCareTeam) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cct *ClaimCareTeam) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Provider          *fhir.Reference       `json:"provider"`
		Qualification     *fhir.CodeableConcept `json:"qualification"`
		Responsible       *fhir.Boolean         `json:"responsible"`
		Role              *fhir.CodeableConcept `json:"role"`
		Sequence          *fhir.PositiveInt     `json:"sequence"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cct.Extension = raw.Extension
	cct.ID = raw.ID
	cct.ModifierExtension = raw.ModifierExtension
	cct.Provider = raw.Provider
	cct.Qualification = raw.Qualification
	cct.Responsible = raw.Responsible
	cct.Role = raw.Role
	cct.Sequence = raw.Sequence
	return nil
}

var _ json.Marshaler = (*ClaimCareTeam)(nil)
var _ json.Unmarshaler = (*ClaimCareTeam)(nil)

func (cd *ClaimDiagnosis) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cd *ClaimDiagnosis) UnmarshalJSON(data []byte) error {
	var raw struct {
		DiagnosisCodeableConcept *fhir.CodeableConcept `json:"diagnosisCodeableConcept"`
		DiagnosisReference       *fhir.Reference       `json:"diagnosisReference"`
		Extension                []*fhir.Extension     `json:"extension"`

		ID                string                  `json:"id"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		OnAdmission       *fhir.CodeableConcept   `json:"onAdmission"`
		PackageCode       *fhir.CodeableConcept   `json:"packageCode"`
		Sequence          *fhir.PositiveInt       `json:"sequence"`
		Type              []*fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cd.Diagnosis, err = validate.SelectOneOf[fhir.Element]("Claim.diagnosis.diagnosis",
		raw.DiagnosisCodeableConcept,
		raw.DiagnosisReference)
	if err != nil {
		return err
	}
	cd.Extension = raw.Extension
	cd.ID = raw.ID
	cd.ModifierExtension = raw.ModifierExtension
	cd.OnAdmission = raw.OnAdmission
	cd.PackageCode = raw.PackageCode
	cd.Sequence = raw.Sequence
	cd.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*ClaimDiagnosis)(nil)
var _ json.Unmarshaler = (*ClaimDiagnosis)(nil)

func (ci *ClaimInsurance) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ci *ClaimInsurance) UnmarshalJSON(data []byte) error {
	var raw struct {
		BusinessArrangement *fhir.String      `json:"businessArrangement"`
		ClaimResponse       *fhir.Reference   `json:"claimResponse"`
		Coverage            *fhir.Reference   `json:"coverage"`
		Extension           []*fhir.Extension `json:"extension"`
		Focal               *fhir.Boolean     `json:"focal"`

		ID                string            `json:"id"`
		Identifier        *fhir.Identifier  `json:"identifier"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		PreAuthRef        []*fhir.String    `json:"preAuthRef"`
		Sequence          *fhir.PositiveInt `json:"sequence"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ci.BusinessArrangement = raw.BusinessArrangement
	ci.ClaimResponse = raw.ClaimResponse
	ci.Coverage = raw.Coverage
	ci.Extension = raw.Extension
	ci.Focal = raw.Focal
	ci.ID = raw.ID
	ci.Identifier = raw.Identifier
	ci.ModifierExtension = raw.ModifierExtension
	ci.PreAuthRef = raw.PreAuthRef
	ci.Sequence = raw.Sequence
	return nil
}

var _ json.Marshaler = (*ClaimInsurance)(nil)
var _ json.Unmarshaler = (*ClaimInsurance)(nil)

func (ci *ClaimItem) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ci *ClaimItem) UnmarshalJSON(data []byte) error {
	var raw struct {
		BodySite          *fhir.CodeableConcept `json:"bodySite"`
		CareTeamSequence  []*fhir.PositiveInt   `json:"careTeamSequence"`
		Category          *fhir.CodeableConcept `json:"category"`
		Detail            []*ClaimItemDetail    `json:"detail"`
		DiagnosisSequence []*fhir.PositiveInt   `json:"diagnosisSequence"`
		Encounter         []*fhir.Reference     `json:"encounter"`
		Extension         []*fhir.Extension     `json:"extension"`
		Factor            *fhir.Decimal         `json:"factor"`

		ID                      string                  `json:"id"`
		InformationSequence     []*fhir.PositiveInt     `json:"informationSequence"`
		LocationCodeableConcept *fhir.CodeableConcept   `json:"locationCodeableConcept"`
		LocationAddress         *fhir.Address           `json:"locationAddress"`
		LocationReference       *fhir.Reference         `json:"locationReference"`
		Modifier                []*fhir.CodeableConcept `json:"modifier"`
		ModifierExtension       []*fhir.Extension       `json:"modifierExtension"`
		Net                     *fhir.Money             `json:"net"`
		ProcedureSequence       []*fhir.PositiveInt     `json:"procedureSequence"`
		ProductOrService        *fhir.CodeableConcept   `json:"productOrService"`
		ProgramCode             []*fhir.CodeableConcept `json:"programCode"`
		Quantity                *fhir.Quantity          `json:"quantity"`
		Revenue                 *fhir.CodeableConcept   `json:"revenue"`
		Sequence                *fhir.PositiveInt       `json:"sequence"`
		ServicedDate            *fhir.Date              `json:"servicedDate"`
		ServicedPeriod          *fhir.Period            `json:"servicedPeriod"`
		SubSite                 []*fhir.CodeableConcept `json:"subSite"`
		Udi                     []*fhir.Reference       `json:"udi"`
		UnitPrice               *fhir.Money             `json:"unitPrice"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ci.BodySite = raw.BodySite
	ci.CareTeamSequence = raw.CareTeamSequence
	ci.Category = raw.Category
	ci.Detail = raw.Detail
	ci.DiagnosisSequence = raw.DiagnosisSequence
	ci.Encounter = raw.Encounter
	ci.Extension = raw.Extension
	ci.Factor = raw.Factor
	ci.ID = raw.ID
	ci.InformationSequence = raw.InformationSequence
	ci.Location, err = validate.SelectOneOf[fhir.Element]("Claim.item.location",
		raw.LocationCodeableConcept,
		raw.LocationAddress,
		raw.LocationReference)
	if err != nil {
		return err
	}
	ci.Modifier = raw.Modifier
	ci.ModifierExtension = raw.ModifierExtension
	ci.Net = raw.Net
	ci.ProcedureSequence = raw.ProcedureSequence
	ci.ProductOrService = raw.ProductOrService
	ci.ProgramCode = raw.ProgramCode
	ci.Quantity = raw.Quantity
	ci.Revenue = raw.Revenue
	ci.Sequence = raw.Sequence
	ci.Serviced, err = validate.SelectOneOf[fhir.Element]("Claim.item.serviced",
		raw.ServicedDate,
		raw.ServicedPeriod)
	if err != nil {
		return err
	}
	ci.SubSite = raw.SubSite
	ci.Udi = raw.Udi
	ci.UnitPrice = raw.UnitPrice
	return nil
}

var _ json.Marshaler = (*ClaimItem)(nil)
var _ json.Unmarshaler = (*ClaimItem)(nil)

func (cid *ClaimItemDetail) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cid *ClaimItemDetail) UnmarshalJSON(data []byte) error {
	var raw struct {
		Category  *fhir.CodeableConcept `json:"category"`
		Extension []*fhir.Extension     `json:"extension"`
		Factor    *fhir.Decimal         `json:"factor"`

		ID                string                      `json:"id"`
		Modifier          []*fhir.CodeableConcept     `json:"modifier"`
		ModifierExtension []*fhir.Extension           `json:"modifierExtension"`
		Net               *fhir.Money                 `json:"net"`
		ProductOrService  *fhir.CodeableConcept       `json:"productOrService"`
		ProgramCode       []*fhir.CodeableConcept     `json:"programCode"`
		Quantity          *fhir.Quantity              `json:"quantity"`
		Revenue           *fhir.CodeableConcept       `json:"revenue"`
		Sequence          *fhir.PositiveInt           `json:"sequence"`
		SubDetail         []*ClaimItemDetailSubDetail `json:"subDetail"`
		Udi               []*fhir.Reference           `json:"udi"`
		UnitPrice         *fhir.Money                 `json:"unitPrice"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cid.Category = raw.Category
	cid.Extension = raw.Extension
	cid.Factor = raw.Factor
	cid.ID = raw.ID
	cid.Modifier = raw.Modifier
	cid.ModifierExtension = raw.ModifierExtension
	cid.Net = raw.Net
	cid.ProductOrService = raw.ProductOrService
	cid.ProgramCode = raw.ProgramCode
	cid.Quantity = raw.Quantity
	cid.Revenue = raw.Revenue
	cid.Sequence = raw.Sequence
	cid.SubDetail = raw.SubDetail
	cid.Udi = raw.Udi
	cid.UnitPrice = raw.UnitPrice
	return nil
}

var _ json.Marshaler = (*ClaimItemDetail)(nil)
var _ json.Unmarshaler = (*ClaimItemDetail)(nil)

func (cidsd *ClaimItemDetailSubDetail) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cidsd *ClaimItemDetailSubDetail) UnmarshalJSON(data []byte) error {
	var raw struct {
		Category  *fhir.CodeableConcept `json:"category"`
		Extension []*fhir.Extension     `json:"extension"`
		Factor    *fhir.Decimal         `json:"factor"`

		ID                string                  `json:"id"`
		Modifier          []*fhir.CodeableConcept `json:"modifier"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Net               *fhir.Money             `json:"net"`
		ProductOrService  *fhir.CodeableConcept   `json:"productOrService"`
		ProgramCode       []*fhir.CodeableConcept `json:"programCode"`
		Quantity          *fhir.Quantity          `json:"quantity"`
		Revenue           *fhir.CodeableConcept   `json:"revenue"`
		Sequence          *fhir.PositiveInt       `json:"sequence"`
		Udi               []*fhir.Reference       `json:"udi"`
		UnitPrice         *fhir.Money             `json:"unitPrice"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cidsd.Category = raw.Category
	cidsd.Extension = raw.Extension
	cidsd.Factor = raw.Factor
	cidsd.ID = raw.ID
	cidsd.Modifier = raw.Modifier
	cidsd.ModifierExtension = raw.ModifierExtension
	cidsd.Net = raw.Net
	cidsd.ProductOrService = raw.ProductOrService
	cidsd.ProgramCode = raw.ProgramCode
	cidsd.Quantity = raw.Quantity
	cidsd.Revenue = raw.Revenue
	cidsd.Sequence = raw.Sequence
	cidsd.Udi = raw.Udi
	cidsd.UnitPrice = raw.UnitPrice
	return nil
}

var _ json.Marshaler = (*ClaimItemDetailSubDetail)(nil)
var _ json.Unmarshaler = (*ClaimItemDetailSubDetail)(nil)

func (cp *ClaimPayee) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cp *ClaimPayee) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Party             *fhir.Reference       `json:"party"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cp.Extension = raw.Extension
	cp.ID = raw.ID
	cp.ModifierExtension = raw.ModifierExtension
	cp.Party = raw.Party
	cp.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*ClaimPayee)(nil)
var _ json.Unmarshaler = (*ClaimPayee)(nil)

func (cp *ClaimProcedure) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cp *ClaimProcedure) UnmarshalJSON(data []byte) error {
	var raw struct {
		Date      *fhir.DateTime    `json:"date"`
		Extension []*fhir.Extension `json:"extension"`

		ID                       string                  `json:"id"`
		ModifierExtension        []*fhir.Extension       `json:"modifierExtension"`
		ProcedureCodeableConcept *fhir.CodeableConcept   `json:"procedureCodeableConcept"`
		ProcedureReference       *fhir.Reference         `json:"procedureReference"`
		Sequence                 *fhir.PositiveInt       `json:"sequence"`
		Type                     []*fhir.CodeableConcept `json:"type"`
		Udi                      []*fhir.Reference       `json:"udi"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cp.Date = raw.Date
	cp.Extension = raw.Extension
	cp.ID = raw.ID
	cp.ModifierExtension = raw.ModifierExtension
	cp.Procedure, err = validate.SelectOneOf[fhir.Element]("Claim.procedure.procedure",
		raw.ProcedureCodeableConcept,
		raw.ProcedureReference)
	if err != nil {
		return err
	}
	cp.Sequence = raw.Sequence
	cp.Type = raw.Type
	cp.Udi = raw.Udi
	return nil
}

var _ json.Marshaler = (*ClaimProcedure)(nil)
var _ json.Unmarshaler = (*ClaimProcedure)(nil)

func (cr *ClaimRelated) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cr *ClaimRelated) UnmarshalJSON(data []byte) error {
	var raw struct {
		Claim     *fhir.Reference   `json:"claim"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Reference         *fhir.Identifier      `json:"reference"`
		Relationship      *fhir.CodeableConcept `json:"relationship"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cr.Claim = raw.Claim
	cr.Extension = raw.Extension
	cr.ID = raw.ID
	cr.ModifierExtension = raw.ModifierExtension
	cr.Reference = raw.Reference
	cr.Relationship = raw.Relationship
	return nil
}

var _ json.Marshaler = (*ClaimRelated)(nil)
var _ json.Unmarshaler = (*ClaimRelated)(nil)

func (csi *ClaimSupportingInfo) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (csi *ClaimSupportingInfo) UnmarshalJSON(data []byte) error {
	var raw struct {
		Category  *fhir.CodeableConcept `json:"category"`
		Code      *fhir.CodeableConcept `json:"code"`
		Extension []*fhir.Extension     `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Reason            *fhir.CodeableConcept `json:"reason"`
		Sequence          *fhir.PositiveInt     `json:"sequence"`
		TimingDate        *fhir.Date            `json:"timingDate"`
		TimingPeriod      *fhir.Period          `json:"timingPeriod"`
		ValueBoolean      *fhir.Boolean         `json:"valueBoolean"`
		ValueString       *fhir.String          `json:"valueString"`
		ValueQuantity     *fhir.Quantity        `json:"valueQuantity"`
		ValueAttachment   *fhir.Attachment      `json:"valueAttachment"`
		ValueReference    *fhir.Reference       `json:"valueReference"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	csi.Category = raw.Category
	csi.Code = raw.Code
	csi.Extension = raw.Extension
	csi.ID = raw.ID
	csi.ModifierExtension = raw.ModifierExtension
	csi.Reason = raw.Reason
	csi.Sequence = raw.Sequence
	csi.Timing, err = validate.SelectOneOf[fhir.Element]("Claim.supportingInfo.timing",
		raw.TimingDate,
		raw.TimingPeriod)
	if err != nil {
		return err
	}
	csi.Value, err = validate.SelectOneOf[fhir.Element]("Claim.supportingInfo.value",
		raw.ValueBoolean,
		raw.ValueString,
		raw.ValueQuantity,
		raw.ValueAttachment,
		raw.ValueReference)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*ClaimSupportingInfo)(nil)
var _ json.Unmarshaler = (*ClaimSupportingInfo)(nil)
