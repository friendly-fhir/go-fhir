// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package researchsubject

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A physical entity which is the primary unit of operational and/or
// administrative interest in a study.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ResearchSubject
//   - Source File: StructureDefinition-ResearchSubject.json
type ResearchSubject struct {

	// The name of the arm in the study the subject actually followed as part of
	// this study.
	ActualArm *fhir.String `fhirpath:"actualArm"`

	// The name of the arm in the study the subject is expected to follow as part
	// of this study.
	AssignedArm *fhir.String `fhirpath:"assignedArm"`

	// A record of the patient's informed agreement to participate in the study.
	Consent *fhir.Reference `fhirpath:"consent"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifiers assigned to this research subject for a study.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The record of the person or animal who is involved in the study.
	Individual *fhir.Reference `fhirpath:"individual"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The dates the subject began and ended their participation in the study.
	Period *fhir.Period `fhirpath:"period"`

	// The current state of the subject.
	Status *fhir.Code `fhirpath:"status"`

	// Reference to the study the subject is participating in.
	Study *fhir.Reference `fhirpath:"study"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetActualArm returns the value of the field ActualArm.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetActualArm() *fhir.String {
	if rs == nil {
		return nil
	}
	return rs.ActualArm
}

// GetAssignedArm returns the value of the field AssignedArm.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetAssignedArm() *fhir.String {
	if rs == nil {
		return nil
	}
	return rs.AssignedArm
}

// GetConsent returns the value of the field Consent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetConsent() *fhir.Reference {
	if rs == nil {
		return nil
	}
	return rs.Consent
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetContained() []fhir.Resource {
	if rs == nil {
		return nil
	}
	return rs.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetExtension() []*fhir.Extension {
	if rs == nil {
		return nil
	}
	return rs.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetID() string {
	if rs == nil {
		return ""
	}
	return rs.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetIdentifier() []*fhir.Identifier {
	if rs == nil {
		return nil
	}
	return rs.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetImplicitRules() *fhir.URI {
	if rs == nil {
		return nil
	}
	return rs.ImplicitRules
}

// GetIndividual returns the value of the field Individual.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetIndividual() *fhir.Reference {
	if rs == nil {
		return nil
	}
	return rs.Individual
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetLanguage() *fhir.Code {
	if rs == nil {
		return nil
	}
	return rs.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetMeta() *fhir.Meta {
	if rs == nil {
		return nil
	}
	return rs.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetModifierExtension() []*fhir.Extension {
	if rs == nil {
		return nil
	}
	return rs.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetPeriod() *fhir.Period {
	if rs == nil {
		return nil
	}
	return rs.Period
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetStatus() *fhir.Code {
	if rs == nil {
		return nil
	}
	return rs.Status
}

// GetStudy returns the value of the field Study.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetStudy() *fhir.Reference {
	if rs == nil {
		return nil
	}
	return rs.Study
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (rs *ResearchSubject) GetText() *fhir.Narrative {
	if rs == nil {
		return nil
	}
	return rs.Text
}
