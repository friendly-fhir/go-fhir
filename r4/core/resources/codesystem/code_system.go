// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package codesystem

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// The CodeSystem resource is used to declare the existence of and describe a
// code system or code system supplement and its key properties, and optionally
// define a part or all of its content.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/CodeSystem
//   - Source File: StructureDefinition-CodeSystem.json
type CodeSystem struct {

	// If code comparison is case sensitive when codes within this system are
	// compared to each other.
	CaseSensitive *fhir.Boolean `fhirpath:"caseSensitive"`

	// The code system defines a compositional (post-coordination) grammar.
	Compositional *fhir.Boolean `fhirpath:"compositional"`

	// Concepts that are in the code system. The concept definitions are inherently
	// hierarchical, but the definitions must be consulted to determine what the
	// meanings of the hierarchical relationships are.
	Concept []*CodeSystemConcept `fhirpath:"concept"`

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The extent of the content of the code system (the concepts and codes it
	// defines) are represented in this resource instance.
	Content *fhir.Code `fhirpath:"content"`

	// A copyright statement relating to the code system and/or its contents.
	// Copyright statements are generally legal restrictions on the use and
	// publishing of the code system.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The total number of concepts defined by the code system. Where the code
	// system has a compositional grammar, the basis of this count is defined by
	// the system steward.
	Count *fhir.UnsignedInt `fhirpath:"count"`

	// The date (and optionally time) when the code system was published. The date
	// must change when the business version changes and it must change if the
	// status code changes. In addition, it should change when the substantive
	// content of the code system changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the code system from a
	// consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// A Boolean value to indicate that this code system is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used
	// for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A filter that can be used in a value set compose statement when selecting
	// concepts using a filter.
	Filter []*CodeSystemFilter `fhirpath:"filter"`

	// The meaning of the hierarchy of concepts as represented in this resource.
	HierarchyMeaning *fhir.Code `fhirpath:"hierarchyMeaning"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this code system when it is
	// represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A legal or geographic region in which the code system is intended to be
	// used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the code system. This name should be
	// usable as an identifier for the module by machine processing applications
	// such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// A property defines an additional slot through which additional information
	// can be provided about a concept.
	Property []*CodeSystemProperty `fhirpath:"property"`

	// The name of the organization or individual that published the code system.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this code system is needed and why it has been designed
	// as it has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// The date (and optionally time) when the code system resource was created or
	// revised.
	Status *fhir.Code `fhirpath:"status"`

	// The canonical URL of the code system that this code system supplement is
	// adding designations and properties to.
	Supplements *fhir.Canonical `fhirpath:"supplements"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the code system.
	Title *fhir.String `fhirpath:"title"`

	// An absolute URI that is used to identify this code system when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal
	// address at which at which an authoritative instance of this code system is
	// (or will be) published. This URL can be the target of a canonical reference.
	// It SHALL remain the same when the code system is stored on different
	// servers. This is used in [Coding](datatypes.html#Coding).system.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate code
	// system instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// Canonical reference to the value set that contains the entire code system.
	ValueSet *fhir.Canonical `fhirpath:"valueSet"`

	// The identifier that is used to identify this version of the code system when
	// it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the code system author and is not expected to be
	// globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
	// managed version is not available. There is also no expectation that versions
	// can be placed in a lexicographical sequence. This is used in
	// [Coding](datatypes.html#Coding).version.
	Version *fhir.String `fhirpath:"version"`

	// This flag is used to signify that the code system does not commit to concept
	// permanence across versions. If true, a version must be specified when
	// referencing this code system.
	VersionNeeded *fhir.Boolean `fhirpath:"versionNeeded"`

	profileimpl.BaseCodeSystem
	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetCaseSensitive returns the value of the field CaseSensitive.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetCaseSensitive() *fhir.Boolean {
	if cs == nil {
		return nil
	}
	return cs.CaseSensitive
}

// GetCompositional returns the value of the field Compositional.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetCompositional() *fhir.Boolean {
	if cs == nil {
		return nil
	}
	return cs.Compositional
}

// GetConcept returns the value of the field Concept.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetConcept() []*CodeSystemConcept {
	if cs == nil {
		return nil
	}
	return cs.Concept
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetContact() []*fhir.ContactDetail {
	if cs == nil {
		return nil
	}
	return cs.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetContained() []fhir.Resource {
	if cs == nil {
		return nil
	}
	return cs.Contained
}

// GetContent returns the value of the field Content.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetContent() *fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.Content
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetCopyright() *fhir.Markdown {
	if cs == nil {
		return nil
	}
	return cs.Copyright
}

// GetCount returns the value of the field Count.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetCount() *fhir.UnsignedInt {
	if cs == nil {
		return nil
	}
	return cs.Count
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetDate() *fhir.DateTime {
	if cs == nil {
		return nil
	}
	return cs.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetDescription() *fhir.Markdown {
	if cs == nil {
		return nil
	}
	return cs.Description
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetExperimental() *fhir.Boolean {
	if cs == nil {
		return nil
	}
	return cs.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetExtension() []*fhir.Extension {
	if cs == nil {
		return nil
	}
	return cs.Extension
}

// GetFilter returns the value of the field Filter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetFilter() []*CodeSystemFilter {
	if cs == nil {
		return nil
	}
	return cs.Filter
}

// GetHierarchyMeaning returns the value of the field HierarchyMeaning.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetHierarchyMeaning() *fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.HierarchyMeaning
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetID() string {
	if cs == nil {
		return ""
	}
	return cs.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetIdentifier() []*fhir.Identifier {
	if cs == nil {
		return nil
	}
	return cs.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetImplicitRules() *fhir.URI {
	if cs == nil {
		return nil
	}
	return cs.ImplicitRules
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetJurisdiction() []*fhir.CodeableConcept {
	if cs == nil {
		return nil
	}
	return cs.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetLanguage() *fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetMeta() *fhir.Meta {
	if cs == nil {
		return nil
	}
	return cs.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetModifierExtension() []*fhir.Extension {
	if cs == nil {
		return nil
	}
	return cs.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetName() *fhir.String {
	if cs == nil {
		return nil
	}
	return cs.Name
}

// GetProperty returns the value of the field Property.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetProperty() []*CodeSystemProperty {
	if cs == nil {
		return nil
	}
	return cs.Property
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetPublisher() *fhir.String {
	if cs == nil {
		return nil
	}
	return cs.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetPurpose() *fhir.Markdown {
	if cs == nil {
		return nil
	}
	return cs.Purpose
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetStatus() *fhir.Code {
	if cs == nil {
		return nil
	}
	return cs.Status
}

// GetSupplements returns the value of the field Supplements.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetSupplements() *fhir.Canonical {
	if cs == nil {
		return nil
	}
	return cs.Supplements
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetText() *fhir.Narrative {
	if cs == nil {
		return nil
	}
	return cs.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetTitle() *fhir.String {
	if cs == nil {
		return nil
	}
	return cs.Title
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetURL() *fhir.URI {
	if cs == nil {
		return nil
	}
	return cs.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetUseContext() []*fhir.UsageContext {
	if cs == nil {
		return nil
	}
	return cs.UseContext
}

// GetValueSet returns the value of the field ValueSet.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetValueSet() *fhir.Canonical {
	if cs == nil {
		return nil
	}
	return cs.ValueSet
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetVersion() *fhir.String {
	if cs == nil {
		return nil
	}
	return cs.Version
}

// GetVersionNeeded returns the value of the field VersionNeeded.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cs *CodeSystem) GetVersionNeeded() *fhir.Boolean {
	if cs == nil {
		return nil
	}
	return cs.VersionNeeded
}

// Concepts in the code system// Concepts that are in the code system. The concept definitions are inherently
// hierarchical, but the definitions must be consulted to determine what the
// meanings of the hierarchical relationships are.// If this is empty, it means that the code system resource does not represent
// the content of the code system.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CodeSystem.json
type CodeSystemConcept struct {

	// A code - a text symbol - that uniquely identifies the concept within the
	// code system.
	Code *fhir.Code `fhirpath:"code"`

	// The formal definition of the concept. The code system resource does not make
	// formal definitions required, because of the prevalence of legacy systems.
	// However, they are highly recommended, as without them there is no formal
	// meaning associated with the concept.
	Definition *fhir.String `fhirpath:"definition"`

	// Additional representations for the concept - other languages, aliases,
	// specialized purposes, used for particular purposes, etc.
	Designation []*CodeSystemConceptDesignation `fhirpath:"designation"`

	// A human readable string that is the recommended default way to present this
	// concept to a user.
	Display *fhir.String `fhirpath:"display"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A property value for this concept.
	Property []*CodeSystemConceptProperty `fhirpath:"property"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csc *CodeSystemConcept) GetCode() *fhir.Code {
	if csc == nil {
		return nil
	}
	return csc.Code
}

// GetDefinition returns the value of the field Definition.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csc *CodeSystemConcept) GetDefinition() *fhir.String {
	if csc == nil {
		return nil
	}
	return csc.Definition
}

// GetDesignation returns the value of the field Designation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csc *CodeSystemConcept) GetDesignation() []*CodeSystemConceptDesignation {
	if csc == nil {
		return nil
	}
	return csc.Designation
}

// GetDisplay returns the value of the field Display.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csc *CodeSystemConcept) GetDisplay() *fhir.String {
	if csc == nil {
		return nil
	}
	return csc.Display
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csc *CodeSystemConcept) GetExtension() []*fhir.Extension {
	if csc == nil {
		return nil
	}
	return csc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csc *CodeSystemConcept) GetID() string {
	if csc == nil {
		return ""
	}
	return csc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csc *CodeSystemConcept) GetModifierExtension() []*fhir.Extension {
	if csc == nil {
		return nil
	}
	return csc.ModifierExtension
}

// GetProperty returns the value of the field Property.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csc *CodeSystemConcept) GetProperty() []*CodeSystemConceptProperty {
	if csc == nil {
		return nil
	}
	return csc.Property
}

// Additional representations for the concept// Additional representations for the concept - other languages, aliases,
// specialized purposes, used for particular purposes, etc.// Concepts have both a ```display``` and an array of ```designation```. The
// display is equivalent to a special designation with an implied
// ```designation.use``` of "primary code" and a language equal to the
// [Resource Language](resource.html#language).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CodeSystem.json
type CodeSystemConceptDesignation struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The language this designation is defined for.
	Language *fhir.Code `fhirpath:"language"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A code that details how this designation would be used.
	Use *fhir.Coding `fhirpath:"use"`

	// The text value for this designation.
	Value *fhir.String `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscd *CodeSystemConceptDesignation) GetExtension() []*fhir.Extension {
	if cscd == nil {
		return nil
	}
	return cscd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscd *CodeSystemConceptDesignation) GetID() string {
	if cscd == nil {
		return ""
	}
	return cscd.ID
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscd *CodeSystemConceptDesignation) GetLanguage() *fhir.Code {
	if cscd == nil {
		return nil
	}
	return cscd.Language
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscd *CodeSystemConceptDesignation) GetModifierExtension() []*fhir.Extension {
	if cscd == nil {
		return nil
	}
	return cscd.ModifierExtension
}

// GetUse returns the value of the field Use.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscd *CodeSystemConceptDesignation) GetUse() *fhir.Coding {
	if cscd == nil {
		return nil
	}
	return cscd.Use
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscd *CodeSystemConceptDesignation) GetValue() *fhir.String {
	if cscd == nil {
		return nil
	}
	return cscd.Value
}

// Property value for the concept// A property value for this concept.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CodeSystem.json
type CodeSystemConceptProperty struct {

	// A code that is a reference to CodeSystem.property.code.
	Code *fhir.Code `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The value of this property.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscp *CodeSystemConceptProperty) GetCode() *fhir.Code {
	if cscp == nil {
		return nil
	}
	return cscp.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscp *CodeSystemConceptProperty) GetExtension() []*fhir.Extension {
	if cscp == nil {
		return nil
	}
	return cscp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscp *CodeSystemConceptProperty) GetID() string {
	if cscp == nil {
		return ""
	}
	return cscp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscp *CodeSystemConceptProperty) GetModifierExtension() []*fhir.Extension {
	if cscp == nil {
		return nil
	}
	return cscp.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cscp *CodeSystemConceptProperty) GetValue() fhir.Element {
	if cscp == nil {
		return nil
	}
	return cscp.Value
}

// GetValueCode returns the value of the field Value.
func (cscp *CodeSystemConceptProperty) GetValueCode() *fhir.Code {
	if cscp == nil {
		return nil
	}
	val, ok := cscp.Value.(*fhir.Code)
	if !ok {
		return nil
	}
	return val
}

// GetValueCoding returns the value of the field Value.
func (cscp *CodeSystemConceptProperty) GetValueCoding() *fhir.Coding {
	if cscp == nil {
		return nil
	}
	val, ok := cscp.Value.(*fhir.Coding)
	if !ok {
		return nil
	}
	return val
}

// GetValueString returns the value of the field Value.
func (cscp *CodeSystemConceptProperty) GetValueString() *fhir.String {
	if cscp == nil {
		return nil
	}
	val, ok := cscp.Value.(*fhir.String)
	if !ok {
		return nil
	}
	return val
}

// GetValueInteger returns the value of the field Value.
func (cscp *CodeSystemConceptProperty) GetValueInteger() *fhir.Integer {
	if cscp == nil {
		return nil
	}
	val, ok := cscp.Value.(*fhir.Integer)
	if !ok {
		return nil
	}
	return val
}

// GetValueBoolean returns the value of the field Value.
func (cscp *CodeSystemConceptProperty) GetValueBoolean() *fhir.Boolean {
	if cscp == nil {
		return nil
	}
	val, ok := cscp.Value.(*fhir.Boolean)
	if !ok {
		return nil
	}
	return val
}

// GetValueDateTime returns the value of the field Value.
func (cscp *CodeSystemConceptProperty) GetValueDateTime() *fhir.DateTime {
	if cscp == nil {
		return nil
	}
	val, ok := cscp.Value.(*fhir.DateTime)
	if !ok {
		return nil
	}
	return val
}

// GetValueDecimal returns the value of the field Value.
func (cscp *CodeSystemConceptProperty) GetValueDecimal() *fhir.Decimal {
	if cscp == nil {
		return nil
	}
	val, ok := cscp.Value.(*fhir.Decimal)
	if !ok {
		return nil
	}
	return val
}

// Filter that can be used in a value set// A filter that can be used in a value set compose statement when selecting
// concepts using a filter.// Note that filters defined in code systems usually require custom code on the
// part of any terminology engine that will make them available for use in
// value set filters. For this reason, they are generally only seen in high
// value published terminologies.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CodeSystem.json
type CodeSystemFilter struct {

	// The code that identifies this filter when it is used as a filter in
	// [ValueSet](valueset.html#).compose.include.filter.
	Code *fhir.Code `fhirpath:"code"`

	// A description of how or why the filter is used.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A list of operators that can be used with the filter.
	Operator []*fhir.Code `fhirpath:"operator"`

	// A description of what the value for the filter should be.
	Value *fhir.String `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csf *CodeSystemFilter) GetCode() *fhir.Code {
	if csf == nil {
		return nil
	}
	return csf.Code
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csf *CodeSystemFilter) GetDescription() *fhir.String {
	if csf == nil {
		return nil
	}
	return csf.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csf *CodeSystemFilter) GetExtension() []*fhir.Extension {
	if csf == nil {
		return nil
	}
	return csf.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csf *CodeSystemFilter) GetID() string {
	if csf == nil {
		return ""
	}
	return csf.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csf *CodeSystemFilter) GetModifierExtension() []*fhir.Extension {
	if csf == nil {
		return nil
	}
	return csf.ModifierExtension
}

// GetOperator returns the value of the field Operator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csf *CodeSystemFilter) GetOperator() []*fhir.Code {
	if csf == nil {
		return nil
	}
	return csf.Operator
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csf *CodeSystemFilter) GetValue() *fhir.String {
	if csf == nil {
		return nil
	}
	return csf.Value
}

// Additional information supplied about each concept// A property defines an additional slot through which additional information
// can be provided about a concept.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CodeSystem.json
type CodeSystemProperty struct {

	// A code that is used to identify the property. The code is used internally
	// (in CodeSystem.concept.property.code) and also externally, such as in
	// property filters.
	Code *fhir.Code `fhirpath:"code"`

	// A description of the property- why it is defined, and how its value might be
	// used.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type of the property value. Properties of type "code" contain a code
	// defined by the code system (e.g. a reference to another defined concept).
	Type *fhir.Code `fhirpath:"type"`

	// Reference to the formal meaning of the property. One possible source of
	// meaning is the [Concept Properties](codesystem-concept-properties.html) code
	// system.
	URI *fhir.URI `fhirpath:"uri"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csp *CodeSystemProperty) GetCode() *fhir.Code {
	if csp == nil {
		return nil
	}
	return csp.Code
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csp *CodeSystemProperty) GetDescription() *fhir.String {
	if csp == nil {
		return nil
	}
	return csp.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csp *CodeSystemProperty) GetExtension() []*fhir.Extension {
	if csp == nil {
		return nil
	}
	return csp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csp *CodeSystemProperty) GetID() string {
	if csp == nil {
		return ""
	}
	return csp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csp *CodeSystemProperty) GetModifierExtension() []*fhir.Extension {
	if csp == nil {
		return nil
	}
	return csp.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csp *CodeSystemProperty) GetType() *fhir.Code {
	if csp == nil {
		return nil
	}
	return csp.Type
}

// GetURI returns the value of the field URI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (csp *CodeSystemProperty) GetURI() *fhir.URI {
	if csp == nil {
		return nil
	}
	return csp.URI
}

func (cs *CodeSystem) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cs *CodeSystem) UnmarshalJSON(data []byte) error {
	var raw struct {
		CaseSensitive    *fhir.Boolean         `json:"caseSensitive"`
		Compositional    *fhir.Boolean         `json:"compositional"`
		Concept          []*CodeSystemConcept  `json:"concept"`
		Contact          []*fhir.ContactDetail `json:"contact"`
		Contained        []fhir.Resource       `json:"contained"`
		Content          *fhir.Code            `json:"content"`
		Copyright        *fhir.Markdown        `json:"copyright"`
		Count            *fhir.UnsignedInt     `json:"count"`
		Date             *fhir.DateTime        `json:"date"`
		Description      *fhir.Markdown        `json:"description"`
		Experimental     *fhir.Boolean         `json:"experimental"`
		Extension        []*fhir.Extension     `json:"extension"`
		Filter           []*CodeSystemFilter   `json:"filter"`
		HierarchyMeaning *fhir.Code            `json:"hierarchyMeaning"`

		ID                string                  `json:"id"`
		Identifier        []*fhir.Identifier      `json:"identifier"`
		ImplicitRules     *fhir.URI               `json:"implicitRules"`
		Jurisdiction      []*fhir.CodeableConcept `json:"jurisdiction"`
		Language          *fhir.Code              `json:"language"`
		Meta              *fhir.Meta              `json:"meta"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Name              *fhir.String            `json:"name"`
		Property          []*CodeSystemProperty   `json:"property"`
		Publisher         *fhir.String            `json:"publisher"`
		Purpose           *fhir.Markdown          `json:"purpose"`
		Status            *fhir.Code              `json:"status"`
		Supplements       *fhir.Canonical         `json:"supplements"`
		Text              *fhir.Narrative         `json:"text"`
		Title             *fhir.String            `json:"title"`
		URL               *fhir.URI               `json:"url"`
		UseContext        []*fhir.UsageContext    `json:"useContext"`
		ValueSet          *fhir.Canonical         `json:"valueSet"`
		Version           *fhir.String            `json:"version"`
		VersionNeeded     *fhir.Boolean           `json:"versionNeeded"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cs.CaseSensitive = raw.CaseSensitive
	cs.Compositional = raw.Compositional
	cs.Concept = raw.Concept
	cs.Contact = raw.Contact
	cs.Contained = raw.Contained
	cs.Content = raw.Content
	cs.Copyright = raw.Copyright
	cs.Count = raw.Count
	cs.Date = raw.Date
	cs.Description = raw.Description
	cs.Experimental = raw.Experimental
	cs.Extension = raw.Extension
	cs.Filter = raw.Filter
	cs.HierarchyMeaning = raw.HierarchyMeaning
	cs.ID = raw.ID
	cs.Identifier = raw.Identifier
	cs.ImplicitRules = raw.ImplicitRules
	cs.Jurisdiction = raw.Jurisdiction
	cs.Language = raw.Language
	cs.Meta = raw.Meta
	cs.ModifierExtension = raw.ModifierExtension
	cs.Name = raw.Name
	cs.Property = raw.Property
	cs.Publisher = raw.Publisher
	cs.Purpose = raw.Purpose
	cs.Status = raw.Status
	cs.Supplements = raw.Supplements
	cs.Text = raw.Text
	cs.Title = raw.Title
	cs.URL = raw.URL
	cs.UseContext = raw.UseContext
	cs.ValueSet = raw.ValueSet
	cs.Version = raw.Version
	cs.VersionNeeded = raw.VersionNeeded
	return nil
}

var _ json.Marshaler = (*CodeSystem)(nil)
var _ json.Unmarshaler = (*CodeSystem)(nil)

func (csc *CodeSystemConcept) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (csc *CodeSystemConcept) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code        *fhir.Code                      `json:"code"`
		Definition  *fhir.String                    `json:"definition"`
		Designation []*CodeSystemConceptDesignation `json:"designation"`
		Display     *fhir.String                    `json:"display"`
		Extension   []*fhir.Extension               `json:"extension"`

		ID                string                       `json:"id"`
		ModifierExtension []*fhir.Extension            `json:"modifierExtension"`
		Property          []*CodeSystemConceptProperty `json:"property"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	csc.Code = raw.Code
	csc.Definition = raw.Definition
	csc.Designation = raw.Designation
	csc.Display = raw.Display
	csc.Extension = raw.Extension
	csc.ID = raw.ID
	csc.ModifierExtension = raw.ModifierExtension
	csc.Property = raw.Property
	return nil
}

var _ json.Marshaler = (*CodeSystemConcept)(nil)
var _ json.Unmarshaler = (*CodeSystemConcept)(nil)

func (cscd *CodeSystemConceptDesignation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cscd *CodeSystemConceptDesignation) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Language          *fhir.Code        `json:"language"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Use               *fhir.Coding      `json:"use"`
		Value             *fhir.String      `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cscd.Extension = raw.Extension
	cscd.ID = raw.ID
	cscd.Language = raw.Language
	cscd.ModifierExtension = raw.ModifierExtension
	cscd.Use = raw.Use
	cscd.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*CodeSystemConceptDesignation)(nil)
var _ json.Unmarshaler = (*CodeSystemConceptDesignation)(nil)

func (cscp *CodeSystemConceptProperty) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cscp *CodeSystemConceptProperty) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *fhir.Code        `json:"code"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		ValueCode         *fhir.Code        `json:"valueCode"`
		ValueCoding       *fhir.Coding      `json:"valueCoding"`
		ValueString       *fhir.String      `json:"valueString"`
		ValueInteger      *fhir.Integer     `json:"valueInteger"`
		ValueBoolean      *fhir.Boolean     `json:"valueBoolean"`
		ValueDateTime     *fhir.DateTime    `json:"valueDateTime"`
		ValueDecimal      *fhir.Decimal     `json:"valueDecimal"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cscp.Code = raw.Code
	cscp.Extension = raw.Extension
	cscp.ID = raw.ID
	cscp.ModifierExtension = raw.ModifierExtension
	cscp.Value, err = validate.SelectOneOf[fhir.Element]("CodeSystem.concept.property.value",
		raw.ValueCode,
		raw.ValueCoding,
		raw.ValueString,
		raw.ValueInteger,
		raw.ValueBoolean,
		raw.ValueDateTime,
		raw.ValueDecimal)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*CodeSystemConceptProperty)(nil)
var _ json.Unmarshaler = (*CodeSystemConceptProperty)(nil)

func (csf *CodeSystemFilter) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (csf *CodeSystemFilter) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code        *fhir.Code        `json:"code"`
		Description *fhir.String      `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Operator          []*fhir.Code      `json:"operator"`
		Value             *fhir.String      `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	csf.Code = raw.Code
	csf.Description = raw.Description
	csf.Extension = raw.Extension
	csf.ID = raw.ID
	csf.ModifierExtension = raw.ModifierExtension
	csf.Operator = raw.Operator
	csf.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*CodeSystemFilter)(nil)
var _ json.Unmarshaler = (*CodeSystemFilter)(nil)

func (csp *CodeSystemProperty) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (csp *CodeSystemProperty) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code        *fhir.Code        `json:"code"`
		Description *fhir.String      `json:"description"`
		Extension   []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Type              *fhir.Code        `json:"type"`
		URI               *fhir.URI         `json:"uri"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	csp.Code = raw.Code
	csp.Description = raw.Description
	csp.Extension = raw.Extension
	csp.ID = raw.ID
	csp.ModifierExtension = raw.ModifierExtension
	csp.Type = raw.Type
	csp.URI = raw.URI
	return nil
}

var _ json.Marshaler = (*CodeSystemProperty)(nil)
var _ json.Unmarshaler = (*CodeSystemProperty)(nil)
