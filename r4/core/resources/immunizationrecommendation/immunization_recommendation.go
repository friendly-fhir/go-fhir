// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package immunizationrecommendation

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A patient's point-in-time set of recommendations (i.e. forecasting)
// according to a published schedule with optional supporting justification.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation
//   - Source File: StructureDefinition-ImmunizationRecommendation.json
type ImmunizationRecommendation struct {

	// Indicates the authority who published the protocol (e.g. ACIP).
	Authority *fhir.Reference `fhirpath:"authority"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date the immunization recommendation(s) were created.
	Date *fhir.DateTime `fhirpath:"date"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier assigned to this particular recommendation record.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The patient the recommendation(s) are for.
	Patient *fhir.Reference `fhirpath:"patient"`

	// Vaccine administration recommendations.
	Recommendation []*ImmunizationRecommendationRecommendation `fhirpath:"recommendation"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAuthority returns the value of the field Authority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetAuthority() *fhir.Reference {
	if ir == nil {
		return nil
	}
	return ir.Authority
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetContained() []fhir.Resource {
	if ir == nil {
		return nil
	}
	return ir.Contained
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetDate() *fhir.DateTime {
	if ir == nil {
		return nil
	}
	return ir.Date
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetExtension() []*fhir.Extension {
	if ir == nil {
		return nil
	}
	return ir.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetID() string {
	if ir == nil {
		return ""
	}
	return ir.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetIdentifier() []*fhir.Identifier {
	if ir == nil {
		return nil
	}
	return ir.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetImplicitRules() *fhir.URI {
	if ir == nil {
		return nil
	}
	return ir.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetLanguage() *fhir.Code {
	if ir == nil {
		return nil
	}
	return ir.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetMeta() *fhir.Meta {
	if ir == nil {
		return nil
	}
	return ir.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetModifierExtension() []*fhir.Extension {
	if ir == nil {
		return nil
	}
	return ir.ModifierExtension
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetPatient() *fhir.Reference {
	if ir == nil {
		return nil
	}
	return ir.Patient
}

// GetRecommendation returns the value of the field Recommendation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetRecommendation() []*ImmunizationRecommendationRecommendation {
	if ir == nil {
		return nil
	}
	return ir.Recommendation
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ir *ImmunizationRecommendation) GetText() *fhir.Narrative {
	if ir == nil {
		return nil
	}
	return ir.Text
}

// Vaccine administration recommendations// Vaccine administration recommendations.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImmunizationRecommendation.json
type ImmunizationRecommendationRecommendation struct {

	// Vaccine(s) which should not be used to fulfill the recommendation.
	ContraindicatedVaccineCode []*fhir.CodeableConcept `fhirpath:"contraindicatedVaccineCode"`

	// Vaccine date recommendations. For example, earliest date to administer,
	// latest date to administer, etc.
	DateCriterion []*ImmunizationRecommendationRecommendationDateCriterion `fhirpath:"dateCriterion"`

	// Contains the description about the protocol under which the vaccine was
	// administered.
	Description *fhir.String `fhirpath:"description"`

	// Nominal position of the recommended dose in a series (e.g. dose 2 is the
	// next recommended dose).
	DoseNumber fhir.Element `fhirpath:"doseNumber"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The reason for the assigned forecast status.
	ForecastReason []*fhir.CodeableConcept `fhirpath:"forecastReason"`

	// Indicates the patient status with respect to the path to immunity for the
	// target disease.
	ForecastStatus *fhir.CodeableConcept `fhirpath:"forecastStatus"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// One possible path to achieve presumed immunity against a disease - within
	// the context of an authority.
	Series *fhir.String `fhirpath:"series"`

	// The recommended number of doses to achieve immunity.
	SeriesDoses fhir.Element `fhirpath:"seriesDoses"`

	// Immunization event history and/or evaluation that supports the status and
	// recommendation.
	SupportingImmunization []*fhir.Reference `fhirpath:"supportingImmunization"`

	// Patient Information that supports the status and recommendation. This
	// includes patient observations, adverse reactions and allergy/intolerance
	// information.
	SupportingPatientInformation []*fhir.Reference `fhirpath:"supportingPatientInformation"`

	// The targeted disease for the recommendation.
	TargetDisease *fhir.CodeableConcept `fhirpath:"targetDisease"`

	// Vaccine(s) or vaccine group that pertain to the recommendation.
	VaccineCode []*fhir.CodeableConcept `fhirpath:"vaccineCode"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetContraindicatedVaccineCode returns the value of the field ContraindicatedVaccineCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetContraindicatedVaccineCode() []*fhir.CodeableConcept {
	if irr == nil {
		return nil
	}
	return irr.ContraindicatedVaccineCode
}

// GetDateCriterion returns the value of the field DateCriterion.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetDateCriterion() []*ImmunizationRecommendationRecommendationDateCriterion {
	if irr == nil {
		return nil
	}
	return irr.DateCriterion
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetDescription() *fhir.String {
	if irr == nil {
		return nil
	}
	return irr.Description
}

// GetDoseNumber returns the value of the field DoseNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetDoseNumber() fhir.Element {
	if irr == nil {
		return nil
	}
	return irr.DoseNumber
}

// GetDoseNumberPositiveInt returns the value of the field DoseNumber.
func (irr *ImmunizationRecommendationRecommendation) GetDoseNumberPositiveInt() *fhir.PositiveInt {
	if irr == nil {
		return nil
	}
	val, ok := irr.DoseNumber.(*fhir.PositiveInt)
	if !ok {
		return nil
	}
	return val
}

// GetDoseNumberString returns the value of the field DoseNumber.
func (irr *ImmunizationRecommendationRecommendation) GetDoseNumberString() *fhir.String {
	if irr == nil {
		return nil
	}
	val, ok := irr.DoseNumber.(*fhir.String)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetExtension() []*fhir.Extension {
	if irr == nil {
		return nil
	}
	return irr.Extension
}

// GetForecastReason returns the value of the field ForecastReason.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetForecastReason() []*fhir.CodeableConcept {
	if irr == nil {
		return nil
	}
	return irr.ForecastReason
}

// GetForecastStatus returns the value of the field ForecastStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetForecastStatus() *fhir.CodeableConcept {
	if irr == nil {
		return nil
	}
	return irr.ForecastStatus
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetID() string {
	if irr == nil {
		return ""
	}
	return irr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetModifierExtension() []*fhir.Extension {
	if irr == nil {
		return nil
	}
	return irr.ModifierExtension
}

// GetSeries returns the value of the field Series.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetSeries() *fhir.String {
	if irr == nil {
		return nil
	}
	return irr.Series
}

// GetSeriesDoses returns the value of the field SeriesDoses.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetSeriesDoses() fhir.Element {
	if irr == nil {
		return nil
	}
	return irr.SeriesDoses
}

// GetSeriesDosesPositiveInt returns the value of the field SeriesDoses.
func (irr *ImmunizationRecommendationRecommendation) GetSeriesDosesPositiveInt() *fhir.PositiveInt {
	if irr == nil {
		return nil
	}
	val, ok := irr.SeriesDoses.(*fhir.PositiveInt)
	if !ok {
		return nil
	}
	return val
}

// GetSeriesDosesString returns the value of the field SeriesDoses.
func (irr *ImmunizationRecommendationRecommendation) GetSeriesDosesString() *fhir.String {
	if irr == nil {
		return nil
	}
	val, ok := irr.SeriesDoses.(*fhir.String)
	if !ok {
		return nil
	}
	return val
} // GetSupportingImmunization returns the value of the field SupportingImmunization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetSupportingImmunization() []*fhir.Reference {
	if irr == nil {
		return nil
	}
	return irr.SupportingImmunization
}

// GetSupportingPatientInformation returns the value of the field SupportingPatientInformation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetSupportingPatientInformation() []*fhir.Reference {
	if irr == nil {
		return nil
	}
	return irr.SupportingPatientInformation
}

// GetTargetDisease returns the value of the field TargetDisease.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetTargetDisease() *fhir.CodeableConcept {
	if irr == nil {
		return nil
	}
	return irr.TargetDisease
}

// GetVaccineCode returns the value of the field VaccineCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irr *ImmunizationRecommendationRecommendation) GetVaccineCode() []*fhir.CodeableConcept {
	if irr == nil {
		return nil
	}
	return irr.VaccineCode
}

// Dates governing proposed immunization// Vaccine date recommendations. For example, earliest date to administer,
// latest date to administer, etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ImmunizationRecommendation.json
type ImmunizationRecommendationRecommendationDateCriterion struct {

	// Date classification of recommendation. For example, earliest date to give,
	// latest date to give, etc.
	Code *fhir.CodeableConcept `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The date whose meaning is specified by dateCriterion.code.
	Value *fhir.DateTime `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irrdc *ImmunizationRecommendationRecommendationDateCriterion) GetCode() *fhir.CodeableConcept {
	if irrdc == nil {
		return nil
	}
	return irrdc.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irrdc *ImmunizationRecommendationRecommendationDateCriterion) GetExtension() []*fhir.Extension {
	if irrdc == nil {
		return nil
	}
	return irrdc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irrdc *ImmunizationRecommendationRecommendationDateCriterion) GetID() string {
	if irrdc == nil {
		return ""
	}
	return irrdc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irrdc *ImmunizationRecommendationRecommendationDateCriterion) GetModifierExtension() []*fhir.Extension {
	if irrdc == nil {
		return nil
	}
	return irrdc.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (irrdc *ImmunizationRecommendationRecommendationDateCriterion) GetValue() *fhir.DateTime {
	if irrdc == nil {
		return nil
	}
	return irrdc.Value
}

func (ir *ImmunizationRecommendation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ir *ImmunizationRecommendation) UnmarshalJSON(data []byte) error {
	var raw struct {
		Authority *fhir.Reference   `json:"authority"`
		Contained []fhir.Resource   `json:"contained"`
		Date      *fhir.DateTime    `json:"date"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                                      `json:"id"`
		Identifier        []*fhir.Identifier                          `json:"identifier"`
		ImplicitRules     *fhir.URI                                   `json:"implicitRules"`
		Language          *fhir.Code                                  `json:"language"`
		Meta              *fhir.Meta                                  `json:"meta"`
		ModifierExtension []*fhir.Extension                           `json:"modifierExtension"`
		Patient           *fhir.Reference                             `json:"patient"`
		Recommendation    []*ImmunizationRecommendationRecommendation `json:"recommendation"`
		Text              *fhir.Narrative                             `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ir.Authority = raw.Authority
	ir.Contained = raw.Contained
	ir.Date = raw.Date
	ir.Extension = raw.Extension
	ir.ID = raw.ID
	ir.Identifier = raw.Identifier
	ir.ImplicitRules = raw.ImplicitRules
	ir.Language = raw.Language
	ir.Meta = raw.Meta
	ir.ModifierExtension = raw.ModifierExtension
	ir.Patient = raw.Patient
	ir.Recommendation = raw.Recommendation
	ir.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*ImmunizationRecommendation)(nil)
var _ json.Unmarshaler = (*ImmunizationRecommendation)(nil)

func (irr *ImmunizationRecommendationRecommendation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (irr *ImmunizationRecommendationRecommendation) UnmarshalJSON(data []byte) error {
	var raw struct {
		ContraindicatedVaccineCode []*fhir.CodeableConcept                                  `json:"contraindicatedVaccineCode"`
		DateCriterion              []*ImmunizationRecommendationRecommendationDateCriterion `json:"dateCriterion"`
		Description                *fhir.String                                             `json:"description"`
		DoseNumberPositiveInt      *fhir.PositiveInt                                        `json:"doseNumberPositiveInt"`
		DoseNumberString           *fhir.String                                             `json:"doseNumberString"`
		Extension                  []*fhir.Extension                                        `json:"extension"`
		ForecastReason             []*fhir.CodeableConcept                                  `json:"forecastReason"`
		ForecastStatus             *fhir.CodeableConcept                                    `json:"forecastStatus"`

		ID                           string                  `json:"id"`
		ModifierExtension            []*fhir.Extension       `json:"modifierExtension"`
		Series                       *fhir.String            `json:"series"`
		SeriesDosesPositiveInt       *fhir.PositiveInt       `json:"seriesDosesPositiveInt"`
		SeriesDosesString            *fhir.String            `json:"seriesDosesString"`
		SupportingImmunization       []*fhir.Reference       `json:"supportingImmunization"`
		SupportingPatientInformation []*fhir.Reference       `json:"supportingPatientInformation"`
		TargetDisease                *fhir.CodeableConcept   `json:"targetDisease"`
		VaccineCode                  []*fhir.CodeableConcept `json:"vaccineCode"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	irr.ContraindicatedVaccineCode = raw.ContraindicatedVaccineCode
	irr.DateCriterion = raw.DateCriterion
	irr.Description = raw.Description
	irr.DoseNumber, err = validate.SelectOneOf[fhir.Element]("ImmunizationRecommendation.recommendation.doseNumber",
		raw.DoseNumberPositiveInt,
		raw.DoseNumberString)
	if err != nil {
		return err
	}
	irr.Extension = raw.Extension
	irr.ForecastReason = raw.ForecastReason
	irr.ForecastStatus = raw.ForecastStatus
	irr.ID = raw.ID
	irr.ModifierExtension = raw.ModifierExtension
	irr.Series = raw.Series
	irr.SeriesDoses, err = validate.SelectOneOf[fhir.Element]("ImmunizationRecommendation.recommendation.seriesDoses",
		raw.SeriesDosesPositiveInt,
		raw.SeriesDosesString)
	if err != nil {
		return err
	}
	irr.SupportingImmunization = raw.SupportingImmunization
	irr.SupportingPatientInformation = raw.SupportingPatientInformation
	irr.TargetDisease = raw.TargetDisease
	irr.VaccineCode = raw.VaccineCode
	return nil
}

var _ json.Marshaler = (*ImmunizationRecommendationRecommendation)(nil)
var _ json.Unmarshaler = (*ImmunizationRecommendationRecommendation)(nil)

func (irrdc *ImmunizationRecommendationRecommendationDateCriterion) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (irrdc *ImmunizationRecommendationRecommendationDateCriterion) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *fhir.CodeableConcept `json:"code"`
		Extension []*fhir.Extension     `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Value             *fhir.DateTime    `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	irrdc.Code = raw.Code
	irrdc.Extension = raw.Extension
	irrdc.ID = raw.ID
	irrdc.ModifierExtension = raw.ModifierExtension
	irrdc.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*ImmunizationRecommendationRecommendationDateCriterion)(nil)
var _ json.Unmarshaler = (*ImmunizationRecommendationRecommendationDateCriterion)(nil)
