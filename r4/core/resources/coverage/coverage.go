// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package coverage

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Financial instrument which may be used to reimburse or pay for health care
// products and services. Includes both insurance and self-payment.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Coverage
//   - Source File: StructureDefinition-Coverage.json
type Coverage struct {

	// The party who benefits from the insurance coverage; the patient when
	// products and/or services are provided.
	Beneficiary *fhir.Reference `fhirpath:"beneficiary"`

	// A suite of underwriter specific classifiers.
	Class []*CoverageClass `fhirpath:"class"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The policy(s) which constitute this insurance coverage.
	Contract []*fhir.Reference `fhirpath:"contract"`

	// A suite of codes indicating the cost category and associated amount which
	// have been detailed in the policy and may have been included on the health
	// card.
	CostToBeneficiary []*CoverageCostToBeneficiary `fhirpath:"costToBeneficiary"`

	// A unique identifier for a dependent under the coverage.
	Dependent *fhir.String `fhirpath:"dependent"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier assigned to this coverage.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The insurer-specific identifier for the insurer-defined network of providers
	// to which the beneficiary may seek treatment which will be covered at the
	// 'in-network' rate, otherwise 'out of network' terms and conditions apply.
	Network *fhir.String `fhirpath:"network"`

	// The order of applicability of this coverage relative to other coverages
	// which are currently in force. Note, there may be gaps in the numbering and
	// this does not imply primary, secondary etc. as the specific positioning of
	// coverages depends upon the episode of care.
	Order *fhir.PositiveInt `fhirpath:"order"`

	// The program or plan underwriter or payor including both insurance and
	// non-insurance agreements, such as patient-pay agreements.
	Payor []*fhir.Reference `fhirpath:"payor"`

	// Time period during which the coverage is in force. A missing start date
	// indicates the start date isn't known, a missing end date means the coverage
	// is continuing to be in force.
	Period *fhir.Period `fhirpath:"period"`

	// The party who 'owns' the insurance policy.
	PolicyHolder *fhir.Reference `fhirpath:"policyHolder"`

	// The relationship of beneficiary (patient) to the subscriber.
	Relationship *fhir.CodeableConcept `fhirpath:"relationship"`

	// The status of the resource instance.
	Status *fhir.Code `fhirpath:"status"`

	// When 'subrogation=true' this insurance instance has been included not for
	// adjudication but to provide insurers with the details to recover costs.
	Subrogation *fhir.Boolean `fhirpath:"subrogation"`

	// The party who has signed-up for or 'owns' the contractual relationship to
	// the policy or to whom the benefit of the policy for services rendered to
	// them or their family is due.
	Subscriber *fhir.Reference `fhirpath:"subscriber"`

	// The insurer assigned ID for the Subscriber.
	SubscriberID *fhir.String `fhirpath:"subscriberId"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// The type of coverage: social program, medical plan, accident coverage
	// (workers compensation, auto), group health or payment by an individual or
	// organization.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetBeneficiary returns the value of the field Beneficiary.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetBeneficiary() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Beneficiary
}

// GetClass returns the value of the field Class.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetClass() []*CoverageClass {
	if c == nil {
		return nil
	}
	return c.Class
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetContained() []fhir.Resource {
	if c == nil {
		return nil
	}
	return c.Contained
}

// GetContract returns the value of the field Contract.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetContract() []*fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Contract
}

// GetCostToBeneficiary returns the value of the field CostToBeneficiary.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetCostToBeneficiary() []*CoverageCostToBeneficiary {
	if c == nil {
		return nil
	}
	return c.CostToBeneficiary
}

// GetDependent returns the value of the field Dependent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetDependent() *fhir.String {
	if c == nil {
		return nil
	}
	return c.Dependent
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetExtension() []*fhir.Extension {
	if c == nil {
		return nil
	}
	return c.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetIdentifier() []*fhir.Identifier {
	if c == nil {
		return nil
	}
	return c.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetImplicitRules() *fhir.URI {
	if c == nil {
		return nil
	}
	return c.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetLanguage() *fhir.Code {
	if c == nil {
		return nil
	}
	return c.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetMeta() *fhir.Meta {
	if c == nil {
		return nil
	}
	return c.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetModifierExtension() []*fhir.Extension {
	if c == nil {
		return nil
	}
	return c.ModifierExtension
}

// GetNetwork returns the value of the field Network.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetNetwork() *fhir.String {
	if c == nil {
		return nil
	}
	return c.Network
}

// GetOrder returns the value of the field Order.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetOrder() *fhir.PositiveInt {
	if c == nil {
		return nil
	}
	return c.Order
}

// GetPayor returns the value of the field Payor.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetPayor() []*fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Payor
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetPeriod() *fhir.Period {
	if c == nil {
		return nil
	}
	return c.Period
}

// GetPolicyHolder returns the value of the field PolicyHolder.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetPolicyHolder() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.PolicyHolder
}

// GetRelationship returns the value of the field Relationship.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetRelationship() *fhir.CodeableConcept {
	if c == nil {
		return nil
	}
	return c.Relationship
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetStatus() *fhir.Code {
	if c == nil {
		return nil
	}
	return c.Status
}

// GetSubrogation returns the value of the field Subrogation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetSubrogation() *fhir.Boolean {
	if c == nil {
		return nil
	}
	return c.Subrogation
}

// GetSubscriber returns the value of the field Subscriber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetSubscriber() *fhir.Reference {
	if c == nil {
		return nil
	}
	return c.Subscriber
}

// GetSubscriberID returns the value of the field SubscriberID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetSubscriberID() *fhir.String {
	if c == nil {
		return nil
	}
	return c.SubscriberID
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetText() *fhir.Narrative {
	if c == nil {
		return nil
	}
	return c.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (c *Coverage) GetType() *fhir.CodeableConcept {
	if c == nil {
		return nil
	}
	return c.Type
}

// Additional coverage classifications// A suite of underwriter specific classifiers.// For example may be used to identify a class of coverage or employer group,
// Policy, Plan.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Coverage.json
type CoverageClass struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A short description for the class.
	Name *fhir.String `fhirpath:"name"`

	// The type of classification for which an insurer-specific class label or
	// number and optional name is provided, for example may be used to identify a
	// class of coverage or employer group, Policy, Plan.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// The alphanumeric string value associated with the insurer issued label.
	Value *fhir.String `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cc *CoverageClass) GetExtension() []*fhir.Extension {
	if cc == nil {
		return nil
	}
	return cc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cc *CoverageClass) GetID() string {
	if cc == nil {
		return ""
	}
	return cc.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cc *CoverageClass) GetModifierExtension() []*fhir.Extension {
	if cc == nil {
		return nil
	}
	return cc.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cc *CoverageClass) GetName() *fhir.String {
	if cc == nil {
		return nil
	}
	return cc.Name
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cc *CoverageClass) GetType() *fhir.CodeableConcept {
	if cc == nil {
		return nil
	}
	return cc.Type
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cc *CoverageClass) GetValue() *fhir.String {
	if cc == nil {
		return nil
	}
	return cc.Value
}

// Patient payments for services/products// A suite of codes indicating the cost category and associated amount which
// have been detailed in the policy and may have been included on the health
// card.// For example by knowing the patient visit co-pay, the provider can collect
// the amount prior to undertaking treatment.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Coverage.json
type CoverageCostToBeneficiary struct {

	// A suite of codes indicating exceptions or reductions to patient costs and
	// their effective periods.
	Exception []*CoverageCostToBeneficiaryException `fhirpath:"exception"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The category of patient centric costs associated with treatment.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	// The amount due from the patient for the cost category.
	Value fhir.Element `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetException returns the value of the field Exception.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctb *CoverageCostToBeneficiary) GetException() []*CoverageCostToBeneficiaryException {
	if cctb == nil {
		return nil
	}
	return cctb.Exception
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctb *CoverageCostToBeneficiary) GetExtension() []*fhir.Extension {
	if cctb == nil {
		return nil
	}
	return cctb.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctb *CoverageCostToBeneficiary) GetID() string {
	if cctb == nil {
		return ""
	}
	return cctb.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctb *CoverageCostToBeneficiary) GetModifierExtension() []*fhir.Extension {
	if cctb == nil {
		return nil
	}
	return cctb.ModifierExtension
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctb *CoverageCostToBeneficiary) GetType() *fhir.CodeableConcept {
	if cctb == nil {
		return nil
	}
	return cctb.Type
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctb *CoverageCostToBeneficiary) GetValue() fhir.Element {
	if cctb == nil {
		return nil
	}
	return cctb.Value
}

// GetValueQuantity returns the value of the field Value.
func (cctb *CoverageCostToBeneficiary) GetValueQuantity() *fhir.Quantity {
	if cctb == nil {
		return nil
	}
	val, ok := cctb.Value.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetValueMoney returns the value of the field Value.
func (cctb *CoverageCostToBeneficiary) GetValueMoney() *fhir.Money {
	if cctb == nil {
		return nil
	}
	val, ok := cctb.Value.(*fhir.Money)
	if !ok {
		return nil
	}
	return val
}

// Exceptions for patient payments// A suite of codes indicating exceptions or reductions to patient costs and
// their effective periods.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-Coverage.json
type CoverageCostToBeneficiaryException struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The timeframe during when the exception is in force.
	Period *fhir.Period `fhirpath:"period"`

	// The code for the specific exception.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctbe *CoverageCostToBeneficiaryException) GetExtension() []*fhir.Extension {
	if cctbe == nil {
		return nil
	}
	return cctbe.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctbe *CoverageCostToBeneficiaryException) GetID() string {
	if cctbe == nil {
		return ""
	}
	return cctbe.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctbe *CoverageCostToBeneficiaryException) GetModifierExtension() []*fhir.Extension {
	if cctbe == nil {
		return nil
	}
	return cctbe.ModifierExtension
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctbe *CoverageCostToBeneficiaryException) GetPeriod() *fhir.Period {
	if cctbe == nil {
		return nil
	}
	return cctbe.Period
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cctbe *CoverageCostToBeneficiaryException) GetType() *fhir.CodeableConcept {
	if cctbe == nil {
		return nil
	}
	return cctbe.Type
}

func (c *Coverage) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (c *Coverage) UnmarshalJSON(data []byte) error {
	var raw struct {
		Beneficiary       *fhir.Reference              `json:"beneficiary"`
		Class             []*CoverageClass             `json:"class"`
		Contained         []fhir.Resource              `json:"contained"`
		Contract          []*fhir.Reference            `json:"contract"`
		CostToBeneficiary []*CoverageCostToBeneficiary `json:"costToBeneficiary"`
		Dependent         *fhir.String                 `json:"dependent"`
		Extension         []*fhir.Extension            `json:"extension"`

		ID                string                `json:"id"`
		Identifier        []*fhir.Identifier    `json:"identifier"`
		ImplicitRules     *fhir.URI             `json:"implicitRules"`
		Language          *fhir.Code            `json:"language"`
		Meta              *fhir.Meta            `json:"meta"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Network           *fhir.String          `json:"network"`
		Order             *fhir.PositiveInt     `json:"order"`
		Payor             []*fhir.Reference     `json:"payor"`
		Period            *fhir.Period          `json:"period"`
		PolicyHolder      *fhir.Reference       `json:"policyHolder"`
		Relationship      *fhir.CodeableConcept `json:"relationship"`
		Status            *fhir.Code            `json:"status"`
		Subrogation       *fhir.Boolean         `json:"subrogation"`
		Subscriber        *fhir.Reference       `json:"subscriber"`
		SubscriberID      *fhir.String          `json:"subscriberId"`
		Text              *fhir.Narrative       `json:"text"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	c.Beneficiary = raw.Beneficiary
	c.Class = raw.Class
	c.Contained = raw.Contained
	c.Contract = raw.Contract
	c.CostToBeneficiary = raw.CostToBeneficiary
	c.Dependent = raw.Dependent
	c.Extension = raw.Extension
	c.ID = raw.ID
	c.Identifier = raw.Identifier
	c.ImplicitRules = raw.ImplicitRules
	c.Language = raw.Language
	c.Meta = raw.Meta
	c.ModifierExtension = raw.ModifierExtension
	c.Network = raw.Network
	c.Order = raw.Order
	c.Payor = raw.Payor
	c.Period = raw.Period
	c.PolicyHolder = raw.PolicyHolder
	c.Relationship = raw.Relationship
	c.Status = raw.Status
	c.Subrogation = raw.Subrogation
	c.Subscriber = raw.Subscriber
	c.SubscriberID = raw.SubscriberID
	c.Text = raw.Text
	c.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*Coverage)(nil)
var _ json.Unmarshaler = (*Coverage)(nil)

func (cc *CoverageClass) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cc *CoverageClass) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Name              *fhir.String          `json:"name"`
		Type              *fhir.CodeableConcept `json:"type"`
		Value             *fhir.String          `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cc.Extension = raw.Extension
	cc.ID = raw.ID
	cc.ModifierExtension = raw.ModifierExtension
	cc.Name = raw.Name
	cc.Type = raw.Type
	cc.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*CoverageClass)(nil)
var _ json.Unmarshaler = (*CoverageClass)(nil)

func (cctb *CoverageCostToBeneficiary) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cctb *CoverageCostToBeneficiary) UnmarshalJSON(data []byte) error {
	var raw struct {
		Exception []*CoverageCostToBeneficiaryException `json:"exception"`
		Extension []*fhir.Extension                     `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Type              *fhir.CodeableConcept `json:"type"`
		ValueQuantity     *fhir.Quantity        `json:"valueQuantity"`
		ValueMoney        *fhir.Money           `json:"valueMoney"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cctb.Exception = raw.Exception
	cctb.Extension = raw.Extension
	cctb.ID = raw.ID
	cctb.ModifierExtension = raw.ModifierExtension
	cctb.Type = raw.Type
	cctb.Value, err = validate.SelectOneOf[fhir.Element]("Coverage.costToBeneficiary.value",
		raw.ValueQuantity,
		raw.ValueMoney)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*CoverageCostToBeneficiary)(nil)
var _ json.Unmarshaler = (*CoverageCostToBeneficiary)(nil)

func (cctbe *CoverageCostToBeneficiaryException) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cctbe *CoverageCostToBeneficiaryException) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		Period            *fhir.Period          `json:"period"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cctbe.Extension = raw.Extension
	cctbe.ID = raw.ID
	cctbe.ModifierExtension = raw.ModifierExtension
	cctbe.Period = raw.Period
	cctbe.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*CoverageCostToBeneficiaryException)(nil)
var _ json.Unmarshaler = (*CoverageCostToBeneficiaryException)(nil)
