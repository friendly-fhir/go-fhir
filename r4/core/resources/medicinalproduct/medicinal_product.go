// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package medicinalproduct

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Detailed definition of a medicinal product, typically for uses other than
// direct patient care (e.g. regulatory use).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MedicinalProduct
//   - Source File: StructureDefinition-MedicinalProduct.json
type MedicinalProduct struct {

	// Whether the Medicinal Product is subject to additional monitoring for
	// regulatory reasons.
	AdditionalMonitoringIndicator *fhir.CodeableConcept `fhirpath:"additionalMonitoringIndicator"`

	// Supporting documentation, typically for regulatory submission.
	AttachedDocument []*fhir.Reference `fhirpath:"attachedDocument"`

	// Clinical trials or studies that this product is involved in.
	ClinicalTrial []*fhir.Reference `fhirpath:"clinicalTrial"`

	// The dose form for a single part product, or combined form of a multiple part
	// product.
	CombinedPharmaceuticalDoseForm *fhir.CodeableConcept `fhirpath:"combinedPharmaceuticalDoseForm"`

	// A product specific contact, person (in a role), or an organization.
	Contact []*fhir.Reference `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Reference to another product, e.g. for linking authorised to investigational
	// product.
	CrossReference []*fhir.Identifier `fhirpath:"crossReference"`

	// If this medicine applies to human or veterinary uses.
	Domain *fhir.Coding `fhirpath:"domain"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifier for this product. Could be an MPID.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The legal status of supply of the medicinal product as classified by the
	// regulator.
	LegalStatusOfSupply *fhir.CodeableConcept `fhirpath:"legalStatusOfSupply"`

	// An operation applied to the product, for manufacturing or adminsitrative
	// purpose.
	ManufacturingBusinessOperation []*MedicinalProductManufacturingBusinessOperation `fhirpath:"manufacturingBusinessOperation"`

	// Marketing status of the medicinal product, in contrast to marketing
	// authorizaton.
	MarketingStatus []*fhir.MarketingStatus `fhirpath:"marketingStatus"`

	// A master file for to the medicinal product (e.g. Pharmacovigilance System
	// Master File).
	MasterFile []*fhir.Reference `fhirpath:"masterFile"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The product's name, including full name and possibly coded parts.
	Name []*MedicinalProductName `fhirpath:"name"`

	// Package representation for the product.
	PackagedMedicinalProduct []*fhir.Reference `fhirpath:"packagedMedicinalProduct"`

	// If authorised for use in children.
	PaediatricUseIndicator *fhir.CodeableConcept `fhirpath:"paediatricUseIndicator"`

	// Pharmaceutical aspects of product.
	PharmaceuticalProduct []*fhir.Reference `fhirpath:"pharmaceuticalProduct"`

	// Allows the product to be classified by various systems.
	ProductClassification []*fhir.CodeableConcept `fhirpath:"productClassification"`

	// Indicates if the medicinal product has an orphan designation for the
	// treatment of a rare disease.
	SpecialDesignation []*MedicinalProductSpecialDesignation `fhirpath:"specialDesignation"`

	// Whether the Medicinal Product is subject to special measures for regulatory
	// reasons.
	SpecialMeasures []*fhir.String `fhirpath:"specialMeasures"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Regulatory type, e.g. Investigational or Authorized.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAdditionalMonitoringIndicator returns the value of the field AdditionalMonitoringIndicator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetAdditionalMonitoringIndicator() *fhir.CodeableConcept {
	if mp == nil {
		return nil
	}
	return mp.AdditionalMonitoringIndicator
}

// GetAttachedDocument returns the value of the field AttachedDocument.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetAttachedDocument() []*fhir.Reference {
	if mp == nil {
		return nil
	}
	return mp.AttachedDocument
}

// GetClinicalTrial returns the value of the field ClinicalTrial.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetClinicalTrial() []*fhir.Reference {
	if mp == nil {
		return nil
	}
	return mp.ClinicalTrial
}

// GetCombinedPharmaceuticalDoseForm returns the value of the field CombinedPharmaceuticalDoseForm.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetCombinedPharmaceuticalDoseForm() *fhir.CodeableConcept {
	if mp == nil {
		return nil
	}
	return mp.CombinedPharmaceuticalDoseForm
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetContact() []*fhir.Reference {
	if mp == nil {
		return nil
	}
	return mp.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetContained() []fhir.Resource {
	if mp == nil {
		return nil
	}
	return mp.Contained
}

// GetCrossReference returns the value of the field CrossReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetCrossReference() []*fhir.Identifier {
	if mp == nil {
		return nil
	}
	return mp.CrossReference
}

// GetDomain returns the value of the field Domain.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetDomain() *fhir.Coding {
	if mp == nil {
		return nil
	}
	return mp.Domain
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetExtension() []*fhir.Extension {
	if mp == nil {
		return nil
	}
	return mp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetID() string {
	if mp == nil {
		return ""
	}
	return mp.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetIdentifier() []*fhir.Identifier {
	if mp == nil {
		return nil
	}
	return mp.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetImplicitRules() *fhir.URI {
	if mp == nil {
		return nil
	}
	return mp.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetLanguage() *fhir.Code {
	if mp == nil {
		return nil
	}
	return mp.Language
}

// GetLegalStatusOfSupply returns the value of the field LegalStatusOfSupply.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetLegalStatusOfSupply() *fhir.CodeableConcept {
	if mp == nil {
		return nil
	}
	return mp.LegalStatusOfSupply
}

// GetManufacturingBusinessOperation returns the value of the field ManufacturingBusinessOperation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetManufacturingBusinessOperation() []*MedicinalProductManufacturingBusinessOperation {
	if mp == nil {
		return nil
	}
	return mp.ManufacturingBusinessOperation
}

// GetMarketingStatus returns the value of the field MarketingStatus.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetMarketingStatus() []*fhir.MarketingStatus {
	if mp == nil {
		return nil
	}
	return mp.MarketingStatus
}

// GetMasterFile returns the value of the field MasterFile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetMasterFile() []*fhir.Reference {
	if mp == nil {
		return nil
	}
	return mp.MasterFile
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetMeta() *fhir.Meta {
	if mp == nil {
		return nil
	}
	return mp.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetModifierExtension() []*fhir.Extension {
	if mp == nil {
		return nil
	}
	return mp.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetName() []*MedicinalProductName {
	if mp == nil {
		return nil
	}
	return mp.Name
}

// GetPackagedMedicinalProduct returns the value of the field PackagedMedicinalProduct.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetPackagedMedicinalProduct() []*fhir.Reference {
	if mp == nil {
		return nil
	}
	return mp.PackagedMedicinalProduct
}

// GetPaediatricUseIndicator returns the value of the field PaediatricUseIndicator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetPaediatricUseIndicator() *fhir.CodeableConcept {
	if mp == nil {
		return nil
	}
	return mp.PaediatricUseIndicator
}

// GetPharmaceuticalProduct returns the value of the field PharmaceuticalProduct.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetPharmaceuticalProduct() []*fhir.Reference {
	if mp == nil {
		return nil
	}
	return mp.PharmaceuticalProduct
}

// GetProductClassification returns the value of the field ProductClassification.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetProductClassification() []*fhir.CodeableConcept {
	if mp == nil {
		return nil
	}
	return mp.ProductClassification
}

// GetSpecialDesignation returns the value of the field SpecialDesignation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetSpecialDesignation() []*MedicinalProductSpecialDesignation {
	if mp == nil {
		return nil
	}
	return mp.SpecialDesignation
}

// GetSpecialMeasures returns the value of the field SpecialMeasures.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetSpecialMeasures() []*fhir.String {
	if mp == nil {
		return nil
	}
	return mp.SpecialMeasures
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetText() *fhir.Narrative {
	if mp == nil {
		return nil
	}
	return mp.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mp *MedicinalProduct) GetType() *fhir.CodeableConcept {
	if mp == nil {
		return nil
	}
	return mp.Type
}

// An operation applied to the product, for manufacturing or adminsitrative
// purpose// An operation applied to the product, for manufacturing or adminsitrative
// purpose.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProduct.json
type MedicinalProductManufacturingBusinessOperation struct {

	// Regulatory authorization reference number.
	AuthorisationReferenceNumber *fhir.Identifier `fhirpath:"authorisationReferenceNumber"`

	// To indicate if this proces is commercially confidential.
	ConfidentialityIndicator *fhir.CodeableConcept `fhirpath:"confidentialityIndicator"`

	// Regulatory authorization date.
	EffectiveDate *fhir.DateTime `fhirpath:"effectiveDate"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The manufacturer or establishment associated with the process.
	Manufacturer []*fhir.Reference `fhirpath:"manufacturer"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type of manufacturing operation.
	OperationType *fhir.CodeableConcept `fhirpath:"operationType"`

	// A regulator which oversees the operation.
	Regulator *fhir.Reference `fhirpath:"regulator"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAuthorisationReferenceNumber returns the value of the field AuthorisationReferenceNumber.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpmbo *MedicinalProductManufacturingBusinessOperation) GetAuthorisationReferenceNumber() *fhir.Identifier {
	if mpmbo == nil {
		return nil
	}
	return mpmbo.AuthorisationReferenceNumber
}

// GetConfidentialityIndicator returns the value of the field ConfidentialityIndicator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpmbo *MedicinalProductManufacturingBusinessOperation) GetConfidentialityIndicator() *fhir.CodeableConcept {
	if mpmbo == nil {
		return nil
	}
	return mpmbo.ConfidentialityIndicator
}

// GetEffectiveDate returns the value of the field EffectiveDate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpmbo *MedicinalProductManufacturingBusinessOperation) GetEffectiveDate() *fhir.DateTime {
	if mpmbo == nil {
		return nil
	}
	return mpmbo.EffectiveDate
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpmbo *MedicinalProductManufacturingBusinessOperation) GetExtension() []*fhir.Extension {
	if mpmbo == nil {
		return nil
	}
	return mpmbo.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpmbo *MedicinalProductManufacturingBusinessOperation) GetID() string {
	if mpmbo == nil {
		return ""
	}
	return mpmbo.ID
}

// GetManufacturer returns the value of the field Manufacturer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpmbo *MedicinalProductManufacturingBusinessOperation) GetManufacturer() []*fhir.Reference {
	if mpmbo == nil {
		return nil
	}
	return mpmbo.Manufacturer
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpmbo *MedicinalProductManufacturingBusinessOperation) GetModifierExtension() []*fhir.Extension {
	if mpmbo == nil {
		return nil
	}
	return mpmbo.ModifierExtension
}

// GetOperationType returns the value of the field OperationType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpmbo *MedicinalProductManufacturingBusinessOperation) GetOperationType() *fhir.CodeableConcept {
	if mpmbo == nil {
		return nil
	}
	return mpmbo.OperationType
}

// GetRegulator returns the value of the field Regulator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpmbo *MedicinalProductManufacturingBusinessOperation) GetRegulator() *fhir.Reference {
	if mpmbo == nil {
		return nil
	}
	return mpmbo.Regulator
}

// The product's name, including full name and possibly coded parts// The product's name, including full name and possibly coded parts.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProduct.json
type MedicinalProductName struct {

	// Country where the name applies.
	CountryLanguage []*MedicinalProductNameCountryLanguage `fhirpath:"countryLanguage"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Coding words or phrases of the name.
	NamePart []*MedicinalProductNameNamePart `fhirpath:"namePart"`

	// The full product name.
	ProductName *fhir.String `fhirpath:"productName"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCountryLanguage returns the value of the field CountryLanguage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpn *MedicinalProductName) GetCountryLanguage() []*MedicinalProductNameCountryLanguage {
	if mpn == nil {
		return nil
	}
	return mpn.CountryLanguage
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpn *MedicinalProductName) GetExtension() []*fhir.Extension {
	if mpn == nil {
		return nil
	}
	return mpn.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpn *MedicinalProductName) GetID() string {
	if mpn == nil {
		return ""
	}
	return mpn.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpn *MedicinalProductName) GetModifierExtension() []*fhir.Extension {
	if mpn == nil {
		return nil
	}
	return mpn.ModifierExtension
}

// GetNamePart returns the value of the field NamePart.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpn *MedicinalProductName) GetNamePart() []*MedicinalProductNameNamePart {
	if mpn == nil {
		return nil
	}
	return mpn.NamePart
}

// GetProductName returns the value of the field ProductName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpn *MedicinalProductName) GetProductName() *fhir.String {
	if mpn == nil {
		return nil
	}
	return mpn.ProductName
}

// Country where the name applies// Country where the name applies.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProduct.json
type MedicinalProductNameCountryLanguage struct {

	// Country code for where this name applies.
	Country *fhir.CodeableConcept `fhirpath:"country"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Jurisdiction code for where this name applies.
	Jurisdiction *fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// Language code for this name.
	Language *fhir.CodeableConcept `fhirpath:"language"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCountry returns the value of the field Country.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpncl *MedicinalProductNameCountryLanguage) GetCountry() *fhir.CodeableConcept {
	if mpncl == nil {
		return nil
	}
	return mpncl.Country
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpncl *MedicinalProductNameCountryLanguage) GetExtension() []*fhir.Extension {
	if mpncl == nil {
		return nil
	}
	return mpncl.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpncl *MedicinalProductNameCountryLanguage) GetID() string {
	if mpncl == nil {
		return ""
	}
	return mpncl.ID
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpncl *MedicinalProductNameCountryLanguage) GetJurisdiction() *fhir.CodeableConcept {
	if mpncl == nil {
		return nil
	}
	return mpncl.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpncl *MedicinalProductNameCountryLanguage) GetLanguage() *fhir.CodeableConcept {
	if mpncl == nil {
		return nil
	}
	return mpncl.Language
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpncl *MedicinalProductNameCountryLanguage) GetModifierExtension() []*fhir.Extension {
	if mpncl == nil {
		return nil
	}
	return mpncl.ModifierExtension
}

// Coding words or phrases of the name// Coding words or phrases of the name.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProduct.json
type MedicinalProductNameNamePart struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A fragment of a product name.
	Part *fhir.String `fhirpath:"part"`

	// Idenifying type for this part of the name (e.g. strength part).
	Type *fhir.Coding `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpnnp *MedicinalProductNameNamePart) GetExtension() []*fhir.Extension {
	if mpnnp == nil {
		return nil
	}
	return mpnnp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpnnp *MedicinalProductNameNamePart) GetID() string {
	if mpnnp == nil {
		return ""
	}
	return mpnnp.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpnnp *MedicinalProductNameNamePart) GetModifierExtension() []*fhir.Extension {
	if mpnnp == nil {
		return nil
	}
	return mpnnp.ModifierExtension
}

// GetPart returns the value of the field Part.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpnnp *MedicinalProductNameNamePart) GetPart() *fhir.String {
	if mpnnp == nil {
		return nil
	}
	return mpnnp.Part
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpnnp *MedicinalProductNameNamePart) GetType() *fhir.Coding {
	if mpnnp == nil {
		return nil
	}
	return mpnnp.Type
}

// Indicates if the medicinal product has an orphan designation for the
// treatment of a rare disease// Indicates if the medicinal product has an orphan designation for the
// treatment of a rare disease.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MedicinalProduct.json
type MedicinalProductSpecialDesignation struct {

	// Date when the designation was granted.
	Date *fhir.DateTime `fhirpath:"date"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Identifier for the designation, or procedure number.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// Condition for which the medicinal use applies.
	Indication fhir.Element `fhirpath:"indication"`

	// The intended use of the product, e.g. prevention, treatment.
	IntendedUse *fhir.CodeableConcept `fhirpath:"intendedUse"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Animal species for which this applies.
	Species *fhir.CodeableConcept `fhirpath:"species"`

	// For example granted, pending, expired or withdrawn.
	Status *fhir.CodeableConcept `fhirpath:"status"`

	// The type of special designation, e.g. orphan drug, minor use.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpsd *MedicinalProductSpecialDesignation) GetDate() *fhir.DateTime {
	if mpsd == nil {
		return nil
	}
	return mpsd.Date
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpsd *MedicinalProductSpecialDesignation) GetExtension() []*fhir.Extension {
	if mpsd == nil {
		return nil
	}
	return mpsd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpsd *MedicinalProductSpecialDesignation) GetID() string {
	if mpsd == nil {
		return ""
	}
	return mpsd.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpsd *MedicinalProductSpecialDesignation) GetIdentifier() []*fhir.Identifier {
	if mpsd == nil {
		return nil
	}
	return mpsd.Identifier
}

// GetIndication returns the value of the field Indication.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpsd *MedicinalProductSpecialDesignation) GetIndication() fhir.Element {
	if mpsd == nil {
		return nil
	}
	return mpsd.Indication
}

// GetIndicationCodeableConcept returns the value of the field Indication.
func (mpsd *MedicinalProductSpecialDesignation) GetIndicationCodeableConcept() *fhir.CodeableConcept {
	if mpsd == nil {
		return nil
	}
	val, ok := mpsd.Indication.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetIndicationReference returns the value of the field Indication.
func (mpsd *MedicinalProductSpecialDesignation) GetIndicationReference() *fhir.Reference {
	if mpsd == nil {
		return nil
	}
	val, ok := mpsd.Indication.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetIntendedUse returns the value of the field IntendedUse.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpsd *MedicinalProductSpecialDesignation) GetIntendedUse() *fhir.CodeableConcept {
	if mpsd == nil {
		return nil
	}
	return mpsd.IntendedUse
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpsd *MedicinalProductSpecialDesignation) GetModifierExtension() []*fhir.Extension {
	if mpsd == nil {
		return nil
	}
	return mpsd.ModifierExtension
}

// GetSpecies returns the value of the field Species.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpsd *MedicinalProductSpecialDesignation) GetSpecies() *fhir.CodeableConcept {
	if mpsd == nil {
		return nil
	}
	return mpsd.Species
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpsd *MedicinalProductSpecialDesignation) GetStatus() *fhir.CodeableConcept {
	if mpsd == nil {
		return nil
	}
	return mpsd.Status
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mpsd *MedicinalProductSpecialDesignation) GetType() *fhir.CodeableConcept {
	if mpsd == nil {
		return nil
	}
	return mpsd.Type
}
