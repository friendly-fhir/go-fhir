// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package testscript

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// A structured set of tests against a FHIR server or client implementation to
// determine compliance against the FHIR specification.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/TestScript
//   - Source File: StructureDefinition-TestScript.json
type TestScript struct {

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the test script and/or its contents.
	// Copyright statements are generally legal restrictions on the use and
	// publishing of the test script.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the test script was published. The date
	// must change when the business version changes and it must change if the
	// status code changes. In addition, it should change when the substantive
	// content of the test script changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the test script from a
	// consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// An abstract server used in operations within this test script in the
	// destination element.
	Destination []*TestScriptDestination `fhirpath:"destination"`

	// A Boolean value to indicate that this test script is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used
	// for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Fixture in the test script - by reference (uri). All fixtures are required
	// for the test script to execute.
	Fixture []*TestScriptFixture `fhirpath:"fixture"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this test script when it is
	// represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier *fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A legal or geographic region in which the test script is intended to be
	// used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// The required capability must exist and are assumed to function correctly on
	// the FHIR server being tested.
	Metadata *TestScriptMetadata `fhirpath:"metadata"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the test script. This name should be
	// usable as an identifier for the module by machine processing applications
	// such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// An abstract server used in operations within this test script in the origin
	// element.
	Origin []*TestScriptOrigin `fhirpath:"origin"`

	// Reference to the profile to be used for validation.
	Profile []*fhir.Reference `fhirpath:"profile"`

	// The name of the organization or individual that published the test script.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this test script is needed and why it has been designed
	// as it has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// A series of required setup operations before tests are executed.
	Setup *TestScriptSetup `fhirpath:"setup"`

	// The status of this test script. Enables tracking the life-cycle of the
	// content.
	Status *fhir.Code `fhirpath:"status"`

	// A series of operations required to clean up after all the tests are executed
	// (successfully or otherwise).
	Teardown *TestScriptTeardown `fhirpath:"teardown"`

	// A test in this script.
	Test []*TestScriptTest `fhirpath:"test"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the test script.
	Title *fhir.String `fhirpath:"title"`

	// An absolute URI that is used to identify this test script when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal
	// address at which at which an authoritative instance of this test script is
	// (or will be) published. This URL can be the target of a canonical reference.
	// It SHALL remain the same when the test script is stored on different
	// servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate test
	// script instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// Variable is set based either on element value in response body or on header
	// field value in the response headers.
	Variable []*TestScriptVariable `fhirpath:"variable"`

	// The identifier that is used to identify this version of the test script when
	// it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the test script author and is not expected to be
	// globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
	// managed version is not available. There is also no expectation that versions
	// can be placed in a lexicographical sequence.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetContact() []*fhir.ContactDetail {
	if ts == nil {
		return nil
	}
	return ts.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetContained() []fhir.Resource {
	if ts == nil {
		return nil
	}
	return ts.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetCopyright() *fhir.Markdown {
	if ts == nil {
		return nil
	}
	return ts.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetDate() *fhir.DateTime {
	if ts == nil {
		return nil
	}
	return ts.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetDescription() *fhir.Markdown {
	if ts == nil {
		return nil
	}
	return ts.Description
}

// GetDestination returns the value of the field Destination.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetDestination() []*TestScriptDestination {
	if ts == nil {
		return nil
	}
	return ts.Destination
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetExperimental() *fhir.Boolean {
	if ts == nil {
		return nil
	}
	return ts.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetExtension() []*fhir.Extension {
	if ts == nil {
		return nil
	}
	return ts.Extension
}

// GetFixture returns the value of the field Fixture.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetFixture() []*TestScriptFixture {
	if ts == nil {
		return nil
	}
	return ts.Fixture
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetID() string {
	if ts == nil {
		return ""
	}
	return ts.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetIdentifier() *fhir.Identifier {
	if ts == nil {
		return nil
	}
	return ts.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetImplicitRules() *fhir.URI {
	if ts == nil {
		return nil
	}
	return ts.ImplicitRules
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetJurisdiction() []*fhir.CodeableConcept {
	if ts == nil {
		return nil
	}
	return ts.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetLanguage() *fhir.Code {
	if ts == nil {
		return nil
	}
	return ts.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetMeta() *fhir.Meta {
	if ts == nil {
		return nil
	}
	return ts.Meta
}

// GetMetadata returns the value of the field Metadata.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetMetadata() *TestScriptMetadata {
	if ts == nil {
		return nil
	}
	return ts.Metadata
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetModifierExtension() []*fhir.Extension {
	if ts == nil {
		return nil
	}
	return ts.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetName() *fhir.String {
	if ts == nil {
		return nil
	}
	return ts.Name
}

// GetOrigin returns the value of the field Origin.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetOrigin() []*TestScriptOrigin {
	if ts == nil {
		return nil
	}
	return ts.Origin
}

// GetProfile returns the value of the field Profile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetProfile() []*fhir.Reference {
	if ts == nil {
		return nil
	}
	return ts.Profile
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetPublisher() *fhir.String {
	if ts == nil {
		return nil
	}
	return ts.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetPurpose() *fhir.Markdown {
	if ts == nil {
		return nil
	}
	return ts.Purpose
}

// GetSetup returns the value of the field Setup.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetSetup() *TestScriptSetup {
	if ts == nil {
		return nil
	}
	return ts.Setup
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetStatus() *fhir.Code {
	if ts == nil {
		return nil
	}
	return ts.Status
}

// GetTeardown returns the value of the field Teardown.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetTeardown() *TestScriptTeardown {
	if ts == nil {
		return nil
	}
	return ts.Teardown
}

// GetTest returns the value of the field Test.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetTest() []*TestScriptTest {
	if ts == nil {
		return nil
	}
	return ts.Test
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetText() *fhir.Narrative {
	if ts == nil {
		return nil
	}
	return ts.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetTitle() *fhir.String {
	if ts == nil {
		return nil
	}
	return ts.Title
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetURL() *fhir.URI {
	if ts == nil {
		return nil
	}
	return ts.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetUseContext() []*fhir.UsageContext {
	if ts == nil {
		return nil
	}
	return ts.UseContext
}

// GetVariable returns the value of the field Variable.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetVariable() []*TestScriptVariable {
	if ts == nil {
		return nil
	}
	return ts.Variable
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ts *TestScript) GetVersion() *fhir.String {
	if ts == nil {
		return nil
	}
	return ts.Version
}

// An abstract server representing a destination or receiver in a message
// exchange// An abstract server used in operations within this test script in the
// destination element.// The purpose of this element is to define the profile of a destination
// element used elsewhere in the script. Test engines could then use the
// destination-profile mapping to offer a filtered list of test systems that
// can serve as the receiver for the interaction.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptDestination struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Abstract name given to a destination server in this test script. The name is
	// provided as a number starting at 1.
	Index *fhir.Integer `fhirpath:"index"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type of destination profile the test system supports.
	Profile *fhir.Coding `fhirpath:"profile"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsd *TestScriptDestination) GetExtension() []*fhir.Extension {
	if tsd == nil {
		return nil
	}
	return tsd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsd *TestScriptDestination) GetID() string {
	if tsd == nil {
		return ""
	}
	return tsd.ID
}

// GetIndex returns the value of the field Index.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsd *TestScriptDestination) GetIndex() *fhir.Integer {
	if tsd == nil {
		return nil
	}
	return tsd.Index
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsd *TestScriptDestination) GetModifierExtension() []*fhir.Extension {
	if tsd == nil {
		return nil
	}
	return tsd.ModifierExtension
}

// GetProfile returns the value of the field Profile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsd *TestScriptDestination) GetProfile() *fhir.Coding {
	if tsd == nil {
		return nil
	}
	return tsd.Profile
}

// Fixture in the test script - by reference (uri)// Fixture in the test script - by reference (uri). All fixtures are required
// for the test script to execute.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptFixture struct {

	// Whether or not to implicitly create the fixture during setup. If true, the
	// fixture is automatically created on each server being tested during setup,
	// therefore no create operation is required for this fixture in the
	// TestScript.setup section.
	Autocreate *fhir.Boolean `fhirpath:"autocreate"`

	// Whether or not to implicitly delete the fixture during teardown. If true,
	// the fixture is automatically deleted on each server being tested during
	// teardown, therefore no delete operation is required for this fixture in the
	// TestScript.teardown section.
	Autodelete *fhir.Boolean `fhirpath:"autodelete"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Reference to the resource (containing the contents of the resource needed
	// for operations).
	Resource *fhir.Reference `fhirpath:"resource"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAutocreate returns the value of the field Autocreate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsf *TestScriptFixture) GetAutocreate() *fhir.Boolean {
	if tsf == nil {
		return nil
	}
	return tsf.Autocreate
}

// GetAutodelete returns the value of the field Autodelete.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsf *TestScriptFixture) GetAutodelete() *fhir.Boolean {
	if tsf == nil {
		return nil
	}
	return tsf.Autodelete
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsf *TestScriptFixture) GetExtension() []*fhir.Extension {
	if tsf == nil {
		return nil
	}
	return tsf.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsf *TestScriptFixture) GetID() string {
	if tsf == nil {
		return ""
	}
	return tsf.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsf *TestScriptFixture) GetModifierExtension() []*fhir.Extension {
	if tsf == nil {
		return nil
	}
	return tsf.ModifierExtension
}

// GetResource returns the value of the field Resource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsf *TestScriptFixture) GetResource() *fhir.Reference {
	if tsf == nil {
		return nil
	}
	return tsf.Resource
}

// Required capability that is assumed to function correctly on the FHIR server
// being tested// The required capability must exist and are assumed to function correctly on
// the FHIR server being tested.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptMetadata struct {

	// Capabilities that must exist and are assumed to function correctly on the
	// FHIR server being tested.
	Capability []*TestScriptMetadataCapability `fhirpath:"capability"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A link to the FHIR specification that this test is covering.
	Link []*TestScriptMetadataLink `fhirpath:"link"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCapability returns the value of the field Capability.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsm *TestScriptMetadata) GetCapability() []*TestScriptMetadataCapability {
	if tsm == nil {
		return nil
	}
	return tsm.Capability
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsm *TestScriptMetadata) GetExtension() []*fhir.Extension {
	if tsm == nil {
		return nil
	}
	return tsm.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsm *TestScriptMetadata) GetID() string {
	if tsm == nil {
		return ""
	}
	return tsm.ID
}

// GetLink returns the value of the field Link.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsm *TestScriptMetadata) GetLink() []*TestScriptMetadataLink {
	if tsm == nil {
		return nil
	}
	return tsm.Link
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsm *TestScriptMetadata) GetModifierExtension() []*fhir.Extension {
	if tsm == nil {
		return nil
	}
	return tsm.ModifierExtension
}

// Capabilities that are assumed to function correctly on the FHIR server being
// tested// Capabilities that must exist and are assumed to function correctly on the
// FHIR server being tested.// When the metadata capabilities section is defined at TestScript.metadata or
// at TestScript.setup.metadata, and the server's conformance statement does
// not contain the elements defined in the minimal conformance statement, then
// all the tests in the TestScript are skipped. When the metadata capabilities
// section is defined at TestScript.test.metadata and the server's conformance
// statement does not contain the elements defined in the minimal conformance
// statement, then only that test is skipped. The
// "metadata.capabilities.required" and "metadata.capabilities.validated"
// elements only indicate whether the capabilities are the primary focus of the
// test script or not. They do not impact the skipping logic. Capabilities
// whose "metadata.capabilities.validated" flag is true are the primary focus
// of the test script.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptMetadataCapability struct {

	// Minimum capabilities required of server for test script to execute
	// successfully. If server does not meet at a minimum the referenced capability
	// statement, then all tests in this script are skipped.
	Capabilities *fhir.Canonical `fhirpath:"capabilities"`

	// Description of the capabilities that this test script is requiring the
	// server to support.
	Description *fhir.String `fhirpath:"description"`

	// Which server these requirements apply to.
	Destination *fhir.Integer `fhirpath:"destination"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Links to the FHIR specification that describes this interaction and the
	// resources involved in more detail.
	Link []*fhir.URI `fhirpath:"link"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Which origin server these requirements apply to.
	Origin []*fhir.Integer `fhirpath:"origin"`

	// Whether or not the test execution will require the given capabilities of the
	// server in order for this test script to execute.
	Required *fhir.Boolean `fhirpath:"required"`

	// Whether or not the test execution will validate the given capabilities of
	// the server in order for this test script to execute.
	Validated *fhir.Boolean `fhirpath:"validated"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCapabilities returns the value of the field Capabilities.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsmc *TestScriptMetadataCapability) GetCapabilities() *fhir.Canonical {
	if tsmc == nil {
		return nil
	}
	return tsmc.Capabilities
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsmc *TestScriptMetadataCapability) GetDescription() *fhir.String {
	if tsmc == nil {
		return nil
	}
	return tsmc.Description
}

// GetDestination returns the value of the field Destination.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsmc *TestScriptMetadataCapability) GetDestination() *fhir.Integer {
	if tsmc == nil {
		return nil
	}
	return tsmc.Destination
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsmc *TestScriptMetadataCapability) GetExtension() []*fhir.Extension {
	if tsmc == nil {
		return nil
	}
	return tsmc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsmc *TestScriptMetadataCapability) GetID() string {
	if tsmc == nil {
		return ""
	}
	return tsmc.ID
}

// GetLink returns the value of the field Link.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsmc *TestScriptMetadataCapability) GetLink() []*fhir.URI {
	if tsmc == nil {
		return nil
	}
	return tsmc.Link
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsmc *TestScriptMetadataCapability) GetModifierExtension() []*fhir.Extension {
	if tsmc == nil {
		return nil
	}
	return tsmc.ModifierExtension
}

// GetOrigin returns the value of the field Origin.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsmc *TestScriptMetadataCapability) GetOrigin() []*fhir.Integer {
	if tsmc == nil {
		return nil
	}
	return tsmc.Origin
}

// GetRequired returns the value of the field Required.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsmc *TestScriptMetadataCapability) GetRequired() *fhir.Boolean {
	if tsmc == nil {
		return nil
	}
	return tsmc.Required
}

// GetValidated returns the value of the field Validated.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsmc *TestScriptMetadataCapability) GetValidated() *fhir.Boolean {
	if tsmc == nil {
		return nil
	}
	return tsmc.Validated
}

// Links to the FHIR specification// A link to the FHIR specification that this test is covering.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptMetadataLink struct {

	// Short description of the link.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// URL to a particular requirement or feature within the FHIR specification.
	URL *fhir.URI `fhirpath:"url"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsml *TestScriptMetadataLink) GetDescription() *fhir.String {
	if tsml == nil {
		return nil
	}
	return tsml.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsml *TestScriptMetadataLink) GetExtension() []*fhir.Extension {
	if tsml == nil {
		return nil
	}
	return tsml.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsml *TestScriptMetadataLink) GetID() string {
	if tsml == nil {
		return ""
	}
	return tsml.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsml *TestScriptMetadataLink) GetModifierExtension() []*fhir.Extension {
	if tsml == nil {
		return nil
	}
	return tsml.ModifierExtension
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsml *TestScriptMetadataLink) GetURL() *fhir.URI {
	if tsml == nil {
		return nil
	}
	return tsml.URL
}

// An abstract server representing a client or sender in a message exchange// An abstract server used in operations within this test script in the origin
// element.// The purpose of this element is to define the profile of an origin element
// used elsewhere in the script. Test engines could then use the origin-profile
// mapping to offer a filtered list of test systems that can serve as the
// sender for the interaction.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptOrigin struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Abstract name given to an origin server in this test script. The name is
	// provided as a number starting at 1.
	Index *fhir.Integer `fhirpath:"index"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The type of origin profile the test system supports.
	Profile *fhir.Coding `fhirpath:"profile"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tso *TestScriptOrigin) GetExtension() []*fhir.Extension {
	if tso == nil {
		return nil
	}
	return tso.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tso *TestScriptOrigin) GetID() string {
	if tso == nil {
		return ""
	}
	return tso.ID
}

// GetIndex returns the value of the field Index.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tso *TestScriptOrigin) GetIndex() *fhir.Integer {
	if tso == nil {
		return nil
	}
	return tso.Index
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tso *TestScriptOrigin) GetModifierExtension() []*fhir.Extension {
	if tso == nil {
		return nil
	}
	return tso.ModifierExtension
}

// GetProfile returns the value of the field Profile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tso *TestScriptOrigin) GetProfile() *fhir.Coding {
	if tso == nil {
		return nil
	}
	return tso.Profile
}

// A series of required setup operations before tests are executed// A series of required setup operations before tests are executed.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptSetup struct {

	// Action would contain either an operation or an assertion.
	Action []*TestScriptSetupAction `fhirpath:"action"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAction returns the value of the field Action.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tss *TestScriptSetup) GetAction() []*TestScriptSetupAction {
	if tss == nil {
		return nil
	}
	return tss.Action
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tss *TestScriptSetup) GetExtension() []*fhir.Extension {
	if tss == nil {
		return nil
	}
	return tss.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tss *TestScriptSetup) GetID() string {
	if tss == nil {
		return ""
	}
	return tss.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tss *TestScriptSetup) GetModifierExtension() []*fhir.Extension {
	if tss == nil {
		return nil
	}
	return tss.ModifierExtension
}

// A setup operation or assert to perform// Action would contain either an operation or an assertion.// An action should contain either an operation or an assertion but not both.
// It can contain any number of variables.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptSetupAction struct {

	// Evaluates the results of previous operations to determine if the server
	// under test behaves appropriately.
	Assert *TestScriptSetupActionAssert `fhirpath:"assert"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The operation to perform.
	Operation *TestScriptSetupActionOperation `fhirpath:"operation"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAssert returns the value of the field Assert.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssa *TestScriptSetupAction) GetAssert() *TestScriptSetupActionAssert {
	if tssa == nil {
		return nil
	}
	return tssa.Assert
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssa *TestScriptSetupAction) GetExtension() []*fhir.Extension {
	if tssa == nil {
		return nil
	}
	return tssa.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssa *TestScriptSetupAction) GetID() string {
	if tssa == nil {
		return ""
	}
	return tssa.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssa *TestScriptSetupAction) GetModifierExtension() []*fhir.Extension {
	if tssa == nil {
		return nil
	}
	return tssa.ModifierExtension
}

// GetOperation returns the value of the field Operation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssa *TestScriptSetupAction) GetOperation() *TestScriptSetupActionOperation {
	if tssa == nil {
		return nil
	}
	return tssa.Operation
}

// The assertion to perform// Evaluates the results of previous operations to determine if the server
// under test behaves appropriately.// In order to evaluate an assertion, the request, response, and results of the
// most recently executed operation must always be maintained by the test
// engine.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptSetupActionAssert struct {

	// The FHIRPath expression to evaluate against the source fixture. When
	// compareToSourceId is defined, either compareToSourceExpression or
	// compareToSourcePath must be defined, but not both.
	CompareToSourceExpression *fhir.String `fhirpath:"compareToSourceExpression"`

	// Id of the source fixture used as the contents to be evaluated by either the
	// "source/expression" or "sourceId/path" definition.
	CompareToSourceID *fhir.String `fhirpath:"compareToSourceId"`

	// XPath or JSONPath expression to evaluate against the source fixture. When
	// compareToSourceId is defined, either compareToSourceExpression or
	// compareToSourcePath must be defined, but not both.
	CompareToSourcePath *fhir.String `fhirpath:"compareToSourcePath"`

	// The mime-type contents to compare against the request or response message
	// 'Content-Type' header.
	ContentType *fhir.Code `fhirpath:"contentType"`

	// The description would be used by test engines for tracking and reporting
	// purposes.
	Description *fhir.String `fhirpath:"description"`

	// The direction to use for the assertion.
	Direction *fhir.Code `fhirpath:"direction"`

	// The FHIRPath expression to be evaluated against the request or response
	// message contents - HTTP headers and payload.
	Expression *fhir.String `fhirpath:"expression"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The HTTP header field name e.g. 'Location'.
	HeaderField *fhir.String `fhirpath:"headerField"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The label would be used for tracking/logging purposes by test engines.
	Label *fhir.String `fhirpath:"label"`

	// The ID of a fixture. Asserts that the response contains at a minimum the
	// fixture specified by minimumId.
	MinimumID *fhir.String `fhirpath:"minimumId"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Whether or not the test execution performs validation on the bundle
	// navigation links.
	NavigationLinks *fhir.Boolean `fhirpath:"navigationLinks"`

	// The operator type defines the conditional behavior of the assert. If not
	// defined, the default is equals.
	Operator *fhir.Code `fhirpath:"operator"`

	// The XPath or JSONPath expression to be evaluated against the fixture
	// representing the response received from server.
	Path *fhir.String `fhirpath:"path"`

	// The request method or HTTP operation code to compare against that used by
	// the client system under test.
	RequestMethod *fhir.Code `fhirpath:"requestMethod"`

	// The value to use in a comparison against the request URL path string.
	RequestURL *fhir.String `fhirpath:"requestUrl"`

	// The type of the resource. See http://build.fhir.org/resourcelist.html.
	Resource *fhir.Code `fhirpath:"resource"`

	// okay | created | noContent | notModified | bad | forbidden | notFound |
	// methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
	Response *fhir.Code `fhirpath:"response"`

	// The value of the HTTP response code to be tested.
	ResponseCode *fhir.String `fhirpath:"responseCode"`

	// Fixture to evaluate the XPath/JSONPath expression or the headerField
	// against.
	SourceID *fhir.ID `fhirpath:"sourceId"`

	// The ID of the Profile to validate against.
	ValidateProfileID *fhir.ID `fhirpath:"validateProfileId"`

	// The value to compare to.
	Value *fhir.String `fhirpath:"value"`

	// Whether or not the test execution will produce a warning only on error for
	// this assert.
	WarningOnly *fhir.Boolean `fhirpath:"warningOnly"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCompareToSourceExpression returns the value of the field CompareToSourceExpression.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetCompareToSourceExpression() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.CompareToSourceExpression
}

// GetCompareToSourceID returns the value of the field CompareToSourceID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetCompareToSourceID() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.CompareToSourceID
}

// GetCompareToSourcePath returns the value of the field CompareToSourcePath.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetCompareToSourcePath() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.CompareToSourcePath
}

// GetContentType returns the value of the field ContentType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetContentType() *fhir.Code {
	if tssaa == nil {
		return nil
	}
	return tssaa.ContentType
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetDescription() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.Description
}

// GetDirection returns the value of the field Direction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetDirection() *fhir.Code {
	if tssaa == nil {
		return nil
	}
	return tssaa.Direction
}

// GetExpression returns the value of the field Expression.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetExpression() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.Expression
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetExtension() []*fhir.Extension {
	if tssaa == nil {
		return nil
	}
	return tssaa.Extension
}

// GetHeaderField returns the value of the field HeaderField.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetHeaderField() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.HeaderField
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetID() string {
	if tssaa == nil {
		return ""
	}
	return tssaa.ID
}

// GetLabel returns the value of the field Label.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetLabel() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.Label
}

// GetMinimumID returns the value of the field MinimumID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetMinimumID() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.MinimumID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetModifierExtension() []*fhir.Extension {
	if tssaa == nil {
		return nil
	}
	return tssaa.ModifierExtension
}

// GetNavigationLinks returns the value of the field NavigationLinks.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetNavigationLinks() *fhir.Boolean {
	if tssaa == nil {
		return nil
	}
	return tssaa.NavigationLinks
}

// GetOperator returns the value of the field Operator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetOperator() *fhir.Code {
	if tssaa == nil {
		return nil
	}
	return tssaa.Operator
}

// GetPath returns the value of the field Path.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetPath() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.Path
}

// GetRequestMethod returns the value of the field RequestMethod.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetRequestMethod() *fhir.Code {
	if tssaa == nil {
		return nil
	}
	return tssaa.RequestMethod
}

// GetRequestURL returns the value of the field RequestURL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetRequestURL() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.RequestURL
}

// GetResource returns the value of the field Resource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetResource() *fhir.Code {
	if tssaa == nil {
		return nil
	}
	return tssaa.Resource
}

// GetResponse returns the value of the field Response.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetResponse() *fhir.Code {
	if tssaa == nil {
		return nil
	}
	return tssaa.Response
}

// GetResponseCode returns the value of the field ResponseCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetResponseCode() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.ResponseCode
}

// GetSourceID returns the value of the field SourceID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetSourceID() *fhir.ID {
	if tssaa == nil {
		return nil
	}
	return tssaa.SourceID
}

// GetValidateProfileID returns the value of the field ValidateProfileID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetValidateProfileID() *fhir.ID {
	if tssaa == nil {
		return nil
	}
	return tssaa.ValidateProfileID
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetValue() *fhir.String {
	if tssaa == nil {
		return nil
	}
	return tssaa.Value
}

// GetWarningOnly returns the value of the field WarningOnly.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaa *TestScriptSetupActionAssert) GetWarningOnly() *fhir.Boolean {
	if tssaa == nil {
		return nil
	}
	return tssaa.WarningOnly
}

// The setup operation to perform// The operation to perform.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptSetupActionOperation struct {

	// The mime-type to use for RESTful operation in the 'Accept' header.
	Accept *fhir.Code `fhirpath:"accept"`

	// The mime-type to use for RESTful operation in the 'Content-Type' header.
	ContentType *fhir.Code `fhirpath:"contentType"`

	// The description would be used by test engines for tracking and reporting
	// purposes.
	Description *fhir.String `fhirpath:"description"`

	// The server where the request message is destined for. Must be one of the
	// server numbers listed in TestScript.destination section.
	Destination *fhir.Integer `fhirpath:"destination"`

	// Whether or not to implicitly send the request url in encoded format. The
	// default is true to match the standard RESTful client behavior. Set to false
	// when communicating with a server that does not support encoded url paths.
	EncodeRequestURL *fhir.Boolean `fhirpath:"encodeRequestUrl"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The label would be used for tracking/logging purposes by test engines.
	Label *fhir.String `fhirpath:"label"`

	// The HTTP method the test engine MUST use for this operation regardless of
	// any other operation details.
	Method *fhir.Code `fhirpath:"method"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The server where the request message originates from. Must be one of the
	// server numbers listed in TestScript.origin section.
	Origin *fhir.Integer `fhirpath:"origin"`

	// Path plus parameters after [type]. Used to set parts of the request URL
	// explicitly.
	Params *fhir.String `fhirpath:"params"`

	// Header elements would be used to set HTTP headers.
	RequestHeader []*TestScriptSetupActionOperationRequestHeader `fhirpath:"requestHeader"`

	// The fixture id (maybe new) to map to the request.
	RequestID *fhir.ID `fhirpath:"requestId"`

	// The type of the resource. See http://build.fhir.org/resourcelist.html.
	Resource *fhir.Code `fhirpath:"resource"`

	// The fixture id (maybe new) to map to the response.
	ResponseID *fhir.ID `fhirpath:"responseId"`

	// The id of the fixture used as the body of a PUT or POST request.
	SourceID *fhir.ID `fhirpath:"sourceId"`

	// Id of fixture used for extracting the [id], [type], and [vid] for GET
	// requests.
	TargetID *fhir.ID `fhirpath:"targetId"`

	// Server interaction or operation type.
	Type *fhir.Coding `fhirpath:"type"`

	// Complete request URL.
	URL *fhir.String `fhirpath:"url"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAccept returns the value of the field Accept.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetAccept() *fhir.Code {
	if tssao == nil {
		return nil
	}
	return tssao.Accept
}

// GetContentType returns the value of the field ContentType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetContentType() *fhir.Code {
	if tssao == nil {
		return nil
	}
	return tssao.ContentType
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetDescription() *fhir.String {
	if tssao == nil {
		return nil
	}
	return tssao.Description
}

// GetDestination returns the value of the field Destination.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetDestination() *fhir.Integer {
	if tssao == nil {
		return nil
	}
	return tssao.Destination
}

// GetEncodeRequestURL returns the value of the field EncodeRequestURL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetEncodeRequestURL() *fhir.Boolean {
	if tssao == nil {
		return nil
	}
	return tssao.EncodeRequestURL
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetExtension() []*fhir.Extension {
	if tssao == nil {
		return nil
	}
	return tssao.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetID() string {
	if tssao == nil {
		return ""
	}
	return tssao.ID
}

// GetLabel returns the value of the field Label.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetLabel() *fhir.String {
	if tssao == nil {
		return nil
	}
	return tssao.Label
}

// GetMethod returns the value of the field Method.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetMethod() *fhir.Code {
	if tssao == nil {
		return nil
	}
	return tssao.Method
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetModifierExtension() []*fhir.Extension {
	if tssao == nil {
		return nil
	}
	return tssao.ModifierExtension
}

// GetOrigin returns the value of the field Origin.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetOrigin() *fhir.Integer {
	if tssao == nil {
		return nil
	}
	return tssao.Origin
}

// GetParams returns the value of the field Params.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetParams() *fhir.String {
	if tssao == nil {
		return nil
	}
	return tssao.Params
}

// GetRequestHeader returns the value of the field RequestHeader.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetRequestHeader() []*TestScriptSetupActionOperationRequestHeader {
	if tssao == nil {
		return nil
	}
	return tssao.RequestHeader
}

// GetRequestID returns the value of the field RequestID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetRequestID() *fhir.ID {
	if tssao == nil {
		return nil
	}
	return tssao.RequestID
}

// GetResource returns the value of the field Resource.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetResource() *fhir.Code {
	if tssao == nil {
		return nil
	}
	return tssao.Resource
}

// GetResponseID returns the value of the field ResponseID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetResponseID() *fhir.ID {
	if tssao == nil {
		return nil
	}
	return tssao.ResponseID
}

// GetSourceID returns the value of the field SourceID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetSourceID() *fhir.ID {
	if tssao == nil {
		return nil
	}
	return tssao.SourceID
}

// GetTargetID returns the value of the field TargetID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetTargetID() *fhir.ID {
	if tssao == nil {
		return nil
	}
	return tssao.TargetID
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetType() *fhir.Coding {
	if tssao == nil {
		return nil
	}
	return tssao.Type
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssao *TestScriptSetupActionOperation) GetURL() *fhir.String {
	if tssao == nil {
		return nil
	}
	return tssao.URL
}

// Each operation can have one or more header elements// Header elements would be used to set HTTP headers.// This gives control to test-script writers to set headers explicitly based on
// test requirements. It will allow for testing using: - "If-Modified-Since"
// and "If-None-Match" headers. See http://build.fhir.org/http.html#2.1.0.5.1 -
// "If-Match" header. See http://build.fhir.org/http.html#2.1.0.11 -
// Conditional Create using "If-None-Exist". See
// http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header
// for negative testing. - etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptSetupActionOperationRequestHeader struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The HTTP header field e.g. "Accept".
	Field *fhir.String `fhirpath:"field"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The value of the header e.g. "application/fhir+xml".
	Value *fhir.String `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaorh *TestScriptSetupActionOperationRequestHeader) GetExtension() []*fhir.Extension {
	if tssaorh == nil {
		return nil
	}
	return tssaorh.Extension
}

// GetField returns the value of the field Field.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaorh *TestScriptSetupActionOperationRequestHeader) GetField() *fhir.String {
	if tssaorh == nil {
		return nil
	}
	return tssaorh.Field
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaorh *TestScriptSetupActionOperationRequestHeader) GetID() string {
	if tssaorh == nil {
		return ""
	}
	return tssaorh.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaorh *TestScriptSetupActionOperationRequestHeader) GetModifierExtension() []*fhir.Extension {
	if tssaorh == nil {
		return nil
	}
	return tssaorh.ModifierExtension
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tssaorh *TestScriptSetupActionOperationRequestHeader) GetValue() *fhir.String {
	if tssaorh == nil {
		return nil
	}
	return tssaorh.Value
}

// A series of required clean up steps// A series of operations required to clean up after all the tests are executed
// (successfully or otherwise).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptTeardown struct {

	// The teardown action will only contain an operation.
	Action []*TestScriptTeardownAction `fhirpath:"action"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAction returns the value of the field Action.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tst *TestScriptTeardown) GetAction() []*TestScriptTeardownAction {
	if tst == nil {
		return nil
	}
	return tst.Action
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tst *TestScriptTeardown) GetExtension() []*fhir.Extension {
	if tst == nil {
		return nil
	}
	return tst.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tst *TestScriptTeardown) GetID() string {
	if tst == nil {
		return ""
	}
	return tst.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tst *TestScriptTeardown) GetModifierExtension() []*fhir.Extension {
	if tst == nil {
		return nil
	}
	return tst.ModifierExtension
}

// One or more teardown operations to perform// The teardown action will only contain an operation.// An action should contain either an operation or an assertion but not both.
// It can contain any number of variables.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptTeardownAction struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsta *TestScriptTeardownAction) GetExtension() []*fhir.Extension {
	if tsta == nil {
		return nil
	}
	return tsta.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsta *TestScriptTeardownAction) GetID() string {
	if tsta == nil {
		return ""
	}
	return tsta.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsta *TestScriptTeardownAction) GetModifierExtension() []*fhir.Extension {
	if tsta == nil {
		return nil
	}
	return tsta.ModifierExtension
}

// A test in this script// A test in this script.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptTest struct {

	// Action would contain either an operation or an assertion.
	Action []*TestScriptTestAction `fhirpath:"action"`

	// A short description of the test used by test engines for tracking and
	// reporting purposes.
	Description *fhir.String `fhirpath:"description"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The name of this test used for tracking/logging purposes by test engines.
	Name *fhir.String `fhirpath:"name"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAction returns the value of the field Action.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tst *TestScriptTest) GetAction() []*TestScriptTestAction {
	if tst == nil {
		return nil
	}
	return tst.Action
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tst *TestScriptTest) GetDescription() *fhir.String {
	if tst == nil {
		return nil
	}
	return tst.Description
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tst *TestScriptTest) GetExtension() []*fhir.Extension {
	if tst == nil {
		return nil
	}
	return tst.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tst *TestScriptTest) GetID() string {
	if tst == nil {
		return ""
	}
	return tst.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tst *TestScriptTest) GetModifierExtension() []*fhir.Extension {
	if tst == nil {
		return nil
	}
	return tst.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tst *TestScriptTest) GetName() *fhir.String {
	if tst == nil {
		return nil
	}
	return tst.Name
}

// A test operation or assert to perform// Action would contain either an operation or an assertion.// An action should contain either an operation or an assertion but not both.
// It can contain any number of variables.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptTestAction struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsta *TestScriptTestAction) GetExtension() []*fhir.Extension {
	if tsta == nil {
		return nil
	}
	return tsta.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsta *TestScriptTestAction) GetID() string {
	if tsta == nil {
		return ""
	}
	return tsta.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsta *TestScriptTestAction) GetModifierExtension() []*fhir.Extension {
	if tsta == nil {
		return nil
	}
	return tsta.ModifierExtension
}

// Placeholder for evaluated elements// Variable is set based either on element value in response body or on header
// field value in the response headers.// Variables would be set based either on XPath/JSONPath expressions against
// fixtures (static and response), or headerField evaluations against response
// headers. If variable evaluates to nodelist or anything other than a
// primitive value, then test engine would report an error. Variables would be
// used to perform clean replacements in "operation.params",
// "operation.requestHeader.value", and "operation.url" element values during
// operation calls and in "assert.value" during assertion evaluations. This
// limits the places that test engines would need to look for placeholders
// "${}". Variables are scoped to the whole script. They are NOT evaluated at
// declaration. They are evaluated by test engine when used for substitutions
// in "operation.params", "operation.requestHeader.value", and "operation.url"
// element values during operation calls and in "assert.value" during assertion
// evaluations. See example testscript-search.xml.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-TestScript.json
type TestScriptVariable struct {

	// A default, hard-coded, or user-defined value for this variable.
	DefaultValue *fhir.String `fhirpath:"defaultValue"`

	// A free text natural language description of the variable and its purpose.
	Description *fhir.String `fhirpath:"description"`

	// The FHIRPath expression to evaluate against the fixture body. When variables
	// are defined, only one of either expression, headerField or path must be
	// specified.
	Expression *fhir.String `fhirpath:"expression"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Will be used to grab the HTTP header field value from the headers that
	// sourceId is pointing to.
	HeaderField *fhir.String `fhirpath:"headerField"`

	// Displayable text string with hint help information to the user when entering
	// a default value.
	Hint *fhir.String `fhirpath:"hint"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Descriptive name for this variable.
	Name *fhir.String `fhirpath:"name"`

	// XPath or JSONPath to evaluate against the fixture body. When variables are
	// defined, only one of either expression, headerField or path must be
	// specified.
	Path *fhir.String `fhirpath:"path"`

	// Fixture to evaluate the XPath/JSONPath expression or the headerField against
	// within this variable.
	SourceID *fhir.ID `fhirpath:"sourceId"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDefaultValue returns the value of the field DefaultValue.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetDefaultValue() *fhir.String {
	if tsv == nil {
		return nil
	}
	return tsv.DefaultValue
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetDescription() *fhir.String {
	if tsv == nil {
		return nil
	}
	return tsv.Description
}

// GetExpression returns the value of the field Expression.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetExpression() *fhir.String {
	if tsv == nil {
		return nil
	}
	return tsv.Expression
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetExtension() []*fhir.Extension {
	if tsv == nil {
		return nil
	}
	return tsv.Extension
}

// GetHeaderField returns the value of the field HeaderField.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetHeaderField() *fhir.String {
	if tsv == nil {
		return nil
	}
	return tsv.HeaderField
}

// GetHint returns the value of the field Hint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetHint() *fhir.String {
	if tsv == nil {
		return nil
	}
	return tsv.Hint
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetID() string {
	if tsv == nil {
		return ""
	}
	return tsv.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetModifierExtension() []*fhir.Extension {
	if tsv == nil {
		return nil
	}
	return tsv.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetName() *fhir.String {
	if tsv == nil {
		return nil
	}
	return tsv.Name
}

// GetPath returns the value of the field Path.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetPath() *fhir.String {
	if tsv == nil {
		return nil
	}
	return tsv.Path
}

// GetSourceID returns the value of the field SourceID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (tsv *TestScriptVariable) GetSourceID() *fhir.ID {
	if tsv == nil {
		return nil
	}
	return tsv.SourceID
}
