// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package coverageeligibilityrequest

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// The CoverageEligibilityRequest provides patient and insurance coverage
// information to an insurer for them to respond, in the form of an
// CoverageEligibilityResponse, with information regarding whether the stated
// coverage is valid and in-force and optionally to provide the insurance
// details of the policy.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest
//   - Source File: StructureDefinition-CoverageEligibilityRequest.json
type CoverageEligibilityRequest struct {

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date when this resource was created.
	Created *fhir.DateTime `fhirpath:"created"`

	// Person who created the request.
	Enterer *fhir.Reference `fhirpath:"enterer"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Facility where the services are intended to be provided.
	Facility *fhir.Reference `fhirpath:"facility"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier assigned to this coverage eligiblity request.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// Financial instruments for reimbursement for the health care products and
	// services.
	Insurance []*CoverageEligibilityRequestInsurance `fhirpath:"insurance"`

	// The Insurer who issued the coverage in question and is the recipient of the
	// request.
	Insurer *fhir.Reference `fhirpath:"insurer"`

	// Service categories or billable services for which benefit details and/or an
	// authorization prior to service delivery may be required by the payor.
	Item []*CoverageEligibilityRequestItem `fhirpath:"item"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The party who is the beneficiary of the supplied coverage and for whom
	// eligibility is sought.
	Patient *fhir.Reference `fhirpath:"patient"`

	// When the requestor expects the processor to complete processing.
	Priority *fhir.CodeableConcept `fhirpath:"priority"`

	// The provider which is responsible for the request.
	Provider *fhir.Reference `fhirpath:"provider"`

	// Code to specify whether requesting: prior authorization requirements for
	// some service categories or billing codes; benefits for coverages specified
	// or discovered; discovery and return of coverages for the patient; and/or
	// validation that the specified coverage is in-force at the date/period
	// specified or 'now' if not specified.
	Purpose []*fhir.Code `fhirpath:"purpose"`

	// The date or dates when the enclosed suite of services were performed or
	// completed.
	Serviced fhir.Element `fhirpath:"serviced"`

	// The status of the resource instance.
	Status *fhir.Code `fhirpath:"status"`

	// Additional information codes regarding exceptions, special considerations,
	// the condition, situation, prior or concurrent issues.
	SupportingInfo []*CoverageEligibilityRequestSupportingInfo `fhirpath:"supportingInfo"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetContained() []fhir.Resource {
	if cer == nil {
		return nil
	}
	return cer.Contained
}

// GetCreated returns the value of the field Created.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetCreated() *fhir.DateTime {
	if cer == nil {
		return nil
	}
	return cer.Created
}

// GetEnterer returns the value of the field Enterer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetEnterer() *fhir.Reference {
	if cer == nil {
		return nil
	}
	return cer.Enterer
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetExtension() []*fhir.Extension {
	if cer == nil {
		return nil
	}
	return cer.Extension
}

// GetFacility returns the value of the field Facility.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetFacility() *fhir.Reference {
	if cer == nil {
		return nil
	}
	return cer.Facility
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetID() string {
	if cer == nil {
		return ""
	}
	return cer.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetIdentifier() []*fhir.Identifier {
	if cer == nil {
		return nil
	}
	return cer.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetImplicitRules() *fhir.URI {
	if cer == nil {
		return nil
	}
	return cer.ImplicitRules
}

// GetInsurance returns the value of the field Insurance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetInsurance() []*CoverageEligibilityRequestInsurance {
	if cer == nil {
		return nil
	}
	return cer.Insurance
}

// GetInsurer returns the value of the field Insurer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetInsurer() *fhir.Reference {
	if cer == nil {
		return nil
	}
	return cer.Insurer
}

// GetItem returns the value of the field Item.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetItem() []*CoverageEligibilityRequestItem {
	if cer == nil {
		return nil
	}
	return cer.Item
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetLanguage() *fhir.Code {
	if cer == nil {
		return nil
	}
	return cer.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetMeta() *fhir.Meta {
	if cer == nil {
		return nil
	}
	return cer.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetModifierExtension() []*fhir.Extension {
	if cer == nil {
		return nil
	}
	return cer.ModifierExtension
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetPatient() *fhir.Reference {
	if cer == nil {
		return nil
	}
	return cer.Patient
}

// GetPriority returns the value of the field Priority.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetPriority() *fhir.CodeableConcept {
	if cer == nil {
		return nil
	}
	return cer.Priority
}

// GetProvider returns the value of the field Provider.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetProvider() *fhir.Reference {
	if cer == nil {
		return nil
	}
	return cer.Provider
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetPurpose() []*fhir.Code {
	if cer == nil {
		return nil
	}
	return cer.Purpose
}

// GetServiced returns the value of the field Serviced.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetServiced() fhir.Element {
	if cer == nil {
		return nil
	}
	return cer.Serviced
}

// GetServicedDate returns the value of the field Serviced.
func (cer *CoverageEligibilityRequest) GetServicedDate() *fhir.Date {
	if cer == nil {
		return nil
	}
	val, ok := cer.Serviced.(*fhir.Date)
	if !ok {
		return nil
	}
	return val
}

// GetServicedPeriod returns the value of the field Serviced.
func (cer *CoverageEligibilityRequest) GetServicedPeriod() *fhir.Period {
	if cer == nil {
		return nil
	}
	val, ok := cer.Serviced.(*fhir.Period)
	if !ok {
		return nil
	}
	return val
} // GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetStatus() *fhir.Code {
	if cer == nil {
		return nil
	}
	return cer.Status
}

// GetSupportingInfo returns the value of the field SupportingInfo.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetSupportingInfo() []*CoverageEligibilityRequestSupportingInfo {
	if cer == nil {
		return nil
	}
	return cer.SupportingInfo
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cer *CoverageEligibilityRequest) GetText() *fhir.Narrative {
	if cer == nil {
		return nil
	}
	return cer.Text
}

// Patient insurance information// Financial instruments for reimbursement for the health care products and
// services.// All insurance coverages for the patient which may be applicable for
// reimbursement, of the products and services listed in the claim, are
// typically provided in the claim to allow insurers to confirm the ordering of
// the insurance coverages relative to local 'coordination of benefit' rules.
// One coverage (and only one) with 'focal=true' is to be used in the
// adjudication of this claim. Coverages appearing before the focal Coverage in
// the list, and where 'subrogation=false', should provide a reference to the
// ClaimResponse containing the adjudication results of the prior claim.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CoverageEligibilityRequest.json
type CoverageEligibilityRequestInsurance struct {

	// A business agreement number established between the provider and the insurer
	// for special business processing purposes.
	BusinessArrangement *fhir.String `fhirpath:"businessArrangement"`

	// Reference to the insurance card level information contained in the Coverage
	// resource. The coverage issuing insurer will use these details to locate the
	// patient's actual coverage within the insurer's information system.
	Coverage *fhir.Reference `fhirpath:"coverage"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A flag to indicate that this Coverage is to be used for evaluation of this
	// request when set to true.
	Focal *fhir.Boolean `fhirpath:"focal"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetBusinessArrangement returns the value of the field BusinessArrangement.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestInsurance) GetBusinessArrangement() *fhir.String {
	if ceri == nil {
		return nil
	}
	return ceri.BusinessArrangement
}

// GetCoverage returns the value of the field Coverage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestInsurance) GetCoverage() *fhir.Reference {
	if ceri == nil {
		return nil
	}
	return ceri.Coverage
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestInsurance) GetExtension() []*fhir.Extension {
	if ceri == nil {
		return nil
	}
	return ceri.Extension
}

// GetFocal returns the value of the field Focal.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestInsurance) GetFocal() *fhir.Boolean {
	if ceri == nil {
		return nil
	}
	return ceri.Focal
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestInsurance) GetID() string {
	if ceri == nil {
		return ""
	}
	return ceri.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestInsurance) GetModifierExtension() []*fhir.Extension {
	if ceri == nil {
		return nil
	}
	return ceri.ModifierExtension
}

// Item to be evaluated for eligibiity// Service categories or billable services for which benefit details and/or an
// authorization prior to service delivery may be required by the payor.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CoverageEligibilityRequest.json
type CoverageEligibilityRequestItem struct {

	// Code to identify the general type of benefits under which products and
	// services are provided.
	Category *fhir.CodeableConcept `fhirpath:"category"`

	// The plan/proposal/order describing the proposed service in detail.
	Detail []*fhir.Reference `fhirpath:"detail"`

	// Patient diagnosis for which care is sought.
	Diagnosis []*CoverageEligibilityRequestItemDiagnosis `fhirpath:"diagnosis"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Facility where the services will be provided.
	Facility *fhir.Reference `fhirpath:"facility"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Item typification or modifiers codes to convey additional context for the
	// product or service.
	Modifier []*fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// This contains the product, service, drug or other billing code for the item.
	ProductOrService *fhir.CodeableConcept `fhirpath:"productOrService"`

	// The practitioner who is responsible for the product or service to be
	// rendered to the patient.
	Provider *fhir.Reference `fhirpath:"provider"`

	// The number of repetitions of a service or product.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// Exceptions, special conditions and supporting information applicable for
	// this service or product line.
	SupportingInfoSequence []*fhir.PositiveInt `fhirpath:"supportingInfoSequence"`

	// The amount charged to the patient by the provider for a single unit.
	UnitPrice *fhir.Money `fhirpath:"unitPrice"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetCategory() *fhir.CodeableConcept {
	if ceri == nil {
		return nil
	}
	return ceri.Category
}

// GetDetail returns the value of the field Detail.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetDetail() []*fhir.Reference {
	if ceri == nil {
		return nil
	}
	return ceri.Detail
}

// GetDiagnosis returns the value of the field Diagnosis.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetDiagnosis() []*CoverageEligibilityRequestItemDiagnosis {
	if ceri == nil {
		return nil
	}
	return ceri.Diagnosis
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetExtension() []*fhir.Extension {
	if ceri == nil {
		return nil
	}
	return ceri.Extension
}

// GetFacility returns the value of the field Facility.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetFacility() *fhir.Reference {
	if ceri == nil {
		return nil
	}
	return ceri.Facility
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetID() string {
	if ceri == nil {
		return ""
	}
	return ceri.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetModifier() []*fhir.CodeableConcept {
	if ceri == nil {
		return nil
	}
	return ceri.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetModifierExtension() []*fhir.Extension {
	if ceri == nil {
		return nil
	}
	return ceri.ModifierExtension
}

// GetProductOrService returns the value of the field ProductOrService.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetProductOrService() *fhir.CodeableConcept {
	if ceri == nil {
		return nil
	}
	return ceri.ProductOrService
}

// GetProvider returns the value of the field Provider.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetProvider() *fhir.Reference {
	if ceri == nil {
		return nil
	}
	return ceri.Provider
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetQuantity() *fhir.Quantity {
	if ceri == nil {
		return nil
	}
	return ceri.Quantity
}

// GetSupportingInfoSequence returns the value of the field SupportingInfoSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetSupportingInfoSequence() []*fhir.PositiveInt {
	if ceri == nil {
		return nil
	}
	return ceri.SupportingInfoSequence
}

// GetUnitPrice returns the value of the field UnitPrice.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ceri *CoverageEligibilityRequestItem) GetUnitPrice() *fhir.Money {
	if ceri == nil {
		return nil
	}
	return ceri.UnitPrice
}

// Applicable diagnosis// Patient diagnosis for which care is sought.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CoverageEligibilityRequest.json
type CoverageEligibilityRequestItemDiagnosis struct {

	// The nature of illness or problem in a coded form or as a reference to an
	// external defined Condition.
	Diagnosis fhir.Element `fhirpath:"diagnosis"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDiagnosis returns the value of the field Diagnosis.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cerid *CoverageEligibilityRequestItemDiagnosis) GetDiagnosis() fhir.Element {
	if cerid == nil {
		return nil
	}
	return cerid.Diagnosis
}

// GetDiagnosisCodeableConcept returns the value of the field Diagnosis.
func (cerid *CoverageEligibilityRequestItemDiagnosis) GetDiagnosisCodeableConcept() *fhir.CodeableConcept {
	if cerid == nil {
		return nil
	}
	val, ok := cerid.Diagnosis.(*fhir.CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetDiagnosisReference returns the value of the field Diagnosis.
func (cerid *CoverageEligibilityRequestItemDiagnosis) GetDiagnosisReference() *fhir.Reference {
	if cerid == nil {
		return nil
	}
	val, ok := cerid.Diagnosis.(*fhir.Reference)
	if !ok {
		return nil
	}
	return val
} // GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cerid *CoverageEligibilityRequestItemDiagnosis) GetExtension() []*fhir.Extension {
	if cerid == nil {
		return nil
	}
	return cerid.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cerid *CoverageEligibilityRequestItemDiagnosis) GetID() string {
	if cerid == nil {
		return ""
	}
	return cerid.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cerid *CoverageEligibilityRequestItemDiagnosis) GetModifierExtension() []*fhir.Extension {
	if cerid == nil {
		return nil
	}
	return cerid.ModifierExtension
}

// Supporting information// Additional information codes regarding exceptions, special considerations,
// the condition, situation, prior or concurrent issues.// Often there are multiple jurisdiction specific valuesets which are required.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CoverageEligibilityRequest.json
type CoverageEligibilityRequestSupportingInfo struct {

	// The supporting materials are applicable for all detail items, product/servce
	// categories and specific billing codes.
	AppliesToAll *fhir.Boolean `fhirpath:"appliesToAll"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Additional data or information such as resources, documents, images etc.
	// including references to the data or the actual inclusion of the data.
	Information *fhir.Reference `fhirpath:"information"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A number to uniquely identify supporting information entries.
	Sequence *fhir.PositiveInt `fhirpath:"sequence"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAppliesToAll returns the value of the field AppliesToAll.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cersi *CoverageEligibilityRequestSupportingInfo) GetAppliesToAll() *fhir.Boolean {
	if cersi == nil {
		return nil
	}
	return cersi.AppliesToAll
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cersi *CoverageEligibilityRequestSupportingInfo) GetExtension() []*fhir.Extension {
	if cersi == nil {
		return nil
	}
	return cersi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cersi *CoverageEligibilityRequestSupportingInfo) GetID() string {
	if cersi == nil {
		return ""
	}
	return cersi.ID
}

// GetInformation returns the value of the field Information.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cersi *CoverageEligibilityRequestSupportingInfo) GetInformation() *fhir.Reference {
	if cersi == nil {
		return nil
	}
	return cersi.Information
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cersi *CoverageEligibilityRequestSupportingInfo) GetModifierExtension() []*fhir.Extension {
	if cersi == nil {
		return nil
	}
	return cersi.ModifierExtension
}

// GetSequence returns the value of the field Sequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cersi *CoverageEligibilityRequestSupportingInfo) GetSequence() *fhir.PositiveInt {
	if cersi == nil {
		return nil
	}
	return cersi.Sequence
}

func (cer *CoverageEligibilityRequest) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cer *CoverageEligibilityRequest) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contained []fhir.Resource   `json:"contained"`
		Created   *fhir.DateTime    `json:"created"`
		Enterer   *fhir.Reference   `json:"enterer"`
		Extension []*fhir.Extension `json:"extension"`
		Facility  *fhir.Reference   `json:"facility"`

		ID                string                                      `json:"id"`
		Identifier        []*fhir.Identifier                          `json:"identifier"`
		ImplicitRules     *fhir.URI                                   `json:"implicitRules"`
		Insurance         []*CoverageEligibilityRequestInsurance      `json:"insurance"`
		Insurer           *fhir.Reference                             `json:"insurer"`
		Item              []*CoverageEligibilityRequestItem           `json:"item"`
		Language          *fhir.Code                                  `json:"language"`
		Meta              *fhir.Meta                                  `json:"meta"`
		ModifierExtension []*fhir.Extension                           `json:"modifierExtension"`
		Patient           *fhir.Reference                             `json:"patient"`
		Priority          *fhir.CodeableConcept                       `json:"priority"`
		Provider          *fhir.Reference                             `json:"provider"`
		Purpose           []*fhir.Code                                `json:"purpose"`
		ServicedDate      *fhir.Date                                  `json:"servicedDate"`
		ServicedPeriod    *fhir.Period                                `json:"servicedPeriod"`
		Status            *fhir.Code                                  `json:"status"`
		SupportingInfo    []*CoverageEligibilityRequestSupportingInfo `json:"supportingInfo"`
		Text              *fhir.Narrative                             `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cer.Contained = raw.Contained
	cer.Created = raw.Created
	cer.Enterer = raw.Enterer
	cer.Extension = raw.Extension
	cer.Facility = raw.Facility
	cer.ID = raw.ID
	cer.Identifier = raw.Identifier
	cer.ImplicitRules = raw.ImplicitRules
	cer.Insurance = raw.Insurance
	cer.Insurer = raw.Insurer
	cer.Item = raw.Item
	cer.Language = raw.Language
	cer.Meta = raw.Meta
	cer.ModifierExtension = raw.ModifierExtension
	cer.Patient = raw.Patient
	cer.Priority = raw.Priority
	cer.Provider = raw.Provider
	cer.Purpose = raw.Purpose
	cer.Serviced, err = validate.SelectOneOf[fhir.Element]("CoverageEligibilityRequest.serviced",
		raw.ServicedDate,
		raw.ServicedPeriod)
	if err != nil {
		return err
	}
	cer.Status = raw.Status
	cer.SupportingInfo = raw.SupportingInfo
	cer.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*CoverageEligibilityRequest)(nil)
var _ json.Unmarshaler = (*CoverageEligibilityRequest)(nil)

func (ceri *CoverageEligibilityRequestInsurance) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ceri *CoverageEligibilityRequestInsurance) UnmarshalJSON(data []byte) error {
	var raw struct {
		BusinessArrangement *fhir.String      `json:"businessArrangement"`
		Coverage            *fhir.Reference   `json:"coverage"`
		Extension           []*fhir.Extension `json:"extension"`
		Focal               *fhir.Boolean     `json:"focal"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ceri.BusinessArrangement = raw.BusinessArrangement
	ceri.Coverage = raw.Coverage
	ceri.Extension = raw.Extension
	ceri.Focal = raw.Focal
	ceri.ID = raw.ID
	ceri.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*CoverageEligibilityRequestInsurance)(nil)
var _ json.Unmarshaler = (*CoverageEligibilityRequestInsurance)(nil)

func (ceri *CoverageEligibilityRequestItem) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ceri *CoverageEligibilityRequestItem) UnmarshalJSON(data []byte) error {
	var raw struct {
		Category  *fhir.CodeableConcept                      `json:"category"`
		Detail    []*fhir.Reference                          `json:"detail"`
		Diagnosis []*CoverageEligibilityRequestItemDiagnosis `json:"diagnosis"`
		Extension []*fhir.Extension                          `json:"extension"`
		Facility  *fhir.Reference                            `json:"facility"`

		ID                     string                  `json:"id"`
		Modifier               []*fhir.CodeableConcept `json:"modifier"`
		ModifierExtension      []*fhir.Extension       `json:"modifierExtension"`
		ProductOrService       *fhir.CodeableConcept   `json:"productOrService"`
		Provider               *fhir.Reference         `json:"provider"`
		Quantity               *fhir.Quantity          `json:"quantity"`
		SupportingInfoSequence []*fhir.PositiveInt     `json:"supportingInfoSequence"`
		UnitPrice              *fhir.Money             `json:"unitPrice"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ceri.Category = raw.Category
	ceri.Detail = raw.Detail
	ceri.Diagnosis = raw.Diagnosis
	ceri.Extension = raw.Extension
	ceri.Facility = raw.Facility
	ceri.ID = raw.ID
	ceri.Modifier = raw.Modifier
	ceri.ModifierExtension = raw.ModifierExtension
	ceri.ProductOrService = raw.ProductOrService
	ceri.Provider = raw.Provider
	ceri.Quantity = raw.Quantity
	ceri.SupportingInfoSequence = raw.SupportingInfoSequence
	ceri.UnitPrice = raw.UnitPrice
	return nil
}

var _ json.Marshaler = (*CoverageEligibilityRequestItem)(nil)
var _ json.Unmarshaler = (*CoverageEligibilityRequestItem)(nil)

func (cerid *CoverageEligibilityRequestItemDiagnosis) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cerid *CoverageEligibilityRequestItemDiagnosis) UnmarshalJSON(data []byte) error {
	var raw struct {
		DiagnosisCodeableConcept *fhir.CodeableConcept `json:"diagnosisCodeableConcept"`
		DiagnosisReference       *fhir.Reference       `json:"diagnosisReference"`
		Extension                []*fhir.Extension     `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cerid.Diagnosis, err = validate.SelectOneOf[fhir.Element]("CoverageEligibilityRequest.item.diagnosis.diagnosis",
		raw.DiagnosisCodeableConcept,
		raw.DiagnosisReference)
	if err != nil {
		return err
	}
	cerid.Extension = raw.Extension
	cerid.ID = raw.ID
	cerid.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*CoverageEligibilityRequestItemDiagnosis)(nil)
var _ json.Unmarshaler = (*CoverageEligibilityRequestItemDiagnosis)(nil)

func (cersi *CoverageEligibilityRequestSupportingInfo) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cersi *CoverageEligibilityRequestSupportingInfo) UnmarshalJSON(data []byte) error {
	var raw struct {
		AppliesToAll *fhir.Boolean     `json:"appliesToAll"`
		Extension    []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Information       *fhir.Reference   `json:"information"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Sequence          *fhir.PositiveInt `json:"sequence"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cersi.AppliesToAll = raw.AppliesToAll
	cersi.Extension = raw.Extension
	cersi.ID = raw.ID
	cersi.Information = raw.Information
	cersi.ModifierExtension = raw.ModifierExtension
	cersi.Sequence = raw.Sequence
	return nil
}

var _ json.Marshaler = (*CoverageEligibilityRequestSupportingInfo)(nil)
var _ json.Unmarshaler = (*CoverageEligibilityRequestSupportingInfo)(nil)
