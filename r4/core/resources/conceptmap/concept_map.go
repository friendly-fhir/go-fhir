// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package conceptmap

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A statement of relationships from one set of concepts to one or more other
// concepts - either concepts in code systems, or data element/data element
// concepts, or classes in class models.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ConceptMap
//   - Source File: StructureDefinition-ConceptMap.json
type ConceptMap struct {

	// Contact details to assist a user in finding and communicating with the
	// publisher.
	Contact []*fhir.ContactDetail `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// A copyright statement relating to the concept map and/or its contents.
	// Copyright statements are generally legal restrictions on the use and
	// publishing of the concept map.
	Copyright *fhir.Markdown `fhirpath:"copyright"`

	// The date (and optionally time) when the concept map was published. The date
	// must change when the business version changes and it must change if the
	// status code changes. In addition, it should change when the substantive
	// content of the concept map changes.
	Date *fhir.DateTime `fhirpath:"date"`

	// A free text natural language description of the concept map from a
	// consumer's perspective.
	Description *fhir.Markdown `fhirpath:"description"`

	// A Boolean value to indicate that this concept map is authored for testing
	// purposes (or education/evaluation/marketing) and is not intended to be used
	// for genuine usage.
	Experimental *fhir.Boolean `fhirpath:"experimental"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// A group of mappings that all have the same source and target system.
	Group []*ConceptMapGroup `fhirpath:"group"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A formal identifier that is used to identify this concept map when it is
	// represented in other formats, or referenced in a specification, model,
	// design or an instance.
	Identifier *fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// A legal or geographic region in which the concept map is intended to be
	// used.
	Jurisdiction []*fhir.CodeableConcept `fhirpath:"jurisdiction"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A natural language name identifying the concept map. This name should be
	// usable as an identifier for the module by machine processing applications
	// such as code generation.
	Name *fhir.String `fhirpath:"name"`

	// The name of the organization or individual that published the concept map.
	Publisher *fhir.String `fhirpath:"publisher"`

	// Explanation of why this concept map is needed and why it has been designed
	// as it has.
	Purpose *fhir.Markdown `fhirpath:"purpose"`

	// Identifier for the source value set that contains the concepts that are
	// being mapped and provides context for the mappings.
	Source fhir.Element `fhirpath:"source"`

	// The status of this concept map. Enables tracking the life-cycle of the
	// content.
	Status *fhir.Code `fhirpath:"status"`

	// The target value set provides context for the mappings. Note that the
	// mapping is made between concepts, not between value sets, but the value set
	// provides important context about how the concept mapping choices are made.
	Target fhir.Element `fhirpath:"target"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// A short, descriptive, user-friendly title for the concept map.
	Title *fhir.String `fhirpath:"title"`

	// An absolute URI that is used to identify this concept map when it is
	// referenced in a specification, model, design or an instance; also called its
	// canonical identifier. This SHOULD be globally unique and SHOULD be a literal
	// address at which at which an authoritative instance of this concept map is
	// (or will be) published. This URL can be the target of a canonical reference.
	// It SHALL remain the same when the concept map is stored on different
	// servers.
	URL *fhir.URI `fhirpath:"url"`

	// The content was developed with a focus and intent of supporting the contexts
	// that are listed. These contexts may be general categories (gender, age, ...)
	// or may be references to specific programs (insurance plans, studies, ...)
	// and may be used to assist with indexing and searching for appropriate
	// concept map instances.
	UseContext []*fhir.UsageContext `fhirpath:"useContext"`

	// The identifier that is used to identify this version of the concept map when
	// it is referenced in a specification, model, design or instance. This is an
	// arbitrary value managed by the concept map author and is not expected to be
	// globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
	// managed version is not available. There is also no expectation that versions
	// can be placed in a lexicographical sequence.
	Version *fhir.String `fhirpath:"version"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetContact() []*fhir.ContactDetail {
	if cm == nil {
		return nil
	}
	return cm.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetContained() []fhir.Resource {
	if cm == nil {
		return nil
	}
	return cm.Contained
}

// GetCopyright returns the value of the field Copyright.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetCopyright() *fhir.Markdown {
	if cm == nil {
		return nil
	}
	return cm.Copyright
}

// GetDate returns the value of the field Date.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetDate() *fhir.DateTime {
	if cm == nil {
		return nil
	}
	return cm.Date
}

// GetDescription returns the value of the field Description.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetDescription() *fhir.Markdown {
	if cm == nil {
		return nil
	}
	return cm.Description
}

// GetExperimental returns the value of the field Experimental.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetExperimental() *fhir.Boolean {
	if cm == nil {
		return nil
	}
	return cm.Experimental
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetExtension() []*fhir.Extension {
	if cm == nil {
		return nil
	}
	return cm.Extension
}

// GetGroup returns the value of the field Group.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetGroup() []*ConceptMapGroup {
	if cm == nil {
		return nil
	}
	return cm.Group
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetID() string {
	if cm == nil {
		return ""
	}
	return cm.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetIdentifier() *fhir.Identifier {
	if cm == nil {
		return nil
	}
	return cm.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetImplicitRules() *fhir.URI {
	if cm == nil {
		return nil
	}
	return cm.ImplicitRules
}

// GetJurisdiction returns the value of the field Jurisdiction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetJurisdiction() []*fhir.CodeableConcept {
	if cm == nil {
		return nil
	}
	return cm.Jurisdiction
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetLanguage() *fhir.Code {
	if cm == nil {
		return nil
	}
	return cm.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetMeta() *fhir.Meta {
	if cm == nil {
		return nil
	}
	return cm.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetModifierExtension() []*fhir.Extension {
	if cm == nil {
		return nil
	}
	return cm.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetName() *fhir.String {
	if cm == nil {
		return nil
	}
	return cm.Name
}

// GetPublisher returns the value of the field Publisher.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetPublisher() *fhir.String {
	if cm == nil {
		return nil
	}
	return cm.Publisher
}

// GetPurpose returns the value of the field Purpose.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetPurpose() *fhir.Markdown {
	if cm == nil {
		return nil
	}
	return cm.Purpose
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetSource() fhir.Element {
	if cm == nil {
		return nil
	}
	return cm.Source
}

// GetSourceURI returns the value of the field Source.
func (cm *ConceptMap) GetSourceURI() *fhir.URI {
	if cm == nil {
		return nil
	}
	val, ok := cm.Source.(*fhir.URI)
	if !ok {
		return nil
	}
	return val
}

// GetSourceCanonical returns the value of the field Source.
func (cm *ConceptMap) GetSourceCanonical() *fhir.Canonical {
	if cm == nil {
		return nil
	}
	val, ok := cm.Source.(*fhir.Canonical)
	if !ok {
		return nil
	}
	return val
} // GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetStatus() *fhir.Code {
	if cm == nil {
		return nil
	}
	return cm.Status
}

// GetTarget returns the value of the field Target.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetTarget() fhir.Element {
	if cm == nil {
		return nil
	}
	return cm.Target
}

// GetTargetURI returns the value of the field Target.
func (cm *ConceptMap) GetTargetURI() *fhir.URI {
	if cm == nil {
		return nil
	}
	val, ok := cm.Target.(*fhir.URI)
	if !ok {
		return nil
	}
	return val
}

// GetTargetCanonical returns the value of the field Target.
func (cm *ConceptMap) GetTargetCanonical() *fhir.Canonical {
	if cm == nil {
		return nil
	}
	val, ok := cm.Target.(*fhir.Canonical)
	if !ok {
		return nil
	}
	return val
} // GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetText() *fhir.Narrative {
	if cm == nil {
		return nil
	}
	return cm.Text
}

// GetTitle returns the value of the field Title.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetTitle() *fhir.String {
	if cm == nil {
		return nil
	}
	return cm.Title
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetURL() *fhir.URI {
	if cm == nil {
		return nil
	}
	return cm.URL
}

// GetUseContext returns the value of the field UseContext.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetUseContext() []*fhir.UsageContext {
	if cm == nil {
		return nil
	}
	return cm.UseContext
}

// GetVersion returns the value of the field Version.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cm *ConceptMap) GetVersion() *fhir.String {
	if cm == nil {
		return nil
	}
	return cm.Version
}

// Same source and target systems// A group of mappings that all have the same source and target system.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ConceptMap.json
type ConceptMapGroup struct {

	// Mappings for an individual concept in the source to one or more concepts in
	// the target.
	Element []*ConceptMapGroupElement `fhirpath:"element"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// An absolute URI that identifies the source system where the concepts to be
	// mapped are defined.
	Source *fhir.URI `fhirpath:"source"`

	// The specific version of the code system, as determined by the code system
	// authority.
	SourceVersion *fhir.String `fhirpath:"sourceVersion"`

	// An absolute URI that identifies the target system that the concepts will be
	// mapped to.
	Target *fhir.URI `fhirpath:"target"`

	// The specific version of the code system, as determined by the code system
	// authority.
	TargetVersion *fhir.String `fhirpath:"targetVersion"`

	// What to do when there is no mapping for the source concept. "Unmapped" does
	// not include codes that are unmatched, and the unmapped element is ignored in
	// a code is specified to have equivalence = unmatched.
	Unmapped *ConceptMapGroupUnmapped `fhirpath:"unmapped"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetElement returns the value of the field Element.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmg *ConceptMapGroup) GetElement() []*ConceptMapGroupElement {
	if cmg == nil {
		return nil
	}
	return cmg.Element
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmg *ConceptMapGroup) GetExtension() []*fhir.Extension {
	if cmg == nil {
		return nil
	}
	return cmg.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmg *ConceptMapGroup) GetID() string {
	if cmg == nil {
		return ""
	}
	return cmg.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmg *ConceptMapGroup) GetModifierExtension() []*fhir.Extension {
	if cmg == nil {
		return nil
	}
	return cmg.ModifierExtension
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmg *ConceptMapGroup) GetSource() *fhir.URI {
	if cmg == nil {
		return nil
	}
	return cmg.Source
}

// GetSourceVersion returns the value of the field SourceVersion.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmg *ConceptMapGroup) GetSourceVersion() *fhir.String {
	if cmg == nil {
		return nil
	}
	return cmg.SourceVersion
}

// GetTarget returns the value of the field Target.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmg *ConceptMapGroup) GetTarget() *fhir.URI {
	if cmg == nil {
		return nil
	}
	return cmg.Target
}

// GetTargetVersion returns the value of the field TargetVersion.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmg *ConceptMapGroup) GetTargetVersion() *fhir.String {
	if cmg == nil {
		return nil
	}
	return cmg.TargetVersion
}

// GetUnmapped returns the value of the field Unmapped.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmg *ConceptMapGroup) GetUnmapped() *ConceptMapGroupUnmapped {
	if cmg == nil {
		return nil
	}
	return cmg.Unmapped
}

// Mappings for a concept from the source set// Mappings for an individual concept in the source to one or more concepts in
// the target.// Generally, the ideal is that there would only be one mapping for each
// concept in the source value set, but a given concept may be mapped multiple
// times with different comments or dependencies.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ConceptMap.json
type ConceptMapGroupElement struct {

	// Identity (code or path) or the element/item being mapped.
	Code *fhir.Code `fhirpath:"code"`

	// The display for the code. The display is only provided to help editors when
	// editing the concept map.
	Display *fhir.String `fhirpath:"display"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A concept from the target value set that this concept maps to.
	Target []*ConceptMapGroupElementTarget `fhirpath:"target"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmge *ConceptMapGroupElement) GetCode() *fhir.Code {
	if cmge == nil {
		return nil
	}
	return cmge.Code
}

// GetDisplay returns the value of the field Display.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmge *ConceptMapGroupElement) GetDisplay() *fhir.String {
	if cmge == nil {
		return nil
	}
	return cmge.Display
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmge *ConceptMapGroupElement) GetExtension() []*fhir.Extension {
	if cmge == nil {
		return nil
	}
	return cmge.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmge *ConceptMapGroupElement) GetID() string {
	if cmge == nil {
		return ""
	}
	return cmge.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmge *ConceptMapGroupElement) GetModifierExtension() []*fhir.Extension {
	if cmge == nil {
		return nil
	}
	return cmge.ModifierExtension
}

// GetTarget returns the value of the field Target.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmge *ConceptMapGroupElement) GetTarget() []*ConceptMapGroupElementTarget {
	if cmge == nil {
		return nil
	}
	return cmge.Target
}

// Concept in target system for element// A concept from the target value set that this concept maps to.// Ideally there would only be one map, with equal or equivalent mapping. But
// multiple maps are allowed for several narrower options, or to assert that
// other concepts are unmatched.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ConceptMap.json
type ConceptMapGroupElementTarget struct {

	// Identity (code or path) or the element/item that the map refers to.
	Code *fhir.Code `fhirpath:"code"`

	// A description of status/issues in mapping that conveys additional
	// information not represented in the structured data.
	Comment *fhir.String `fhirpath:"comment"`

	// A set of additional dependencies for this mapping to hold. This mapping is
	// only applicable if the specified element can be resolved, and it has the
	// specified value.
	DependsOn []*ConceptMapGroupElementTargetDependsOn `fhirpath:"dependsOn"`

	// The display for the code. The display is only provided to help editors when
	// editing the concept map.
	Display *fhir.String `fhirpath:"display"`

	// The equivalence between the source and target concepts (counting for the
	// dependencies and products). The equivalence is read from target to source
	// (e.g. the target is 'wider' than the source).
	Equivalence *fhir.Code `fhirpath:"equivalence"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmget *ConceptMapGroupElementTarget) GetCode() *fhir.Code {
	if cmget == nil {
		return nil
	}
	return cmget.Code
}

// GetComment returns the value of the field Comment.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmget *ConceptMapGroupElementTarget) GetComment() *fhir.String {
	if cmget == nil {
		return nil
	}
	return cmget.Comment
}

// GetDependsOn returns the value of the field DependsOn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmget *ConceptMapGroupElementTarget) GetDependsOn() []*ConceptMapGroupElementTargetDependsOn {
	if cmget == nil {
		return nil
	}
	return cmget.DependsOn
}

// GetDisplay returns the value of the field Display.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmget *ConceptMapGroupElementTarget) GetDisplay() *fhir.String {
	if cmget == nil {
		return nil
	}
	return cmget.Display
}

// GetEquivalence returns the value of the field Equivalence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmget *ConceptMapGroupElementTarget) GetEquivalence() *fhir.Code {
	if cmget == nil {
		return nil
	}
	return cmget.Equivalence
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmget *ConceptMapGroupElementTarget) GetExtension() []*fhir.Extension {
	if cmget == nil {
		return nil
	}
	return cmget.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmget *ConceptMapGroupElementTarget) GetID() string {
	if cmget == nil {
		return ""
	}
	return cmget.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmget *ConceptMapGroupElementTarget) GetModifierExtension() []*fhir.Extension {
	if cmget == nil {
		return nil
	}
	return cmget.ModifierExtension
}

// Other elements required for this mapping (from context)// A set of additional dependencies for this mapping to hold. This mapping is
// only applicable if the specified element can be resolved, and it has the
// specified value.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ConceptMap.json
type ConceptMapGroupElementTargetDependsOn struct {

	// The display for the code. The display is only provided to help editors when
	// editing the concept map.
	Display *fhir.String `fhirpath:"display"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A reference to an element that holds a coded value that corresponds to a
	// code system property. The idea is that the information model carries an
	// element somewhere that is labeled to correspond with a code system property.
	Property *fhir.URI `fhirpath:"property"`

	// An absolute URI that identifies the code system of the dependency code (if
	// the source/dependency is a value set that crosses code systems).
	System *fhir.Canonical `fhirpath:"system"`

	// Identity (code or path) or the element/item/ValueSet/text that the map
	// depends on / refers to.
	Value *fhir.String `fhirpath:"value"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDisplay returns the value of the field Display.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgetdo *ConceptMapGroupElementTargetDependsOn) GetDisplay() *fhir.String {
	if cmgetdo == nil {
		return nil
	}
	return cmgetdo.Display
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgetdo *ConceptMapGroupElementTargetDependsOn) GetExtension() []*fhir.Extension {
	if cmgetdo == nil {
		return nil
	}
	return cmgetdo.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgetdo *ConceptMapGroupElementTargetDependsOn) GetID() string {
	if cmgetdo == nil {
		return ""
	}
	return cmgetdo.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgetdo *ConceptMapGroupElementTargetDependsOn) GetModifierExtension() []*fhir.Extension {
	if cmgetdo == nil {
		return nil
	}
	return cmgetdo.ModifierExtension
}

// GetProperty returns the value of the field Property.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgetdo *ConceptMapGroupElementTargetDependsOn) GetProperty() *fhir.URI {
	if cmgetdo == nil {
		return nil
	}
	return cmgetdo.Property
}

// GetSystem returns the value of the field System.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgetdo *ConceptMapGroupElementTargetDependsOn) GetSystem() *fhir.Canonical {
	if cmgetdo == nil {
		return nil
	}
	return cmgetdo.System
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgetdo *ConceptMapGroupElementTargetDependsOn) GetValue() *fhir.String {
	if cmgetdo == nil {
		return nil
	}
	return cmgetdo.Value
}

// What to do when there is no mapping for the source concept// What to do when there is no mapping for the source concept. "Unmapped" does
// not include codes that are unmatched, and the unmapped element is ignored in
// a code is specified to have equivalence = unmatched.// This only applies if the source code has a system value that matches the
// system defined for the group.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-ConceptMap.json
type ConceptMapGroupUnmapped struct {

	// The fixed code to use when the mode = 'fixed' - all unmapped codes are
	// mapped to a single fixed code.
	Code *fhir.Code `fhirpath:"code"`

	// The display for the code. The display is only provided to help editors when
	// editing the concept map.
	Display *fhir.String `fhirpath:"display"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Defines which action to take if there is no match for the source concept in
	// the target system designated for the group. One of 3 actions are possible:
	// use the unmapped code (this is useful when doing a mapping between versions,
	// and only a few codes have changed), use a fixed code (a default code), or
	// alternatively, a reference to a different concept map can be provided (by
	// canonical URL).
	Mode *fhir.Code `fhirpath:"mode"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The canonical reference to an additional ConceptMap resource instance to use
	// for mapping if this ConceptMap resource contains no matching mapping for the
	// source concept.
	URL *fhir.Canonical `fhirpath:"url"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgu *ConceptMapGroupUnmapped) GetCode() *fhir.Code {
	if cmgu == nil {
		return nil
	}
	return cmgu.Code
}

// GetDisplay returns the value of the field Display.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgu *ConceptMapGroupUnmapped) GetDisplay() *fhir.String {
	if cmgu == nil {
		return nil
	}
	return cmgu.Display
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgu *ConceptMapGroupUnmapped) GetExtension() []*fhir.Extension {
	if cmgu == nil {
		return nil
	}
	return cmgu.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgu *ConceptMapGroupUnmapped) GetID() string {
	if cmgu == nil {
		return ""
	}
	return cmgu.ID
}

// GetMode returns the value of the field Mode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgu *ConceptMapGroupUnmapped) GetMode() *fhir.Code {
	if cmgu == nil {
		return nil
	}
	return cmgu.Mode
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgu *ConceptMapGroupUnmapped) GetModifierExtension() []*fhir.Extension {
	if cmgu == nil {
		return nil
	}
	return cmgu.ModifierExtension
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cmgu *ConceptMapGroupUnmapped) GetURL() *fhir.Canonical {
	if cmgu == nil {
		return nil
	}
	return cmgu.URL
}

func (cm *ConceptMap) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cm *ConceptMap) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contact      []*fhir.ContactDetail `json:"contact"`
		Contained    []fhir.Resource       `json:"contained"`
		Copyright    *fhir.Markdown        `json:"copyright"`
		Date         *fhir.DateTime        `json:"date"`
		Description  *fhir.Markdown        `json:"description"`
		Experimental *fhir.Boolean         `json:"experimental"`
		Extension    []*fhir.Extension     `json:"extension"`
		Group        []*ConceptMapGroup    `json:"group"`

		ID                string                  `json:"id"`
		Identifier        *fhir.Identifier        `json:"identifier"`
		ImplicitRules     *fhir.URI               `json:"implicitRules"`
		Jurisdiction      []*fhir.CodeableConcept `json:"jurisdiction"`
		Language          *fhir.Code              `json:"language"`
		Meta              *fhir.Meta              `json:"meta"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		Name              *fhir.String            `json:"name"`
		Publisher         *fhir.String            `json:"publisher"`
		Purpose           *fhir.Markdown          `json:"purpose"`
		SourceURI         *fhir.URI               `json:"sourceURI"`
		SourceCanonical   *fhir.Canonical         `json:"sourceCanonical"`
		Status            *fhir.Code              `json:"status"`
		TargetURI         *fhir.URI               `json:"targetURI"`
		TargetCanonical   *fhir.Canonical         `json:"targetCanonical"`
		Text              *fhir.Narrative         `json:"text"`
		Title             *fhir.String            `json:"title"`
		URL               *fhir.URI               `json:"url"`
		UseContext        []*fhir.UsageContext    `json:"useContext"`
		Version           *fhir.String            `json:"version"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cm.Contact = raw.Contact
	cm.Contained = raw.Contained
	cm.Copyright = raw.Copyright
	cm.Date = raw.Date
	cm.Description = raw.Description
	cm.Experimental = raw.Experimental
	cm.Extension = raw.Extension
	cm.Group = raw.Group
	cm.ID = raw.ID
	cm.Identifier = raw.Identifier
	cm.ImplicitRules = raw.ImplicitRules
	cm.Jurisdiction = raw.Jurisdiction
	cm.Language = raw.Language
	cm.Meta = raw.Meta
	cm.ModifierExtension = raw.ModifierExtension
	cm.Name = raw.Name
	cm.Publisher = raw.Publisher
	cm.Purpose = raw.Purpose
	cm.Source, err = validate.SelectOneOf[fhir.Element]("ConceptMap.source",
		raw.SourceURI,
		raw.SourceCanonical)
	if err != nil {
		return err
	}
	cm.Status = raw.Status
	cm.Target, err = validate.SelectOneOf[fhir.Element]("ConceptMap.target",
		raw.TargetURI,
		raw.TargetCanonical)
	if err != nil {
		return err
	}
	cm.Text = raw.Text
	cm.Title = raw.Title
	cm.URL = raw.URL
	cm.UseContext = raw.UseContext
	cm.Version = raw.Version
	return nil
}

var _ json.Marshaler = (*ConceptMap)(nil)
var _ json.Unmarshaler = (*ConceptMap)(nil)

func (cmg *ConceptMapGroup) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cmg *ConceptMapGroup) UnmarshalJSON(data []byte) error {
	var raw struct {
		Element   []*ConceptMapGroupElement `json:"element"`
		Extension []*fhir.Extension         `json:"extension"`

		ID                string                   `json:"id"`
		ModifierExtension []*fhir.Extension        `json:"modifierExtension"`
		Source            *fhir.URI                `json:"source"`
		SourceVersion     *fhir.String             `json:"sourceVersion"`
		Target            *fhir.URI                `json:"target"`
		TargetVersion     *fhir.String             `json:"targetVersion"`
		Unmapped          *ConceptMapGroupUnmapped `json:"unmapped"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cmg.Element = raw.Element
	cmg.Extension = raw.Extension
	cmg.ID = raw.ID
	cmg.ModifierExtension = raw.ModifierExtension
	cmg.Source = raw.Source
	cmg.SourceVersion = raw.SourceVersion
	cmg.Target = raw.Target
	cmg.TargetVersion = raw.TargetVersion
	cmg.Unmapped = raw.Unmapped
	return nil
}

var _ json.Marshaler = (*ConceptMapGroup)(nil)
var _ json.Unmarshaler = (*ConceptMapGroup)(nil)

func (cmge *ConceptMapGroupElement) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cmge *ConceptMapGroupElement) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *fhir.Code        `json:"code"`
		Display   *fhir.String      `json:"display"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                          `json:"id"`
		ModifierExtension []*fhir.Extension               `json:"modifierExtension"`
		Target            []*ConceptMapGroupElementTarget `json:"target"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cmge.Code = raw.Code
	cmge.Display = raw.Display
	cmge.Extension = raw.Extension
	cmge.ID = raw.ID
	cmge.ModifierExtension = raw.ModifierExtension
	cmge.Target = raw.Target
	return nil
}

var _ json.Marshaler = (*ConceptMapGroupElement)(nil)
var _ json.Unmarshaler = (*ConceptMapGroupElement)(nil)

func (cmget *ConceptMapGroupElementTarget) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cmget *ConceptMapGroupElementTarget) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code        *fhir.Code                               `json:"code"`
		Comment     *fhir.String                             `json:"comment"`
		DependsOn   []*ConceptMapGroupElementTargetDependsOn `json:"dependsOn"`
		Display     *fhir.String                             `json:"display"`
		Equivalence *fhir.Code                               `json:"equivalence"`
		Extension   []*fhir.Extension                        `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cmget.Code = raw.Code
	cmget.Comment = raw.Comment
	cmget.DependsOn = raw.DependsOn
	cmget.Display = raw.Display
	cmget.Equivalence = raw.Equivalence
	cmget.Extension = raw.Extension
	cmget.ID = raw.ID
	cmget.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*ConceptMapGroupElementTarget)(nil)
var _ json.Unmarshaler = (*ConceptMapGroupElementTarget)(nil)

func (cmgetdo *ConceptMapGroupElementTargetDependsOn) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cmgetdo *ConceptMapGroupElementTargetDependsOn) UnmarshalJSON(data []byte) error {
	var raw struct {
		Display   *fhir.String      `json:"display"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Property          *fhir.URI         `json:"property"`
		System            *fhir.Canonical   `json:"system"`
		Value             *fhir.String      `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cmgetdo.Display = raw.Display
	cmgetdo.Extension = raw.Extension
	cmgetdo.ID = raw.ID
	cmgetdo.ModifierExtension = raw.ModifierExtension
	cmgetdo.Property = raw.Property
	cmgetdo.System = raw.System
	cmgetdo.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*ConceptMapGroupElementTargetDependsOn)(nil)
var _ json.Unmarshaler = (*ConceptMapGroupElementTargetDependsOn)(nil)

func (cmgu *ConceptMapGroupUnmapped) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cmgu *ConceptMapGroupUnmapped) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *fhir.Code        `json:"code"`
		Display   *fhir.String      `json:"display"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		Mode              *fhir.Code        `json:"mode"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		URL               *fhir.Canonical   `json:"url"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cmgu.Code = raw.Code
	cmgu.Display = raw.Display
	cmgu.Extension = raw.Extension
	cmgu.ID = raw.ID
	cmgu.Mode = raw.Mode
	cmgu.ModifierExtension = raw.ModifierExtension
	cmgu.URL = raw.URL
	return nil
}

var _ json.Marshaler = (*ConceptMapGroupUnmapped)(nil)
var _ json.Unmarshaler = (*ConceptMapGroupUnmapped)(nil)
