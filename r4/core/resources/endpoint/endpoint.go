// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package endpoint

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// The technical details of an endpoint that can be used for electronic
// services, such as for web services providing XDS.b or a REST endpoint for
// another FHIR server. This may include any security context information.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Endpoint
//   - Source File: StructureDefinition-Endpoint.json
type Endpoint struct {

	// The uri that describes the actual end-point to connect to.
	Address *fhir.URL `fhirpath:"address"`

	// A coded value that represents the technical details of the usage of this
	// endpoint, such as what WSDLs should be used in what way. (e.g.
	// XDS.b/DICOM/cds-hook).
	ConnectionType *fhir.Coding `fhirpath:"connectionType"`

	// Contact details for a human to contact about the subscription. The primary
	// use of this for system administrator troubleshooting.
	Contact []*fhir.ContactPoint `fhirpath:"contact"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Additional headers / information to send as part of the notification.
	Header []*fhir.String `fhirpath:"header"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifier for the organization that is used to identify the endpoint across
	// multiple disparate systems.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The organization that manages this endpoint (even if technically another
	// organization is hosting this in the cloud, it is the organization associated
	// with the data).
	ManagingOrganization *fhir.Reference `fhirpath:"managingOrganization"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A friendly name that this endpoint can be referred to with.
	Name *fhir.String `fhirpath:"name"`

	// The mime type to send the payload in - e.g. application/fhir+xml,
	// application/fhir+json. If the mime type is not specified, then the sender
	// could send any content (including no content depending on the
	// connectionType).
	PayloadMimeType []*fhir.Code `fhirpath:"payloadMimeType"`

	// The payload type describes the acceptable content that can be communicated
	// on the endpoint.
	PayloadType []*fhir.CodeableConcept `fhirpath:"payloadType"`

	// The interval during which the endpoint is expected to be operational.
	Period *fhir.Period `fhirpath:"period"`

	// active | suspended | error | off | test.
	Status *fhir.Code `fhirpath:"status"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAddress returns the value of the field Address.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetAddress() *fhir.URL {
	if e == nil {
		return nil
	}
	return e.Address
}

// GetConnectionType returns the value of the field ConnectionType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetConnectionType() *fhir.Coding {
	if e == nil {
		return nil
	}
	return e.ConnectionType
}

// GetContact returns the value of the field Contact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetContact() []*fhir.ContactPoint {
	if e == nil {
		return nil
	}
	return e.Contact
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetContained() []fhir.Resource {
	if e == nil {
		return nil
	}
	return e.Contained
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetExtension() []*fhir.Extension {
	if e == nil {
		return nil
	}
	return e.Extension
}

// GetHeader returns the value of the field Header.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetHeader() []*fhir.String {
	if e == nil {
		return nil
	}
	return e.Header
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetID() string {
	if e == nil {
		return ""
	}
	return e.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetIdentifier() []*fhir.Identifier {
	if e == nil {
		return nil
	}
	return e.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetImplicitRules() *fhir.URI {
	if e == nil {
		return nil
	}
	return e.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetLanguage() *fhir.Code {
	if e == nil {
		return nil
	}
	return e.Language
}

// GetManagingOrganization returns the value of the field ManagingOrganization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetManagingOrganization() *fhir.Reference {
	if e == nil {
		return nil
	}
	return e.ManagingOrganization
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetMeta() *fhir.Meta {
	if e == nil {
		return nil
	}
	return e.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetModifierExtension() []*fhir.Extension {
	if e == nil {
		return nil
	}
	return e.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetName() *fhir.String {
	if e == nil {
		return nil
	}
	return e.Name
}

// GetPayloadMimeType returns the value of the field PayloadMimeType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetPayloadMimeType() []*fhir.Code {
	if e == nil {
		return nil
	}
	return e.PayloadMimeType
}

// GetPayloadType returns the value of the field PayloadType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetPayloadType() []*fhir.CodeableConcept {
	if e == nil {
		return nil
	}
	return e.PayloadType
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetPeriod() *fhir.Period {
	if e == nil {
		return nil
	}
	return e.Period
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetStatus() *fhir.Code {
	if e == nil {
		return nil
	}
	return e.Status
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (e *Endpoint) GetText() *fhir.Narrative {
	if e == nil {
		return nil
	}
	return e.Text
}

func (e *Endpoint) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (e *Endpoint) UnmarshalJSON(data []byte) error {
	var raw struct {
		Address        *fhir.URL            `json:"address"`
		ConnectionType *fhir.Coding         `json:"connectionType"`
		Contact        []*fhir.ContactPoint `json:"contact"`
		Contained      []fhir.Resource      `json:"contained"`
		Extension      []*fhir.Extension    `json:"extension"`
		Header         []*fhir.String       `json:"header"`

		ID                   string                  `json:"id"`
		Identifier           []*fhir.Identifier      `json:"identifier"`
		ImplicitRules        *fhir.URI               `json:"implicitRules"`
		Language             *fhir.Code              `json:"language"`
		ManagingOrganization *fhir.Reference         `json:"managingOrganization"`
		Meta                 *fhir.Meta              `json:"meta"`
		ModifierExtension    []*fhir.Extension       `json:"modifierExtension"`
		Name                 *fhir.String            `json:"name"`
		PayloadMimeType      []*fhir.Code            `json:"payloadMimeType"`
		PayloadType          []*fhir.CodeableConcept `json:"payloadType"`
		Period               *fhir.Period            `json:"period"`
		Status               *fhir.Code              `json:"status"`
		Text                 *fhir.Narrative         `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	e.Address = raw.Address
	e.ConnectionType = raw.ConnectionType
	e.Contact = raw.Contact
	e.Contained = raw.Contained
	e.Extension = raw.Extension
	e.Header = raw.Header
	e.ID = raw.ID
	e.Identifier = raw.Identifier
	e.ImplicitRules = raw.ImplicitRules
	e.Language = raw.Language
	e.ManagingOrganization = raw.ManagingOrganization
	e.Meta = raw.Meta
	e.ModifierExtension = raw.ModifierExtension
	e.Name = raw.Name
	e.PayloadMimeType = raw.PayloadMimeType
	e.PayloadType = raw.PayloadType
	e.Period = raw.Period
	e.Status = raw.Status
	e.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*Endpoint)(nil)
var _ json.Unmarshaler = (*Endpoint)(nil)
