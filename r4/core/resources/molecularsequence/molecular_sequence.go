// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package molecularsequence

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Raw data describing a biological sequence.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/MolecularSequence
//   - Source File: StructureDefinition-MolecularSequence.json
type MolecularSequence struct {

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// Whether the sequence is numbered starting at 0 (0-based numbering or
	// coordinates, inclusive start, exclusive end) or starting at 1 (1-based
	// numbering, inclusive start and inclusive end).
	CoordinateSystem *fhir.Integer `fhirpath:"coordinateSystem"`

	// The method for sequencing, for example, chip information.
	Device *fhir.Reference `fhirpath:"device"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// A unique identifier for this particular sequence instance. This is a
	// FHIR-defined id.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Sequence that was observed. It is the result marked by referenceSeq along
	// with variant records on referenceSeq. This shall start from
	// referenceSeq.windowStart and end by referenceSeq.windowEnd.
	ObservedSeq *fhir.String `fhirpath:"observedSeq"`

	// The patient whose sequencing results are described by this resource.
	Patient *fhir.Reference `fhirpath:"patient"`

	// The organization or lab that should be responsible for this result.
	Performer *fhir.Reference `fhirpath:"performer"`

	// Pointer to next atomic sequence which at most contains one variant.
	Pointer []*fhir.Reference `fhirpath:"pointer"`

	// An experimental feature attribute that defines the quality of the feature in
	// a quantitative way, such as a phred quality score
	// ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
	Quality []*MolecularSequenceQuality `fhirpath:"quality"`

	// The number of copies of the sequence of interest. (RNASeq).
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// Coverage (read depth or depth) is the average number of reads representing a
	// given nucleotide in the reconstructed sequence.
	ReadCoverage *fhir.Integer `fhirpath:"readCoverage"`

	// A sequence that is used as a reference to describe variants that are present
	// in a sequence analyzed.
	ReferenceSeq *MolecularSequenceReferenceSeq `fhirpath:"referenceSeq"`

	// Configurations of the external repository. The repository shall store
	// target's observedSeq or records related with target's observedSeq.
	Repository []*MolecularSequenceRepository `fhirpath:"repository"`

	// Specimen used for sequencing.
	Specimen *fhir.Reference `fhirpath:"specimen"`

	// Information about chromosome structure variation.
	StructureVariant []*MolecularSequenceStructureVariant `fhirpath:"structureVariant"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	// Amino Acid Sequence/ DNA Sequence / RNA Sequence.
	Type *fhir.Code `fhirpath:"type"`

	// The definition of variant here originates from Sequence ontology
	// ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)).
	// This element can represent amino acid or nucleic sequence change(including
	// insertion,deletion,SNP,etc.) It can represent some complex mutation or
	// segment variation with the assist of CIGAR string.
	Variant []*MolecularSequenceVariant `fhirpath:"variant"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetContained() []fhir.Resource {
	if ms == nil {
		return nil
	}
	return ms.Contained
}

// GetCoordinateSystem returns the value of the field CoordinateSystem.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetCoordinateSystem() *fhir.Integer {
	if ms == nil {
		return nil
	}
	return ms.CoordinateSystem
}

// GetDevice returns the value of the field Device.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetDevice() *fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.Device
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetExtension() []*fhir.Extension {
	if ms == nil {
		return nil
	}
	return ms.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetID() string {
	if ms == nil {
		return ""
	}
	return ms.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetIdentifier() []*fhir.Identifier {
	if ms == nil {
		return nil
	}
	return ms.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetImplicitRules() *fhir.URI {
	if ms == nil {
		return nil
	}
	return ms.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetLanguage() *fhir.Code {
	if ms == nil {
		return nil
	}
	return ms.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetMeta() *fhir.Meta {
	if ms == nil {
		return nil
	}
	return ms.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetModifierExtension() []*fhir.Extension {
	if ms == nil {
		return nil
	}
	return ms.ModifierExtension
}

// GetObservedSeq returns the value of the field ObservedSeq.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetObservedSeq() *fhir.String {
	if ms == nil {
		return nil
	}
	return ms.ObservedSeq
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetPatient() *fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.Patient
}

// GetPerformer returns the value of the field Performer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetPerformer() *fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.Performer
}

// GetPointer returns the value of the field Pointer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetPointer() []*fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.Pointer
}

// GetQuality returns the value of the field Quality.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetQuality() []*MolecularSequenceQuality {
	if ms == nil {
		return nil
	}
	return ms.Quality
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetQuantity() *fhir.Quantity {
	if ms == nil {
		return nil
	}
	return ms.Quantity
}

// GetReadCoverage returns the value of the field ReadCoverage.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetReadCoverage() *fhir.Integer {
	if ms == nil {
		return nil
	}
	return ms.ReadCoverage
}

// GetReferenceSeq returns the value of the field ReferenceSeq.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetReferenceSeq() *MolecularSequenceReferenceSeq {
	if ms == nil {
		return nil
	}
	return ms.ReferenceSeq
}

// GetRepository returns the value of the field Repository.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetRepository() []*MolecularSequenceRepository {
	if ms == nil {
		return nil
	}
	return ms.Repository
}

// GetSpecimen returns the value of the field Specimen.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetSpecimen() *fhir.Reference {
	if ms == nil {
		return nil
	}
	return ms.Specimen
}

// GetStructureVariant returns the value of the field StructureVariant.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetStructureVariant() []*MolecularSequenceStructureVariant {
	if ms == nil {
		return nil
	}
	return ms.StructureVariant
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetText() *fhir.Narrative {
	if ms == nil {
		return nil
	}
	return ms.Text
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetType() *fhir.Code {
	if ms == nil {
		return nil
	}
	return ms.Type
}

// GetVariant returns the value of the field Variant.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ms *MolecularSequence) GetVariant() []*MolecularSequenceVariant {
	if ms == nil {
		return nil
	}
	return ms.Variant
}

// An set of value as quality of sequence// An experimental feature attribute that defines the quality of the feature in
// a quantitative way, such as a phred quality score
// ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MolecularSequence.json
type MolecularSequenceQuality struct {

	// End position of the sequence. If the coordinate system is 0-based then end
	// is exclusive and does not include the last position. If the coordinate
	// system is 1-base, then end is inclusive and includes the last position.
	End *fhir.Integer `fhirpath:"end"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Harmonic mean of Recall and Precision, computed as: 2 * precision * recall /
	// (precision + recall).
	FScore *fhir.Decimal `fhirpath:"fScore"`

	// The number of false positives where the non-REF alleles in the Truth and
	// Query Call Sets match (i.e. cases where the truth is 1/1 and the query is
	// 0/1 or similar).
	GtFp *fhir.Decimal `fhirpath:"gtFp"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Which method is used to get sequence quality.
	Method *fhir.CodeableConcept `fhirpath:"method"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// QUERY.TP / (QUERY.TP + QUERY.FP).
	Precision *fhir.Decimal `fhirpath:"precision"`

	// False positives, i.e. the number of sites in the Query Call Set for which
	// there is no path through the Truth Call Set that is consistent with this
	// site. Sites with correct variant but incorrect genotype are counted here.
	QueryFp *fhir.Decimal `fhirpath:"queryFp"`

	// True positives, from the perspective of the query data, i.e. the number of
	// sites in the Query Call Set for which there are paths through the Truth Call
	// Set that are consistent with all of the alleles at this site, and for which
	// there is an accurate genotype call for the event.
	QueryTp *fhir.Decimal `fhirpath:"queryTp"`

	// TRUTH.TP / (TRUTH.TP + TRUTH.FN).
	Recall *fhir.Decimal `fhirpath:"recall"`

	// Receiver Operator Characteristic (ROC) Curve to give sensitivity/specificity
	// tradeoff.
	Roc *MolecularSequenceQualityRoc `fhirpath:"roc"`

	// The score of an experimentally derived feature such as a p-value
	// ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
	Score *fhir.Quantity `fhirpath:"score"`

	// Gold standard sequence used for comparing against.
	StandardSequence *fhir.CodeableConcept `fhirpath:"standardSequence"`

	// Start position of the sequence. If the coordinate system is either 0-based
	// or 1-based, then start position is inclusive.
	Start *fhir.Integer `fhirpath:"start"`

	// False negatives, i.e. the number of sites in the Truth Call Set for which
	// there is no path through the Query Call Set that is consistent with all of
	// the alleles at this site, or sites for which there is an inaccurate genotype
	// call for the event. Sites with correct variant but incorrect genotype are
	// counted here.
	TruthFn *fhir.Decimal `fhirpath:"truthFn"`

	// True positives, from the perspective of the truth data, i.e. the number of
	// sites in the Truth Call Set for which there are paths through the Query Call
	// Set that are consistent with all of the alleles at this site, and for which
	// there is an accurate genotype call for the event.
	TruthTp *fhir.Decimal `fhirpath:"truthTp"`

	// INDEL / SNP / Undefined variant.
	Type *fhir.Code `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetEnd returns the value of the field End.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetEnd() *fhir.Integer {
	if msq == nil {
		return nil
	}
	return msq.End
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetExtension() []*fhir.Extension {
	if msq == nil {
		return nil
	}
	return msq.Extension
}

// GetFScore returns the value of the field FScore.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetFScore() *fhir.Decimal {
	if msq == nil {
		return nil
	}
	return msq.FScore
}

// GetGtFp returns the value of the field GtFp.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetGtFp() *fhir.Decimal {
	if msq == nil {
		return nil
	}
	return msq.GtFp
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetID() string {
	if msq == nil {
		return ""
	}
	return msq.ID
}

// GetMethod returns the value of the field Method.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetMethod() *fhir.CodeableConcept {
	if msq == nil {
		return nil
	}
	return msq.Method
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetModifierExtension() []*fhir.Extension {
	if msq == nil {
		return nil
	}
	return msq.ModifierExtension
}

// GetPrecision returns the value of the field Precision.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetPrecision() *fhir.Decimal {
	if msq == nil {
		return nil
	}
	return msq.Precision
}

// GetQueryFp returns the value of the field QueryFp.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetQueryFp() *fhir.Decimal {
	if msq == nil {
		return nil
	}
	return msq.QueryFp
}

// GetQueryTp returns the value of the field QueryTp.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetQueryTp() *fhir.Decimal {
	if msq == nil {
		return nil
	}
	return msq.QueryTp
}

// GetRecall returns the value of the field Recall.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetRecall() *fhir.Decimal {
	if msq == nil {
		return nil
	}
	return msq.Recall
}

// GetRoc returns the value of the field Roc.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetRoc() *MolecularSequenceQualityRoc {
	if msq == nil {
		return nil
	}
	return msq.Roc
}

// GetScore returns the value of the field Score.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetScore() *fhir.Quantity {
	if msq == nil {
		return nil
	}
	return msq.Score
}

// GetStandardSequence returns the value of the field StandardSequence.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetStandardSequence() *fhir.CodeableConcept {
	if msq == nil {
		return nil
	}
	return msq.StandardSequence
}

// GetStart returns the value of the field Start.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetStart() *fhir.Integer {
	if msq == nil {
		return nil
	}
	return msq.Start
}

// GetTruthFn returns the value of the field TruthFn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetTruthFn() *fhir.Decimal {
	if msq == nil {
		return nil
	}
	return msq.TruthFn
}

// GetTruthTp returns the value of the field TruthTp.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetTruthTp() *fhir.Decimal {
	if msq == nil {
		return nil
	}
	return msq.TruthTp
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msq *MolecularSequenceQuality) GetType() *fhir.Code {
	if msq == nil {
		return nil
	}
	return msq.Type
}

// Receiver Operator Characteristic (ROC) Curve// Receiver Operator Characteristic (ROC) Curve to give sensitivity/specificity
// tradeoff.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MolecularSequence.json
type MolecularSequenceQualityRoc struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Calculated fScore if the GQ score threshold was set to "score" field value.
	FMeasure []*fhir.Decimal `fhirpath:"fMeasure"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The number of false negatives if the GQ score threshold was set to "score"
	// field value.
	NumFn []*fhir.Integer `fhirpath:"numFn"`

	// The number of false positives if the GQ score threshold was set to "score"
	// field value.
	NumFp []*fhir.Integer `fhirpath:"numFp"`

	// The number of true positives if the GQ score threshold was set to "score"
	// field value.
	NumTp []*fhir.Integer `fhirpath:"numTp"`

	// Calculated precision if the GQ score threshold was set to "score" field
	// value.
	Precision []*fhir.Decimal `fhirpath:"precision"`

	// Invidual data point representing the GQ (genotype quality) score threshold.
	Score []*fhir.Integer `fhirpath:"score"`

	// Calculated sensitivity if the GQ score threshold was set to "score" field
	// value.
	Sensitivity []*fhir.Decimal `fhirpath:"sensitivity"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msqr *MolecularSequenceQualityRoc) GetExtension() []*fhir.Extension {
	if msqr == nil {
		return nil
	}
	return msqr.Extension
}

// GetFMeasure returns the value of the field FMeasure.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msqr *MolecularSequenceQualityRoc) GetFMeasure() []*fhir.Decimal {
	if msqr == nil {
		return nil
	}
	return msqr.FMeasure
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msqr *MolecularSequenceQualityRoc) GetID() string {
	if msqr == nil {
		return ""
	}
	return msqr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msqr *MolecularSequenceQualityRoc) GetModifierExtension() []*fhir.Extension {
	if msqr == nil {
		return nil
	}
	return msqr.ModifierExtension
}

// GetNumFn returns the value of the field NumFn.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msqr *MolecularSequenceQualityRoc) GetNumFn() []*fhir.Integer {
	if msqr == nil {
		return nil
	}
	return msqr.NumFn
}

// GetNumFp returns the value of the field NumFp.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msqr *MolecularSequenceQualityRoc) GetNumFp() []*fhir.Integer {
	if msqr == nil {
		return nil
	}
	return msqr.NumFp
}

// GetNumTp returns the value of the field NumTp.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msqr *MolecularSequenceQualityRoc) GetNumTp() []*fhir.Integer {
	if msqr == nil {
		return nil
	}
	return msqr.NumTp
}

// GetPrecision returns the value of the field Precision.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msqr *MolecularSequenceQualityRoc) GetPrecision() []*fhir.Decimal {
	if msqr == nil {
		return nil
	}
	return msqr.Precision
}

// GetScore returns the value of the field Score.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msqr *MolecularSequenceQualityRoc) GetScore() []*fhir.Integer {
	if msqr == nil {
		return nil
	}
	return msqr.Score
}

// GetSensitivity returns the value of the field Sensitivity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msqr *MolecularSequenceQualityRoc) GetSensitivity() []*fhir.Decimal {
	if msqr == nil {
		return nil
	}
	return msqr.Sensitivity
}

// A sequence used as reference// A sequence that is used as a reference to describe variants that are present
// in a sequence analyzed.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MolecularSequence.json
type MolecularSequenceReferenceSeq struct {

	// Structural unit composed of a nucleic acid molecule which controls its own
	// replication through the interaction of specific proteins at one or more
	// origins of replication
	// ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
	Chromosome *fhir.CodeableConcept `fhirpath:"chromosome"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The Genome Build used for reference, following GRCh build versions e.g.
	// 'GRCh 37'. Version number must be included if a versioned release of a
	// primary build was used.
	GenomeBuild *fhir.String `fhirpath:"genomeBuild"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A relative reference to a DNA strand based on gene orientation. The strand
	// that contains the open reading frame of the gene is the "sense" strand, and
	// the opposite complementary strand is the "antisense" strand.
	Orientation *fhir.Code `fhirpath:"orientation"`

	// Reference identifier of reference sequence submitted to NCBI. It must match
	// the type in the MolecularSequence.type field. For example, the prefix,
	// “NG_” identifies reference sequence for genes, “NM_” for messenger
	// RNA transcripts, and “NP_” for amino acid sequences.
	ReferenceSeqID *fhir.CodeableConcept `fhirpath:"referenceSeqId"`

	// A pointer to another MolecularSequence entity as reference sequence.
	ReferenceSeqPointer *fhir.Reference `fhirpath:"referenceSeqPointer"`

	// A string like "ACGT".
	ReferenceSeqString *fhir.String `fhirpath:"referenceSeqString"`

	// An absolute reference to a strand. The Watson strand is the strand whose
	// 5'-end is on the short arm of the chromosome, and the Crick strand as the
	// one whose 5'-end is on the long arm.
	Strand *fhir.Code `fhirpath:"strand"`

	// End position of the window on the reference sequence. If the coordinate
	// system is 0-based then end is exclusive and does not include the last
	// position. If the coordinate system is 1-base, then end is inclusive and
	// includes the last position.
	WindowEnd *fhir.Integer `fhirpath:"windowEnd"`

	// Start position of the window on the reference sequence. If the coordinate
	// system is either 0-based or 1-based, then start position is inclusive.
	WindowStart *fhir.Integer `fhirpath:"windowStart"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetChromosome returns the value of the field Chromosome.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetChromosome() *fhir.CodeableConcept {
	if msrs == nil {
		return nil
	}
	return msrs.Chromosome
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetExtension() []*fhir.Extension {
	if msrs == nil {
		return nil
	}
	return msrs.Extension
}

// GetGenomeBuild returns the value of the field GenomeBuild.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetGenomeBuild() *fhir.String {
	if msrs == nil {
		return nil
	}
	return msrs.GenomeBuild
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetID() string {
	if msrs == nil {
		return ""
	}
	return msrs.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetModifierExtension() []*fhir.Extension {
	if msrs == nil {
		return nil
	}
	return msrs.ModifierExtension
}

// GetOrientation returns the value of the field Orientation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetOrientation() *fhir.Code {
	if msrs == nil {
		return nil
	}
	return msrs.Orientation
}

// GetReferenceSeqID returns the value of the field ReferenceSeqID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetReferenceSeqID() *fhir.CodeableConcept {
	if msrs == nil {
		return nil
	}
	return msrs.ReferenceSeqID
}

// GetReferenceSeqPointer returns the value of the field ReferenceSeqPointer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetReferenceSeqPointer() *fhir.Reference {
	if msrs == nil {
		return nil
	}
	return msrs.ReferenceSeqPointer
}

// GetReferenceSeqString returns the value of the field ReferenceSeqString.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetReferenceSeqString() *fhir.String {
	if msrs == nil {
		return nil
	}
	return msrs.ReferenceSeqString
}

// GetStrand returns the value of the field Strand.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetStrand() *fhir.Code {
	if msrs == nil {
		return nil
	}
	return msrs.Strand
}

// GetWindowEnd returns the value of the field WindowEnd.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetWindowEnd() *fhir.Integer {
	if msrs == nil {
		return nil
	}
	return msrs.WindowEnd
}

// GetWindowStart returns the value of the field WindowStart.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msrs *MolecularSequenceReferenceSeq) GetWindowStart() *fhir.Integer {
	if msrs == nil {
		return nil
	}
	return msrs.WindowStart
}

// External repository which contains detailed report related with observedSeq
// in this resource// Configurations of the external repository. The repository shall store
// target's observedSeq or records related with target's observedSeq.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MolecularSequence.json
type MolecularSequenceRepository struct {

	// Id of the variant in this external repository. The server will understand
	// how to use this id to call for more info about datasets in external
	// repository.
	DatasetID *fhir.String `fhirpath:"datasetId"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// URI of an external repository which contains further details about the
	// genetics data.
	Name *fhir.String `fhirpath:"name"`

	// Id of the read in this external repository.
	ReadsetID *fhir.String `fhirpath:"readsetId"`

	// Click and see / RESTful API / Need login to see / RESTful API with
	// authentication / Other ways to see resource.
	Type *fhir.Code `fhirpath:"type"`

	// URI of an external repository which contains further details about the
	// genetics data.
	URL *fhir.URI `fhirpath:"url"`

	// Id of the variantset in this external repository. The server will understand
	// how to use this id to call for more info about variantsets in external
	// repository.
	VariantsetID *fhir.String `fhirpath:"variantsetId"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetDatasetID returns the value of the field DatasetID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msr *MolecularSequenceRepository) GetDatasetID() *fhir.String {
	if msr == nil {
		return nil
	}
	return msr.DatasetID
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msr *MolecularSequenceRepository) GetExtension() []*fhir.Extension {
	if msr == nil {
		return nil
	}
	return msr.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msr *MolecularSequenceRepository) GetID() string {
	if msr == nil {
		return ""
	}
	return msr.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msr *MolecularSequenceRepository) GetModifierExtension() []*fhir.Extension {
	if msr == nil {
		return nil
	}
	return msr.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msr *MolecularSequenceRepository) GetName() *fhir.String {
	if msr == nil {
		return nil
	}
	return msr.Name
}

// GetReadsetID returns the value of the field ReadsetID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msr *MolecularSequenceRepository) GetReadsetID() *fhir.String {
	if msr == nil {
		return nil
	}
	return msr.ReadsetID
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msr *MolecularSequenceRepository) GetType() *fhir.Code {
	if msr == nil {
		return nil
	}
	return msr.Type
}

// GetURL returns the value of the field URL.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msr *MolecularSequenceRepository) GetURL() *fhir.URI {
	if msr == nil {
		return nil
	}
	return msr.URL
}

// GetVariantsetID returns the value of the field VariantsetID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msr *MolecularSequenceRepository) GetVariantsetID() *fhir.String {
	if msr == nil {
		return nil
	}
	return msr.VariantsetID
}

// Structural variant// Information about chromosome structure variation.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MolecularSequence.json
type MolecularSequenceStructureVariant struct {

	// Used to indicate if the outer and inner start-end values have the same
	// meaning.
	Exact *fhir.Boolean `fhirpath:"exact"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Structural variant inner.
	Inner *MolecularSequenceStructureVariantInner `fhirpath:"inner"`

	// Length of the variant chromosome.
	Length *fhir.Integer `fhirpath:"length"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Structural variant outer.
	Outer *MolecularSequenceStructureVariantOuter `fhirpath:"outer"`

	// Information about chromosome structure variation DNA change type.
	VariantType *fhir.CodeableConcept `fhirpath:"variantType"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExact returns the value of the field Exact.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssv *MolecularSequenceStructureVariant) GetExact() *fhir.Boolean {
	if mssv == nil {
		return nil
	}
	return mssv.Exact
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssv *MolecularSequenceStructureVariant) GetExtension() []*fhir.Extension {
	if mssv == nil {
		return nil
	}
	return mssv.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssv *MolecularSequenceStructureVariant) GetID() string {
	if mssv == nil {
		return ""
	}
	return mssv.ID
}

// GetInner returns the value of the field Inner.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssv *MolecularSequenceStructureVariant) GetInner() *MolecularSequenceStructureVariantInner {
	if mssv == nil {
		return nil
	}
	return mssv.Inner
}

// GetLength returns the value of the field Length.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssv *MolecularSequenceStructureVariant) GetLength() *fhir.Integer {
	if mssv == nil {
		return nil
	}
	return mssv.Length
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssv *MolecularSequenceStructureVariant) GetModifierExtension() []*fhir.Extension {
	if mssv == nil {
		return nil
	}
	return mssv.ModifierExtension
}

// GetOuter returns the value of the field Outer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssv *MolecularSequenceStructureVariant) GetOuter() *MolecularSequenceStructureVariantOuter {
	if mssv == nil {
		return nil
	}
	return mssv.Outer
}

// GetVariantType returns the value of the field VariantType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssv *MolecularSequenceStructureVariant) GetVariantType() *fhir.CodeableConcept {
	if mssv == nil {
		return nil
	}
	return mssv.VariantType
}

// Structural variant inner// Structural variant inner.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MolecularSequence.json
type MolecularSequenceStructureVariantInner struct {

	// Structural variant inner end. If the coordinate system is 0-based then end
	// is exclusive and does not include the last position. If the coordinate
	// system is 1-base, then end is inclusive and includes the last position.
	End *fhir.Integer `fhirpath:"end"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Structural variant inner start. If the coordinate system is either 0-based
	// or 1-based, then start position is inclusive.
	Start *fhir.Integer `fhirpath:"start"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetEnd returns the value of the field End.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssvi *MolecularSequenceStructureVariantInner) GetEnd() *fhir.Integer {
	if mssvi == nil {
		return nil
	}
	return mssvi.End
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssvi *MolecularSequenceStructureVariantInner) GetExtension() []*fhir.Extension {
	if mssvi == nil {
		return nil
	}
	return mssvi.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssvi *MolecularSequenceStructureVariantInner) GetID() string {
	if mssvi == nil {
		return ""
	}
	return mssvi.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssvi *MolecularSequenceStructureVariantInner) GetModifierExtension() []*fhir.Extension {
	if mssvi == nil {
		return nil
	}
	return mssvi.ModifierExtension
}

// GetStart returns the value of the field Start.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssvi *MolecularSequenceStructureVariantInner) GetStart() *fhir.Integer {
	if mssvi == nil {
		return nil
	}
	return mssvi.Start
}

// Structural variant outer// Structural variant outer.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MolecularSequence.json
type MolecularSequenceStructureVariantOuter struct {

	// Structural variant outer end. If the coordinate system is 0-based then end
	// is exclusive and does not include the last position. If the coordinate
	// system is 1-base, then end is inclusive and includes the last position.
	End *fhir.Integer `fhirpath:"end"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Structural variant outer start. If the coordinate system is either 0-based
	// or 1-based, then start position is inclusive.
	Start *fhir.Integer `fhirpath:"start"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetEnd returns the value of the field End.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssvo *MolecularSequenceStructureVariantOuter) GetEnd() *fhir.Integer {
	if mssvo == nil {
		return nil
	}
	return mssvo.End
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssvo *MolecularSequenceStructureVariantOuter) GetExtension() []*fhir.Extension {
	if mssvo == nil {
		return nil
	}
	return mssvo.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssvo *MolecularSequenceStructureVariantOuter) GetID() string {
	if mssvo == nil {
		return ""
	}
	return mssvo.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssvo *MolecularSequenceStructureVariantOuter) GetModifierExtension() []*fhir.Extension {
	if mssvo == nil {
		return nil
	}
	return mssvo.ModifierExtension
}

// GetStart returns the value of the field Start.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (mssvo *MolecularSequenceStructureVariantOuter) GetStart() *fhir.Integer {
	if mssvo == nil {
		return nil
	}
	return mssvo.Start
}

// Variant in sequence// The definition of variant here originates from Sequence ontology
// ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)).
// This element can represent amino acid or nucleic sequence change(including
// insertion,deletion,SNP,etc.) It can represent some complex mutation or
// segment variation with the assist of CIGAR string.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-MolecularSequence.json
type MolecularSequenceVariant struct {

	// Extended CIGAR string for aligning the sequence with reference bases. See
	// detailed documentation
	// [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
	Cigar *fhir.String `fhirpath:"cigar"`

	// End position of the variant on the reference sequence. If the coordinate
	// system is 0-based then end is exclusive and does not include the last
	// position. If the coordinate system is 1-base, then end is inclusive and
	// includes the last position.
	End *fhir.Integer `fhirpath:"end"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// An allele is one of a set of coexisting sequence variants of a gene
	// ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).
	// Nucleotide(s)/amino acids from start position of sequence to stop position
	// of sequence on the positive (+) strand of the observed sequence. When the
	// sequence type is DNA, it should be the sequence on the positive (+) strand.
	// This will lay in the range between variant.start and variant.end.
	ObservedAllele *fhir.String `fhirpath:"observedAllele"`

	// An allele is one of a set of coexisting sequence variants of a gene
	// ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).
	// Nucleotide(s)/amino acids from start position of sequence to stop position
	// of sequence on the positive (+) strand of the reference sequence. When the
	// sequence type is DNA, it should be the sequence on the positive (+) strand.
	// This will lay in the range between variant.start and variant.end.
	ReferenceAllele *fhir.String `fhirpath:"referenceAllele"`

	// Start position of the variant on the reference sequence. If the coordinate
	// system is either 0-based or 1-based, then start position is inclusive.
	Start *fhir.Integer `fhirpath:"start"`

	// A pointer to an Observation containing variant information.
	VariantPointer *fhir.Reference `fhirpath:"variantPointer"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetCigar returns the value of the field Cigar.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msv *MolecularSequenceVariant) GetCigar() *fhir.String {
	if msv == nil {
		return nil
	}
	return msv.Cigar
}

// GetEnd returns the value of the field End.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msv *MolecularSequenceVariant) GetEnd() *fhir.Integer {
	if msv == nil {
		return nil
	}
	return msv.End
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msv *MolecularSequenceVariant) GetExtension() []*fhir.Extension {
	if msv == nil {
		return nil
	}
	return msv.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msv *MolecularSequenceVariant) GetID() string {
	if msv == nil {
		return ""
	}
	return msv.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msv *MolecularSequenceVariant) GetModifierExtension() []*fhir.Extension {
	if msv == nil {
		return nil
	}
	return msv.ModifierExtension
}

// GetObservedAllele returns the value of the field ObservedAllele.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msv *MolecularSequenceVariant) GetObservedAllele() *fhir.String {
	if msv == nil {
		return nil
	}
	return msv.ObservedAllele
}

// GetReferenceAllele returns the value of the field ReferenceAllele.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msv *MolecularSequenceVariant) GetReferenceAllele() *fhir.String {
	if msv == nil {
		return nil
	}
	return msv.ReferenceAllele
}

// GetStart returns the value of the field Start.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msv *MolecularSequenceVariant) GetStart() *fhir.Integer {
	if msv == nil {
		return nil
	}
	return msv.Start
}

// GetVariantPointer returns the value of the field VariantPointer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (msv *MolecularSequenceVariant) GetVariantPointer() *fhir.Reference {
	if msv == nil {
		return nil
	}
	return msv.VariantPointer
}

func (ms *MolecularSequence) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ms *MolecularSequence) UnmarshalJSON(data []byte) error {
	var raw struct {
		Contained        []fhir.Resource   `json:"contained"`
		CoordinateSystem *fhir.Integer     `json:"coordinateSystem"`
		Device           *fhir.Reference   `json:"device"`
		Extension        []*fhir.Extension `json:"extension"`

		ID                string                               `json:"id"`
		Identifier        []*fhir.Identifier                   `json:"identifier"`
		ImplicitRules     *fhir.URI                            `json:"implicitRules"`
		Language          *fhir.Code                           `json:"language"`
		Meta              *fhir.Meta                           `json:"meta"`
		ModifierExtension []*fhir.Extension                    `json:"modifierExtension"`
		ObservedSeq       *fhir.String                         `json:"observedSeq"`
		Patient           *fhir.Reference                      `json:"patient"`
		Performer         *fhir.Reference                      `json:"performer"`
		Pointer           []*fhir.Reference                    `json:"pointer"`
		Quality           []*MolecularSequenceQuality          `json:"quality"`
		Quantity          *fhir.Quantity                       `json:"quantity"`
		ReadCoverage      *fhir.Integer                        `json:"readCoverage"`
		ReferenceSeq      *MolecularSequenceReferenceSeq       `json:"referenceSeq"`
		Repository        []*MolecularSequenceRepository       `json:"repository"`
		Specimen          *fhir.Reference                      `json:"specimen"`
		StructureVariant  []*MolecularSequenceStructureVariant `json:"structureVariant"`
		Text              *fhir.Narrative                      `json:"text"`
		Type              *fhir.Code                           `json:"type"`
		Variant           []*MolecularSequenceVariant          `json:"variant"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ms.Contained = raw.Contained
	ms.CoordinateSystem = raw.CoordinateSystem
	ms.Device = raw.Device
	ms.Extension = raw.Extension
	ms.ID = raw.ID
	ms.Identifier = raw.Identifier
	ms.ImplicitRules = raw.ImplicitRules
	ms.Language = raw.Language
	ms.Meta = raw.Meta
	ms.ModifierExtension = raw.ModifierExtension
	ms.ObservedSeq = raw.ObservedSeq
	ms.Patient = raw.Patient
	ms.Performer = raw.Performer
	ms.Pointer = raw.Pointer
	ms.Quality = raw.Quality
	ms.Quantity = raw.Quantity
	ms.ReadCoverage = raw.ReadCoverage
	ms.ReferenceSeq = raw.ReferenceSeq
	ms.Repository = raw.Repository
	ms.Specimen = raw.Specimen
	ms.StructureVariant = raw.StructureVariant
	ms.Text = raw.Text
	ms.Type = raw.Type
	ms.Variant = raw.Variant
	return nil
}

var _ json.Marshaler = (*MolecularSequence)(nil)
var _ json.Unmarshaler = (*MolecularSequence)(nil)

func (msq *MolecularSequenceQuality) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (msq *MolecularSequenceQuality) UnmarshalJSON(data []byte) error {
	var raw struct {
		End       *fhir.Integer     `json:"end"`
		Extension []*fhir.Extension `json:"extension"`
		FScore    *fhir.Decimal     `json:"fScore"`
		GtFp      *fhir.Decimal     `json:"gtFp"`

		ID                string                       `json:"id"`
		Method            *fhir.CodeableConcept        `json:"method"`
		ModifierExtension []*fhir.Extension            `json:"modifierExtension"`
		Precision         *fhir.Decimal                `json:"precision"`
		QueryFp           *fhir.Decimal                `json:"queryFp"`
		QueryTp           *fhir.Decimal                `json:"queryTp"`
		Recall            *fhir.Decimal                `json:"recall"`
		Roc               *MolecularSequenceQualityRoc `json:"roc"`
		Score             *fhir.Quantity               `json:"score"`
		StandardSequence  *fhir.CodeableConcept        `json:"standardSequence"`
		Start             *fhir.Integer                `json:"start"`
		TruthFn           *fhir.Decimal                `json:"truthFn"`
		TruthTp           *fhir.Decimal                `json:"truthTp"`
		Type              *fhir.Code                   `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	msq.End = raw.End
	msq.Extension = raw.Extension
	msq.FScore = raw.FScore
	msq.GtFp = raw.GtFp
	msq.ID = raw.ID
	msq.Method = raw.Method
	msq.ModifierExtension = raw.ModifierExtension
	msq.Precision = raw.Precision
	msq.QueryFp = raw.QueryFp
	msq.QueryTp = raw.QueryTp
	msq.Recall = raw.Recall
	msq.Roc = raw.Roc
	msq.Score = raw.Score
	msq.StandardSequence = raw.StandardSequence
	msq.Start = raw.Start
	msq.TruthFn = raw.TruthFn
	msq.TruthTp = raw.TruthTp
	msq.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*MolecularSequenceQuality)(nil)
var _ json.Unmarshaler = (*MolecularSequenceQuality)(nil)

func (msqr *MolecularSequenceQualityRoc) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (msqr *MolecularSequenceQualityRoc) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`
		FMeasure  []*fhir.Decimal   `json:"fMeasure"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		NumFn             []*fhir.Integer   `json:"numFn"`
		NumFp             []*fhir.Integer   `json:"numFp"`
		NumTp             []*fhir.Integer   `json:"numTp"`
		Precision         []*fhir.Decimal   `json:"precision"`
		Score             []*fhir.Integer   `json:"score"`
		Sensitivity       []*fhir.Decimal   `json:"sensitivity"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	msqr.Extension = raw.Extension
	msqr.FMeasure = raw.FMeasure
	msqr.ID = raw.ID
	msqr.ModifierExtension = raw.ModifierExtension
	msqr.NumFn = raw.NumFn
	msqr.NumFp = raw.NumFp
	msqr.NumTp = raw.NumTp
	msqr.Precision = raw.Precision
	msqr.Score = raw.Score
	msqr.Sensitivity = raw.Sensitivity
	return nil
}

var _ json.Marshaler = (*MolecularSequenceQualityRoc)(nil)
var _ json.Unmarshaler = (*MolecularSequenceQualityRoc)(nil)

func (msrs *MolecularSequenceReferenceSeq) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (msrs *MolecularSequenceReferenceSeq) UnmarshalJSON(data []byte) error {
	var raw struct {
		Chromosome  *fhir.CodeableConcept `json:"chromosome"`
		Extension   []*fhir.Extension     `json:"extension"`
		GenomeBuild *fhir.String          `json:"genomeBuild"`

		ID                  string                `json:"id"`
		ModifierExtension   []*fhir.Extension     `json:"modifierExtension"`
		Orientation         *fhir.Code            `json:"orientation"`
		ReferenceSeqID      *fhir.CodeableConcept `json:"referenceSeqId"`
		ReferenceSeqPointer *fhir.Reference       `json:"referenceSeqPointer"`
		ReferenceSeqString  *fhir.String          `json:"referenceSeqString"`
		Strand              *fhir.Code            `json:"strand"`
		WindowEnd           *fhir.Integer         `json:"windowEnd"`
		WindowStart         *fhir.Integer         `json:"windowStart"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	msrs.Chromosome = raw.Chromosome
	msrs.Extension = raw.Extension
	msrs.GenomeBuild = raw.GenomeBuild
	msrs.ID = raw.ID
	msrs.ModifierExtension = raw.ModifierExtension
	msrs.Orientation = raw.Orientation
	msrs.ReferenceSeqID = raw.ReferenceSeqID
	msrs.ReferenceSeqPointer = raw.ReferenceSeqPointer
	msrs.ReferenceSeqString = raw.ReferenceSeqString
	msrs.Strand = raw.Strand
	msrs.WindowEnd = raw.WindowEnd
	msrs.WindowStart = raw.WindowStart
	return nil
}

var _ json.Marshaler = (*MolecularSequenceReferenceSeq)(nil)
var _ json.Unmarshaler = (*MolecularSequenceReferenceSeq)(nil)

func (msr *MolecularSequenceRepository) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (msr *MolecularSequenceRepository) UnmarshalJSON(data []byte) error {
	var raw struct {
		DatasetID *fhir.String      `json:"datasetId"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Name              *fhir.String      `json:"name"`
		ReadsetID         *fhir.String      `json:"readsetId"`
		Type              *fhir.Code        `json:"type"`
		URL               *fhir.URI         `json:"url"`
		VariantsetID      *fhir.String      `json:"variantsetId"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	msr.DatasetID = raw.DatasetID
	msr.Extension = raw.Extension
	msr.ID = raw.ID
	msr.ModifierExtension = raw.ModifierExtension
	msr.Name = raw.Name
	msr.ReadsetID = raw.ReadsetID
	msr.Type = raw.Type
	msr.URL = raw.URL
	msr.VariantsetID = raw.VariantsetID
	return nil
}

var _ json.Marshaler = (*MolecularSequenceRepository)(nil)
var _ json.Unmarshaler = (*MolecularSequenceRepository)(nil)

func (mssv *MolecularSequenceStructureVariant) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mssv *MolecularSequenceStructureVariant) UnmarshalJSON(data []byte) error {
	var raw struct {
		Exact     *fhir.Boolean     `json:"exact"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                                  `json:"id"`
		Inner             *MolecularSequenceStructureVariantInner `json:"inner"`
		Length            *fhir.Integer                           `json:"length"`
		ModifierExtension []*fhir.Extension                       `json:"modifierExtension"`
		Outer             *MolecularSequenceStructureVariantOuter `json:"outer"`
		VariantType       *fhir.CodeableConcept                   `json:"variantType"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mssv.Exact = raw.Exact
	mssv.Extension = raw.Extension
	mssv.ID = raw.ID
	mssv.Inner = raw.Inner
	mssv.Length = raw.Length
	mssv.ModifierExtension = raw.ModifierExtension
	mssv.Outer = raw.Outer
	mssv.VariantType = raw.VariantType
	return nil
}

var _ json.Marshaler = (*MolecularSequenceStructureVariant)(nil)
var _ json.Unmarshaler = (*MolecularSequenceStructureVariant)(nil)

func (mssvi *MolecularSequenceStructureVariantInner) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mssvi *MolecularSequenceStructureVariantInner) UnmarshalJSON(data []byte) error {
	var raw struct {
		End       *fhir.Integer     `json:"end"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Start             *fhir.Integer     `json:"start"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mssvi.End = raw.End
	mssvi.Extension = raw.Extension
	mssvi.ID = raw.ID
	mssvi.ModifierExtension = raw.ModifierExtension
	mssvi.Start = raw.Start
	return nil
}

var _ json.Marshaler = (*MolecularSequenceStructureVariantInner)(nil)
var _ json.Unmarshaler = (*MolecularSequenceStructureVariantInner)(nil)

func (mssvo *MolecularSequenceStructureVariantOuter) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (mssvo *MolecularSequenceStructureVariantOuter) UnmarshalJSON(data []byte) error {
	var raw struct {
		End       *fhir.Integer     `json:"end"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Start             *fhir.Integer     `json:"start"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	mssvo.End = raw.End
	mssvo.Extension = raw.Extension
	mssvo.ID = raw.ID
	mssvo.ModifierExtension = raw.ModifierExtension
	mssvo.Start = raw.Start
	return nil
}

var _ json.Marshaler = (*MolecularSequenceStructureVariantOuter)(nil)
var _ json.Unmarshaler = (*MolecularSequenceStructureVariantOuter)(nil)

func (msv *MolecularSequenceVariant) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (msv *MolecularSequenceVariant) UnmarshalJSON(data []byte) error {
	var raw struct {
		Cigar     *fhir.String      `json:"cigar"`
		End       *fhir.Integer     `json:"end"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		ObservedAllele    *fhir.String      `json:"observedAllele"`
		ReferenceAllele   *fhir.String      `json:"referenceAllele"`
		Start             *fhir.Integer     `json:"start"`
		VariantPointer    *fhir.Reference   `json:"variantPointer"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	msv.Cigar = raw.Cigar
	msv.End = raw.End
	msv.Extension = raw.Extension
	msv.ID = raw.ID
	msv.ModifierExtension = raw.ModifierExtension
	msv.ObservedAllele = raw.ObservedAllele
	msv.ReferenceAllele = raw.ReferenceAllele
	msv.Start = raw.Start
	msv.VariantPointer = raw.VariantPointer
	return nil
}

var _ json.Marshaler = (*MolecularSequenceVariant)(nil)
var _ json.Unmarshaler = (*MolecularSequenceVariant)(nil)
