// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package nutritionorder

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// A request to supply a diet, formula feeding (enteral) or oral nutritional
// supplement to a patient/resident.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/NutritionOrder
//   - Source File: StructureDefinition-NutritionOrder.json
type NutritionOrder struct {

	// A link to a record of allergies or intolerances which should be included in
	// the nutrition order.
	AllergyIntolerance []*fhir.Reference `fhirpath:"allergyIntolerance"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The date and time that this nutrition order was requested.
	DateTime *fhir.DateTime `fhirpath:"dateTime"`

	// An encounter that provides additional information about the healthcare
	// context in which this request is made.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// Feeding provided through the gastrointestinal tract via a tube, catheter, or
	// stoma that delivers nutrition distal to the oral cavity.
	EnteralFormula *NutritionOrderEnteralFormula `fhirpath:"enteralFormula"`

	// This modifier is used to convey Order-specific modifier about the type of
	// oral food or oral fluids that should not be given. These can be derived from
	// patient allergies, intolerances, or preferences such as No Red Meat, No Soy
	// or No Wheat or Gluten-Free. While it should not be necessary to repeat
	// allergy or intolerance information captured in the referenced
	// AllergyIntolerance resource in the excludeFoodModifier, this element may be
	// used to convey additional specificity related to foods that should be
	// eliminated from the patientâ€™s diet for any reason. This modifier applies
	// to the entire nutrition order inclusive of the oral diet, nutritional
	// supplements and enteral formula feedings.
	ExcludeFoodModifier []*fhir.CodeableConcept `fhirpath:"excludeFoodModifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// This modifier is used to convey order-specific modifiers about the type of
	// food that should be given. These can be derived from patient allergies,
	// intolerances, or preferences such as Halal, Vegan or Kosher. This modifier
	// applies to the entire nutrition order inclusive of the oral diet,
	// nutritional supplements and enteral formula feedings.
	FoodPreferenceModifier []*fhir.CodeableConcept `fhirpath:"foodPreferenceModifier"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Identifiers assigned to this order by the order sender or by the order
	// receiver.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The URL pointing to a protocol, guideline, orderset or other definition that
	// is adhered to in whole or in part by this NutritionOrder.
	Instantiates []*fhir.URI `fhirpath:"instantiates"`

	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other
	// definition that is adhered to in whole or in part by this NutritionOrder.
	InstantiatesCanonical []*fhir.Canonical `fhirpath:"instantiatesCanonical"`

	// The URL pointing to an externally maintained protocol, guideline, orderset
	// or other definition that is adhered to in whole or in part by this
	// NutritionOrder.
	InstantiatesURI []*fhir.URI `fhirpath:"instantiatesUri"`

	// Indicates the level of authority/intentionality associated with the
	// NutrionOrder and where the request fits into the workflow chain.
	Intent *fhir.Code `fhirpath:"intent"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Comments made about the {{title}} by the requester, performer, subject or
	// other participants.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Diet given orally in contrast to enteral (tube) feeding.
	OralDiet *NutritionOrderOralDiet `fhirpath:"oralDiet"`

	// The practitioner that holds legal responsibility for ordering the diet,
	// nutritional supplement, or formula feedings.
	Orderer *fhir.Reference `fhirpath:"orderer"`

	// The person (patient) who needs the nutrition order for an oral diet,
	// nutritional supplement and/or enteral or formula feeding.
	Patient *fhir.Reference `fhirpath:"patient"`

	// The workflow status of the nutrition order/request.
	Status *fhir.Code `fhirpath:"status"`

	// Oral nutritional products given in order to add further nutritional value to
	// the patient's diet.
	Supplement []*NutritionOrderSupplement `fhirpath:"supplement"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetAllergyIntolerance returns the value of the field AllergyIntolerance.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetAllergyIntolerance() []*fhir.Reference {
	if no == nil {
		return nil
	}
	return no.AllergyIntolerance
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetContained() []fhir.Resource {
	if no == nil {
		return nil
	}
	return no.Contained
}

// GetDateTime returns the value of the field DateTime.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetDateTime() *fhir.DateTime {
	if no == nil {
		return nil
	}
	return no.DateTime
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetEncounter() *fhir.Reference {
	if no == nil {
		return nil
	}
	return no.Encounter
}

// GetEnteralFormula returns the value of the field EnteralFormula.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetEnteralFormula() *NutritionOrderEnteralFormula {
	if no == nil {
		return nil
	}
	return no.EnteralFormula
}

// GetExcludeFoodModifier returns the value of the field ExcludeFoodModifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetExcludeFoodModifier() []*fhir.CodeableConcept {
	if no == nil {
		return nil
	}
	return no.ExcludeFoodModifier
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetExtension() []*fhir.Extension {
	if no == nil {
		return nil
	}
	return no.Extension
}

// GetFoodPreferenceModifier returns the value of the field FoodPreferenceModifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetFoodPreferenceModifier() []*fhir.CodeableConcept {
	if no == nil {
		return nil
	}
	return no.FoodPreferenceModifier
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetID() string {
	if no == nil {
		return ""
	}
	return no.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetIdentifier() []*fhir.Identifier {
	if no == nil {
		return nil
	}
	return no.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetImplicitRules() *fhir.URI {
	if no == nil {
		return nil
	}
	return no.ImplicitRules
}

// GetInstantiates returns the value of the field Instantiates.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetInstantiates() []*fhir.URI {
	if no == nil {
		return nil
	}
	return no.Instantiates
}

// GetInstantiatesCanonical returns the value of the field InstantiatesCanonical.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetInstantiatesCanonical() []*fhir.Canonical {
	if no == nil {
		return nil
	}
	return no.InstantiatesCanonical
}

// GetInstantiatesURI returns the value of the field InstantiatesURI.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetInstantiatesURI() []*fhir.URI {
	if no == nil {
		return nil
	}
	return no.InstantiatesURI
}

// GetIntent returns the value of the field Intent.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetIntent() *fhir.Code {
	if no == nil {
		return nil
	}
	return no.Intent
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetLanguage() *fhir.Code {
	if no == nil {
		return nil
	}
	return no.Language
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetMeta() *fhir.Meta {
	if no == nil {
		return nil
	}
	return no.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetModifierExtension() []*fhir.Extension {
	if no == nil {
		return nil
	}
	return no.ModifierExtension
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetNote() []*fhir.Annotation {
	if no == nil {
		return nil
	}
	return no.Note
}

// GetOralDiet returns the value of the field OralDiet.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetOralDiet() *NutritionOrderOralDiet {
	if no == nil {
		return nil
	}
	return no.OralDiet
}

// GetOrderer returns the value of the field Orderer.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetOrderer() *fhir.Reference {
	if no == nil {
		return nil
	}
	return no.Orderer
}

// GetPatient returns the value of the field Patient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetPatient() *fhir.Reference {
	if no == nil {
		return nil
	}
	return no.Patient
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetStatus() *fhir.Code {
	if no == nil {
		return nil
	}
	return no.Status
}

// GetSupplement returns the value of the field Supplement.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetSupplement() []*NutritionOrderSupplement {
	if no == nil {
		return nil
	}
	return no.Supplement
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (no *NutritionOrder) GetText() *fhir.Narrative {
	if no == nil {
		return nil
	}
	return no.Text
}

// Enteral formula components// Feeding provided through the gastrointestinal tract via a tube, catheter, or
// stoma that delivers nutrition distal to the oral cavity.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-NutritionOrder.json
type NutritionOrderEnteralFormula struct {

	// The product or brand name of the type of modular component to be added to
	// the formula.
	AdditiveProductName *fhir.String `fhirpath:"additiveProductName"`

	// Indicates the type of modular component such as protein, carbohydrate, fat
	// or fiber to be provided in addition to or mixed with the base formula.
	AdditiveType *fhir.CodeableConcept `fhirpath:"additiveType"`

	// Formula administration instructions as structured data. This repeating
	// structure allows for changing the administration rate or volume over time
	// for both bolus and continuous feeding. An example of this would be an
	// instruction to increase the rate of continuous feeding every 2 hours.
	Administration []*NutritionOrderEnteralFormulaAdministration `fhirpath:"administration"`

	// Free text formula administration, feeding instructions or additional
	// instructions or information.
	AdministrationInstruction *fhir.String `fhirpath:"administrationInstruction"`

	// The product or brand name of the enteral or infant formula product such as
	// "ACME Adult Standard Formula".
	BaseFormulaProductName *fhir.String `fhirpath:"baseFormulaProductName"`

	// The type of enteral or infant formula such as an adult standard formula with
	// fiber or a soy-based infant formula.
	BaseFormulaType *fhir.CodeableConcept `fhirpath:"baseFormulaType"`

	// The amount of energy (calories) that the formula should provide per
	// specified volume, typically per mL or fluid oz. For example, an infant may
	// require a formula that provides 24 calories per fluid ounce or an adult may
	// require an enteral formula that provides 1.5 calorie/mL.
	CaloricDensity *fhir.Quantity `fhirpath:"caloricDensity"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The maximum total quantity of formula that may be administered to a subject
	// over the period of time, e.g. 1440 mL over 24 hours.
	MaxVolumeToDeliver *fhir.Quantity `fhirpath:"maxVolumeToDeliver"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The route or physiological path of administration into the patient's
	// gastrointestinal tract for purposes of providing the formula feeding, e.g.
	// nasogastric tube.
	RouteofAdministration *fhir.CodeableConcept `fhirpath:"routeofAdministration"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAdditiveProductName returns the value of the field AdditiveProductName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetAdditiveProductName() *fhir.String {
	if noef == nil {
		return nil
	}
	return noef.AdditiveProductName
}

// GetAdditiveType returns the value of the field AdditiveType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetAdditiveType() *fhir.CodeableConcept {
	if noef == nil {
		return nil
	}
	return noef.AdditiveType
}

// GetAdministration returns the value of the field Administration.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetAdministration() []*NutritionOrderEnteralFormulaAdministration {
	if noef == nil {
		return nil
	}
	return noef.Administration
}

// GetAdministrationInstruction returns the value of the field AdministrationInstruction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetAdministrationInstruction() *fhir.String {
	if noef == nil {
		return nil
	}
	return noef.AdministrationInstruction
}

// GetBaseFormulaProductName returns the value of the field BaseFormulaProductName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetBaseFormulaProductName() *fhir.String {
	if noef == nil {
		return nil
	}
	return noef.BaseFormulaProductName
}

// GetBaseFormulaType returns the value of the field BaseFormulaType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetBaseFormulaType() *fhir.CodeableConcept {
	if noef == nil {
		return nil
	}
	return noef.BaseFormulaType
}

// GetCaloricDensity returns the value of the field CaloricDensity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetCaloricDensity() *fhir.Quantity {
	if noef == nil {
		return nil
	}
	return noef.CaloricDensity
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetExtension() []*fhir.Extension {
	if noef == nil {
		return nil
	}
	return noef.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetID() string {
	if noef == nil {
		return ""
	}
	return noef.ID
}

// GetMaxVolumeToDeliver returns the value of the field MaxVolumeToDeliver.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetMaxVolumeToDeliver() *fhir.Quantity {
	if noef == nil {
		return nil
	}
	return noef.MaxVolumeToDeliver
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetModifierExtension() []*fhir.Extension {
	if noef == nil {
		return nil
	}
	return noef.ModifierExtension
}

// GetRouteofAdministration returns the value of the field RouteofAdministration.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noef *NutritionOrderEnteralFormula) GetRouteofAdministration() *fhir.CodeableConcept {
	if noef == nil {
		return nil
	}
	return noef.RouteofAdministration
}

// Formula feeding instruction as structured data// Formula administration instructions as structured data. This repeating
// structure allows for changing the administration rate or volume over time
// for both bolus and continuous feeding. An example of this would be an
// instruction to increase the rate of continuous feeding every 2 hours.// See implementation notes below for further discussion on how to order
// continuous vs bolus enteral feeding using this resource.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-NutritionOrder.json
type NutritionOrderEnteralFormulaAdministration struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The volume of formula to provide to the patient per the specified
	// administration schedule.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The rate of administration of formula via a feeding pump, e.g. 60 mL per
	// hour, according to the specified schedule.
	Rate fhir.Element `fhirpath:"rate"`

	// The time period and frequency at which the enteral formula should be
	// delivered to the patient.
	Schedule *fhir.Timing `fhirpath:"schedule"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noefa *NutritionOrderEnteralFormulaAdministration) GetExtension() []*fhir.Extension {
	if noefa == nil {
		return nil
	}
	return noefa.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noefa *NutritionOrderEnteralFormulaAdministration) GetID() string {
	if noefa == nil {
		return ""
	}
	return noefa.ID
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noefa *NutritionOrderEnteralFormulaAdministration) GetModifierExtension() []*fhir.Extension {
	if noefa == nil {
		return nil
	}
	return noefa.ModifierExtension
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noefa *NutritionOrderEnteralFormulaAdministration) GetQuantity() *fhir.Quantity {
	if noefa == nil {
		return nil
	}
	return noefa.Quantity
}

// GetRate returns the value of the field Rate.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noefa *NutritionOrderEnteralFormulaAdministration) GetRate() fhir.Element {
	if noefa == nil {
		return nil
	}
	return noefa.Rate
}

// GetRateQuantity returns the value of the field Rate.
func (noefa *NutritionOrderEnteralFormulaAdministration) GetRateQuantity() *fhir.Quantity {
	if noefa == nil {
		return nil
	}
	val, ok := noefa.Rate.(*fhir.Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetRateRatio returns the value of the field Rate.
func (noefa *NutritionOrderEnteralFormulaAdministration) GetRateRatio() *fhir.Ratio {
	if noefa == nil {
		return nil
	}
	val, ok := noefa.Rate.(*fhir.Ratio)
	if !ok {
		return nil
	}
	return val
} // GetSchedule returns the value of the field Schedule.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noefa *NutritionOrderEnteralFormulaAdministration) GetSchedule() *fhir.Timing {
	if noefa == nil {
		return nil
	}
	return noefa.Schedule
}

// Oral diet components// Diet given orally in contrast to enteral (tube) feeding.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-NutritionOrder.json
type NutritionOrderOralDiet struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.)
	// of liquids or fluids served to the patient.
	FluidConsistencyType []*fhir.CodeableConcept `fhirpath:"fluidConsistencyType"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Free text or additional instructions or information pertaining to the oral
	// diet.
	Instruction *fhir.String `fhirpath:"instruction"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// Class that defines the quantity and type of nutrient modifications (for
	// example carbohydrate, fiber or sodium) required for the oral diet.
	Nutrient []*NutritionOrderOralDietNutrient `fhirpath:"nutrient"`

	// The time period and frequency at which the diet should be given. The diet
	// should be given for the combination of all schedules if more than one
	// schedule is present.
	Schedule []*fhir.Timing `fhirpath:"schedule"`

	// Class that describes any texture modifications required for the patient to
	// safely consume various types of solid foods.
	Texture []*NutritionOrderOralDietTexture `fhirpath:"texture"`

	// The kind of diet or dietary restriction such as fiber restricted diet or
	// diabetic diet.
	Type []*fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nood *NutritionOrderOralDiet) GetExtension() []*fhir.Extension {
	if nood == nil {
		return nil
	}
	return nood.Extension
}

// GetFluidConsistencyType returns the value of the field FluidConsistencyType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nood *NutritionOrderOralDiet) GetFluidConsistencyType() []*fhir.CodeableConcept {
	if nood == nil {
		return nil
	}
	return nood.FluidConsistencyType
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nood *NutritionOrderOralDiet) GetID() string {
	if nood == nil {
		return ""
	}
	return nood.ID
}

// GetInstruction returns the value of the field Instruction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nood *NutritionOrderOralDiet) GetInstruction() *fhir.String {
	if nood == nil {
		return nil
	}
	return nood.Instruction
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nood *NutritionOrderOralDiet) GetModifierExtension() []*fhir.Extension {
	if nood == nil {
		return nil
	}
	return nood.ModifierExtension
}

// GetNutrient returns the value of the field Nutrient.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nood *NutritionOrderOralDiet) GetNutrient() []*NutritionOrderOralDietNutrient {
	if nood == nil {
		return nil
	}
	return nood.Nutrient
}

// GetSchedule returns the value of the field Schedule.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nood *NutritionOrderOralDiet) GetSchedule() []*fhir.Timing {
	if nood == nil {
		return nil
	}
	return nood.Schedule
}

// GetTexture returns the value of the field Texture.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nood *NutritionOrderOralDiet) GetTexture() []*NutritionOrderOralDietTexture {
	if nood == nil {
		return nil
	}
	return nood.Texture
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nood *NutritionOrderOralDiet) GetType() []*fhir.CodeableConcept {
	if nood == nil {
		return nil
	}
	return nood.Type
}

// Required nutrient modifications// Class that defines the quantity and type of nutrient modifications (for
// example carbohydrate, fiber or sodium) required for the oral diet.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-NutritionOrder.json
type NutritionOrderOralDietNutrient struct {

	// The quantity of the specified nutrient to include in diet.
	Amount *fhir.Quantity `fhirpath:"amount"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The nutrient that is being modified such as carbohydrate or sodium.
	Modifier *fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetAmount returns the value of the field Amount.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noodn *NutritionOrderOralDietNutrient) GetAmount() *fhir.Quantity {
	if noodn == nil {
		return nil
	}
	return noodn.Amount
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noodn *NutritionOrderOralDietNutrient) GetExtension() []*fhir.Extension {
	if noodn == nil {
		return nil
	}
	return noodn.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noodn *NutritionOrderOralDietNutrient) GetID() string {
	if noodn == nil {
		return ""
	}
	return noodn.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noodn *NutritionOrderOralDietNutrient) GetModifier() *fhir.CodeableConcept {
	if noodn == nil {
		return nil
	}
	return noodn.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noodn *NutritionOrderOralDietNutrient) GetModifierExtension() []*fhir.Extension {
	if noodn == nil {
		return nil
	}
	return noodn.ModifierExtension
}

// Required texture modifications// Class that describes any texture modifications required for the patient to
// safely consume various types of solid foods.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-NutritionOrder.json
type NutritionOrderOralDietTexture struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The food type(s) (e.g. meats, all foods) that the texture modification
	// applies to. This could be all foods types.
	FoodType *fhir.CodeableConcept `fhirpath:"foodType"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Any texture modifications (for solid foods) that should be made, e.g. easy
	// to chew, chopped, ground, and pureed.
	Modifier *fhir.CodeableConcept `fhirpath:"modifier"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noodt *NutritionOrderOralDietTexture) GetExtension() []*fhir.Extension {
	if noodt == nil {
		return nil
	}
	return noodt.Extension
}

// GetFoodType returns the value of the field FoodType.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noodt *NutritionOrderOralDietTexture) GetFoodType() *fhir.CodeableConcept {
	if noodt == nil {
		return nil
	}
	return noodt.FoodType
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noodt *NutritionOrderOralDietTexture) GetID() string {
	if noodt == nil {
		return ""
	}
	return noodt.ID
}

// GetModifier returns the value of the field Modifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noodt *NutritionOrderOralDietTexture) GetModifier() *fhir.CodeableConcept {
	if noodt == nil {
		return nil
	}
	return noodt.Modifier
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (noodt *NutritionOrderOralDietTexture) GetModifierExtension() []*fhir.Extension {
	if noodt == nil {
		return nil
	}
	return noodt.ModifierExtension
}

// Supplement components// Oral nutritional products given in order to add further nutritional value to
// the patient's diet.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-NutritionOrder.json
type NutritionOrderSupplement struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Free text or additional instructions or information pertaining to the oral
	// supplement.
	Instruction *fhir.String `fhirpath:"instruction"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The product or brand name of the nutritional supplement such as "Acme
	// Protein Shake".
	ProductName *fhir.String `fhirpath:"productName"`

	// The amount of the nutritional supplement to be given.
	Quantity *fhir.Quantity `fhirpath:"quantity"`

	// The time period and frequency at which the supplement(s) should be given.
	// The supplement should be given for the combination of all schedules if more
	// than one schedule is present.
	Schedule []*fhir.Timing `fhirpath:"schedule"`

	// The kind of nutritional supplement product required such as a high protein
	// or pediatric clear liquid supplement.
	Type *fhir.CodeableConcept `fhirpath:"type"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nos *NutritionOrderSupplement) GetExtension() []*fhir.Extension {
	if nos == nil {
		return nil
	}
	return nos.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nos *NutritionOrderSupplement) GetID() string {
	if nos == nil {
		return ""
	}
	return nos.ID
}

// GetInstruction returns the value of the field Instruction.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nos *NutritionOrderSupplement) GetInstruction() *fhir.String {
	if nos == nil {
		return nil
	}
	return nos.Instruction
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nos *NutritionOrderSupplement) GetModifierExtension() []*fhir.Extension {
	if nos == nil {
		return nil
	}
	return nos.ModifierExtension
}

// GetProductName returns the value of the field ProductName.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nos *NutritionOrderSupplement) GetProductName() *fhir.String {
	if nos == nil {
		return nil
	}
	return nos.ProductName
}

// GetQuantity returns the value of the field Quantity.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nos *NutritionOrderSupplement) GetQuantity() *fhir.Quantity {
	if nos == nil {
		return nil
	}
	return nos.Quantity
}

// GetSchedule returns the value of the field Schedule.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nos *NutritionOrderSupplement) GetSchedule() []*fhir.Timing {
	if nos == nil {
		return nil
	}
	return nos.Schedule
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (nos *NutritionOrderSupplement) GetType() *fhir.CodeableConcept {
	if nos == nil {
		return nil
	}
	return nos.Type
}

func (no *NutritionOrder) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (no *NutritionOrder) UnmarshalJSON(data []byte) error {
	var raw struct {
		AllergyIntolerance     []*fhir.Reference             `json:"allergyIntolerance"`
		Contained              []fhir.Resource               `json:"contained"`
		DateTime               *fhir.DateTime                `json:"dateTime"`
		Encounter              *fhir.Reference               `json:"encounter"`
		EnteralFormula         *NutritionOrderEnteralFormula `json:"enteralFormula"`
		ExcludeFoodModifier    []*fhir.CodeableConcept       `json:"excludeFoodModifier"`
		Extension              []*fhir.Extension             `json:"extension"`
		FoodPreferenceModifier []*fhir.CodeableConcept       `json:"foodPreferenceModifier"`

		ID                    string                      `json:"id"`
		Identifier            []*fhir.Identifier          `json:"identifier"`
		ImplicitRules         *fhir.URI                   `json:"implicitRules"`
		Instantiates          []*fhir.URI                 `json:"instantiates"`
		InstantiatesCanonical []*fhir.Canonical           `json:"instantiatesCanonical"`
		InstantiatesURI       []*fhir.URI                 `json:"instantiatesUri"`
		Intent                *fhir.Code                  `json:"intent"`
		Language              *fhir.Code                  `json:"language"`
		Meta                  *fhir.Meta                  `json:"meta"`
		ModifierExtension     []*fhir.Extension           `json:"modifierExtension"`
		Note                  []*fhir.Annotation          `json:"note"`
		OralDiet              *NutritionOrderOralDiet     `json:"oralDiet"`
		Orderer               *fhir.Reference             `json:"orderer"`
		Patient               *fhir.Reference             `json:"patient"`
		Status                *fhir.Code                  `json:"status"`
		Supplement            []*NutritionOrderSupplement `json:"supplement"`
		Text                  *fhir.Narrative             `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	no.AllergyIntolerance = raw.AllergyIntolerance
	no.Contained = raw.Contained
	no.DateTime = raw.DateTime
	no.Encounter = raw.Encounter
	no.EnteralFormula = raw.EnteralFormula
	no.ExcludeFoodModifier = raw.ExcludeFoodModifier
	no.Extension = raw.Extension
	no.FoodPreferenceModifier = raw.FoodPreferenceModifier
	no.ID = raw.ID
	no.Identifier = raw.Identifier
	no.ImplicitRules = raw.ImplicitRules
	no.Instantiates = raw.Instantiates
	no.InstantiatesCanonical = raw.InstantiatesCanonical
	no.InstantiatesURI = raw.InstantiatesURI
	no.Intent = raw.Intent
	no.Language = raw.Language
	no.Meta = raw.Meta
	no.ModifierExtension = raw.ModifierExtension
	no.Note = raw.Note
	no.OralDiet = raw.OralDiet
	no.Orderer = raw.Orderer
	no.Patient = raw.Patient
	no.Status = raw.Status
	no.Supplement = raw.Supplement
	no.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*NutritionOrder)(nil)
var _ json.Unmarshaler = (*NutritionOrder)(nil)

func (noef *NutritionOrderEnteralFormula) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (noef *NutritionOrderEnteralFormula) UnmarshalJSON(data []byte) error {
	var raw struct {
		AdditiveProductName       *fhir.String                                  `json:"additiveProductName"`
		AdditiveType              *fhir.CodeableConcept                         `json:"additiveType"`
		Administration            []*NutritionOrderEnteralFormulaAdministration `json:"administration"`
		AdministrationInstruction *fhir.String                                  `json:"administrationInstruction"`
		BaseFormulaProductName    *fhir.String                                  `json:"baseFormulaProductName"`
		BaseFormulaType           *fhir.CodeableConcept                         `json:"baseFormulaType"`
		CaloricDensity            *fhir.Quantity                                `json:"caloricDensity"`
		Extension                 []*fhir.Extension                             `json:"extension"`

		ID                    string                `json:"id"`
		MaxVolumeToDeliver    *fhir.Quantity        `json:"maxVolumeToDeliver"`
		ModifierExtension     []*fhir.Extension     `json:"modifierExtension"`
		RouteofAdministration *fhir.CodeableConcept `json:"routeofAdministration"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	noef.AdditiveProductName = raw.AdditiveProductName
	noef.AdditiveType = raw.AdditiveType
	noef.Administration = raw.Administration
	noef.AdministrationInstruction = raw.AdministrationInstruction
	noef.BaseFormulaProductName = raw.BaseFormulaProductName
	noef.BaseFormulaType = raw.BaseFormulaType
	noef.CaloricDensity = raw.CaloricDensity
	noef.Extension = raw.Extension
	noef.ID = raw.ID
	noef.MaxVolumeToDeliver = raw.MaxVolumeToDeliver
	noef.ModifierExtension = raw.ModifierExtension
	noef.RouteofAdministration = raw.RouteofAdministration
	return nil
}

var _ json.Marshaler = (*NutritionOrderEnteralFormula)(nil)
var _ json.Unmarshaler = (*NutritionOrderEnteralFormula)(nil)

func (noefa *NutritionOrderEnteralFormulaAdministration) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (noefa *NutritionOrderEnteralFormulaAdministration) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string            `json:"id"`
		ModifierExtension []*fhir.Extension `json:"modifierExtension"`
		Quantity          *fhir.Quantity    `json:"quantity"`
		RateQuantity      *fhir.Quantity    `json:"rateQuantity"`
		RateRatio         *fhir.Ratio       `json:"rateRatio"`
		Schedule          *fhir.Timing      `json:"schedule"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	noefa.Extension = raw.Extension
	noefa.ID = raw.ID
	noefa.ModifierExtension = raw.ModifierExtension
	noefa.Quantity = raw.Quantity
	noefa.Rate, err = validate.SelectOneOf[fhir.Element]("NutritionOrder.enteralFormula.administration.rate",
		raw.RateQuantity,
		raw.RateRatio)
	if err != nil {
		return err
	}
	noefa.Schedule = raw.Schedule
	return nil
}

var _ json.Marshaler = (*NutritionOrderEnteralFormulaAdministration)(nil)
var _ json.Unmarshaler = (*NutritionOrderEnteralFormulaAdministration)(nil)

func (nood *NutritionOrderOralDiet) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (nood *NutritionOrderOralDiet) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension            []*fhir.Extension       `json:"extension"`
		FluidConsistencyType []*fhir.CodeableConcept `json:"fluidConsistencyType"`

		ID                string                            `json:"id"`
		Instruction       *fhir.String                      `json:"instruction"`
		ModifierExtension []*fhir.Extension                 `json:"modifierExtension"`
		Nutrient          []*NutritionOrderOralDietNutrient `json:"nutrient"`
		Schedule          []*fhir.Timing                    `json:"schedule"`
		Texture           []*NutritionOrderOralDietTexture  `json:"texture"`
		Type              []*fhir.CodeableConcept           `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	nood.Extension = raw.Extension
	nood.FluidConsistencyType = raw.FluidConsistencyType
	nood.ID = raw.ID
	nood.Instruction = raw.Instruction
	nood.ModifierExtension = raw.ModifierExtension
	nood.Nutrient = raw.Nutrient
	nood.Schedule = raw.Schedule
	nood.Texture = raw.Texture
	nood.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*NutritionOrderOralDiet)(nil)
var _ json.Unmarshaler = (*NutritionOrderOralDiet)(nil)

func (noodn *NutritionOrderOralDietNutrient) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (noodn *NutritionOrderOralDietNutrient) UnmarshalJSON(data []byte) error {
	var raw struct {
		Amount    *fhir.Quantity    `json:"amount"`
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		Modifier          *fhir.CodeableConcept `json:"modifier"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	noodn.Amount = raw.Amount
	noodn.Extension = raw.Extension
	noodn.ID = raw.ID
	noodn.Modifier = raw.Modifier
	noodn.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*NutritionOrderOralDietNutrient)(nil)
var _ json.Unmarshaler = (*NutritionOrderOralDietNutrient)(nil)

func (noodt *NutritionOrderOralDietTexture) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (noodt *NutritionOrderOralDietTexture) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension     `json:"extension"`
		FoodType  *fhir.CodeableConcept `json:"foodType"`

		ID                string                `json:"id"`
		Modifier          *fhir.CodeableConcept `json:"modifier"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	noodt.Extension = raw.Extension
	noodt.FoodType = raw.FoodType
	noodt.ID = raw.ID
	noodt.Modifier = raw.Modifier
	noodt.ModifierExtension = raw.ModifierExtension
	return nil
}

var _ json.Marshaler = (*NutritionOrderOralDietTexture)(nil)
var _ json.Unmarshaler = (*NutritionOrderOralDietTexture)(nil)

func (nos *NutritionOrderSupplement) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (nos *NutritionOrderSupplement) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                `json:"id"`
		Instruction       *fhir.String          `json:"instruction"`
		ModifierExtension []*fhir.Extension     `json:"modifierExtension"`
		ProductName       *fhir.String          `json:"productName"`
		Quantity          *fhir.Quantity        `json:"quantity"`
		Schedule          []*fhir.Timing        `json:"schedule"`
		Type              *fhir.CodeableConcept `json:"type"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	nos.Extension = raw.Extension
	nos.ID = raw.ID
	nos.Instruction = raw.Instruction
	nos.ModifierExtension = raw.ModifierExtension
	nos.ProductName = raw.ProductName
	nos.Quantity = raw.Quantity
	nos.Schedule = raw.Schedule
	nos.Type = raw.Type
	return nil
}

var _ json.Marshaler = (*NutritionOrderSupplement)(nil)
var _ json.Unmarshaler = (*NutritionOrderSupplement)(nil)
