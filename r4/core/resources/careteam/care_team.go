// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package careteam

import (
	"github.com/friendly-fhir/go-fhir/r4/core"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// The Care Team includes all the people and organizations who plan to
// participate in the coordination and delivery of care for a patient.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/CareTeam
//   - Source File: StructureDefinition-CareTeam.json
type CareTeam struct {

	// Identifies what kind of team. This is to support differentiation between
	// multiple co-existing teams, such as care plan team, episode of care team,
	// longitudinal care team.
	Category []*fhir.CodeableConcept `fhirpath:"category"`

	// These resources do not have an independent existence apart from the resource
	// that contains them - they cannot be identified independently, and nor can
	// they have their own independent transaction scope.
	Contained []fhir.Resource `fhirpath:"contained"`

	// The Encounter during which this CareTeam was created or to which the
	// creation of this record is tightly associated.
	Encounter *fhir.Reference `fhirpath:"encounter"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// The logical id of the resource, as used in the URL for the resource. Once
	// assigned, this value never changes.
	ID string `fhirpath:"id"`

	// Business identifiers assigned to this care team by the performer or other
	// systems which remain constant as the resource is updated and propagates from
	// server to server.
	Identifier []*fhir.Identifier `fhirpath:"identifier"`

	// A reference to a set of rules that were followed when the resource was
	// constructed, and which must be understood when processing the content.
	// Often, this is a reference to an implementation guide that defines the
	// special rules along with other profiles etc.
	ImplicitRules *fhir.URI `fhirpath:"implicitRules"`

	// The base language in which the resource is written.
	Language *fhir.Code `fhirpath:"language"`

	// The organization responsible for the care team.
	ManagingOrganization []*fhir.Reference `fhirpath:"managingOrganization"`

	// The metadata about the resource. This is content that is maintained by the
	// infrastructure. Changes to the content might not always be associated with
	// version changes to the resource.
	Meta *fhir.Meta `fhirpath:"meta"`

	// May be used to represent additional information that is not part of the
	// basic definition of the resource and that modifies the understanding of the
	// element that contains it and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer is allowed to define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// A label for human use intended to distinguish like teams. E.g. the "red" vs.
	// "green" trauma teams.
	Name *fhir.String `fhirpath:"name"`

	// Comments made about the CareTeam.
	Note []*fhir.Annotation `fhirpath:"note"`

	// Identifies all people and organizations who are expected to be involved in
	// the care team.
	Participant []*CareTeamParticipant `fhirpath:"participant"`

	// Indicates when the team did (or is intended to) come into effect and end.
	Period *fhir.Period `fhirpath:"period"`

	// Describes why the care team exists.
	ReasonCode []*fhir.CodeableConcept `fhirpath:"reasonCode"`

	// Condition(s) that this care team addresses.
	ReasonReference []*fhir.Reference `fhirpath:"reasonReference"`

	// Indicates the current state of the care team.
	Status *fhir.Code `fhirpath:"status"`

	// Identifies the patient or group whose intended care is handled by the team.
	Subject *fhir.Reference `fhirpath:"subject"`

	// A central contact detail for the care team (that applies to all members).
	Telecom []*fhir.ContactPoint `fhirpath:"telecom"`

	// A human-readable narrative that contains a summary of the resource and can
	// be used to represent the content of the resource to a human. The narrative
	// need not encode all the structured data, but is required to contain
	// sufficient detail to make it "clinically safe" for a human to just read the
	// narrative. Resource definitions may define what content should be
	// represented in the narrative to ensure clinical safety.
	Text *fhir.Narrative `fhirpath:"text"`

	profileimpl.BaseDomainResource
	profileimpl.BaseResource
}

// GetCategory returns the value of the field Category.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetCategory() []*fhir.CodeableConcept {
	if ct == nil {
		return nil
	}
	return ct.Category
}

// GetContained returns the value of the field Contained.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetContained() []fhir.Resource {
	if ct == nil {
		return nil
	}
	return ct.Contained
}

// GetEncounter returns the value of the field Encounter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetEncounter() *fhir.Reference {
	if ct == nil {
		return nil
	}
	return ct.Encounter
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetExtension() []*fhir.Extension {
	if ct == nil {
		return nil
	}
	return ct.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetID() string {
	if ct == nil {
		return ""
	}
	return ct.ID
}

// GetIdentifier returns the value of the field Identifier.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetIdentifier() []*fhir.Identifier {
	if ct == nil {
		return nil
	}
	return ct.Identifier
}

// GetImplicitRules returns the value of the field ImplicitRules.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetImplicitRules() *fhir.URI {
	if ct == nil {
		return nil
	}
	return ct.ImplicitRules
}

// GetLanguage returns the value of the field Language.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetLanguage() *fhir.Code {
	if ct == nil {
		return nil
	}
	return ct.Language
}

// GetManagingOrganization returns the value of the field ManagingOrganization.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetManagingOrganization() []*fhir.Reference {
	if ct == nil {
		return nil
	}
	return ct.ManagingOrganization
}

// GetMeta returns the value of the field Meta.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetMeta() *fhir.Meta {
	if ct == nil {
		return nil
	}
	return ct.Meta
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetModifierExtension() []*fhir.Extension {
	if ct == nil {
		return nil
	}
	return ct.ModifierExtension
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetName() *fhir.String {
	if ct == nil {
		return nil
	}
	return ct.Name
}

// GetNote returns the value of the field Note.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetNote() []*fhir.Annotation {
	if ct == nil {
		return nil
	}
	return ct.Note
}

// GetParticipant returns the value of the field Participant.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetParticipant() []*CareTeamParticipant {
	if ct == nil {
		return nil
	}
	return ct.Participant
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetPeriod() *fhir.Period {
	if ct == nil {
		return nil
	}
	return ct.Period
}

// GetReasonCode returns the value of the field ReasonCode.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetReasonCode() []*fhir.CodeableConcept {
	if ct == nil {
		return nil
	}
	return ct.ReasonCode
}

// GetReasonReference returns the value of the field ReasonReference.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetReasonReference() []*fhir.Reference {
	if ct == nil {
		return nil
	}
	return ct.ReasonReference
}

// GetStatus returns the value of the field Status.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetStatus() *fhir.Code {
	if ct == nil {
		return nil
	}
	return ct.Status
}

// GetSubject returns the value of the field Subject.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetSubject() *fhir.Reference {
	if ct == nil {
		return nil
	}
	return ct.Subject
}

// GetTelecom returns the value of the field Telecom.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetTelecom() []*fhir.ContactPoint {
	if ct == nil {
		return nil
	}
	return ct.Telecom
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ct *CareTeam) GetText() *fhir.Narrative {
	if ct == nil {
		return nil
	}
	return ct.Text
}

// Members of the team// Identifies all people and organizations who are expected to be involved in
// the care team.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-CareTeam.json
type CareTeamParticipant struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*fhir.Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The specific person or organization who is participating/expected to
	// participate in the care team.
	Member *fhir.Reference `fhirpath:"member"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*fhir.Extension `fhirpath:"modifierExtension"`

	// The organization of the practitioner.
	OnBehalfOf *fhir.Reference `fhirpath:"onBehalfOf"`

	// Indicates when the specific member or organization did (or is intended to)
	// come into effect and end.
	Period *fhir.Period `fhirpath:"period"`

	// Indicates specific responsibility of an individual within the care team,
	// such as "Primary care physician", "Trained social worker counselor",
	// "Caregiver", etc.
	Role []*fhir.CodeableConcept `fhirpath:"role"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ctp *CareTeamParticipant) GetExtension() []*fhir.Extension {
	if ctp == nil {
		return nil
	}
	return ctp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ctp *CareTeamParticipant) GetID() string {
	if ctp == nil {
		return ""
	}
	return ctp.ID
}

// GetMember returns the value of the field Member.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ctp *CareTeamParticipant) GetMember() *fhir.Reference {
	if ctp == nil {
		return nil
	}
	return ctp.Member
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ctp *CareTeamParticipant) GetModifierExtension() []*fhir.Extension {
	if ctp == nil {
		return nil
	}
	return ctp.ModifierExtension
}

// GetOnBehalfOf returns the value of the field OnBehalfOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ctp *CareTeamParticipant) GetOnBehalfOf() *fhir.Reference {
	if ctp == nil {
		return nil
	}
	return ctp.OnBehalfOf
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ctp *CareTeamParticipant) GetPeriod() *fhir.Period {
	if ctp == nil {
		return nil
	}
	return ctp.Period
}

// GetRole returns the value of the field Role.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (ctp *CareTeamParticipant) GetRole() []*fhir.CodeableConcept {
	if ctp == nil {
		return nil
	}
	return ctp.Role
}

func (ct *CareTeam) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ct *CareTeam) UnmarshalJSON(data []byte) error {
	var raw struct {
		Category  []*fhir.CodeableConcept `json:"category"`
		Contained []fhir.Resource         `json:"contained"`
		Encounter *fhir.Reference         `json:"encounter"`
		Extension []*fhir.Extension       `json:"extension"`

		ID                   string                  `json:"id"`
		Identifier           []*fhir.Identifier      `json:"identifier"`
		ImplicitRules        *fhir.URI               `json:"implicitRules"`
		Language             *fhir.Code              `json:"language"`
		ManagingOrganization []*fhir.Reference       `json:"managingOrganization"`
		Meta                 *fhir.Meta              `json:"meta"`
		ModifierExtension    []*fhir.Extension       `json:"modifierExtension"`
		Name                 *fhir.String            `json:"name"`
		Note                 []*fhir.Annotation      `json:"note"`
		Participant          []*CareTeamParticipant  `json:"participant"`
		Period               *fhir.Period            `json:"period"`
		ReasonCode           []*fhir.CodeableConcept `json:"reasonCode"`
		ReasonReference      []*fhir.Reference       `json:"reasonReference"`
		Status               *fhir.Code              `json:"status"`
		Subject              *fhir.Reference         `json:"subject"`
		Telecom              []*fhir.ContactPoint    `json:"telecom"`
		Text                 *fhir.Narrative         `json:"text"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ct.Category = raw.Category
	ct.Contained = raw.Contained
	ct.Encounter = raw.Encounter
	ct.Extension = raw.Extension
	ct.ID = raw.ID
	ct.Identifier = raw.Identifier
	ct.ImplicitRules = raw.ImplicitRules
	ct.Language = raw.Language
	ct.ManagingOrganization = raw.ManagingOrganization
	ct.Meta = raw.Meta
	ct.ModifierExtension = raw.ModifierExtension
	ct.Name = raw.Name
	ct.Note = raw.Note
	ct.Participant = raw.Participant
	ct.Period = raw.Period
	ct.ReasonCode = raw.ReasonCode
	ct.ReasonReference = raw.ReasonReference
	ct.Status = raw.Status
	ct.Subject = raw.Subject
	ct.Telecom = raw.Telecom
	ct.Text = raw.Text
	return nil
}

var _ json.Marshaler = (*CareTeam)(nil)
var _ json.Unmarshaler = (*CareTeam)(nil)

func (ctp *CareTeamParticipant) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (ctp *CareTeamParticipant) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*fhir.Extension `json:"extension"`

		ID                string                  `json:"id"`
		Member            *fhir.Reference         `json:"member"`
		ModifierExtension []*fhir.Extension       `json:"modifierExtension"`
		OnBehalfOf        *fhir.Reference         `json:"onBehalfOf"`
		Period            *fhir.Period            `json:"period"`
		Role              []*fhir.CodeableConcept `json:"role"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	ctp.Extension = raw.Extension
	ctp.ID = raw.ID
	ctp.Member = raw.Member
	ctp.ModifierExtension = raw.ModifierExtension
	ctp.OnBehalfOf = raw.OnBehalfOf
	ctp.Period = raw.Period
	ctp.Role = raw.Role
	return nil
}

var _ json.Marshaler = (*CareTeamParticipant)(nil)
var _ json.Unmarshaler = (*CareTeamParticipant)(nil)
