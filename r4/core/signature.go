// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for Signature Type: A signature along with
// supporting context. The signature may be a digital signature that is
// cryptographic in nature, or some other signature acceptable to the domain.
// This other signature may be as simple as a graphical image representing a
// hand-written signature, or a signature ceremony Different signature
// approaches have different utilities.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Signature
//   - Source File: StructureDefinition-Signature.json
type Signature struct {

	// The base64 encoding of the Signature content. When signature is not recorded
	// electronically this element would be empty.
	Data *Base64Binary `fhirpath:"data"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A reference to an application-usable description of the identity that is
	// represented by the signature.
	OnBehalfOf *Reference `fhirpath:"onBehalfOf"`

	// A mime type that indicates the technical format of the signature. Important
	// mime types are application/signature+xml for X ML DigSig, application/jose
	// for JWS, and image/* for a graphical image of a signature, etc.
	SigFormat *Code `fhirpath:"sigFormat"`

	// A mime type that indicates the technical format of the target resources
	// signed by the signature.
	TargetFormat *Code `fhirpath:"targetFormat"`

	// An indication of the reason that the entity signed this document. This may
	// be explicitly included as part of the signature information and can be used
	// when determining accountability for various actions concerning the document.
	Type []*Coding `fhirpath:"type"`

	// When the digital signature was signed.
	When *Instant `fhirpath:"when"`

	// A reference to an application-usable description of the identity that signed
	// (e.g. the signature used their private key).
	Who *Reference `fhirpath:"who"`

	profileimpl.BaseElement
}

// GetData returns the value of the field Data.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Signature) GetData() *Base64Binary {
	if s == nil {
		return nil
	}
	return s.Data
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Signature) GetExtension() []*Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Signature) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

// GetOnBehalfOf returns the value of the field OnBehalfOf.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Signature) GetOnBehalfOf() *Reference {
	if s == nil {
		return nil
	}
	return s.OnBehalfOf
}

// GetSigFormat returns the value of the field SigFormat.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Signature) GetSigFormat() *Code {
	if s == nil {
		return nil
	}
	return s.SigFormat
}

// GetTargetFormat returns the value of the field TargetFormat.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Signature) GetTargetFormat() *Code {
	if s == nil {
		return nil
	}
	return s.TargetFormat
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Signature) GetType() []*Coding {
	if s == nil {
		return nil
	}
	return s.Type
}

// GetWhen returns the value of the field When.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Signature) GetWhen() *Instant {
	if s == nil {
		return nil
	}
	return s.When
}

// GetWho returns the value of the field Who.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (s *Signature) GetWho() *Reference {
	if s == nil {
		return nil
	}
	return s.Who
}

func (s *Signature) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (s *Signature) UnmarshalJSON(data []byte) error {
	var raw struct {
		Data      *Base64Binary `json:"data"`
		Extension []*Extension  `json:"extension"`

		ID           string     `json:"id"`
		OnBehalfOf   *Reference `json:"onBehalfOf"`
		SigFormat    *Code      `json:"sigFormat"`
		TargetFormat *Code      `json:"targetFormat"`
		Type         []*Coding  `json:"type"`
		When         *Instant   `json:"when"`
		Who          *Reference `json:"who"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	s.Data = raw.Data
	s.Extension = raw.Extension
	s.ID = raw.ID
	s.OnBehalfOf = raw.OnBehalfOf
	s.SigFormat = raw.SigFormat
	s.TargetFormat = raw.TargetFormat
	s.Type = raw.Type
	s.When = raw.When
	s.Who = raw.Who
	return nil
}

var _ json.Marshaler = (*Signature)(nil)
var _ json.Unmarshaler = (*Signature)(nil)
