// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for SampledData Type: A series of measurements
// taken by a device, with upper and lower limits. There may be more than one
// dimension in the data.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/SampledData
//   - Source File: StructureDefinition-SampledData.json
type SampledData struct {

	// A series of data points which are decimal values separated by a single space
	// (character u20). The special values "E" (error), "L" (below detection limit)
	// and "U" (above detection limit) can also be used in place of a decimal
	// value.
	Data *String `json:"data"`

	// The number of sample points at each time point. If this value is greater
	// than one, then the dimensions will be interlaced - all the sample points for
	// a point in time will be recorded at once.
	Dimensions *PositiveInt `json:"dimensions"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// A correction factor that is applied to the sampled data points before they
	// are added to the origin.
	Factor *Decimal `json:"factor"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// The lower limit of detection of the measured points. This is needed if any
	// of the data points have the value "L" (lower than detection limit).
	LowerLimit *Decimal `json:"lowerLimit"`

	// The base quantity that a measured value of zero represents. In addition,
	// this provides the units of the entire measurement series.
	Origin *Quantity `json:"origin"`

	// The length of time between sampling times, measured in milliseconds.
	Period *Decimal `json:"period"`

	// The upper limit of detection of the measured points. This is needed if any
	// of the data points have the value "U" (higher than detection limit).
	UpperLimit *Decimal `json:"upperLimit"`

	profileimpl.BaseElement
}

func (s *SampledData) GetData() *String {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SampledData) GetDimensions() *PositiveInt {
	if s == nil {
		return nil
	}
	return s.Dimensions
}

func (s *SampledData) GetExtension() []*Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

func (s *SampledData) GetFactor() *Decimal {
	if s == nil {
		return nil
	}
	return s.Factor
}

func (s *SampledData) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SampledData) GetLowerLimit() *Decimal {
	if s == nil {
		return nil
	}
	return s.LowerLimit
}

func (s *SampledData) GetOrigin() *Quantity {
	if s == nil {
		return nil
	}
	return s.Origin
}

func (s *SampledData) GetPeriod() *Decimal {
	if s == nil {
		return nil
	}
	return s.Period
}

func (s *SampledData) GetUpperLimit() *Decimal {
	if s == nil {
		return nil
	}
	return s.UpperLimit
}
