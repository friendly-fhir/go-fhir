// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for Ratio Type: A relationship of two Quantity
// values - expressed as a numerator and a denominator.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Ratio
//   - Source File: StructureDefinition-Ratio.json
type Ratio struct {

	// The value of the denominator.
	Denominator *Quantity `fhirpath:"denominator"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The value of the numerator.
	Numerator *Quantity `fhirpath:"numerator"`

	profileimpl.BaseElement
}

// GetDenominator returns the value of the field Denominator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (r *Ratio) GetDenominator() *Quantity {
	if r == nil {
		return nil
	}
	return r.Denominator
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (r *Ratio) GetExtension() []*Extension {
	if r == nil {
		return nil
	}
	return r.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (r *Ratio) GetID() string {
	if r == nil {
		return ""
	}
	return r.ID
}

// GetNumerator returns the value of the field Numerator.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (r *Ratio) GetNumerator() *Quantity {
	if r == nil {
		return nil
	}
	return r.Numerator
}
