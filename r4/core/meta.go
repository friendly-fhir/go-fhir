// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for Meta Type: The metadata about a resource. This
// is content in the resource that is maintained by the infrastructure. Changes
// to the content might not always be associated with version changes to the
// resource.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Meta
//   - Source File: StructureDefinition-Meta.json
type Meta struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// When the resource last changed - e.g. when the version changed.
	LastUpdated *Instant `fhirpath:"lastUpdated"`

	// A list of profiles (references to
	// [StructureDefinition](structuredefinition.html#) resources) that this
	// resource claims to conform to. The URL is a reference to
	// [StructureDefinition.url](structuredefinition-definitions.html#StructureDefinition.url).
	Profile []*Canonical `fhirpath:"profile"`

	// Security labels applied to this resource. These tags connect specific
	// resources to the overall security policy and infrastructure.
	Security []*Coding `fhirpath:"security"`

	// A uri that identifies the source system of the resource. This provides a
	// minimal amount of [Provenance](provenance.html#) information that can be
	// used to track or differentiate the source of information in the resource.
	// The source may identify another FHIR server, document, message, database,
	// etc.
	Source *URI `fhirpath:"source"`

	// Tags applied to this resource. Tags are intended to be used to identify and
	// relate resources to process and workflow, and applications are not required
	// to consider the tags when interpreting the meaning of a resource.
	Tag []*Coding `fhirpath:"tag"`

	// The version specific identifier, as it appears in the version portion of the
	// URL. This value changes when the resource is created, updated, or deleted.
	VersionID *ID `fhirpath:"versionId"`

	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Meta) GetExtension() []*Extension {
	if m == nil {
		return nil
	}
	return m.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Meta) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

// GetLastUpdated returns the value of the field LastUpdated.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Meta) GetLastUpdated() *Instant {
	if m == nil {
		return nil
	}
	return m.LastUpdated
}

// GetProfile returns the value of the field Profile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Meta) GetProfile() []*Canonical {
	if m == nil {
		return nil
	}
	return m.Profile
}

// GetSecurity returns the value of the field Security.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Meta) GetSecurity() []*Coding {
	if m == nil {
		return nil
	}
	return m.Security
}

// GetSource returns the value of the field Source.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Meta) GetSource() *URI {
	if m == nil {
		return nil
	}
	return m.Source
}

// GetTag returns the value of the field Tag.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Meta) GetTag() []*Coding {
	if m == nil {
		return nil
	}
	return m.Tag
}

// GetVersionID returns the value of the field VersionID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (m *Meta) GetVersionID() *ID {
	if m == nil {
		return nil
	}
	return m.VersionID
}

func (m *Meta) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (m *Meta) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*Extension `json:"extension"`

		ID          string       `json:"id"`
		LastUpdated *Instant     `json:"lastUpdated"`
		Profile     []*Canonical `json:"profile"`
		Security    []*Coding    `json:"security"`
		Source      *URI         `json:"source"`
		Tag         []*Coding    `json:"tag"`
		VersionID   *ID          `json:"versionId"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	m.Extension = raw.Extension
	m.ID = raw.ID
	m.LastUpdated = raw.LastUpdated
	m.Profile = raw.Profile
	m.Security = raw.Security
	m.Source = raw.Source
	m.Tag = raw.Tag
	m.VersionID = raw.VersionID
	return nil
}

var _ json.Marshaler = (*Meta)(nil)
var _ json.Unmarshaler = (*Meta)(nil)
