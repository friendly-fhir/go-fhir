// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for ContactPoint Type: Details for all kinds of
// technology mediated contact points for a person or organization, including
// telephone, email, etc.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ContactPoint
//   - Source File: StructureDefinition-ContactPoint.json
type ContactPoint struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Time period when the contact point was/is in use.
	Period *Period `fhirpath:"period"`

	// Specifies a preferred order in which to use a set of contacts. ContactPoints
	// with lower rank values are more preferred than those with higher rank
	// values.
	Rank *PositiveInt `fhirpath:"rank"`

	// Telecommunications form for contact point - what communications system is
	// required to make use of the contact.
	System *Code `fhirpath:"system"`

	// Identifies the purpose for the contact point.
	Use *Code `fhirpath:"use"`

	// The actual contact point details, in a form that is meaningful to the
	// designated communication system (i.e. phone number or email address).
	Value *String `fhirpath:"value"`

	profileimpl.BaseElement
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ContactPoint) GetExtension() []*Extension {
	if cp == nil {
		return nil
	}
	return cp.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ContactPoint) GetID() string {
	if cp == nil {
		return ""
	}
	return cp.ID
}

// GetPeriod returns the value of the field Period.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ContactPoint) GetPeriod() *Period {
	if cp == nil {
		return nil
	}
	return cp.Period
}

// GetRank returns the value of the field Rank.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ContactPoint) GetRank() *PositiveInt {
	if cp == nil {
		return nil
	}
	return cp.Rank
}

// GetSystem returns the value of the field System.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ContactPoint) GetSystem() *Code {
	if cp == nil {
		return nil
	}
	return cp.System
}

// GetUse returns the value of the field Use.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ContactPoint) GetUse() *Code {
	if cp == nil {
		return nil
	}
	return cp.Use
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (cp *ContactPoint) GetValue() *String {
	if cp == nil {
		return nil
	}
	return cp.Value
}

func (cp *ContactPoint) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (cp *ContactPoint) UnmarshalJSON(data []byte) error {
	var raw struct {
		Extension []*Extension `json:"extension"`

		ID     string       `json:"id"`
		Period *Period      `json:"period"`
		Rank   *PositiveInt `json:"rank"`
		System *Code        `json:"system"`
		Use    *Code        `json:"use"`
		Value  *String      `json:"value"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	cp.Extension = raw.Extension
	cp.ID = raw.ID
	cp.Period = raw.Period
	cp.Rank = raw.Rank
	cp.System = raw.System
	cp.Use = raw.Use
	cp.Value = raw.Value
	return nil
}

var _ json.Marshaler = (*ContactPoint)(nil)
var _ json.Unmarshaler = (*ContactPoint)(nil)
