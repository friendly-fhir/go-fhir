// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for Expression Type: A expression that is evaluated
// in a specified context and returns a value. The context of use of the
// expression must specify the context in which the expression is evaluated,
// and how the result of the expression is used.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Expression
//   - Source File: StructureDefinition-Expression.json
type Expression struct {

	// A brief, natural language description of the condition that effectively
	// communicates the intended semantics.
	Description *String `json:"description"`

	// An expression in the specified language that returns a value.
	Expression *String `json:"expression"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// The media type of the language for the expression.
	Language *Code `json:"language"`

	// A short name assigned to the expression to allow for multiple reuse of the
	// expression in the context where it is defined.
	Name *Id `json:"name"`

	// A URI that defines where the expression is found.
	Reference *Uri `json:"reference"`

	profileimpl.BaseElement
}

func (e *Expression) GetDescription() *String {
	if e == nil {
		return nil
	}
	return e.Description
}

func (e *Expression) GetExpression() *String {
	if e == nil {
		return nil
	}
	return e.Expression
}

func (e *Expression) GetExtension() []*Extension {
	if e == nil {
		return nil
	}
	return e.Extension
}

func (e *Expression) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *Expression) GetLanguage() *Code {
	if e == nil {
		return nil
	}
	return e.Language
}

func (e *Expression) GetName() *Id {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *Expression) GetReference() *Uri {
	if e == nil {
		return nil
	}
	return e.Reference
}
