// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for Annotation Type: A text note which also
// contains information about who made the statement and when.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Annotation
//   - Source File: StructureDefinition-Annotation.json
type Annotation struct {

	// The individual responsible for making the annotation.
	Author Element `fhirpath:"author"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The text of the annotation in markdown format.
	Text *Markdown `fhirpath:"text"`

	// Indicates when this particular annotation was made.
	Time *DateTime `fhirpath:"time"`

	profileimpl.BaseElement
}

// GetAuthor returns the value of the field Author.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Annotation) GetAuthor() Element {
	if a == nil {
		return nil
	}
	return a.Author
}

// GetAuthorReference returns the value of the field Author.
func (a *Annotation) GetAuthorReference() *Reference {
	if a == nil {
		return nil
	}
	val, ok := a.Author.(*Reference)
	if !ok {
		return nil
	}
	return val
}

// GetAuthorString returns the value of the field Author.
func (a *Annotation) GetAuthorString() *String {
	if a == nil {
		return nil
	}
	val, ok := a.Author.(*String)
	if !ok {
		return nil
	}
	return val
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Annotation) GetExtension() []*Extension {
	if a == nil {
		return nil
	}
	return a.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Annotation) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

// GetText returns the value of the field Text.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Annotation) GetText() *Markdown {
	if a == nil {
		return nil
	}
	return a.Text
}

// GetTime returns the value of the field Time.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (a *Annotation) GetTime() *DateTime {
	if a == nil {
		return nil
	}
	return a.Time
}

func (a *Annotation) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (a *Annotation) UnmarshalJSON(data []byte) error {
	var raw struct {
		AuthorReference *Reference   `json:"authorReference"`
		AuthorString    *String      `json:"authorString"`
		Extension       []*Extension `json:"extension"`

		ID   string    `json:"id"`
		Text *Markdown `json:"text"`
		Time *DateTime `json:"time"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	a.Author, err = validate.SelectOneOf[Element]("Annotation.author",
		raw.AuthorReference,
		raw.AuthorString)
	if err != nil {
		return err
	}
	a.Extension = raw.Extension
	a.ID = raw.ID
	a.Text = raw.Text
	a.Time = raw.Time
	return nil
}

var _ json.Marshaler = (*Annotation)(nil)
var _ json.Unmarshaler = (*Annotation)(nil)
