// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for SubstanceAmount Type: Chemical substances are a
// single substance type whose primary defining element is the molecular
// structure. Chemical substances shall be defined on the basis of their
// complete covalent molecular structure; the presence of a salt (counter-ion)
// and/or solvates (water, alcohols) is also captured. Purity, grade, physical
// form or particle size are not taken into account in the definition of a
// chemical substance or in the assignment of a Substance ID.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/SubstanceAmount
//   - Source File: StructureDefinition-SubstanceAmount.json
type SubstanceAmount struct {

	// A textual comment on a numeric value.
	AmountText *String `json:"amountText"`

	// Most elements that require a quantitative value will also have a field
	// called amount type. Amount type should always be specified because the
	// actual value of the amount is often dependent on it. EXAMPLE: In capturing
	// the actual relative amounts of substances or molecular fragments it is
	// essential to indicate whether the amount refers to a mole ratio or weight
	// ratio. For any given element an effort should be made to use same the amount
	// type for all related definitional elements.
	AmountType *CodeableConcept `json:"amountType"`

	// Used to capture quantitative values for a variety of elements. If only
	// limits are given, the arithmetic mean would be the average. If only a single
	// definite value for a given element is given, it would be captured in this
	// field.
	Amount Element `json:"amount"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*Extension `json:"modifierExtension"`

	// Reference range of possible or expected values.
	ReferenceRange Element `json:"referenceRange"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

func (v *SubstanceAmount) GetAmountQuantity() *Quantity {
	if v == nil {
		return nil
	}
	result, ok := v.Amount.(*Quantity)
	if ok {
		return result
	}
	return nil
}
func (v *SubstanceAmount) GetAmountRange() *Range {
	if v == nil {
		return nil
	}
	result, ok := v.Amount.(*Range)
	if ok {
		return result
	}
	return nil
}
func (v *SubstanceAmount) GetAmountString() *String {
	if v == nil {
		return nil
	}
	result, ok := v.Amount.(*String)
	if ok {
		return result
	}
	return nil
}
func (s *SubstanceAmount) GetAmountText() *String {
	if s == nil {
		return nil
	}
	return s.AmountText
}

func (s *SubstanceAmount) GetAmountType() *CodeableConcept {
	if s == nil {
		return nil
	}
	return s.AmountType
}

func (s *SubstanceAmount) GetAmount() Element {
	if s == nil {
		return nil
	}
	return s.Amount
}

func (s *SubstanceAmount) GetExtension() []*Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

func (s *SubstanceAmount) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SubstanceAmount) GetModifierExtension() []*Extension {
	if s == nil {
		return nil
	}
	return s.ModifierExtension
}

func (s *SubstanceAmount) GetReferenceRange() Element {
	if s == nil {
		return nil
	}
	return s.ReferenceRange
}

// Reference range of possible or expected values// Reference range of possible or expected values.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition:
//   - Source File: StructureDefinition-SubstanceAmount.json
type SubstanceAmountReferenceRange struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Upper limit possible or expected.
	HighLimit *Quantity `json:"highLimit"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// Lower limit possible or expected.
	LowLimit *Quantity `json:"lowLimit"`

	profileimpl.BaseElement
}

func (s *SubstanceAmountReferenceRange) GetExtension() []*Extension {
	if s == nil {
		return nil
	}
	return s.Extension
}

func (s *SubstanceAmountReferenceRange) GetHighLimit() *Quantity {
	if s == nil {
		return nil
	}
	return s.HighLimit
}

func (s *SubstanceAmountReferenceRange) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SubstanceAmountReferenceRange) GetLowLimit() *Quantity {
	if s == nil {
		return nil
	}
	return s.LowLimit
}
