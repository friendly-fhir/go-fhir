// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for Attachment Type: For referring to data content
// defined in other formats.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Attachment
//   - Source File: StructureDefinition-Attachment.json
type Attachment struct {

	// Identifies the type of the data in the attachment and allows a method to be
	// chosen to interpret or render the data. Includes mime type parameters such
	// as charset where appropriate.
	ContentType *Code `json:"contentType"`

	// The date that the attachment was first created.
	Creation *DateTime `json:"creation"`

	// The actual data of the attachment - a sequence of bytes, base64 encoded.
	Data *Base64Binary `json:"data"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// The calculated hash of the data using SHA-1. Represented using base64.
	Hash *Base64Binary `json:"hash"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// The human language of the content. The value can be any valid value
	// according to BCP 47.
	Language *Code `json:"language"`

	// The number of bytes of data that make up this attachment (before base64
	// encoding, if that is done).
	Size *UnsignedInt `json:"size"`

	// A label or set of text to display in place of the data.
	Title *String `json:"title"`

	// A location where the data can be accessed.
	Url *Url `json:"url"`

	profileimpl.BaseElement
}

func (a *Attachment) GetContentType() *Code {
	if a == nil {
		return nil
	}
	return a.ContentType
}

func (a *Attachment) GetCreation() *DateTime {
	if a == nil {
		return nil
	}
	return a.Creation
}

func (a *Attachment) GetData() *Base64Binary {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *Attachment) GetExtension() []*Extension {
	if a == nil {
		return nil
	}
	return a.Extension
}

func (a *Attachment) GetHash() *Base64Binary {
	if a == nil {
		return nil
	}
	return a.Hash
}

func (a *Attachment) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *Attachment) GetLanguage() *Code {
	if a == nil {
		return nil
	}
	return a.Language
}

func (a *Attachment) GetSize() *UnsignedInt {
	if a == nil {
		return nil
	}
	return a.Size
}

func (a *Attachment) GetTitle() *String {
	if a == nil {
		return nil
	}
	return a.Title
}

func (a *Attachment) GetUrl() *Url {
	if a == nil {
		return nil
	}
	return a.Url
}
