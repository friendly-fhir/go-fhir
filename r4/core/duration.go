// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for Duration Type: A length of time.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Duration
//   - Source File: StructureDefinition-Duration.json
type Duration struct {

	// A computer processable form of the unit in some unit representation system.
	Code *Code `json:"code"`

	// How the value should be understood and represented - whether the actual
	// value is greater or less than the stated value due to measurement issues;
	// e.g. if the comparator is "<" , then the real value is < stated value.
	Comparator *Code `json:"comparator"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// The identification of the system that provides the coded form of the unit.
	System *Uri `json:"system"`

	// A human-readable form of the unit.
	Unit *String `json:"unit"`

	// The value of the measured amount. The value includes an implicit precision
	// in the presentation of the value.
	Value *Decimal `json:"value"`

	profileimpl.BaseQuantity
	profileimpl.BaseElement
}

func (d *Duration) GetCode() *Code {
	if d == nil {
		return nil
	}
	return d.Code
}

func (d *Duration) GetComparator() *Code {
	if d == nil {
		return nil
	}
	return d.Comparator
}

func (d *Duration) GetExtension() []*Extension {
	if d == nil {
		return nil
	}
	return d.Extension
}

func (d *Duration) GetId() string {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *Duration) GetSystem() *Uri {
	if d == nil {
		return nil
	}
	return d.System
}

func (d *Duration) GetUnit() *String {
	if d == nil {
		return nil
	}
	return d.Unit
}

func (d *Duration) GetValue() *Decimal {
	if d == nil {
		return nil
	}
	return d.Value
}
