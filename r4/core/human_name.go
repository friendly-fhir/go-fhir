// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for HumanName Type: A human's name with the ability
// to identify parts and usage.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/HumanName
//   - Source File: StructureDefinition-HumanName.json
type HumanName struct {

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// The part of a name that links to the genealogy. In some cultures (e.g.
	// Eritrea) the family name of a son is the first name of his father.
	Family *String `json:"family"`

	// Given name.
	Given []*String `json:"given"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// Indicates the period of time when this name was valid for the named person.
	Period *Period `json:"period"`

	// Part of the name that is acquired as a title due to academic, legal,
	// employment or nobility status, etc. and that appears at the start of the
	// name.
	Prefix []*String `json:"prefix"`

	// Part of the name that is acquired as a title due to academic, legal,
	// employment or nobility status, etc. and that appears at the end of the name.
	Suffix []*String `json:"suffix"`

	// Specifies the entire name as it should be displayed e.g. on an application
	// UI. This may be provided instead of or as well as the specific parts.
	Text *String `json:"text"`

	// Identifies the purpose for this name.
	Use *Code `json:"use"`

	profileimpl.BaseElement
}

func (h *HumanName) GetExtension() []*Extension {
	if h == nil {
		return nil
	}
	return h.Extension
}

func (h *HumanName) GetFamily() *String {
	if h == nil {
		return nil
	}
	return h.Family
}

func (h *HumanName) GetGiven() []*String {
	if h == nil {
		return nil
	}
	return h.Given
}

func (h *HumanName) GetId() string {
	if h == nil {
		return ""
	}
	return h.Id
}

func (h *HumanName) GetPeriod() *Period {
	if h == nil {
		return nil
	}
	return h.Period
}

func (h *HumanName) GetPrefix() []*String {
	if h == nil {
		return nil
	}
	return h.Prefix
}

func (h *HumanName) GetSuffix() []*String {
	if h == nil {
		return nil
	}
	return h.Suffix
}

func (h *HumanName) GetText() *String {
	if h == nil {
		return nil
	}
	return h.Text
}

func (h *HumanName) GetUse() *Code {
	if h == nil {
		return nil
	}
	return h.Use
}
