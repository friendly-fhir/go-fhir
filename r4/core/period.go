// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for Period Type: A time period defined by a start
// and end date and optionally time.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/Period
//   - Source File: StructureDefinition-Period.json
type Period struct {

	// The end of the period. If the end of the period is missing, it means no end
	// was known or planned at the time the instance was created. The start may be
	// in the past, and the end date in the future, which means that period is
	// expected/planned to end at that time.
	End *DateTime `json:"end"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// The start of the period. The boundary is inclusive.
	Start *DateTime `json:"start"`

	profileimpl.BaseElement
}

func (p *Period) GetEnd() *DateTime {
	if p == nil {
		return nil
	}
	return p.End
}

func (p *Period) GetExtension() []*Extension {
	if p == nil {
		return nil
	}
	return p.Extension
}

func (p *Period) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *Period) GetStart() *DateTime {
	if p == nil {
		return nil
	}
	return p.Start
}
