// GENERATED CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for ParameterDefinition Type: The parameters to the
// module. This collection specifies both the input and output parameters.
// Input parameters are provided by the caller as part of the $evaluate
// operation. Output parameters are included in the GuidanceResponse.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ParameterDefinition
//   - Source File: StructureDefinition-ParameterDefinition.json
type ParameterDefinition struct {

	// A brief discussion of what the parameter is for and how it is used by the
	// module.
	Documentation *String `fhirpath:"documentation"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// The maximum number of times this element is permitted to appear in the
	// request or response.
	Max *String `fhirpath:"max"`

	// The minimum number of times this parameter SHALL appear in the request or
	// response.
	Min *Integer `fhirpath:"min"`

	// The name of the parameter used to allow access to the value of the parameter
	// in evaluation contexts.
	Name *Code `fhirpath:"name"`

	// If specified, this indicates a profile that the input data must conform to,
	// or that the output data will conform to.
	Profile *Canonical `fhirpath:"profile"`

	// The type of the parameter.
	Type *Code `fhirpath:"type"`

	// Whether the parameter is input or output for the module.
	Use *Code `fhirpath:"use"`

	profileimpl.BaseElement
}

// GetDocumentation returns the value of the field Documentation.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pd *ParameterDefinition) GetDocumentation() *String {
	if pd == nil {
		return nil
	}
	return pd.Documentation
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pd *ParameterDefinition) GetExtension() []*Extension {
	if pd == nil {
		return nil
	}
	return pd.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pd *ParameterDefinition) GetID() string {
	if pd == nil {
		return ""
	}
	return pd.ID
}

// GetMax returns the value of the field Max.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pd *ParameterDefinition) GetMax() *String {
	if pd == nil {
		return nil
	}
	return pd.Max
}

// GetMin returns the value of the field Min.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pd *ParameterDefinition) GetMin() *Integer {
	if pd == nil {
		return nil
	}
	return pd.Min
}

// GetName returns the value of the field Name.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pd *ParameterDefinition) GetName() *Code {
	if pd == nil {
		return nil
	}
	return pd.Name
}

// GetProfile returns the value of the field Profile.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pd *ParameterDefinition) GetProfile() *Canonical {
	if pd == nil {
		return nil
	}
	return pd.Profile
}

// GetType returns the value of the field Type.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pd *ParameterDefinition) GetType() *Code {
	if pd == nil {
		return nil
	}
	return pd.Type
}

// GetUse returns the value of the field Use.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pd *ParameterDefinition) GetUse() *Code {
	if pd == nil {
		return nil
	}
	return pd.Use
}

func (pd *ParameterDefinition) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (pd *ParameterDefinition) UnmarshalJSON(data []byte) error {
	var raw struct {
		Documentation *String      `json:"documentation"`
		Extension     []*Extension `json:"extension"`

		ID      string     `json:"id"`
		Max     *String    `json:"max"`
		Min     *Integer   `json:"min"`
		Name    *Code      `json:"name"`
		Profile *Canonical `json:"profile"`
		Type    *Code      `json:"type"`
		Use     *Code      `json:"use"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	pd.Documentation = raw.Documentation
	pd.Extension = raw.Extension
	pd.ID = raw.ID
	pd.Max = raw.Max
	pd.Min = raw.Min
	pd.Name = raw.Name
	pd.Profile = raw.Profile
	pd.Type = raw.Type
	pd.Use = raw.Use
	return nil
}

var _ json.Marshaler = (*ParameterDefinition)(nil)
var _ json.Unmarshaler = (*ParameterDefinition)(nil)
