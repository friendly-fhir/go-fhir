// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/internal/validate"
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"

	"encoding/json"
)

// Base StructureDefinition for UsageContext Type: Specifies
// clinical/business/etc. metadata that can be used to retrieve, index and/or
// categorize an artifact. This metadata can either be specific to the
// applicable population (e.g., age category, DRG) or the specific context of
// care (e.g., venue, care setting, provider of care).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/UsageContext
//   - Source File: StructureDefinition-UsageContext.json
type UsageContext struct {

	// A code that identifies the type of context being specified by this usage
	// context.
	Code *Coding `fhirpath:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// A value that defines the context specified in this context of use. The
	// interpretation of the value is defined by the code.
	Value Element `fhirpath:"value"`

	profileimpl.BaseElement
}

// GetCode returns the value of the field Code.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (uc *UsageContext) GetCode() *Coding {
	if uc == nil {
		return nil
	}
	return uc.Code
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (uc *UsageContext) GetExtension() []*Extension {
	if uc == nil {
		return nil
	}
	return uc.Extension
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (uc *UsageContext) GetID() string {
	if uc == nil {
		return ""
	}
	return uc.ID
}

// GetValue returns the value of the field Value.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (uc *UsageContext) GetValue() Element {
	if uc == nil {
		return nil
	}
	return uc.Value
}

// GetValueCodeableConcept returns the value of the field Value.
func (uc *UsageContext) GetValueCodeableConcept() *CodeableConcept {
	if uc == nil {
		return nil
	}
	val, ok := uc.Value.(*CodeableConcept)
	if !ok {
		return nil
	}
	return val
}

// GetValueQuantity returns the value of the field Value.
func (uc *UsageContext) GetValueQuantity() *Quantity {
	if uc == nil {
		return nil
	}
	val, ok := uc.Value.(*Quantity)
	if !ok {
		return nil
	}
	return val
}

// GetValueRange returns the value of the field Value.
func (uc *UsageContext) GetValueRange() *Range {
	if uc == nil {
		return nil
	}
	val, ok := uc.Value.(*Range)
	if !ok {
		return nil
	}
	return val
}

// GetValueReference returns the value of the field Value.
func (uc *UsageContext) GetValueReference() *Reference {
	if uc == nil {
		return nil
	}
	val, ok := uc.Value.(*Reference)
	if !ok {
		return nil
	}
	return val
}

func (uc *UsageContext) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (uc *UsageContext) UnmarshalJSON(data []byte) error {
	var raw struct {
		Code      *Coding      `json:"code"`
		Extension []*Extension `json:"extension"`

		ID                   string           `json:"id"`
		ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept"`
		ValueQuantity        *Quantity        `json:"valueQuantity"`
		ValueRange           *Range           `json:"valueRange"`
		ValueReference       *Reference       `json:"valueReference"`
	}

	var err error
	if err = json.Unmarshal(data, &raw); err != nil {
		return err
	}

	uc.Code = raw.Code
	uc.Extension = raw.Extension
	uc.ID = raw.ID
	uc.Value, err = validate.SelectOneOf[Element]("UsageContext.value",
		raw.ValueCodeableConcept,
		raw.ValueQuantity,
		raw.ValueRange,
		raw.ValueReference)
	if err != nil {
		return err
	}
	return nil
}

var _ json.Marshaler = (*UsageContext)(nil)
var _ json.Unmarshaler = (*UsageContext)(nil)
