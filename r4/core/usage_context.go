// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for UsageContext Type: Specifies
// clinical/business/etc. metadata that can be used to retrieve, index and/or
// categorize an artifact. This metadata can either be specific to the
// applicable population (e.g., age category, DRG) or the specific context of
// care (e.g., venue, care setting, provider of care).
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/UsageContext
//   - Source File: StructureDefinition-UsageContext.json
type UsageContext struct {

	// A code that identifies the type of context being specified by this usage
	// context.
	Code *Coding `json:"code"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// A value that defines the context specified in this context of use. The
	// interpretation of the value is defined by the code.
	Value Element `json:"value"`

	profileimpl.BaseElement
}

func (v *UsageContext) GetValueCodeableConcept() *CodeableConcept {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*CodeableConcept)
	if ok {
		return result
	}
	return nil
}
func (v *UsageContext) GetValueQuantity() *Quantity {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Quantity)
	if ok {
		return result
	}
	return nil
}
func (v *UsageContext) GetValueRange() *Range {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Range)
	if ok {
		return result
	}
	return nil
}
func (v *UsageContext) GetValueReference() *Reference {
	if v == nil {
		return nil
	}
	result, ok := v.Value.(*Reference)
	if ok {
		return result
	}
	return nil
}
func (u *UsageContext) GetCode() *Coding {
	if u == nil {
		return nil
	}
	return u.Code
}

func (u *UsageContext) GetExtension() []*Extension {
	if u == nil {
		return nil
	}
	return u.Extension
}

func (u *UsageContext) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *UsageContext) GetValue() Element {
	if u == nil {
		return nil
	}
	return u.Value
}
