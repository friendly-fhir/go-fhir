// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for RelatedArtifact Type: Related artifacts such as
// additional documentation, justification, or bibliographic references.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/RelatedArtifact
//   - Source File: StructureDefinition-RelatedArtifact.json
type RelatedArtifact struct {

	// A bibliographic citation for the related artifact. This text SHOULD be
	// formatted according to an accepted citation format.
	Citation *Markdown `json:"citation"`

	// A brief description of the document or knowledge resource being referenced,
	// suitable for display to a consumer.
	Display *String `json:"display"`

	// The document being referenced, represented as an attachment. This is
	// exclusive with the resource element.
	Document *Attachment `json:"document"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// A short label that can be used to reference the citation from elsewhere in
	// the containing artifact, such as a footnote index.
	Label *String `json:"label"`

	// The related resource, such as a library, value set, profile, or other
	// knowledge resource.
	Resource *Canonical `json:"resource"`

	// The type of relationship to the related artifact.
	Type *Code `json:"type"`

	// A url for the artifact that can be followed to access the actual content.
	Url *Url `json:"url"`

	profileimpl.BaseElement
}

func (r *RelatedArtifact) GetCitation() *Markdown {
	if r == nil {
		return nil
	}
	return r.Citation
}

func (r *RelatedArtifact) GetDisplay() *String {
	if r == nil {
		return nil
	}
	return r.Display
}

func (r *RelatedArtifact) GetDocument() *Attachment {
	if r == nil {
		return nil
	}
	return r.Document
}

func (r *RelatedArtifact) GetExtension() []*Extension {
	if r == nil {
		return nil
	}
	return r.Extension
}

func (r *RelatedArtifact) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *RelatedArtifact) GetLabel() *String {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RelatedArtifact) GetResource() *Canonical {
	if r == nil {
		return nil
	}
	return r.Resource
}

func (r *RelatedArtifact) GetType() *Code {
	if r == nil {
		return nil
	}
	return r.Type
}

func (r *RelatedArtifact) GetUrl() *Url {
	if r == nil {
		return nil
	}
	return r.Url
}
