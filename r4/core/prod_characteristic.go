// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.

package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for ProdCharacteristic Type: The marketing status
// describes the date when a medicinal product is actually put on the market or
// the date as of which it is no longer available.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ProdCharacteristic
//   - Source File: StructureDefinition-ProdCharacteristic.json
type ProdCharacteristic struct {

	// Where applicable, the color can be specified An appropriate controlled
	// vocabulary shall be used The term and the term identifier shall be used.
	Color []*String `fhirpath:"color"`

	// Where applicable, the depth can be specified using a numerical value and its
	// unit of measurement The unit of measurement shall be specified in accordance
	// with ISO 11240 and the resulting terminology The symbol and the symbol
	// identifier shall be used.
	Depth *Quantity `fhirpath:"depth"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `fhirpath:"extension"`

	// Where applicable, the external diameter can be specified using a numerical
	// value and its unit of measurement The unit of measurement shall be specified
	// in accordance with ISO 11240 and the resulting terminology The symbol and
	// the symbol identifier shall be used.
	ExternalDiameter *Quantity `fhirpath:"externalDiameter"`

	// Where applicable, the height can be specified using a numerical value and
	// its unit of measurement The unit of measurement shall be specified in
	// accordance with ISO 11240 and the resulting terminology The symbol and the
	// symbol identifier shall be used.
	Height *Quantity `fhirpath:"height"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	ID string `fhirpath:"id"`

	// Where applicable, the image can be provided The format of the image
	// attachment shall be specified by regional implementations.
	Image []*Attachment `fhirpath:"image"`

	// Where applicable, the imprint can be specified as text.
	Imprint []*String `fhirpath:"imprint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*Extension `fhirpath:"modifierExtension"`

	// Where applicable, the nominal volume can be specified using a numerical
	// value and its unit of measurement The unit of measurement shall be specified
	// in accordance with ISO 11240 and the resulting terminology The symbol and
	// the symbol identifier shall be used.
	NominalVolume *Quantity `fhirpath:"nominalVolume"`

	// Where applicable, the scoring can be specified An appropriate controlled
	// vocabulary shall be used The term and the term identifier shall be used.
	Scoring *CodeableConcept `fhirpath:"scoring"`

	// Where applicable, the shape can be specified An appropriate controlled
	// vocabulary shall be used The term and the term identifier shall be used.
	Shape *String `fhirpath:"shape"`

	// Where applicable, the weight can be specified using a numerical value and
	// its unit of measurement The unit of measurement shall be specified in
	// accordance with ISO 11240 and the resulting terminology The symbol and the
	// symbol identifier shall be used.
	Weight *Quantity `fhirpath:"weight"`

	// Where applicable, the width can be specified using a numerical value and its
	// unit of measurement The unit of measurement shall be specified in accordance
	// with ISO 11240 and the resulting terminology The symbol and the symbol
	// identifier shall be used.
	Width *Quantity `fhirpath:"width"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

// GetColor returns the value of the field Color.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetColor() []*String {
	if pc == nil {
		return nil
	}
	return pc.Color
}

// GetDepth returns the value of the field Depth.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetDepth() *Quantity {
	if pc == nil {
		return nil
	}
	return pc.Depth
}

// GetExtension returns the value of the field Extension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetExtension() []*Extension {
	if pc == nil {
		return nil
	}
	return pc.Extension
}

// GetExternalDiameter returns the value of the field ExternalDiameter.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetExternalDiameter() *Quantity {
	if pc == nil {
		return nil
	}
	return pc.ExternalDiameter
}

// GetHeight returns the value of the field Height.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetHeight() *Quantity {
	if pc == nil {
		return nil
	}
	return pc.Height
}

// GetID returns the value of the field ID.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetID() string {
	if pc == nil {
		return ""
	}
	return pc.ID
}

// GetImage returns the value of the field Image.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetImage() []*Attachment {
	if pc == nil {
		return nil
	}
	return pc.Image
}

// GetImprint returns the value of the field Imprint.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetImprint() []*String {
	if pc == nil {
		return nil
	}
	return pc.Imprint
}

// GetModifierExtension returns the value of the field ModifierExtension.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetModifierExtension() []*Extension {
	if pc == nil {
		return nil
	}
	return pc.ModifierExtension
}

// GetNominalVolume returns the value of the field NominalVolume.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetNominalVolume() *Quantity {
	if pc == nil {
		return nil
	}
	return pc.NominalVolume
}

// GetScoring returns the value of the field Scoring.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetScoring() *CodeableConcept {
	if pc == nil {
		return nil
	}
	return pc.Scoring
}

// GetShape returns the value of the field Shape.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetShape() *String {
	if pc == nil {
		return nil
	}
	return pc.Shape
}

// GetWeight returns the value of the field Weight.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetWeight() *Quantity {
	if pc == nil {
		return nil
	}
	return pc.Weight
}

// GetWidth returns the value of the field Width.
// This function is safe to call on nil pointers, and will return the zero value
// instead.
func (pc *ProdCharacteristic) GetWidth() *Quantity {
	if pc == nil {
		return nil
	}
	return pc.Width
}
