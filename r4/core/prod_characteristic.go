// GENERATE CODE - DO NOT EDIT
//
// This file is generated by the FHIR Fhenix code generator tool, which can be
// located at https://github.com/friendly-fhir/fhenix.
package fhir

import (
	"github.com/friendly-fhir/go-fhir/r4/core/internal/profileimpl"
)

// Base StructureDefinition for ProdCharacteristic Type: The marketing status
// describes the date when a medicinal product is actually put on the market or
// the date as of which it is no longer available.
//
// Meta Details:
//
//   - Package IG: hl7.fhir.r4.core@4.0.1
//   - StructureDefinition: http://hl7.org/fhir/StructureDefinition/ProdCharacteristic
//   - Source File: StructureDefinition-ProdCharacteristic.json
type ProdCharacteristic struct {

	// Where applicable, the color can be specified An appropriate controlled
	// vocabulary shall be used The term and the term identifier shall be used.
	Color []*String `json:"color"`

	// Where applicable, the depth can be specified using a numerical value and its
	// unit of measurement The unit of measurement shall be specified in accordance
	// with ISO 11240 and the resulting terminology The symbol and the symbol
	// identifier shall be used.
	Depth *Quantity `json:"depth"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element. To make the use of extensions safe and
	// manageable, there is a strict set of governance applied to the definition
	// and use of extensions. Though any implementer can define an extension, there
	// is a set of requirements that SHALL be met as part of the definition of the
	// extension.
	Extension []*Extension `json:"extension"`

	// Where applicable, the external diameter can be specified using a numerical
	// value and its unit of measurement The unit of measurement shall be specified
	// in accordance with ISO 11240 and the resulting terminology The symbol and
	// the symbol identifier shall be used.
	ExternalDiameter *Quantity `json:"externalDiameter"`

	// Where applicable, the height can be specified using a numerical value and
	// its unit of measurement The unit of measurement shall be specified in
	// accordance with ISO 11240 and the resulting terminology The symbol and the
	// symbol identifier shall be used.
	Height *Quantity `json:"height"`

	// Unique id for the element within a resource (for internal references). This
	// may be any string value that does not contain spaces.
	Id string `json:"id"`

	// Where applicable, the image can be provided The format of the image
	// attachment shall be specified by regional implementations.
	Image []*Attachment `json:"image"`

	// Where applicable, the imprint can be specified as text.
	Imprint []*String `json:"imprint"`

	// May be used to represent additional information that is not part of the
	// basic definition of the element and that modifies the understanding of the
	// element in which it is contained and/or the understanding of the containing
	// element's descendants. Usually modifier elements provide negation or
	// qualification. To make the use of extensions safe and manageable, there is a
	// strict set of governance applied to the definition and use of extensions.
	// Though any implementer can define an extension, there is a set of
	// requirements that SHALL be met as part of the definition of the extension.
	// Applications processing a resource are required to check for modifier
	// extensions.
	// Modifier extensions SHALL NOT change the meaning of any elements on Resource
	// or DomainResource (including cannot change the meaning of modifierExtension
	// itself).
	ModifierExtension []*Extension `json:"modifierExtension"`

	// Where applicable, the nominal volume can be specified using a numerical
	// value and its unit of measurement The unit of measurement shall be specified
	// in accordance with ISO 11240 and the resulting terminology The symbol and
	// the symbol identifier shall be used.
	NominalVolume *Quantity `json:"nominalVolume"`

	// Where applicable, the scoring can be specified An appropriate controlled
	// vocabulary shall be used The term and the term identifier shall be used.
	Scoring *CodeableConcept `json:"scoring"`

	// Where applicable, the shape can be specified An appropriate controlled
	// vocabulary shall be used The term and the term identifier shall be used.
	Shape *String `json:"shape"`

	// Where applicable, the weight can be specified using a numerical value and
	// its unit of measurement The unit of measurement shall be specified in
	// accordance with ISO 11240 and the resulting terminology The symbol and the
	// symbol identifier shall be used.
	Weight *Quantity `json:"weight"`

	// Where applicable, the width can be specified using a numerical value and its
	// unit of measurement The unit of measurement shall be specified in accordance
	// with ISO 11240 and the resulting terminology The symbol and the symbol
	// identifier shall be used.
	Width *Quantity `json:"width"`

	profileimpl.BaseBackboneElement
	profileimpl.BaseElement
}

func (p *ProdCharacteristic) GetColor() []*String {
	if p == nil {
		return nil
	}
	return p.Color
}

func (p *ProdCharacteristic) GetDepth() *Quantity {
	if p == nil {
		return nil
	}
	return p.Depth
}

func (p *ProdCharacteristic) GetExtension() []*Extension {
	if p == nil {
		return nil
	}
	return p.Extension
}

func (p *ProdCharacteristic) GetExternalDiameter() *Quantity {
	if p == nil {
		return nil
	}
	return p.ExternalDiameter
}

func (p *ProdCharacteristic) GetHeight() *Quantity {
	if p == nil {
		return nil
	}
	return p.Height
}

func (p *ProdCharacteristic) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *ProdCharacteristic) GetImage() []*Attachment {
	if p == nil {
		return nil
	}
	return p.Image
}

func (p *ProdCharacteristic) GetImprint() []*String {
	if p == nil {
		return nil
	}
	return p.Imprint
}

func (p *ProdCharacteristic) GetModifierExtension() []*Extension {
	if p == nil {
		return nil
	}
	return p.ModifierExtension
}

func (p *ProdCharacteristic) GetNominalVolume() *Quantity {
	if p == nil {
		return nil
	}
	return p.NominalVolume
}

func (p *ProdCharacteristic) GetScoring() *CodeableConcept {
	if p == nil {
		return nil
	}
	return p.Scoring
}

func (p *ProdCharacteristic) GetShape() *String {
	if p == nil {
		return nil
	}
	return p.Shape
}

func (p *ProdCharacteristic) GetWeight() *Quantity {
	if p == nil {
		return nil
	}
	return p.Weight
}

func (p *ProdCharacteristic) GetWidth() *Quantity {
	if p == nil {
		return nil
	}
	return p.Width
}
